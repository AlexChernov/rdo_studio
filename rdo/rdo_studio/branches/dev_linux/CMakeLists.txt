CMAKE_MINIMUM_REQUIRED(VERSION 2.6.0)

PROJECT(rdo_nix_studio)

MESSAGE(STATUS "Cmake version : " ${CMAKE_VERSION})
MESSAGE(STATUS "CMake generates " ${CMAKE_GENERATOR})

MESSAGE(STATUS "System: " ${CMAKE_SYSTEM})
MESSAGE(STATUS "Processor: " ${CMAKE_HOST_SYSTEM_PROCESSOR})

IF(${CMAKE_SYSTEM_NAME} STREQUAL Windows)
IF(MSVC)
MESSAGE(STATUS "Compiler: MSVC")
ENDIF(MSVC)
IF(BORLAND) 
    MESSAGE (STATUS "Compiler: BCC")
ENDIF(BORLAND) 
ELSE(${CMAKE_SYSTEM_NAME} STREQUAL Linux) 
    MESSAGE(STATUS "Only GCC is supported on Linux")
ENDIF(${CMAKE_SYSTEM_NAME} STREQUAL Windows)

# set warning level to maximum Compiler
#IF(MSVC)
#     STRING(REGEX REPLACE /W[0-4] /W4 CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS})
#ENDIF(MSVC)

SET(RDO_BASE_DIRECTORY ${PROJECT_SOURCE_DIR})

SET(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/build)
SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/build)

# add the include folder to the include path
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR})

# Compile the rdo_common
SET(RDO_COMMON_PATH ${RDO_BASE_DIRECTORY}/rdo_common)
ADD_SUBDIRECTORY(${RDO_COMMON_PATH})

# Compile the rdo_kernel
#SET(RDO_KERNEL_PATH ${RDO_BASE_DIRECTORY}/rdo_kernel)
#ADD_SUBDIRECTORY(${RDO_KERNEL_PATH})

# Compile the rdo_repository
#SET(RDO_REPOSITORY_PATH ${RDO_BASE_DIRECTORY}/rdo_repository)
#ADD_SUBDIRECTORY(${RDO_REPOSITORY_PATH})

# Compile rdo_lib
#SET(RDO_LIBS_PATH ${RDO_BASE_DIRECTORY}/rdo_lib)
#ADD_SUBDIRECTORY(${RDO_LIBS_PATH})
