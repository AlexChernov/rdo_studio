//Продвижение модельного времени вперед
$Pattern Образец_счетчик: irregular_event
$Relevant_resources
	_система: система Keep
$Time = 0.1
$Body
_система
	Convert_event
$End

//Приход заявки (номер по порядку, вес и маршрут случайно)
$Pattern Образец_прихода_заявок : irregular_event
$Relevant_resources
	_счетчик: счетчик Keep 
	заявка  : заявки  Create 
$Time = 10//ф_приход_заявок (34, 38) 
$Body
_счетчик 
	Convert_event
		счет_заявок += 1;
заявка
    Convert_event trace
		номер_заявки = _счетчик.счет_заявок;
		вес_груза    = ф_вес_груза (900.0, 3600.0);
		маршрут      = ф_тип_маршрута;
		состояние    = пришла;
$End

//Расчет количества вагонов по весу
$Pattern Образец_расчета_количества_вагонов: rule
$Relevant_resources
	заявка: заявки Keep
$Body
заявка
	Choice from заявка.состояние == пришла
	Convert_rule
		количество_вагонов_в_заявке = Int ( заявка.вес_груза / тоннаж ) + 1;
		состояние                   = распределение_вагонов;
		остаток_в_заявке            = количество_вагонов_в_заявке;
$End

//Согласование заявки и формируемого состава непосредственно перед списанием вагонов
$Pattern Образец_согласования_заявки_и_состава: rule
$Relevant_resources
	формируемый_состав: формируемые_составы Keep
	заявка            : заявки              Keep
	first
$Body
формируемый_состав
	Choice from формируемый_состав.состояние == распределение_вагонов
			and формируемый_состав.полный    == false
	Convert_rule
		состояние = списание_начато;
заявка
	Choice from заявка.состояние == распределение_вагонов
			and заявка.маршрут   == формируемый_состав.маршрут
	Convert_rule
		состояние                = списание_начато;
		буфер                    = 0;
		номер_последнего_состава = формируемый_состав.номер_формируемого_состава;
$End

//Просто списание вагонов и из заявки, и из формирующегося состава
$Pattern Образец_списания_вагонов: rule
$Relevant_resources
	заявка            : заявки              Keep
	формируемый_состав: формируемые_составы Keep
$Body
заявка
	Choice from заявка.состояние == списание_начато
	Convert_rule
		if (заявка.остаток_в_заявке > (вагоны_в_составе - формируемый_состав.текущее_количество_вагонов))
			буфер = вагоны_в_составе - формируемый_состав.текущее_количество_вагонов;
		else
			буфер = заявка.остаток_в_заявке;
		остаток_в_заявке -= буфер;
		состояние         = списание_закончено;
формируемый_состав
	Choice from формируемый_состав.состояние == списание_начато 
			and формируемый_состав.маршрут   == заявка.маршрут
	Convert_rule
		текущее_количество_вагонов += заявка.буфер;
		состояние                   = списание_закончено;
		заявки_в_составе           += 1;
$End

//Проверка, заполнен ли состав
$Pattern Образец_проверки_формируемого_состава: rule
$Relevant_resources
	формируемый_состав: формируемые_составы Keep
$Body
формируемый_состав
	Choice from формируемый_состав.состояние == списание_закончено
	Convert_rule
		if (текущее_количество_вагонов == вагоны_в_составе)
		{
			полный            = true;
			состояние         = заполнен;
			заявки_в_составе -= 1;
		}
		else
			состояние = распределение_вагонов;
$End

//Проверка, вся ли зявка списана
$Pattern Образец_проверки_заявки: rule
$Relevant_resources
	заявка            : заявки              Keep
$Body
заявка
	Choice from заявка.состояние == списание_закончено
	Convert_rule
		if (остаток_в_заявке == 0)
		{
			состояние = распределена;
			буфер     = 0;
		}
		else
			состояние = распределение_вагонов;
$End

//Создание составов в модели
$Pattern Образец_возникновения_составов : irregular_event
$Relevant_resources
	состав: составы Create 
$Time = 20
$Body
состав
	Convert_event trace
	состояние = ожидает;
$End

//Вагоны из заполненного формируемого состава списываются в реальный состав
$Pattern Образец_готовности_состава: rule
$Relevant_resources
    формируемый_состав: формируемые_составы Keep
	состав            : составы             Keep
	_парк             : парк                Keep 
$Body
формируемый_состав
	Choice from формируемый_состав.состояние == заполнен and полный == true
	first
	Convert_rule
		состояние = назначение_нового_номера;
состав
	Choice from состав.состояние == ожидает
	first
	Convert_rule 
	if (парк.количество_вагонов_в_парке >= вагоны_в_составе)
	{	
		состояние        = сформирован;
		маршрут          = формируемый_состав.маршрут;
		номер_состава    = формируемый_состав.номер_формируемого_состава;
		направление      = прямое;
		заявки_в_составе = формируемый_состав.заявки_в_составе;
	}
	else 
		состояние = ожидает;
_парк
	Convert_rule
	if (количество_вагонов_в_парке >= вагоны_в_составе)
		количество_вагонов_в_парке -= вагоны_в_составе;
	else
		дефицит += вагоны_в_составе - количество_вагонов_в_парке;
$End

//Назначается новый номер состава
$Pattern Образец_назначения_нового_номера_состава: rule
$Relevant_resources
	формируемый_состав: формируемые_составы Keep
$Body
формируемый_состав
	Choice from формируемый_состав.состояние == назначение_нового_номера
	Convert_rule
		номер_формируемого_состава += 1;
		текущее_количество_вагонов  = 0;
		полный                      = false;
		состояние                   = распределение_вагонов;
		заявки_в_составе            = 0;
$End

//Продвижение модельного времени на сцепку вагонов
$Pattern Образец_создания_состава : operation 
$Relevant_resources
	состав              : составы  			  Keep Keep
	_станция_отправления: пункт_отправления  Keep Keep
$Time = 4//ф_создания_состава (3.5, 4.5)
$Body
состав
	Choice from состав.состояние == сформирован
	Convert_begin
		состояние = создается; //так же для стройности рассуждений :)
	Convert_end
		состояние = готов_к_погрузке;
_станция_отправления
	Choice from _станция_отправления.состояние == свободен 
	Convert_begin
		состояние = занят;
	Convert_end
		состояние = свободен;
		количество_обслуженных_составов +=1;
$End

//Продвижение модельного времени на погрузку
$Pattern Образец_погрузки : operation 
$Relevant_resources
	состав         : составы        Keep     Keep
	_пункт_погрузки: пункт_погрузки Keep     Keep
$Time = 2//ф_погрузки (1.8, 2.2)
$Body
состав
	Choice from состав.состояние == готов_к_погрузке
	Convert_begin
		состояние = погрузка;
	Convert_end
		состояние = готов_к_отправке;
_пункт_погрузки
	Choice from _пункт_погрузки.состояние == свободен
	Convert_begin
		состояние = занят;
	Convert_end
		состояние = свободен;
		количество_обслуженных_составов +=1;
$End

//Продвижение модельного времени на следование от пункта к пункту и смена состояния состава в зависимости от КП
$Pattern Образец_следования_по_маршруту : operation
$Parameters 
	номер_маршрута: such_as заявки.маршрут
	начало_пути   : such_as пункты_отправления.местоположение 
	конец_пути    : such_as пункты_отправления.местоположение
	расстояние    : real 
	направление_  : such_as составы.направление
	состояние_    : such_as составы.состояние
$Relevant_resources
	cостав : составы Keep Keep
$Time = ф_время_в_пути (расстояние)
$Body
cостав
	Choice from cостав.состояние == готов_к_отправке and cостав.маршрут == номер_маршрута 
		and cостав.местоположение == начало_пути and cостав.направление == направление_
	Convert_begin
		состояние = в_пути;
	Convert_end
		состояние      = состояние_;
		местоположение = конец_пути;
$End

//Продвижение модельного времени на таможню
$Pattern Образец_прохождения_таможни : operation
$Relevant_resources
	состав : составы 	 	   Keep Keep
	таможня: таможенные_пункты Keep Keep
$Time = ф_прохождение_таможни (0.9, 1.1)
$Body
состав
	Choice from состав.состояние == прибыл_на_таможню 
	Convert_begin
		состояние = прохождение_таможни;
	Convert_end
		состояние = прошел_таможню;
таможня
	Choice from таможня.состояние == свободен and таможня.местоположение == состав.местоположение
	Convert_begin
		состояние = занят;
	Convert_end
		состояние = свободен;
		количество_обслуженных_составов +=1;
$End

//Образец нужен для перевода состава в Бресте в состояние "необходимо_сменить_колею"
$Pattern Образец_выбора_действий_после_таможни : rule
$Relevant_resources
	_пункт_смены_колеи: пункт_смены_колеи NoChange 
	состав			  : составы Keep
$Body
_пункт_смены_колеи 
состав
	Choice from состав.состояние == прошел_таможню
	Convert_rule
	if (состав.местоположение == _пункт_смены_колеи.местоположение)
		состояние = необходимо_сменить_колею;
	else 
		состояние = готов_к_отправке;
$End

//Продвижение модельного времени на смену колеи
$Pattern Образец_смены_колеи : operation
$Relevant_resources
	состав            : составы           Keep Keep
	_пункт_смены_колеи: пункт_смены_колеи Keep Keep
$Time = 4//ф_смена_колеи (3.5, 4.5)
$Body
состав
	Choice from состав.состояние == необходимо_сменить_колею
	Convert_begin
		состояние = смена_колеи;
	Convert_end
		состояние = готов_к_отправке;
_пункт_смены_колеи
	Choice from состояние == свободен
	Convert_begin
		состояние = занят;
	Convert_end
		состояние = свободен;
		количество_обслуженных_составов +=1;
$End

//Продвижение модельного времени на разгрузку
$Pattern Образец_разгрузки : operation
$Relevant_resources
	состав          : составы 		    Keep 	 Keep
	пункт_назначения: пункты_назначения Keep 	 Keep
$Time = 3//ф_разгрузка (2.5, 4.0)
$Body
состав
	Choice from состав.состояние == прибыл_на_разгрузку
	Convert_begin
		состояние = разгрузка;
	Convert_end
		состояние = разгружен;
пункт_назначения
	Choice from пункт_назначения.местоположение == состав.местоположение 
			and пункт_назначения.состояние == свободен
	Convert_begin
		состояние = занят;
	Convert_end
		состояние = свободен;
		количество_обслуженных_составов +=1;
$End

//Списывание заявок из состава по одной
$Pattern Образец_списывания_обслуженных_заявок : rule
$Relevant_resources
	состав  : составы Keep 
	заявка  : заявки  Keep 
	_счетчик: счетчик Keep 
$Body
состав
	Choice from состав.состояние == разгружен and состав.заявки_в_составе > 0 
	Convert_rule
	заявки_в_составе -= 1;
заявка 
	Choice from заявка.номер_последнего_состава == состав.номер_состава 
			and заявка.маршрут == состав.маршрут
			and заявка.состояние == распределена
	Convert_rule 
		состояние = обслужена;
_счетчик 
	Convert_rule
		количество_обслуженных_заявок +=1;
$End

//Отправка состава, из которого списаны все заявки, на мойку
$Pattern Образец_отправки_состава_на_мойку : rule
$Relevant_resources
	состав: составы Keep 
$Body
состав
	Choice from состав.состояние == разгружен 
			and состав.заявки_в_составе == 0
	Convert_rule
		состояние = необходима_мойка;
$End

//Продвижение модельного времени на мойку и смена направления движения состава
$Pattern Образец_мойки : operation
$Relevant_resources
	состав     : составы      Keep Keep
	пункт_мойки: пункты_мойки Keep Keep
$Time = ф_мойка (2.9, 3.5)  
$Body
состав
	Choice from состав.состояние == необходима_мойка
	Convert_begin
		состояние = мойка;
	Convert_end
		состояние = готов_к_возврату;
пункт_мойки
	Choice from пункт_мойки.состояние == свободен and пункт_мойки.местоположение == состав.местоположение
	Convert_begin
		состояние = занят;
	Convert_end
		состояние = свободен;
		количество_обслуженных_составов +=1;
$End

//Смена направления движения состава
$Pattern Образец_подготовки_состава_к_возврату : rule
$Relevant_resources
	состав: составы Keep 
$Body
состав
	Choice from состав.состояние == готов_к_возврату
	Convert_rule
		направление = обратное;
		состояние = готов_к_отправке;
$End

//Продвижение модельного времени на расцепку вагонов
$Pattern Образец_возврата_вагонов_в_парк : operation
$Relevant_resources
	состав: составы Keep     Keep
	парк  : парки   NoChange Keep
$Time = ф_возврата_вагонов_в_парк (3.5, 5)
$Body
состав
	Choice from состав.состояние == прибыл_в_парк
	Convert_begin
		состояние = расформирование;
	Convert_end
		состояние = расформирован;
парк
	Convert_end
		количество_вагонов_в_парке += 60; 
$End

//Удаление временного ресурса "состав"
$Pattern Образец_удаления_состава : rule
$Relevant_resources
	состав  : составы Erase 
	_счетчик: счетчик Keep 
$Body
состав
	Choice from состав.состояние == расформирован
_счетчик 
	Convert_rule
		количество_удаленных_составов += 1;	
$End

//Удаление удаление временного ресурса "заявка"
$Pattern Образец_удаления_заявки : rule
$Relevant_resources
	заявка  : заявки Erase
	_счетчик: счетчик Keep 
$Body
заявка
	Choice from заявка.состояние == обслужена
_счетчик 
	Convert_rule 
		количество_удаленных_заявок += 1;
$End
