Стиль исходного кода РДО:

1. комментарии.
1.0. язык комментариев русский или английский.
1.1. Для автоматизации процесса создания документации системы и для структуризации комментариев исходного кода РДО в системе принят стандарт комментариев Doxygen.
1.2. В обязательном порядке докумментируются: файлы, классы, интерфейсные (public) методы, интерфейсы, макросы.
1.3. Стиль doxy-комментариев - JavaDoc style:
/******************************************************************************//**
 * @class   RDORSuperClass
 * @brief   Просто супер класс РДО
 * @details Не пишется курсовой, не собирается РДО - просто отнаследуйтесь от этого класса!:)
 *********************************************************************************/
1.4. Длина строки звездочек не случайна, по историческим причинам ваша строка она должна визуально походить на специальную строку - слеш, слеш, пробел, 80 звездочек:
// ********************************************************************************
т.е. иметь длину 83 символа.
1.4.1. если вы выделяете в тексте класс (см. пункт 1.3.), то звездочки должны имитировать 3 из 4 сторон прямоугольника, в который можно вписать ваш комментарий.
1.5. при комментировании файла необходимо указывать себя в формате: Фамилия Имя

2. стражи включения.
2.1. имя макроса-стража пишется большими буквами, знаком подчеркивания и ничем больше.
2.2. имя макроса-стража начинается и заканчивается единичным знаком подчеркивания. между ними пишется имя файла с упоминанием всех директорий (библиотек) от корня РДО, где он находится, но без включения слова RDO. Смысловые части слов разделяется единичным знаком подчеркивания (даже в том случае, если в названии файла они написаны слитно). Например, так будут выглядеть стражи для следующих файлов:
\rdo_studio\rdo_lib\rdo_parser\expression.h      _LIB_PARSER_EXPRESSION_H_
\rdo_studio\rdo_lib\rdo_runtime\rdodptrtime.h    _LIB_RUNTIME_DPT_RTIME_H_
\rdo_studio\rdo_lib\rdo_runtime\rdo_res_type_i.h _LIB_RUNTIME_RES_TYPE_H_

3. файлы.
3.1. создавая новый класс, необходимо придерживаться модели h + inl + cpp. Она подразумевает, что заголовочный файл (*.h) содержит только декларацию методов. Встроенные методы (inline), следует реализовывать в (*.inl)-файле. Обычные - в соответствующем (*.cpp)-файле. При этом, *.h должен содержать #include на свой *.inl, указываемый в самом конце (*.h)-файла, перед закрытием стража.

4. типы данных.
4.1. использовать встроенные типы данных, такие как: int, unsigned, long, float, double, char, bool, * (указатель), & (ссылка) и библиотечный класс std::basic_string<char> запрещено. вместо них используйте соответствующие синонимы из rdo_common\rdotypes.h и макросами из rdo_common\rdomacros.h.

5. использование ключевых слов C++ и макросов.
5.1. кроме специально оговоренных случаев создавать макросы запрещается.
5.1. class     не пользоваться - пользоваться макросами
5.2. namespace не пользоваться - пользоваться макросами
5.3. оператором new пользоваться нельзя - пользуйтесь фабрикой

6. имена функций и данных.
6.1. данные-члены

7. переносы строк и символы разделители.
7.1. открывающую фигурную скобку писать на новой строке.
7.2. табуляция - 4T
7.3. если в качестве редактора исходных кодов вы пользуетесь ms visual studio (настроенной по умолчанию), то выравнивание текста слева по умолчанию правильное, т.е. самостоятельно пользоваться табуляцией не нужно (имеется ввиду "идеальный" набор текста без исправлений, возвратов, стираний и т.д.).
