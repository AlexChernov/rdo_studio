Стиль исходного кода РДО:

1. комментарии.
1.0. язык комментариев русский или английский.
1.1. Для автоматизации процесса создания документации системы и для структуризации комментариев исходного кода РДО в системе принят стандарт комментариев Doxygen.
1.2. В обязательном порядке докумментируются: файлы, классы, интерфейсные (public) методы, интерфейсы, макросы.
1.3. Стиль doxy-комментариев - JavaDoc style:
/******************************************************************************//**
 * @class   RDORSuperClass
 * @brief   Просто супер класс РДО
 * @details Не пишется курсовой, не собирается РДО - просто отнаследуйтесь от этого класса!:)
 *********************************************************************************/
1.4. Длина строки звездочек не случайна, по историческим причинам ваша строка она должна визуально походить на специальную строку - слеш, слеш, пробел, 80 звездочек:
// ********************************************************************************
т.е. иметь длину 83 символа.
1.4.1. если вы выделяете в тексте класс (см. пункт 1.3.), то звездочки должны имитировать 3 из 4 сторон прямоугольника, в который можно вписать ваш комментарий.
1.5. при комментировании файла необходимо указывать себя в формате: Фамилия Имя

2. стражи включения.
2.1. имя макроса-стража пишется большими буквами, знаком подчеркивания и ничем больше.
2.2. имя макроса-стража начинается и заканчивается единичным знаком подчеркивания. между ними пишется имя файла с упоминанием всех директорий (библиотек) от корня РДО, где он находится, но без включения слова RDO. Смысловые части слов разделяется единичным знаком подчеркивания (даже в том случае, если в названии файла они написаны слитно). Например, так будут выглядеть стражи для следующих файлов:
\rdo_studio\rdo_lib\rdo_parser\expression.h      _LIB_PARSER_EXPRESSION_H_
\rdo_studio\rdo_lib\rdo_runtime\rdodptrtime.h    _LIB_RUNTIME_DPT_RTIME_H_
\rdo_studio\rdo_lib\rdo_runtime\rdo_res_type_i.h _LIB_RUNTIME_RES_TYPE_H_

3. файлы
3.1. создавая новый класс, необходимо придерживаться модели h + inl + cpp. Она подразумевает, что заголовочный файл (*.h) содержит только декларацию методов. Встроенные методы (inline), следует реализовывать в (*.inl)-файле. Обычные - в соответствующем (*.cpp)-файле. При этом, *.h должен содержать #include на свой *.inl, указываемый в самом конце (*.h)-файла, перед закрытием стража.
