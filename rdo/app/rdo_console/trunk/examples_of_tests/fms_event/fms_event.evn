$Pattern inflow: event trace
$Relevant_resources
	rsys  : system Keep
	rrobot: robot  Keep
$Body
rsys
	Convert_event
		sysCount++;
		if (rsys.sysCount < 75)
			inflow.planning(time_now + nextInflow(timeIntervalBetweenArrivals));
		if (robot.state <> free or machine.state <> free)
		{
			sysQueue++;
		}
rrobot
	Convert_event
		if (robot.state == free and machine.state == free)
		{
			loadingMachine.planning(time_now + loadingMachineTime(loadingMachineTimeMean - loadingMachineTimeStDev, loadingMachineTimeMean + loadingMachineTimeStDev));
			state = busy;
		}
$End

$Pattern loadingMachine: event trace
$Relevant_resources
	rmachine: machine Keep
	rrobot  : robot   Keep
$Body
rmachine
	Convert_event
		state = busy;
		processingEnd.planning(time_now + timeProcessing(processingTimeMean, processingTimeStDev));
rrobot
	Convert_event
		state = free;
$End

$Pattern processingEnd: event trace
$Relevant_resources
	rmachine: machine Keep
	rrobot  : robot   Keep
$Body
rmachine
	Convert_event
		if (rrobot.state == free) state = free;
rrobot
	Convert_event
		if (rrobot.state == free)
		{
			state = busy;
			loadingExit.planning(time_now + loadingExitTime(loadingExitTimeMean - loadingExitTimeStDev, loadingExitTimeMean + loadingExitTimeStDev));
		}
$End

$Pattern loadingExit: event trace
$Relevant_resources
	rrobot: robot   Keep
	rsys  : system  Keep
$Body
rrobot
	Convert_event
		if (machine.state == free and rsys.sysQueue > 0)
		{
			loadingMachine.planning(time_now + loadingMachineTime(loadingMachineTimeMean - loadingMachineTimeStDev, loadingMachineTimeMean + loadingMachineTimeStDev));
		}
		else
			state = free;
rsys
	Convert_event
		sysExit++;
		if (rrobot.state == busy)
		{
			sysQueue--;
		}
$End

