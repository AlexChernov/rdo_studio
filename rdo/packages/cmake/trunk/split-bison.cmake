#==============================================================================
# Copyright (c) 2013 Alexandrovsky Kirill <k.alexandrovsky@gmail.com>
#==============================================================================

MACRO(RDO_SPLIT_BISON_TARGET INPUT_FILE Y_1 Y_2)

	MAKE_DIRECTORY(${GRAMMA_OUTPUT_PATH})

	SET(${INPUT_FILE}_INPUT ${GRAMMA_INPUT_PATH}/rdo${INPUT_FILE}.yx)

	SET(BISON_${FILE_TYPE}_INPUT_1 ${GRAMMA_OUTPUT_PATH}/rdo${Y_1}.y)
	SET(BISON_${FILE_TYPE}_INPUT_2 ${GRAMMA_OUTPUT_PATH}/rdo${Y_2}.y)

	SET(${INPUT_FILE}_PASS1 ${GRAMMA_INPUT_PATH}/rdo${Y_1}.y)
	SET(${INPUT_FILE}_PASS2 ${GRAMMA_INPUT_PATH}/rdo${Y_2}.y)

	SET(CPP_OUTPUT_FILE_1 ${GRAMMA_OUTPUT_PATH}/rdogram${Y_1}.cpp)
	SET(CPP_OUTPUT_FILE_2 ${GRAMMA_OUTPUT_PATH}/rdogram${Y_2}.cpp)

	SET(BISON_${INPUT_FILE}_OUTPUTS_1 ${CPP_OUTPUT_FILE_1})
	SET(BISON_${INPUT_FILE}_OUTPUTS_2 ${CPP_OUTPUT_FILE_2})

	SET(OUTPUT_FILE ${CPP_OUTPUT_FILE_1})
	LIST(APPEND OUTPUT_FILE ${CPP_OUTPUT_FILE_2})

	LIST(APPEND OUTPUT_FILE ${GRAMMA_OUTPUT_PATH}/rdogram${Y_1}.dot)
	LIST(APPEND OUTPUT_FILE ${GRAMMA_OUTPUT_PATH}/rdogram${Y_1}.output)

	LIST(APPEND OUTPUT_FILE ${GRAMMA_OUTPUT_PATH}/rdogram${Y_2}.dot)
	LIST(APPEND OUTPUT_FILE ${GRAMMA_OUTPUT_PATH}/rdogram${Y_2}.output)

	SET(BISON_DEFINE)
	SET(BISON_${INPUT_FILE}_OUTPUT_HEADER)
	IF(${ARGC} GREATER 4 OR ${ARGC} EQUAL 4)
		SET(BISON_${INPUT_FILE}_OUTPUT_HEADER ${GRAMMA_H})
		SET(BISON_DEFINE --defines=${BISON_${INPUT_FILE}_OUTPUT_HEADER})
		LIST(APPEND OUTPUT_FILE ${BISON_${INPUT_FILE}_OUTPUT_HEADER})
	ENDIF()



	IF(MSVC)
		ADD_CUSTOM_COMMAND(
			OUTPUT ${OUTPUT_FILE}
			COMMAND set BISON_PKGDATADIR=${BISON_FLEX_DIRECTORY}/share/bison
			COMMAND set BISON_PATH=${BISON_EXECUTABLE} -g -v ${BISON_DEFINE}
			COMMAND ${PROJECT_SOURCE_DIR}/scripts/python/split-bison.py ARGS ${${INPUT_FILE}_INPUT} -y1 ${BISON_${FILE_TYPE}_INPUT_1} -y2 ${BISON_${FILE_TYPE}_INPUT_2}
                        COMMAND ${PROJECT_SOURCE_DIR}/scripts/python/run-bison.py ARGS ${${INPUT_FILE}_INPUT} -y1 ${BISON_${FILE_TYPE}_INPUT_1} -y2 ${BISON_${FILE_TYPE}_INPUT_2} -o1 ${CPP_OUTPUT_FILE_1} -o2 ${CPP_OUTPUT_FILE_2} -n1 ${Y_1} -n2 ${Y_2}
			DEPENDS ${${INPUT_FILE}_INPUT}
			COMMENT "[BISON][rdo${INPUT_FILE}] Building parser with bison ${BISON_VERSION}"
			WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
		)
	ELSE(MSVC)
		ADD_CUSTOM_COMMAND(
			OUTPUT ${OUTPUT_FILE}
			COMMAND export BISON_PATH=${BISON_EXECUTABLE} -g -v ${BISON_DEFINE}
			COMMAND ${PROJECT_SOURCE_DIR}/scripts/python/split-bison.py ARGS ${${INPUT_FILE}_INPUT} -y1 ${BISON_${FILE_TYPE}_INPUT_1} -y2 ${BISON_${FILE_TYPE}_INPUT_2}
                        COMMAND ${PROJECT_SOURCE_DIR}/scripts/python/run-bison.py ARGS ${${INPUT_FILE}_INPUT} -y1 ${BISON_${FILE_TYPE}_INPUT_1} -y2 ${BISON_${FILE_TYPE}_INPUT_2} -o1 ${CPP_OUTPUT_FILE_1} -o2 ${CPP_OUTPUT_FILE_2} -n1 ${Y_1} -n2 ${Y_2}
			DEPENDS ${${INPUT_FILE}_INPUT}
			COMMENT "[BISON][rdo${INPUT_FILE}] Building parser with bison ${BISON_VERSION}"
			WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
		)
	ENDIF(MSVC)
ENDMACRO(RDO_BISON_TARGET)
