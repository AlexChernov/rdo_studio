// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#pragma warning(disable: 4996)

#include "simulator/corba/RDOCorba.hh"

#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>

OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



void
rdoParse::RDOCorba::ParamRTP::operator>>= (cdrStream &_n) const
{
  _n.marshalString(m_name,0);
  m_type >>= _n;
  _n.marshalBoolean(m_range_int);
  m_min_int >>= _n;
  m_max_int >>= _n;
  _n.marshalBoolean(m_default_int_ch);
  m_default_int >>= _n;
  _n.marshalBoolean(m_range_double);
  m_min_double >>= _n;
  m_max_double >>= _n;
  _n.marshalBoolean(m_default_double_ch);
  m_default_double >>= _n;
  m_var_enum_count >>= _n;
  _n.marshalBoolean(m_var_enum_ch);
  (const my_enum&) m_var_enum >>= _n;
  _n.marshalBoolean(m_default_enum_ch);
  _n.marshalString(m_default_enum,0);

}

void
rdoParse::RDOCorba::ParamRTP::operator<<= (cdrStream &_n)
{
  m_name = _n.unmarshalString(0);
  (TypeParam&)m_type <<= _n;
  m_range_int = _n.unmarshalBoolean();
  (::CORBA::Long&)m_min_int <<= _n;
  (::CORBA::Long&)m_max_int <<= _n;
  m_default_int_ch = _n.unmarshalBoolean();
  (::CORBA::Long&)m_default_int <<= _n;
  m_range_double = _n.unmarshalBoolean();
  (::CORBA::Double&)m_min_double <<= _n;
  (::CORBA::Double&)m_max_double <<= _n;
  m_default_double_ch = _n.unmarshalBoolean();
  (::CORBA::Double&)m_default_double <<= _n;
  (::CORBA::Long&)m_var_enum_count <<= _n;
  m_var_enum_ch = _n.unmarshalBoolean();
  (my_enum&)m_var_enum <<= _n;
  m_default_enum_ch = _n.unmarshalBoolean();
  m_default_enum = _n.unmarshalString(0);

}

void
rdoParse::RDOCorba::MY_RTP::operator>>= (cdrStream &_n) const
{
  _n.marshalString(m_name,0);
  m_type >>= _n;
  m_param_count >>= _n;
  (const ParamsRTP&) m_param >>= _n;

}

void
rdoParse::RDOCorba::MY_RTP::operator<<= (cdrStream &_n)
{
  m_name = _n.unmarshalString(0);
  (TypeRTP&)m_type <<= _n;
  (::CORBA::Long&)m_param_count <<= _n;
  (ParamsRTP&)m_param <<= _n;

}

void
rdoParse::RDOCorba::ParamRSS::operator>>= (cdrStream &_n) const
{
  _n.marshalString(m_name,0);
  m_type >>= _n;
  m_int >>= _n;
  m_double >>= _n;
  _n.marshalString(m_enum,0);

}

void
rdoParse::RDOCorba::ParamRSS::operator<<= (cdrStream &_n)
{
  m_name = _n.unmarshalString(0);
  (TypeParam&)m_type <<= _n;
  (::CORBA::Long&)m_int <<= _n;
  (::CORBA::Double&)m_double <<= _n;
  m_enum = _n.unmarshalString(0);

}

void
rdoParse::RDOCorba::MY_RSS::operator>>= (cdrStream &_n) const
{
  _n.marshalString(m_name,0);
  _n.marshalString(m_type,0);
  m_param_count >>= _n;
  (const ParamsRSS&) m_param >>= _n;

}

void
rdoParse::RDOCorba::MY_RSS::operator<<= (cdrStream &_n)
{
  m_name = _n.unmarshalString(0);
  m_type = _n.unmarshalString(0);
  (::CORBA::Long&)m_param_count <<= _n;
  (ParamsRSS&)m_param <<= _n;

}

rdoParse::RDOCorba_ptr rdoParse::RDOCorba_Helper::_nil() {
  return ::rdoParse::RDOCorba::_nil();
}

::CORBA::Boolean rdoParse::RDOCorba_Helper::is_nil(::rdoParse::RDOCorba_ptr p) {
  return ::CORBA::is_nil(p);

}

void rdoParse::RDOCorba_Helper::release(::rdoParse::RDOCorba_ptr p) {
  ::CORBA::release(p);
}

void rdoParse::RDOCorba_Helper::marshalObjRef(::rdoParse::RDOCorba_ptr obj, cdrStream& s) {
  ::rdoParse::RDOCorba::_marshalObjRef(obj, s);
}

rdoParse::RDOCorba_ptr rdoParse::RDOCorba_Helper::unmarshalObjRef(cdrStream& s) {
  return ::rdoParse::RDOCorba::_unmarshalObjRef(s);
}

void rdoParse::RDOCorba_Helper::duplicate(::rdoParse::RDOCorba_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

rdoParse::RDOCorba_ptr
rdoParse::RDOCorba::_duplicate(::rdoParse::RDOCorba_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

rdoParse::RDOCorba_ptr
rdoParse::RDOCorba::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


rdoParse::RDOCorba_ptr
rdoParse::RDOCorba::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

rdoParse::RDOCorba_ptr
rdoParse::RDOCorba::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_RDOCorba _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_RDOCorba* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_RDOCorba;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* rdoParse::RDOCorba::_PD_repoId = "IDL:rdoParse/RDOCorba:1.0";


rdoParse::_objref_RDOCorba::~_objref_RDOCorba() {
  
}


rdoParse::_objref_RDOCorba::_objref_RDOCorba(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::rdoParse::RDOCorba::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
rdoParse::_objref_RDOCorba::_ptrToObjRef(const char* id)
{
  if( id == ::rdoParse::RDOCorba::_PD_repoId )
    return (::rdoParse::RDOCorba_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::rdoParse::RDOCorba::_PD_repoId) )
    return (::rdoParse::RDOCorba_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _crdoParse_mRDOCorba_mGetRTP_o_clong
class _0RL_cd_3765F01E8BABC70E_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3765F01E8BABC70E_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  ::CORBA::Long arg_0;
  rdoParse::RDOCorba::GetRTP_var result;
};

void _0RL_cd_3765F01E8BABC70E_00000000::marshalReturnedValues(cdrStream& _n)
{
  (const rdoParse::RDOCorba::GetRTP&) result >>= _n;
  arg_0 >>= _n;

}

void _0RL_cd_3765F01E8BABC70E_00000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new rdoParse::RDOCorba::GetRTP;
  (rdoParse::RDOCorba::GetRTP&)result <<= _n;
  (::CORBA::Long&)arg_0 <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_3765F01E8BABC70E_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3765F01E8BABC70E_00000000* tcd = (_0RL_cd_3765F01E8BABC70E_00000000*)cd;
  rdoParse::_impl_RDOCorba* impl = (rdoParse::_impl_RDOCorba*) svnt->_ptrToInterface(rdoParse::RDOCorba::_PD_repoId);
  tcd->result = impl->getRDORTPlist(tcd->arg_0);


}

rdoParse::RDOCorba::GetRTP* rdoParse::_objref_RDOCorba::getRDORTPlist(::CORBA::Long& rtp_count)
{
  _0RL_cd_3765F01E8BABC70E_00000000 _call_desc(_0RL_lcfn_3765F01E8BABC70E_10000000, "getRDORTPlist", 14);


  _invoke(_call_desc);
  rtp_count = _call_desc.arg_0;
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _crdoParse_mRDOCorba_mGetRSS_o_clong
class _0RL_cd_3765F01E8BABC70E_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3765F01E8BABC70E_20000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  ::CORBA::Long arg_0;
  rdoParse::RDOCorba::GetRSS_var result;
};

void _0RL_cd_3765F01E8BABC70E_20000000::marshalReturnedValues(cdrStream& _n)
{
  (const rdoParse::RDOCorba::GetRSS&) result >>= _n;
  arg_0 >>= _n;

}

void _0RL_cd_3765F01E8BABC70E_20000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new rdoParse::RDOCorba::GetRSS;
  (rdoParse::RDOCorba::GetRSS&)result <<= _n;
  (::CORBA::Long&)arg_0 <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_3765F01E8BABC70E_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3765F01E8BABC70E_20000000* tcd = (_0RL_cd_3765F01E8BABC70E_20000000*)cd;
  rdoParse::_impl_RDOCorba* impl = (rdoParse::_impl_RDOCorba*) svnt->_ptrToInterface(rdoParse::RDOCorba::_PD_repoId);
  tcd->result = impl->getRDORSSPlist(tcd->arg_0);


}

rdoParse::RDOCorba::GetRSS* rdoParse::_objref_RDOCorba::getRDORSSPlist(::CORBA::Long& rss_count)
{
  _0RL_cd_3765F01E8BABC70E_20000000 _call_desc(_0RL_lcfn_3765F01E8BABC70E_30000000, "getRDORSSPlist", 15);


  _invoke(_call_desc);
  rss_count = _call_desc.arg_0;
  return _call_desc.result._retn();


}
rdoParse::_pof_RDOCorba::~_pof_RDOCorba() {}


omniObjRef*
rdoParse::_pof_RDOCorba::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::rdoParse::_objref_RDOCorba(ior, id);
}


::CORBA::Boolean
rdoParse::_pof_RDOCorba::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::rdoParse::RDOCorba::_PD_repoId) )
    return 1;
  
  return 0;
}

const rdoParse::_pof_RDOCorba _the_pof_rdoParse_mRDOCorba;

rdoParse::_impl_RDOCorba::~_impl_RDOCorba() {}


::CORBA::Boolean
rdoParse::_impl_RDOCorba::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "getRDORTPlist") ) {

    _0RL_cd_3765F01E8BABC70E_00000000 _call_desc(_0RL_lcfn_3765F01E8BABC70E_10000000, "getRDORTPlist", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getRDORSSPlist") ) {

    _0RL_cd_3765F01E8BABC70E_20000000 _call_desc(_0RL_lcfn_3765F01E8BABC70E_30000000, "getRDORSSPlist", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
rdoParse::_impl_RDOCorba::_ptrToInterface(const char* id)
{
  if( id == ::rdoParse::RDOCorba::_PD_repoId )
    return (::rdoParse::_impl_RDOCorba*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::rdoParse::RDOCorba::_PD_repoId) )
    return (::rdoParse::_impl_RDOCorba*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
rdoParse::_impl_RDOCorba::_mostDerivedRepoId()
{
  return ::rdoParse::RDOCorba::_PD_repoId;
}

POA_rdoParse::RDOCorba::~RDOCorba() {}

#pragma warning(default: 4996)
