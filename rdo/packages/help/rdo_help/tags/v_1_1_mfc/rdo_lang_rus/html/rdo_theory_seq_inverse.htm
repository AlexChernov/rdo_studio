<HTML>
<HEAD>
<TITLE>Обратная функция</TITLE>
<LINK rel = "stylesheet" type = "text/css" href = "../styles.css">
</HEAD>
<BODY>
	<DIV>
		<H1>ОБРАТНАЯ ФУНКЦИЯ</H1>
		<P>Алгоритмы работы имеющихся генераторов псевдослучайных чисел реализованы с помощью метода обратного преобразования. Подробный разбор этого вопроса можно прочитать в книге Кельтона и Лоу "Имитационное моделирование".</P>
		<P>Суть этого метода сводится к тому, что для получения распределения, требуемого вида ( F(x) ), нужно применить обратную этому виду функцию ( F^(-1)(x) ) к базовому равномерному распределению на интервале [0,1); где F(x) – не функция плотности распределения, а функция распределения. Получение базового равномерного распределения - отдельная проблема.</P>
		<P>Применения обратной функции мало: таким образом мы всего лишь получим распредление с нужной нам формы гистограммы. Далее нужно привести полученное распределение в соответсвие конкретным параметрам закона. Это делается смещением с помощью операций сложения/вычитания и масштабированием с помощью операций умножения/деления.</P><BR>
		<H2>Разберем пример.</H2>
		<P>Предположим, что нам нужно получить экспоненциальное распределение:</P><BR>
		<P>Функция f(x) примет вид:</P>
		<P><I>f(x) = main*EXP(-main*X)</I></P><BR>
		<P>Для алгоритма необходима функция распределения вероятности - интергал функции плотности распределения.</P>
		<P>f(x) – экспонента, F(x) – тоже. Обратная функция – логорифм.</P>
		<P><I>Fobr = -log(BaseDistribution01)</I></P><BR>
		<P>Форма распределения у нас есть. Теперь нужно привести ее к конкретному значению main.</P>
		<P><I>Fobr = -main*log(BaseDistribution01)</I></P><BR><BR>
		<H2>Код распределения</H2>
		<PRE class="syntax">
inline double RandGeneratorExponential::next(double math)
{
    return -log(u01()) * math;
}
</PRE>
	</DIV>
	<BR><SCRIPT src="../navbar.js"></SCRIPT>
</BODY>
</HTML>