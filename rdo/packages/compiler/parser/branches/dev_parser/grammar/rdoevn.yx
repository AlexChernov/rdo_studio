/*!
  \copyright (c) RDO-Team, 2011
  \file      rdoevn.yx
  \authors   Барс Александр
  \authors   Урусов Андрей (rdo@rk9.bmstu.ru)
  \authors   Лущан Дмитрий (dluschan@rk9.bmstu.ru)
  \authors   Поподьянец Евгений (kurt.gigacore@gmail.com)
  \authors   Александровский Кирилл (k.alexandrovsky@gmail.com)
  \date      18.10.2013
  \brief     Синтаксис RTP, RSS, EVN, PAT, DPT, FRM
  \indent    4T
*/

%{
#define YYPARSE_PARAM lexer
#define YYLEX_PARAM lexer
%}

%pure-parser

%token RDO_Resource_type
%token RDO_permanent
%token RDO_Parameters
%token RDO_integer
%token RDO_real
%token RDO_End
%token RDO_temporary
%token RDO_IDENTIF
%token RDO_INT_CONST
%token RDO_REAL_CONST
%token RDO_such_as
%token RDO_dblpoint
%token RDO_Resources
%token RDO_trace
%token RDO_no_trace
%token RDO_IDENTIF_COLON
%token RDO_Constant
%token RDO_Body
%token RDO_Function
%token RDO_Type
%token RDO_algorithmic
%token RDO_table
%token RDO_list
%token RDO_Exist
%token RDO_Not_Exist
%token RDO_For_All
%token RDO_Not_For_All
%token RDO_neq
%token RDO_leq
%token RDO_geq
%token RDO_NoCheck
%token RDO_Calculate_if
%token RDO_or
%token RDO_and
%token RDO_Sequence
%token RDO_uniform
%token RDO_exponential
%token RDO_normal
%token RDO_triangular
%token RDO_by_hist
%token RDO_enumerative

%token RDO_Pattern
%token RDO_operation
%token RDO_rule
%token RDO_keyboard
%token RDO_Relevant_resources
%token RDO_Keep
%token RDO_Create
%token RDO_Erase
%token RDO_NonExist
%token RDO_IDENTIF_NoChange
%token RDO_Time
%token RDO_Choice
%token RDO_from
%token RDO_first
%token RDO_Convert_begin
%token RDO_Convert_end
%token RDO_Convert_rule
%token RDO_Convert_event
%token RDO_with_max
%token RDO_with_min
%token RDO_set
%token RDO_IDENTIF_NoChange_NoChange
%token RDO_Operations

%token RDO_Results
%token RDO_watch_par
%token RDO_watch_state
%token RDO_watch_quant
%token RDO_watch_value
%token RDO_get_value

%token RDO_Show_mode
%token RDO_Frame_number
%token RDO_Show_rate
%token RDO_Run_StartTime
%token RDO_Trace_StartTime
%token RDO_Trace_EndTime
%token RDO_Terminate_if
%token RDO_Break_point
%token RDO_Seed
%token RDO_NoShow
%token RDO_Monitor
%token RDO_Animation
%token RDO_NoChange

%token RDO_ProcessStart
%token RDO_Decision_point
%token RDO_search
%token RDO_trace_stat
%token RDO_trace_tops
%token RDO_trace_all
%token RDO_Condition
%token RDO_Term_condition
%token RDO_Evaluate_by
%token RDO_Compare_tops
%token RDO_NO
%token RDO_YES
%token RDO_Activities
%token RDO_value_before
%token RDO_value_after
%token RDO_some
%token RDO_Process
%token RDO_SEIZE
%token RDO_GENERATE
%token RDO_TERMINATE
%token RDO_ADVANCE
%token RDO_RELEASE
%token RDO_if
%token RDO_for
%token RDO_Return
%token RDO_Break
%token RDO_CF
%token RDO_Priority
%token RDO_prior
%token RDO_Parent
%token RDO_PlusEqual
%token RDO_MinusEqual
%token RDO_MultiplyEqual
%token RDO_DivideEqual
%token RDO_array
%token RDO_event
%token RDO_Planning
%token RDO_else
%token RDO_IncrEqual
%token RDO_DecrEqual
%token RDO_Stopping
%token RDO_WatchStart
%token RDO_WatchStop
%token RDO_Multithreading

%token RDO_Frame
%token RDO_Back_picture
%token RDO_frm_cell
%token RDO_text
%token RDO_bitmap
%token RDO_s_bmp
%token RDO_rect
%token RDO_r_rect
%token RDO_line
%token RDO_circle
%token RDO_ellipse
%token RDO_triang
%token RDO_active
%token RDO_ruler
%token RDO_space
%token RDO_color_transparent
%token RDO_color_last
%token RDO_color_white
%token RDO_color_black
%token RDO_color_red
%token RDO_color_green
%token RDO_color_blue
%token RDO_color_cyan
%token RDO_color_magenta
%token RDO_color_yellow
%token RDO_color_gray

%token RDO_IDENTIF_RELRES
%token RDO_typedef
%token RDO_enum

%token RDO_STRING_CONST
%token RDO_Select
%token RDO_Size
%token RDO_Empty
%token RDO_Select_Array
%token RDO_not
%token RDO_UMINUS
%token RDO_string
%token RDO_bool
%token RDO_BOOL_CONST
%token RDO_Fuzzy
%token RDO_Fuzzy_Term
%token RDO_eq
%token RDO_External_Model
%token RDO_QUEUE
%token RDO_DEPART
%token RDO_ASSIGN

%token RDO_Sprite
%token RDO_sprite_call

%{
// ---------------------------------------------------------------------------- PCH
#include "simulator/compiler/parser/pch.h"
// ----------------------------------------------------------------------- INCLUDES
#include <boost/bind.hpp>
// ----------------------------------------------------------------------- SYNOPSIS
#include "simulator/compiler/parser/rdoparser.h"
#include "simulator/compiler/parser/rdoparser_lexer.h"
#include "simulator/compiler/parser/rdopat.h"
#include "simulator/compiler/parser/rdorss.h"
#include "simulator/compiler/parser/rdortp.h"
#include "simulator/compiler/parser/rdodpt.h"
#include "simulator/compiler/parser/rdofun.h"
#include "simulator/compiler/parser/type/range.h"
#include "simulator/compiler/parser/rdo_array.h"
#include "simulator/compiler/parser/src/function/local_variable/local_variable.h"
#include "simulator/compiler/parser/src/function/local_variable/local_variable_context.h"
#include "simulator/compiler/parser/type/such_as.h"
#include "simulator/compiler/parser/context/context_type.h"
#include "simulator/compiler/parser/context/memory.h"
#include "simulator/compiler/parser/context/statement.h"

#include "simulator/runtime/rdotrace.h"
#include "simulator/runtime/calc/calc_base.h"
#include "simulator/runtime/calc/calc_event.h"
#include "simulator/runtime/calc/calc_watch.h"
#include "simulator/runtime/calc/calc_process.h"
#include "simulator/runtime/calc/calc_array.h"
#include "simulator/runtime/calc/procedural/calc_locvar.h"
#include "simulator/runtime/calc/procedural/calc_statement.h"
#include "simulator/runtime/calc/procedural/calc_braces.h"
#include "simulator/runtime/calc/procedural/calc_range.h"
#include "simulator/runtime/calc/resource/calc_resource.h"

#include "simulator/compiler/parser/src/animation/animation_frame.h"
// --------------------------------------------------------------------------------

#define PARSER  LEXER->parser()
#define RUNTIME PARSER->runtime()

OPEN_RDO_PARSER_NAMESPACE

// -------------------- Типы для анимации -----------------------------------------
typedef rdo::runtime::RDOFRMFrame::RDOFRMColor      RDOFRMColor;
typedef rdo::runtime::RDOFRMFrame::LPRDOFRMColor    LPRDOFRMColor;
typedef rdo::runtime::RDOFRMFrame::RDOFRMPosition   RDOFRMPosition;
typedef rdo::runtime::RDOFRMFrame::LPRDOFRMPosition LPRDOFRMPosition;
typedef rdo::runtime::RDOFRMFrame::RDOFRMRulet      RDOFRMRulet;
typedef rdo::runtime::RDOFRMFrame::LPRDOFRMRulet    LPRDOFRMRulet;
typedef rdo::runtime::RDOFRMText                    RDOFRMText;
typedef rdo::runtime::LPRDOFRMText                  LPRDOFRMText;
typedef rdo::runtime::RDOFRMBitmap                  RDOFRMBitmap;
typedef rdo::runtime::LPRDOFRMBitmap                LPRDOFRMBitmap;
typedef rdo::runtime::RDOFRMBitmapStretch           RDOFRMBitmapStretch;
typedef rdo::runtime::LPRDOFRMBitmapStretch         LPRDOFRMBitmapStretch;
typedef rdo::runtime::RDOFRMRect                    RDOFRMRect;
typedef rdo::runtime::LPRDOFRMRect                  LPRDOFRMRect;
typedef rdo::runtime::RDOFRMRectRound               RDOFRMRectRound;
typedef rdo::runtime::LPRDOFRMRectRound             LPRDOFRMRectRound;
typedef rdo::runtime::RDOFRMCircle                  RDOFRMCircle;
typedef rdo::runtime::LPRDOFRMCircle                LPRDOFRMCircle;
typedef rdo::runtime::RDOFRMEllipse                 RDOFRMEllipse;
typedef rdo::runtime::LPRDOFRMEllipse               LPRDOFRMEllipse;
typedef rdo::runtime::RDOFRMLine                    RDOFRMLine;
typedef rdo::runtime::LPRDOFRMLine                  LPRDOFRMLine;
typedef rdo::runtime::RDOFRMTriang                  RDOFRMTriang;
typedef rdo::runtime::LPRDOFRMTriang                LPRDOFRMTriang;
typedef rdo::runtime::RDOFRMActive                  RDOFRMActive;
typedef rdo::runtime::LPRDOFRMActive                LPRDOFRMActive;
typedef rdo::runtime::RDOFRMSpace                   RDOFRMSpace;
typedef rdo::runtime::LPRDOFRMSpace                 LPRDOFRMSpace;
// --------------------------------------------------------------------------------

%}

%left RDO_or
%left RDO_and
%left '+' '-'
%left '*' '/'
%left RDO_not
%left RDO_UMINUS

%start rdo_compiler

%%

// --------------------------------------------------------------------------------
// -------------------- Список компиляторов РДО
// --------------------------------------------------------------------------------
rdo_compiler
	: /* empty */
	| rtp_main rdo_compiler
	| rss_main rdo_compiler
	| pat_main rdo_compiler
	| dpt_main rdo_compiler
	| frm_main rdo_compiler
	| error
	{
		PARSER->error().error(RDOParserSrcInfo(), "Ожидается ключевое слово: $Resource_type, $Resources, $Pattern");
	}
	;

// --------------------------------------------------------------------------------
// -------------------- Синтаксис типов ресурсов
// --------------------------------------------------------------------------------
// -------------------- Описание типов ресурсов
// --------------------------------------------------------------------------------
rtp_main
	: rtp_res_type
	{
		#PASS2
		{
			LPRDORTPResType pResourceType = PARSER->stack().pop<RDORTPResType>($1);
			ASSERT(pResourceType);
		}
	}
	| ext_param_type
	;

ext_param_type
	: RDO_typedef RDO_enum ext_par_type_enum
	;

ext_par_type_enum
	: type_declaration_enum RDO_IDENTIF
	{
		#PASS2
		{
			LPTypeInfo pType = PARSER->stack().pop<TypeInfo>($1);
			ASSERT(pType);
			$$ = PARSER->stack().push(pType);
		}
	}
	;

rtp_res_type
	: rtp_header RDO_Parameters rtp_body RDO_End
	{
		#PASS2
		{
			LPRDORTPResType pResourceType = PARSER->stack().pop<RDORTPResType>($1);
			ASSERT(pResourceType);
			if (pResourceType->getParams().empty())
			{
				PARSER->error().warning(@2, rdo::format("Тип ресурса '%s' не содежит параметров", pResourceType->name().c_str()));
			}
			$$ = PARSER->stack().push(pResourceType);
		}
	}
	| rtp_header RDO_Parameters rtp_body
	{
		#PASS2
		{
			PARSER->error().error(@2, "Не найдено ключевое слово $End");
		}
	}
	| rtp_header error
	{
		#PASS2
		{
			PARSER->error().error(@2, "Не найдено ключевое слово $Parameters");
		}
	}
	;

rtp_header
	: RDO_Resource_type RDO_IDENTIF_COLON rtp_vid_res
	{
		#PASS2
		{
			LEXER->enumReset();

			LPRDOValue pTypeName = PARSER->stack().pop<RDOValue>($2);
			ASSERT(pTypeName);

			tstring         name = pTypeName->value().getIdentificator();
			LPRDORTPResType pRTP = PARSER->findRTPResType(name);
			if (pRTP)
			{
				PARSER->error().push_only(pTypeName->src_info(), rdo::format("Тип ресурса уже существует: %s", name.c_str()));
				PARSER->error().push_only(pRTP->src_info(), "См. первое определение");
				PARSER->error().push_done();
			}

			LPRDORTPResType pResourceType = rdo::Factory<RDORTPResType>::create(PARSER, pTypeName->src_info(), $3 != 0);
			ASSERT(pResourceType);
			$$ = PARSER->stack().push(pResourceType);
		}
	}
	|	RDO_Resource_type RDO_IDENTIF_COLON RDO_IDENTIF_COLON rtp_vid_res
	{
		#PASS2
		{
			LEXER->enumReset();

			LPRDOValue pTypeName = PARSER->stack().pop<RDOValue>($2);
			ASSERT(pTypeName);

			tstring         name = pTypeName->value().getIdentificator();
			LPRDORTPResType pRTP = PARSER->findRTPResType(name);
			if (pRTP)
			{
				PARSER->error().push_only(pTypeName->src_info(), rdo::format("Тип ресурса уже существует: %s", name.c_str()));
				PARSER->error().push_only(pRTP->src_info(), "См. первое определение");
				PARSER->error().push_done();
			}

			LPRDOValue pParentTypeName = PARSER->stack().pop<RDOValue>($3);
			ASSERT(pParentTypeName);

			tstring         prnt_name = pParentTypeName->value().getIdentificator();
			LPRDORTPResType pParentRTP = PARSER->findRTPResType(prnt_name);
			if (pParentRTP)
			{
				LPRDORTPResType pResourceType = rdo::Factory<RDORTPResType>::create(PARSER, pTypeName->src_info(), $4 != 0);
				ASSERT(pResourceType);
				ruint t_ind   = 0;
				ruint col_par = pParentRTP->getParams().size();
				while (t_ind < col_par)
				{
					pResourceType->addParam(pParentRTP->getParams()[t_ind]);
					PARSER->error().warning(pParentRTP->getParams()[t_ind]->src_info(), rdo::format("Параметр %s передан от родителя %s потомку %s", pParentRTP->getParams()[t_ind]->src_info().src_text().c_str(), prnt_name.c_str(), name.c_str()));
					t_ind++;
				}
				$$ = PARSER->stack().push(pResourceType);
				PARSER->error().warning(@2, rdo::format("Тип ресурса %s является потомком типа ресурса %s", name.c_str(), prnt_name.c_str()));
			}
			else
			{
				PARSER->error().push_only(@3, rdo::format("Родительский тип ресурса не существует: %s", prnt_name.c_str()));
				PARSER->error().push_done();
			}
		}
	}
	| RDO_Resource_type RDO_IDENTIF_COLON error
	{
		#PASS2
		{
			PARSER->error().error(@2, "Не указан вид ресурса");
		}
	}
	| RDO_Resource_type RDO_IDENTIF_COLON RDO_IDENTIF_COLON error
	{
		#PASS2
		{
			PARSER->error().error(@3, "Не указан вид ресурса");
		}
	}
	| RDO_Resource_type error
	{
		#PASS2
		{
			tstring str(LEXER->YYText());
			PARSER->error().error(@2, rdo::format("Ошибка в описании имени типа ресурса: %s", str.c_str()));
		}
	}
	;

rtp_vid_res
	: RDO_permanent
	{
		#PASS2
		{
			$$ = 1;
		}
	}
	| RDO_temporary
	{
		#PASS2
		{
			$$ = 0;
		}
	}
	;

rtp_body
	: /* empty */
	| rtp_body rtp_param
	{
		#PASS2
		{
			LPRDORTPParam pParam = PARSER->stack().pop<RDORTPParam>($2);
			PARSER->getLastRTPResType()->addParam(pParam);
		}
	}
	;

rtp_param
	: RDO_IDENTIF_COLON type_declaration param_value_default
	{
		#PASS2
		{
			LPRDOValue  pParamName = PARSER->stack().pop<RDOValue>($1);
			LPTypeInfo  pParamType = PARSER->stack().pop<TypeInfo>($2);
			LPRDOValue  pDefault   = PARSER->stack().pop<RDOValue>($3);
			ASSERT(pParamName);
			ASSERT(pParamType);
			ASSERT(pDefault  );

			if (!pDefault->defined())
			{
				LPRDOTypeParamSuchAs pTypeSuchAs = pParamType.object_dynamic_cast<RDOTypeParamSuchAs>();
				if (pTypeSuchAs)
				{
					pDefault = pTypeSuchAs->getParam()->getDefault();
				}
			}

			LPRDORTPParam pParam = rdo::Factory<RDORTPParam>::create(pParamType, pDefault, pParamName->src_info());
			ASSERT(pParam);
			$$ = PARSER->stack().push(pParam);
		}
	}
	| RDO_IDENTIF_COLON error
	{
		#PASS2
		{
			if (PARSER->lexer_loc_line() == @1.m_last_line)
			{
				tstring str(LEXER->YYText());
				PARSER->error().error(@2, rdo::format("Неверный тип параметра: %s", str.c_str()));
			}
			else
			{
				PARSER->error().error(@1, "Ожидается тип параметра");
			}
		}
	}
	| error
	{
		#PASS2
		{
			PARSER->error().error(@1, "Неправильное описание параметра");
		}
	}
	;

// --------------------------------------------------------------------------------
// -------------------- Описание типа параметра
// --------------------------------------------------------------------------------
type_declaration_context
	: type_declaration
	{
		#PASS2
		{
			LPTypeInfo pType = PARSER->stack().pop<TypeInfo>($1);
			ASSERT(pType);

			LPContext pTypeContext = rdo::Factory<TypeContext>::create(pType);
			ASSERT(pTypeContext);
			PARSER->contextStack()->push(pTypeContext);
		}
	}
	;

type_declaration
	: RDO_integer param_type_range
	{
		#PASS2
		{
			LPRDOTypeRangeRange pRange = PARSER->stack().pop<RDOTypeRangeRange>($2);
			LPTypeInfo pType;
			if (pRange)
			{
				if (pRange->getMin()->typeID() != rdo::runtime::RDOType::t_int ||
				    pRange->getMax()->typeID() != rdo::runtime::RDOType::t_int)
				{
					PARSER->error().error(@2, "Диапазон целого типа должен быть целочисленным");
				}
				LPRDOTypeIntRange pIntRange = rdo::Factory<RDOTypeIntRange>::create(pRange);
				ASSERT(pIntRange);
				pType = rdo::Factory<TypeInfo>::create(pIntRange, RDOParserSrcInfo(@1, @2));
			}
			else
			{
				pType = rdo::Factory<TypeInfo>::delegate<RDOType__int>(RDOParserSrcInfo(@1, @2));
			}
			ASSERT(pType);
			$$ = PARSER->stack().push(pType);
		}
	}
	| RDO_real param_type_range
	{
		#PASS2
		{
			LPRDOTypeRangeRange pRange = PARSER->stack().pop<RDOTypeRangeRange>($2);
			LPTypeInfo pType;
			if (pRange)
			{
				LPRDOTypeRealRange pRealRange = rdo::Factory<RDOTypeRealRange>::create(pRange);
				ASSERT(pRealRange);
				pType = rdo::Factory<TypeInfo>::create(pRealRange, RDOParserSrcInfo(@1, @2));
			}
			else
			{
				pType = rdo::Factory<TypeInfo>::delegate<RDOType__real>(RDOParserSrcInfo(@1, @2));
			}
			ASSERT(pType);
			$$ = PARSER->stack().push(pType);
		}
	}
	| RDO_string
	{
		#PASS2
		{
			LPTypeInfo pType = rdo::Factory<TypeInfo>::delegate<RDOType__string>(RDOParserSrcInfo(@1));
			ASSERT(pType);
			$$ = PARSER->stack().push(pType);
		}
	}
	| type_declaration_array
	{
		#PASS2
		{
			LPRDOArrayType pArray = PARSER->stack().pop<RDOArrayType>($1);
			ASSERT(pArray);

			LPTypeInfo pType = rdo::Factory<TypeInfo>::create(pArray, RDOParserSrcInfo(@1));
			ASSERT(pType);
			$$ = PARSER->stack().push(pType);
		}
	}
	| RDO_bool
	{
		#PASS2
		{
			LPTypeInfo pType = rdo::Factory<TypeInfo>::delegate<RDOType__bool>(RDOParserSrcInfo(@1));
			ASSERT(pType);
			$$ = PARSER->stack().push(pType);
		}
	}
	| type_declaration_enum
	{
		#PASS2
		{
			LEXER->enumReset();
			LPRDOEnumType pEnum = PARSER->stack().pop<RDOEnumType>($1);
			ASSERT(pEnum);

			LPTypeInfo pType = rdo::Factory<TypeInfo>::create(pEnum, RDOParserSrcInfo(@1));
			ASSERT(pType);
			$$ = PARSER->stack().push(pType);
		}
	}
	| RDO_IDENTIF
	{
		#PASS2
		{
			LPRDOValue pValue = PARSER->stack().pop<RDOValue>($1);
			ASSERT(pValue);

			LPContext pContext = RDOParser::s_parser()->context();
			ASSERT(pContext);

			pContext = pContext->find(pValue);
			ASSERT(pContext);

			LPExpression pExpression = pContext->create(pValue);
			ASSERT(pExpression);
			$$ = PARSER->stack().push(pExpression->typeInfo());
		}
	}
	| type_declaration_such_as
	;

param_type_range
	: /* empty */
	{
		#PASS2
		{
			$$ = PARSER->stack().push<RDOTypeRangeRange>(LPRDOTypeRangeRange());
		}
	}
	| '[' RDO_INT_CONST RDO_dblpoint RDO_INT_CONST ']'
	{
		#PASS2
		{
			LPRDOTypeRangeRange pRange = rdo::Factory<RDOTypeRangeRange>::create(PARSER->stack().pop<RDOValue>($2), PARSER->stack().pop<RDOValue>($4), RDOParserSrcInfo(@1, @5));
			ASSERT(pRange);
			pRange->checkRange();
			$$ = PARSER->stack().push(pRange);
		}
	}
	| '[' RDO_REAL_CONST RDO_dblpoint RDO_REAL_CONST ']'
	{
		#PASS2
		{
			LPRDOTypeRangeRange pRange = rdo::Factory<RDOTypeRangeRange>::create(PARSER->stack().pop<RDOValue>($2), PARSER->stack().pop<RDOValue>($4), RDOParserSrcInfo(@1, @5));
			ASSERT(pRange);
			pRange->checkRange();
			$$ = PARSER->stack().push(pRange);
		}
	}
	| '[' RDO_REAL_CONST RDO_dblpoint RDO_INT_CONST ']'
	{
		#PASS2
		{
			LPRDOTypeRangeRange pRange = rdo::Factory<RDOTypeRangeRange>::create(PARSER->stack().pop<RDOValue>($2), PARSER->stack().pop<RDOValue>($4), RDOParserSrcInfo(@1, @5));
			ASSERT(pRange);
			pRange->checkRange();
			$$ = PARSER->stack().push(pRange);
		}
	}
	| '[' RDO_INT_CONST RDO_dblpoint RDO_REAL_CONST ']'
	{
		#PASS2
		{
			LPRDOTypeRangeRange pRange = rdo::Factory<RDOTypeRangeRange>::create(PARSER->stack().pop<RDOValue>($2), PARSER->stack().pop<RDOValue>($4), RDOParserSrcInfo(@1, @5));
			ASSERT(pRange);
			pRange->checkRange();
			$$ = PARSER->stack().push(pRange);
		}
	}
	| '[' RDO_REAL_CONST RDO_dblpoint RDO_REAL_CONST error
	{
		#PASS2
		{
			PARSER->error().error(@4, "Диапазон задан неверно");
		}
	}
	| '[' RDO_REAL_CONST RDO_dblpoint RDO_INT_CONST error
	{
		#PASS2
		{
			PARSER->error().error(@4, "Диапазон задан неверно");
		}
	}
	| '[' RDO_INT_CONST RDO_dblpoint RDO_REAL_CONST error
	{
		#PASS2
		{
			PARSER->error().error(@4, "Диапазон задан неверно");
		}
	}
	| '[' RDO_INT_CONST RDO_dblpoint RDO_INT_CONST error
	{
		#PASS2
		{
			PARSER->error().error(@4, "Диапазон задан неверно");
		}
	}
	| '[' RDO_REAL_CONST RDO_dblpoint error
	{
		#PASS2
		{
			PARSER->error().error(@4, "Диапазон задан неверно");
		}
	}
	| '[' RDO_INT_CONST RDO_dblpoint error
	{
		#PASS2
		{
			PARSER->error().error(@4, "Диапазон задан неверно");
		}
	}
	| '[' error
	{
		#PASS2
		{
			PARSER->error().error(@2, "Диапазон задан неверно");
		}
	}
	;

type_declaration_enum
	: '(' param_type_enum_list ')'
	{
		#PASS2
		{
			LPRDOEnumType pEnum = PARSER->stack().pop<RDOEnumType>($2);
			ASSERT(pEnum);
			$$ = PARSER->stack().push(pEnum);
		}
	}
	| '(' param_type_enum_list error
	{
		#PASS2
		{
			PARSER->error().error(@2, "Перечисление должно заканчиваться скобкой");
		}
	}
	;

param_type_enum_list
	: RDO_IDENTIF
	{
		#PASS2
		{
			LPRDOEnumType pEnum = rdo::Factory<RDOEnumType>::create();
			ASSERT(pEnum);
			pEnum->add(PARSER->stack().pop<RDOValue>($1));
			LEXER->enumBegin();
			$$ = PARSER->stack().push(pEnum);
		}
	}
	| param_type_enum_list ',' RDO_IDENTIF
	{
		#PASS2
		{
			if (!LEXER->enumEmpty())
			{
				LPRDOEnumType pEnum = PARSER->stack().pop<RDOEnumType>($1);
				ASSERT(pEnum);
				LPRDOValue pValue = PARSER->stack().pop<RDOValue>($3);
				ASSERT(pValue);
				pEnum->add(pValue);
				$$ = PARSER->stack().push(pEnum);
			}
			else
			{
				PARSER->error().error(@3, "Ошибка в описании значений перечислимого типа");
			}
		}
	}
	| param_type_enum_list RDO_IDENTIF
	{
		#PASS2
		{
			if (!LEXER->enumEmpty())
			{
				LPRDOEnumType pEnum = PARSER->stack().pop<RDOEnumType>($1);
				ASSERT(pEnum);
				LPRDOValue pValue = PARSER->stack().pop<RDOValue>($2);
				ASSERT(pValue);
				pEnum->add(pValue);
				$$ = PARSER->stack().push(pEnum);
				PARSER->error().warning(@1, rdo::format("Пропущена запятая перед: %s", pValue->value().getIdentificator().c_str()));
			}
			else
			{
				PARSER->error().error(@2, "Ошибка в описании значений перечислимого типа");
			}
		}
	}
	| param_type_enum_list ',' RDO_INT_CONST
	{
		#PASS2
		{
			PARSER->error().error(@3, "Значение перечислимого типа не может быть цифрой");
		}
	}
	| param_type_enum_list ',' RDO_REAL_CONST
	{
		#PASS2
		{
			PARSER->error().error(@3, "Значение перечислимого типа не может быть цифрой");
		}
	}
	| param_type_enum_list RDO_INT_CONST
	{
		#PASS2
		{
			PARSER->error().error(@2, "Значение перечислимого типа не может быть цифрой");
		}
	}
	| param_type_enum_list RDO_REAL_CONST
	{
		#PASS2
		{
			PARSER->error().error(@2, "Значение перечислимого типа не может быть цифрой");
		}
	}
	| RDO_INT_CONST
	{
		#PASS2
		{
			PARSER->error().error(@1, "Значение перечислимого типа не может начинаться с цифры");
		}
	}
	| RDO_REAL_CONST
	{
		#PASS2
		{
			PARSER->error().error(@1, "Значение перечислимого типа не может начинаться с цифры");
		}
	}
	;

type_declaration_such_as
	: RDO_such_as RDO_IDENTIF '.' RDO_IDENTIF
	{
		#PASS2
		{
			tstring type  = PARSER->stack().pop<RDOValue>($2)->value().getIdentificator();
			tstring param = PARSER->stack().pop<RDOValue>($4)->value().getIdentificator();
			LPRDORTPResType pResType = PARSER->findRTPResType(type);
			if (!pResType)
			{
				PARSER->error().error(@2, rdo::format("Ссылка на неизвестный тип ресурса: %s", type.c_str()));
			}
			LPRDORTPParam pRTPParam = pResType->findRTPParam(param);
			if (!pRTPParam)
			{
				PARSER->error().error(@4, rdo::format("Ссылка на неизвестный параметр ресурса: %s.%s", type.c_str(), param.c_str()));
			}
			LPRDOParam pParam = pRTPParam.object_parent_cast<RDOParam>();
			ASSERT(pParam);
			LPRDOTypeParamSuchAs pTypeSuchAs = rdo::Factory<RDOTypeParamSuchAs>::create(pParam);
			ASSERT(pTypeSuchAs);
			$$ = PARSER->stack().push(pTypeSuchAs);
		}
	}
	| RDO_such_as RDO_IDENTIF
	{
		#PASS2
		{
			tstring constName = PARSER->stack().pop<RDOValue>($2)->value().getIdentificator();
			LPRDOFUNConstant pConstant = PARSER->findFUNConstant(constName);
			if (!pConstant)
			{
				PARSER->error().error(@2, rdo::format("Ссылка на несуществующую константу: %s", constName.c_str()));
			}
			LPRDOParam pParam = pConstant.object_parent_cast<RDOParam>();
			ASSERT(pParam);
			LPRDOTypeParamSuchAs pTypeSuchAs = rdo::Factory<RDOTypeParamSuchAs>::create(pParam);
			ASSERT(pTypeSuchAs);
			$$ = PARSER->stack().push(pTypeSuchAs);
		}
	}
	| RDO_such_as RDO_IDENTIF '.' error
	{
		#PASS2
		{
			tstring type = PARSER->stack().pop<RDOValue>($2)->value().getIdentificator();
			LPRDORTPResType pResType = PARSER->findRTPResType(type);
			if (!pResType)
			{
				PARSER->error().error(@2, rdo::format("Ссылка на неизвестный тип ресурса: %s", type.c_str()));
			}
			else
			{
				PARSER->error().error(@4, "Ошибка при указании параметра");
			}
		}
	}
	| RDO_such_as error
	{
		#PASS2
		{
			PARSER->error().error(@2, "После ключевого слова such_as необходимо указать тип и параметер ресурса для ссылки");
		}
	}
	;

type_declaration_array
	: RDO_array '<' type_declaration '>'
	{
		#PASS2
		{
			LPTypeInfo pParamType = PARSER->stack().pop<TypeInfo>($3);
			ASSERT(pParamType);
			LPRDOArrayType pArray = rdo::Factory<RDOArrayType>::create(pParamType, RDOParserSrcInfo(@1, @4));
			$$ = PARSER->stack().push(pArray);
		}
	}
	;

// --------------------------------------------------------------------------------
// -------------------- Синтаксис ресурсов
// --------------------------------------------------------------------------------
// -------------------- Описание ресурсов
// --------------------------------------------------------------------------------
rss_main
	: RDO_Resources rss_resource_list RDO_End
	| RDO_Resources rss_resource_list
	{
		#PASS2
		{
			PARSER->error().error(@2, "После описания всех ресурсов ожидается ключевое слово $End");
		}
	}
	;

rss_resource_list
	: /* empty */
	| rss_resource_list rss_resource ';'
	| rss_resource_list rss_resource error
	{
		#PASS2
		{
			PARSER->error().error(@2, rdo::format("Пропущена ';'"));
		}
	}
	;

rss_resource
	: rss_res_init '(' rss_opt_value_list ')'
	{
		#PASS2
		{
			LPRDORSSResource pResource = PARSER->stack().pop<RDORSSResource>($1);
			ASSERT(pResource);

			if (!pResource->defined())
			{
				PARSER->error().error(@3, rdo::format("Заданы не все параметры ресурса: '%s'", pResource->name().c_str()));
			}
			pResource->end();
		}
	}
	| RDO_IDENTIF '.' rss_trace '(' ')'
	{
		#PASS2
		{
			LPRDOValue pName = PARSER->stack().pop<RDOValue>($1);
			ASSERT(pName);
			LPRDORSSResource pResource = PARSER->findRSSResource(pName->value().getIdentificator());
			if (!pResource)
			{
				PARSER->error().error(@1, rdo::format("Ресурс '%s' не существует", pName->value().getIdentificator().c_str()));
			}
			pResource->setTrace($3 != 0);
		}
	}
	| error
	{
		#PASS2
		{
			PARSER->error().error(@1, rdo::format("Синтаксическая ошибка"));
		}
	}
	;

rss_res_init
	: RDO_IDENTIF '=' RDO_IDENTIF
	{
		#PASS2
		{
			LPRDOValue pName = PARSER->stack().pop<RDOValue>($1);
			LPRDOValue pType = PARSER->stack().pop<RDOValue>($3);
			ASSERT(pName);
			ASSERT(pType);

			LPRDORTPResType pResType = PARSER->findRTPResType(pType->value().getIdentificator());
			if (!pResType)
			{
				PARSER->error().error(@3, rdo::format("Неизвестный тип ресурса: %s", pType->value().getIdentificator().c_str()));
			}
			LPRDORSSResource pResourceExist = PARSER->findRSSResource(pName->value().getIdentificator());
			if (pResourceExist)
			{
				PARSER->error().push_only(@1, rdo::format("Ресурс '%s' уже существует",
					pName->value().getIdentificator().c_str()));
				PARSER->error().push_only(pResourceExist->src_info(), "См. первое определение");
				PARSER->error().push_done();
			}
			LPRDORTPResType pNameExist = PARSER->findRTPResType(pName->value().getIdentificator());
			if (pNameExist)
			{
				PARSER->error().push_only(@1, rdo::format("Недопустимое имя ресурса: '%s'. Данное имя уже зарезервировано ",
					pName->value().getIdentificator().c_str()));
				PARSER->error().push_only(pNameExist->src_info(), "См. первое определение");
				PARSER->error().push_done();
			}
			LPRDORSSResource pResource = pResType->createRes(PARSER, pName->src_info());
			$$ = PARSER->stack().push(pResource);
		}
	} 
	;

rss_trace
	: RDO_trace
	{
		#PASS2
		{
			$$ = 1;
		}
	}
	| RDO_no_trace
	{
		#PASS2
		{
			$$ = 0;
		}
	}
	;

rss_opt_value_list
	: /* empty */
	| rss_value_list
	;

rss_value_list
	: rss_value
	| rss_value_list ',' rss_value
	;

rss_value
	: '*'
	{
		#PASS2
		{
			PARSER->getLastRSSResource()->addParam(rdo::Factory<RDOValue>::create(RDOParserSrcInfo(@1, "*")));
		}
	}
	| '#'
	{
		#PASS2
		{
			PARSER->getLastRSSResource()->addParam(rdo::Factory<RDOValue>::create(RDOParserSrcInfo(@1, "#")));
		}
	}
	| RDO_INT_CONST
	{
		#PASS2
		{
			PARSER->getLastRSSResource()->addParam(PARSER->stack().pop<RDOValue>($1));
		}
	}
	| RDO_REAL_CONST
	{
		#PASS2
		{
			PARSER->getLastRSSResource()->addParam(PARSER->stack().pop<RDOValue>($1));
		}
	}
	| RDO_BOOL_CONST
	{
		#PASS2
		{
			PARSER->getLastRSSResource()->addParam(PARSER->stack().pop<RDOValue>($1));
		}
	}
	| RDO_STRING_CONST
	{
		#PASS2
		{
			PARSER->getLastRSSResource()->addParam(PARSER->stack().pop<RDOValue>($1));
		}
	}
	| RDO_IDENTIF
	{
		#PASS2
		{
			PARSER->getLastRSSResource()->addParam(PARSER->stack().pop<RDOValue>($1));
		}
	}
	| param_array_value
	{
		#PASS2
		{
			PARSER->getLastRSSResource()->addParam(PARSER->stack().pop<RDOValue>($1));
		}
	}
	| error
	{
		#PASS2
		{
			PARSER->error().error(@1, rdo::format("Неправильное значение параметра: %s", LEXER->YYText()));
		}
	}
	;

// --------------------------------------------------------------------------------
// -------------------- Синтаксис событий (паттернов?)
// --------------------------------------------------------------------------------
// -------------------- Описание событий (паттернов?)
// --------------------------------------------------------------------------------
pat_main
	: pat_pattern
	{
		#PASS1
		{
			UNUSED(@1);
		}

		#PASS2
		{
			LPRDOPATPattern pPattern = PARSER->stack().pop<RDOPATPattern>($1);
			ASSERT(pPattern);
		}
	}
	;

pat_header
	: RDO_Pattern RDO_IDENTIF_COLON RDO_event pat_trace
	{
		#PASS1
		{
			LPRDOValue pName = PARSER->stack().pop<RDOValue>($2);
			ASSERT(pName);
			LPRDOEvent pEvent = rdo::Factory<RDOEvent>::create(pName->value().getIdentificator(), true);
			ASSERT(pEvent);
			PARSER->insertEvent(pEvent);
		}

		#PASS2
		{
			LPRDOValue pName = PARSER->stack().pop<RDOValue>($2);
			ASSERT(pName);
			LPRDOPATPattern pPattern = rdo::Factory<RDOPatternEvent>::create(pName->src_info(), $4 != 0);
			ASSERT(pPattern);
			$$ = PARSER->stack().push(pPattern);
		}
	}
	| RDO_Pattern RDO_IDENTIF_COLON RDO_operation pat_trace 
	{
		#PASS2
		{
			LPRDOValue pName = PARSER->stack().pop<RDOValue>($2);
			ASSERT(pName);
			LPRDOPATPattern pPattern = rdo::Factory<RDOPatternOperation>::create(pName->src_info(), $4 != 0);
			ASSERT(pPattern);
			$$ = PARSER->stack().push(pPattern);
		}
	}
	| RDO_Pattern RDO_IDENTIF_COLON RDO_rule pat_trace
	{
		#PASS2
		{
			LPRDOValue pName = PARSER->stack().pop<RDOValue>($2);
			ASSERT(pName);
			LPRDOPATPattern pPattern = rdo::Factory<RDOPatternRule>::create(pName->src_info(), $4 != 0);
			ASSERT(pPattern);
			$$ = PARSER->stack().push(pPattern);
		}
	}
	| RDO_Pattern RDO_IDENTIF_COLON RDO_keyboard pat_trace
	{
		#PASS2
		{
			LPRDOValue pName = PARSER->stack().pop<RDOValue>($2);
			ASSERT(pName);
			LPRDOPATPattern pPattern = rdo::Factory<RDOPatternKeyboard>::create(pName->src_info(), $4 != 0);
			ASSERT(pPattern);
			$$ = PARSER->stack().push(pPattern);
		}
	}
	| RDO_Pattern error
	{
		#PASS2
		{
			PARSER->error().error(@2, "Ожидается имя образца");
		}
	}
	| RDO_Pattern RDO_IDENTIF_COLON error
	{
		#PASS2
		{
			PARSER->error().error(@2, @3, "Ожидается тип образца");
		}
	}
	;

pat_trace
	: /* empty */
	{
		#PASS2
		{
			$$ = 0; 
		}
	}
	| RDO_trace	
	{
		#PASS2
		{
			$$ = 1; 
		}
	}
	| RDO_no_trace
	{
		#PASS2
		{
			$$ = 0; 
		}
 	}
	;

pat_params_begin
	: pat_header RDO_Parameters
	{
		#PASS2
		{
			LPRDOPATPattern pPattern = PARSER->stack().pop<RDOPATPattern>($1);
			ASSERT(pPattern);
			$$ = PARSER->stack().push(pPattern);
		}
	}
	;

pat_params
	: pat_params_begin RDO_IDENTIF_COLON type_declaration param_value_default
	{
		#PASS2
		{
			LPRDOPATPattern pPattern   = PARSER->stack().pop<RDOPATPattern>($1);
			LPRDOValue      pParamName = PARSER->stack().pop<RDOValue>($2);
			LPTypeInfo      pType      = PARSER->stack().pop<TypeInfo>($3);
			ASSERT(pPattern  );
			ASSERT(pParamName);
			ASSERT(pType     );

			LPRDOParam pParam = rdo::Factory<RDOParam>::create(pParamName->src_info(), pType, PARSER->stack().pop<RDOValue>($4));
			ASSERT(pParam);
			pPattern->add(pParam);
			$$ = PARSER->stack().push(pPattern);
		}
	}
	| pat_params RDO_IDENTIF_COLON type_declaration param_value_default
	{
		#PASS2
		{
			LPRDOPATPattern pPattern   = PARSER->stack().pop<RDOPATPattern>($1);
			LPRDOValue      pParamName = PARSER->stack().pop<RDOValue>($2);
			LPTypeInfo      pType      = PARSER->stack().pop<TypeInfo>($3);
			ASSERT(pPattern  );
			ASSERT(pParamName);
			ASSERT(pType     );

			LPRDOParam pParam = rdo::Factory<RDOParam>::create(pParamName->src_info(), pType, PARSER->stack().pop<RDOValue>($4));
			ASSERT(pParam);
			pPattern->add(pParam);
			$$ = PARSER->stack().push(pPattern);
		}
	}
	| pat_params_begin error
	{
		#PASS2
		{
			if (@1.m_last_line != @2.m_last_line)
			{
				PARSER->error().error(@2, "Ожидается имя параметра образца");
			}
			else
			{
				PARSER->error().error(@2, rdo::format("Ожидается имя параметра образца, найдено: %s", LEXER->YYText()));
			}
		}
	}
	| pat_params_begin RDO_IDENTIF error
	{
		#PASS2
		{
			if (@2.m_last_line != @3.m_last_line)
			{
				PARSER->error().error(@2, @3, "Ожидается двоеточие");
			}
			else
			{
				PARSER->error().error(@2, @3, rdo::format("Ожидается двоеточие, найдено: %s", LEXER->YYText()));
			}
		}
	}
	| pat_params_begin RDO_IDENTIF_COLON error
	{
		#PASS2
		{
			if (@2.m_last_line != @3.m_last_line)
			{
				PARSER->error().error(@2, @3, "Ожидается тип параметра образца");
			}
			else
			{
				PARSER->error().error(@2, @3, rdo::format("Ожидается тип параметра образца, найдено: %s", LEXER->YYText()));
			}
		}
	}
	| pat_params error
	{
		#PASS2
		{
			if (@1.m_last_line != @2.m_last_line)
			{
				PARSER->error().error(@2, "Ожидается имя параметра образца");
			}
			else
			{
				PARSER->error().error(@2, rdo::format("Ожидается имя параметра образца, найдено: %s", LEXER->YYText()));
			}
		}
	}
	| pat_params RDO_IDENTIF error
	{
		#PASS2
		{
			if (@2.m_last_line != @3.m_last_line)
			{
				PARSER->error().error(@2, @3, "Ожидается двоеточие");
			}
						else
			{
				PARSER->error().error(@2, @3, rdo::format("Ожидается двоеточие, найдено: %s", LEXER->YYText()));
			}
		}
	}
		| pat_params RDO_IDENTIF_COLON error
	{
		#PASS2
		{
			if (@2.m_last_line != @3.m_last_line)
			{
				PARSER->error().error(@2, @3, "Ожидается тип параметра образца");
			}
			else
			{
				PARSER->error().error(@2, @3, rdo::format("Ожидается тип параметра образца, найдено: %s", LEXER->YYText()));
			}
		}
	}
	;

pat_params_end
	: pat_params RDO_Relevant_resources
	{
		#PASS2
		{
			$$ = $1;
		}
	}
	| pat_header RDO_Relevant_resources
	{
		#PASS2
		{	
			$$ = $1;
		}
	}
	| pat_header error
	{
		#PASS2
		{
			PARSER->error().error(@2, "Ожидается ключевое слово $Relevant_resources");
		}
	}
	;

pat_rel_res
	: pat_params_end RDO_IDENTIF_COLON RDO_IDENTIF pat_conv pat_conv
	{
		#PASS2
		{
			// проверено для ie,event,rule,opr,key
			LPRDOPATPattern pPattern = PARSER->stack().pop<RDOPATPattern>($1);
			ASSERT(pPattern);
			switch (pPattern->getType())
			{
				case RDOPATPattern::PT_Operation:
				case RDOPATPattern::PT_Keyboard :
				{
					LPRDOValue pRelName  = PARSER->stack().pop<RDOValue>($2);
					LPRDOValue pTypeName = PARSER->stack().pop<RDOValue>($3);
					ASSERT(pRelName );
					ASSERT(pTypeName);

					pPattern.object_static_cast<RDOPatternOperation>()->addRelRes(pRelName->src_info(), pTypeName->src_info(), (rdo::runtime::RDOResource::ConvertStatus)$4, (rdo::runtime::RDOResource::ConvertStatus)$5, @4, @5);
					break;
				}
				case RDOPATPattern::PT_Event:
				{
					PARSER->error().error(@5, "У события нет события конца, а значит и второго статуса конвертора");
					break;
				}
				case RDOPATPattern::PT_Rule:
				{
					PARSER->error().error(@5, "У продукционного правила нет события конца, а значит и второго статуса конвертора");
					break;
				}
			}
			$$ = PARSER->stack().push(pPattern);
		}
	}
	| pat_rel_res RDO_IDENTIF_COLON RDO_IDENTIF pat_conv pat_conv
	{
		#PASS2
		{
			// проверено для ie,event,rule,opr,key
			LPRDOPATPattern pPattern = PARSER->stack().pop<RDOPATPattern>($1);
			ASSERT(pPattern);
			switch (pPattern->getType())
			{
				case RDOPATPattern::PT_Operation:
				case RDOPATPattern::PT_Keyboard :
				{
					LPRDOValue pRelName  = PARSER->stack().pop<RDOValue>($2);
					LPRDOValue pTypeName = PARSER->stack().pop<RDOValue>($3);
					ASSERT(pRelName );
					ASSERT(pTypeName);

					pPattern.object_static_cast<RDOPatternOperation>()->addRelRes(pRelName->src_info(), pTypeName->src_info(), (rdo::runtime::RDOResource::ConvertStatus)$4, (rdo::runtime::RDOResource::ConvertStatus)$5, @4, @5);
					break;
				}
				case RDOPATPattern::PT_Event:
				{
					PARSER->error().error(@5, "У события нет события конца, а значит и второго статуса конвертора");
					break;
				}
				case RDOPATPattern::PT_Rule:
				{
					PARSER->error().error(@5, "У продукционного правила нет события конца, а значит и второго статуса конвертора");
					break;
				}
			}
			$$ = PARSER->stack().push(pPattern);
		}
	}
	| pat_params_end RDO_IDENTIF_COLON RDO_IDENTIF pat_conv
	{
		#PASS2
		{
			// проверено для ie,event,rule,opr,key
			LPRDOPATPattern pPattern = PARSER->stack().pop<RDOPATPattern>($1);
			ASSERT(pPattern);
			switch (pPattern->getType())
			{
				case RDOPATPattern::PT_Operation:
				case RDOPATPattern::PT_Keyboard :
				{
					PARSER->error().error(@4, rdo::format("Помимо статуса конвертора начала (%s), ожидается статус конвертора конца, потому что у операции есть событие конца", RDOPATPattern::StatusToStr((rdo::runtime::RDOResource::ConvertStatus)$4).c_str()));
					break;
				}
				case RDOPATPattern::PT_Event: 
				case RDOPATPattern::PT_Rule :
				{
					LPRDOValue pRelName  = PARSER->stack().pop<RDOValue>($2);
					LPRDOValue pTypeName = PARSER->stack().pop<RDOValue>($3);
					ASSERT(pRelName );
					ASSERT(pTypeName);

					pPattern->addRelRes(pRelName->src_info(), pTypeName->src_info(), (rdo::runtime::RDOResource::ConvertStatus)$4, @4);
					break;
				}
			}
			$$ = PARSER->stack().push(pPattern);
		}
	}
	| pat_rel_res RDO_IDENTIF_COLON RDO_IDENTIF pat_conv
	{
		#PASS2
		{
			// проверено для ie,event,rule,opr,key
			LPRDOPATPattern pPattern = PARSER->stack().pop<RDOPATPattern>($1);
			ASSERT(pPattern);
			switch (pPattern->getType())
			{
				case RDOPATPattern::PT_Operation:
				case RDOPATPattern::PT_Keyboard :
				{
					PARSER->error().error(@4, rdo::format("Помимо статуса конвертора начала (%s), ожидается статус конвертора конца, потому что у операции есть событие конца", RDOPATPattern::StatusToStr((rdo::runtime::RDOResource::ConvertStatus)$4).c_str()));
					break;
				}
				case RDOPATPattern::PT_Event: 
				case RDOPATPattern::PT_Rule :
				{
					LPRDOValue pRelName  = PARSER->stack().pop<RDOValue>($2);
					LPRDOValue pTypeName = PARSER->stack().pop<RDOValue>($3);
					ASSERT(pRelName );
					ASSERT(pTypeName);

					pPattern->addRelRes(pRelName->src_info(), pTypeName->src_info(), (rdo::runtime::RDOResource::ConvertStatus)$4, @4);
					break;
				}
			}
			$$ = PARSER->stack().push(pPattern);
		}
	}
	| pat_params_end RDO_IDENTIF_COLON RDO_IDENTIF_NoChange pat_conv
	{
		#PASS2
		{
			// проверено для ie,event,rule,opr,key
			LPRDOPATPattern pPattern = PARSER->stack().pop<RDOPATPattern>($1);
			ASSERT(pPattern);
			switch (pPattern->getType())
			{
				case RDOPATPattern::PT_Operation:
				case RDOPATPattern::PT_Keyboard :
				{
					LPRDOValue pRelName  = PARSER->stack().pop<RDOValue>($2);
					LPRDOValue pTypeName = PARSER->stack().pop<RDOValue>($3);
					ASSERT(pRelName );
					ASSERT(pTypeName);

					YYLTYPE convertor_pos = @3;
					convertor_pos.m_first_line = convertor_pos.m_last_line;
					convertor_pos.m_first_pos  = convertor_pos.m_last_pos  - RDOPATPattern::StatusToStr(rdo::runtime::RDOResource::CS_NoChange).length();
					convertor_pos.m_first_seek = convertor_pos.m_last_seek - RDOPATPattern::StatusToStr(rdo::runtime::RDOResource::CS_NoChange).length();
					pPattern.object_static_cast<RDOPatternOperation>()->addRelRes(pRelName->src_info(), pTypeName->src_info(), rdo::runtime::RDOResource::CS_NoChange, (rdo::runtime::RDOResource::ConvertStatus)$4, convertor_pos, @4);
					break;
				}
				case RDOPATPattern::PT_Event:
				{
					PARSER->error().error(@4, "У события нет события конца, а значит и второго статуса конвертора");
					break;
				}
				case RDOPATPattern::PT_Rule:
				{
					PARSER->error().error(@4, "У продукционного правила нет события конца, а значит и второго статуса конвертора");
					break;
				}
			}
			$$ = PARSER->stack().push(pPattern);
		}
	}
	| pat_rel_res RDO_IDENTIF_COLON RDO_IDENTIF_NoChange pat_conv
	{
		#PASS2
		{
			// проверено для ie,event,rule,opr,key
			LPRDOPATPattern pPattern = PARSER->stack().pop<RDOPATPattern>($1);
			ASSERT(pPattern);
			switch (pPattern->getType())
			{
				case RDOPATPattern::PT_Operation:
				case RDOPATPattern::PT_Keyboard :
				{
					LPRDOValue pRelName  = PARSER->stack().pop<RDOValue>($2);
					LPRDOValue pTypeName = PARSER->stack().pop<RDOValue>($3);
					ASSERT(pRelName );
					ASSERT(pTypeName);

					YYLTYPE convertor_pos = @3;
					convertor_pos.m_first_line = convertor_pos.m_last_line;
					convertor_pos.m_first_pos  = convertor_pos.m_last_pos  - RDOPATPattern::StatusToStr(rdo::runtime::RDOResource::CS_NoChange).length();
					convertor_pos.m_first_seek = convertor_pos.m_last_seek - RDOPATPattern::StatusToStr(rdo::runtime::RDOResource::CS_NoChange).length();
					pPattern.object_static_cast<RDOPatternOperation>()->addRelRes(pRelName->src_info(), pTypeName->src_info(), rdo::runtime::RDOResource::CS_NoChange, (rdo::runtime::RDOResource::ConvertStatus)$4, convertor_pos, @4);
					break;
				}
				case RDOPATPattern::PT_Event:
				{
					PARSER->error().error(@4, "У события нет события конца, а значит и второго статуса конвертора");
					break;
				}
				case RDOPATPattern::PT_Rule:
				{
					PARSER->error().error(@4, "У продукционного правила нет события конца, а значит и второго статуса конвертора");
					break;
				}
			}
			$$ = PARSER->stack().push(pPattern);
		}
	}
	| pat_params_end RDO_IDENTIF_COLON RDO_IDENTIF_NoChange_NoChange
	{
		#PASS2
		{
			// проверено для ie,event,rule,opr,key
			LPRDOPATPattern pPattern = PARSER->stack().pop<RDOPATPattern>($1);
			ASSERT(pPattern);
			switch (pPattern->getType())
			{
				case RDOPATPattern::PT_Operation:
				case RDOPATPattern::PT_Keyboard :
				{
					LPRDOValue pRelName  = PARSER->stack().pop<RDOValue>($2);
					LPRDOValue pTypeName = PARSER->stack().pop<RDOValue>($3);
					ASSERT(pRelName );
					ASSERT(pTypeName);

					YYLTYPE convertor_begin_pos = @3;
					tstring str = boost::algorithm::to_lower_copy(tstring(LEXER->YYText()));
					tstring::size_type first_nochange = str.find("nochange");
					ruint i = 0;
					for (;;)
					{
						if (str[i] == '\n')
						{
							convertor_begin_pos.m_first_line++;
							convertor_begin_pos.m_first_seek++;
							convertor_begin_pos.m_first_pos = 0;
						}
						else if (str[i] != '\r')
						{
							convertor_begin_pos.m_first_pos++;
							convertor_begin_pos.m_first_seek++;
						}
						i++;
						if (i == first_nochange)
							break;
					}
					convertor_begin_pos.m_last_line = convertor_begin_pos.m_first_line;
					convertor_begin_pos.m_last_pos  = convertor_begin_pos.m_first_pos  + RDOPATPattern::StatusToStr(rdo::runtime::RDOResource::CS_NoChange).length();
					convertor_begin_pos.m_last_seek = convertor_begin_pos.m_first_seek + RDOPATPattern::StatusToStr(rdo::runtime::RDOResource::CS_NoChange).length();
					YYLTYPE convertor_end_pos = @3;
					convertor_end_pos.m_first_line = convertor_end_pos.m_last_line;
					convertor_end_pos.m_first_pos  = convertor_end_pos.m_last_pos  - RDOPATPattern::StatusToStr(rdo::runtime::RDOResource::CS_NoChange).length();
					convertor_end_pos.m_first_seek = convertor_end_pos.m_last_seek - RDOPATPattern::StatusToStr(rdo::runtime::RDOResource::CS_NoChange).length();
					pPattern.object_static_cast<RDOPatternOperation>()->addRelRes(pRelName->src_info(), pTypeName->src_info(), rdo::runtime::RDOResource::CS_NoChange, rdo::runtime::RDOResource::CS_NoChange, convertor_begin_pos, convertor_end_pos);
					break;
				}
				case RDOPATPattern::PT_Event:
				{
					PARSER->error().error(@3, "У события нет события конца, а значит и второго статуса конвертора");
					break;
				}
				case RDOPATPattern::PT_Rule:
				{
					PARSER->error().error(@3, "У продукционного правила нет события конца, а значит и второго статуса конвертора");
					break;
				}
			}
			$$ = PARSER->stack().push(pPattern);
		}
	}
	| pat_rel_res RDO_IDENTIF_COLON RDO_IDENTIF_NoChange_NoChange
	{
		#PASS2
		{
			// проверено для ie,event,rule,opr,key
			LPRDOPATPattern pPattern = PARSER->stack().pop<RDOPATPattern>($1);
			ASSERT(pPattern);
			switch (pPattern->getType())
			{
				case RDOPATPattern::PT_Operation:
				case RDOPATPattern::PT_Keyboard :
				{
					LPRDOValue pRelName  = PARSER->stack().pop<RDOValue>($2);
					LPRDOValue pTypeName = PARSER->stack().pop<RDOValue>($3);
					ASSERT(pRelName );
					ASSERT(pTypeName);

					YYLTYPE convertor_begin_pos = @3;
					tstring str = boost::algorithm::to_lower_copy(tstring(LEXER->YYText()));
					tstring::size_type first_nochange = str.find("nochange");
					ruint i = 0;
					for (;;)
					{
						if (str[i] == '\n')
						{
							convertor_begin_pos.m_first_line++;
							convertor_begin_pos.m_first_seek++;
							convertor_begin_pos.m_first_pos = 0;
						}
						else if (str[i] != '\r')
						{
							convertor_begin_pos.m_first_pos++;
							convertor_begin_pos.m_first_seek++;
						}
						i++;
						if (i == first_nochange)
							break;
					}
					convertor_begin_pos.m_last_line = convertor_begin_pos.m_first_line;
					convertor_begin_pos.m_last_pos  = convertor_begin_pos.m_first_pos  + RDOPATPattern::StatusToStr(rdo::runtime::RDOResource::CS_NoChange).length();
					convertor_begin_pos.m_last_seek = convertor_begin_pos.m_first_seek + RDOPATPattern::StatusToStr(rdo::runtime::RDOResource::CS_NoChange).length();
					YYLTYPE convertor_end_pos = @3;
					convertor_end_pos.m_first_line = convertor_end_pos.m_last_line;
					convertor_end_pos.m_first_pos  = convertor_end_pos.m_last_pos  - RDOPATPattern::StatusToStr(rdo::runtime::RDOResource::CS_NoChange).length();
					convertor_end_pos.m_first_seek = convertor_end_pos.m_last_seek - RDOPATPattern::StatusToStr(rdo::runtime::RDOResource::CS_NoChange).length();
					pPattern.object_static_cast<RDOPatternOperation>()->addRelRes(pRelName->src_info(), pTypeName->src_info(), rdo::runtime::RDOResource::CS_NoChange, rdo::runtime::RDOResource::CS_NoChange, convertor_begin_pos, convertor_end_pos);
					break;
				}
				case RDOPATPattern::PT_Event:
				{
					PARSER->error().error(@3, "У события нет события конца, а значит и второго статуса конвертора");
					break;
				}
				case RDOPATPattern::PT_Rule:
				{
					PARSER->error().error(@3, "У продукционного правила нет события конца, а значит и второго статуса конвертора");
					break;
				}
			}
			$$ = PARSER->stack().push(pPattern);
		}
	}
	| pat_params_end RDO_IDENTIF_COLON RDO_IDENTIF_NoChange
	{
		#PASS2
		{
			// проверено для ie,rule,opr,key
			LPRDOPATPattern pPattern = PARSER->stack().pop<RDOPATPattern>($1);
			ASSERT(pPattern);
			switch (pPattern->getType())
			{
				case RDOPATPattern::PT_Operation:
				case RDOPATPattern::PT_Keyboard :
				{
					PARSER->error().error(@3, rdo::format("Помимо статуса конвертора начала (%s), ожидается статус конвертора конца, потому что у операции есть событие конца", RDOPATPattern::StatusToStr(rdo::runtime::RDOResource::CS_NoChange).c_str()));
					break;
				}
				case RDOPATPattern::PT_Event: 
				case RDOPATPattern::PT_Rule :
				{
					LPRDOValue pRelName  = PARSER->stack().pop<RDOValue>($2);
					LPRDOValue pTypeName = PARSER->stack().pop<RDOValue>($3);
					ASSERT(pRelName );
					ASSERT(pTypeName);

					YYLTYPE convertor_pos = @3;
					convertor_pos.m_first_line = convertor_pos.m_last_line;
					convertor_pos.m_first_pos  = convertor_pos.m_last_pos  - RDOPATPattern::StatusToStr(rdo::runtime::RDOResource::CS_NoChange).length();
					convertor_pos.m_first_seek = convertor_pos.m_last_seek - RDOPATPattern::StatusToStr(rdo::runtime::RDOResource::CS_NoChange).length();
					pPattern->addRelRes(pRelName->src_info(), pTypeName->src_info(), rdo::runtime::RDOResource::CS_NoChange, convertor_pos);
					break;
				}
			}
			$$ = PARSER->stack().push(pPattern);
		}
	}
	| pat_rel_res RDO_IDENTIF_COLON RDO_IDENTIF_NoChange
	{
		#PASS2
		{
			// проверено для ie,event,rule,opr,key
			LPRDOPATPattern pPattern = PARSER->stack().pop<RDOPATPattern>($1);
			ASSERT(pPattern);
			switch (pPattern->getType())
			{
				case RDOPATPattern::PT_Operation:
				case RDOPATPattern::PT_Keyboard :
				{
					PARSER->error().error(@3, rdo::format("Помимо статуса конвертора начала (%s), ожидается статус конвертора конца, потому что у операции есть событие конца", RDOPATPattern::StatusToStr(rdo::runtime::RDOResource::CS_NoChange).c_str()));
					break;
				}
				case RDOPATPattern::PT_Event: 
				case RDOPATPattern::PT_Rule :
				{
					LPRDOValue pRelName  = PARSER->stack().pop<RDOValue>($2);
					LPRDOValue pTypeName = PARSER->stack().pop<RDOValue>($3);
					ASSERT(pRelName );
					ASSERT(pTypeName);

					YYLTYPE convertor_pos = @3;
					convertor_pos.m_first_line = convertor_pos.m_last_line;
					convertor_pos.m_first_pos  = convertor_pos.m_last_pos  - RDOPATPattern::StatusToStr(rdo::runtime::RDOResource::CS_NoChange).length();
					convertor_pos.m_first_seek = convertor_pos.m_last_seek - RDOPATPattern::StatusToStr(rdo::runtime::RDOResource::CS_NoChange).length();
					pPattern->addRelRes(pRelName->src_info(), pTypeName->src_info(), rdo::runtime::RDOResource::CS_NoChange, convertor_pos);
					break;
				}
			}
			$$ = PARSER->stack().push(pPattern);
		}
	}
	| pat_params_end RDO_IDENTIF_COLON RDO_IDENTIF RDO_IDENTIF_NoChange
	{
		#PASS2
		{
			// проверено для ie,rule,opr,key
			LPRDOPATPattern pPattern = PARSER->stack().pop<RDOPATPattern>($1);
			ASSERT(pPattern);
			switch (pPattern->getType())
			{
				case RDOPATPattern::PT_Operation:
				case RDOPATPattern::PT_Keyboard :
				{
					LPRDOValue pRelName  = PARSER->stack().pop<RDOValue>($2);
					LPRDOValue pTypeName = PARSER->stack().pop<RDOValue>($3);
					ASSERT(pRelName );
					ASSERT(pTypeName);

					tstring convert_begin = PARSER->stack().pop<RDOValue>($4)->value().getIdentificator();
					YYLTYPE convertor_begin_pos = @4;
					convertor_begin_pos.m_last_line = convertor_begin_pos.m_first_line;
					convertor_begin_pos.m_last_pos  = convertor_begin_pos.m_first_pos  + convert_begin.length();
					convertor_begin_pos.m_last_seek = convertor_begin_pos.m_first_seek + convert_begin.length();
					YYLTYPE convertor_end_pos = @4;
					convertor_end_pos.m_first_line = convertor_end_pos.m_last_line;
					convertor_end_pos.m_first_pos  = convertor_end_pos.m_last_pos  - RDOPATPattern::StatusToStr(rdo::runtime::RDOResource::CS_NoChange).length();
					convertor_end_pos.m_first_seek = convertor_end_pos.m_last_seek - RDOPATPattern::StatusToStr(rdo::runtime::RDOResource::CS_NoChange).length();
					pPattern.object_static_cast<RDOPatternOperation>()->addRelRes(pRelName->src_info(), pTypeName->src_info(), pPattern->StrToStatus(convert_begin, convertor_begin_pos), rdo::runtime::RDOResource::CS_NoChange, convertor_begin_pos, convertor_end_pos);
					break;
				}
				case RDOPATPattern::PT_Event:
				{
					PARSER->error().error(@4, "У события нет события конца, а значит и второго статуса конвертора");
					break;
				}
				case RDOPATPattern::PT_Rule:
				{
					PARSER->error().error(@4, "У продукционного правила нет события конца, а значит и второго статуса конвертора");
					break;
				}
			}
			$$ = PARSER->stack().push(pPattern);
		}
	}
	| pat_rel_res RDO_IDENTIF_COLON RDO_IDENTIF RDO_IDENTIF_NoChange
	{
		#PASS2
		{
			// проверено для ie,event,rule,opr,key
			LPRDOPATPattern pPattern = PARSER->stack().pop<RDOPATPattern>($1);
			ASSERT(pPattern);
			switch (pPattern->getType())
			{
				case RDOPATPattern::PT_Operation:
				case RDOPATPattern::PT_Keyboard :
				{
					LPRDOValue pRelName  = PARSER->stack().pop<RDOValue>($2);
					LPRDOValue pTypeName = PARSER->stack().pop<RDOValue>($3);
					ASSERT(pRelName );
					ASSERT(pTypeName);

					tstring convert_begin = PARSER->stack().pop<RDOValue>($4)->value().getIdentificator();
					YYLTYPE convertor_begin_pos = @4;
					convertor_begin_pos.m_last_line = convertor_begin_pos.m_first_line;
					convertor_begin_pos.m_last_pos  = convertor_begin_pos.m_first_pos  + convert_begin.length();
					convertor_begin_pos.m_last_seek = convertor_begin_pos.m_first_seek + convert_begin.length();
					YYLTYPE convertor_end_pos = @4;
					convertor_end_pos.m_first_line = convertor_end_pos.m_last_line;
					convertor_end_pos.m_first_pos  = convertor_end_pos.m_last_pos  - RDOPATPattern::StatusToStr(rdo::runtime::RDOResource::CS_NoChange).length();
					convertor_end_pos.m_first_seek = convertor_end_pos.m_last_seek - RDOPATPattern::StatusToStr(rdo::runtime::RDOResource::CS_NoChange).length();
					pPattern.object_static_cast<RDOPatternOperation>()->addRelRes(pRelName->src_info(), pTypeName->src_info(), pPattern->StrToStatus(convert_begin, convertor_begin_pos), rdo::runtime::RDOResource::CS_NoChange, convertor_begin_pos, convertor_end_pos);
					break;
				}
				case RDOPATPattern::PT_Event:
				{
					PARSER->error().error(@4, "У события нет события конца, а значит и второго статуса конвертора");
					break;
				}
				case RDOPATPattern::PT_Rule:
				{
					PARSER->error().error(@4, "У продукционного правила нет события конца, а значит и второго статуса конвертора");
					break;
				}
			}
			$$ = PARSER->stack().push(pPattern);
		}
	}
	| pat_params_end error
	{
		#PASS2
		{
			PARSER->error().error(@2, "Ошибка в описании релевантных ресурсов");
		}
	}
	| pat_rel_res error
	{
		#PASS2
		{
			PARSER->error().error(@2, "Ошибка в описании релевантных ресурсов");
		}
	}
	| pat_params_end RDO_IDENTIF_COLON error
	{
		#PASS2
		{
			PARSER->error().error(@2, @3, "Ожидается описатель (имя типа или ресурса)");
		}
	}
	| pat_rel_res RDO_IDENTIF_COLON error
	{
		#PASS2
		{
			PARSER->error().error(@2, @3, "Ожидается описатель (имя типа или ресурса)");
		}
	}
	| pat_params_end RDO_IDENTIF_COLON RDO_IDENTIF error
	{
		#PASS2
		{
			if (PARSER->getLastPATPattern()->isHaveConvertEnd())
			{
				PARSER->error().error(@3, @4, "Ожидается статус конвертора начала");
			}
			else
			{
				PARSER->error().error(@3, @4, "Ожидается статус конвертора");
			}
		}
	}
	| pat_rel_res RDO_IDENTIF_COLON RDO_IDENTIF error
	{
		#PASS2
		{
			if (PARSER->getLastPATPattern()->isHaveConvertEnd())
			{
				PARSER->error().error(@3, @4, "Ожидается статус конвертора начала");
			}
			else
			{
				PARSER->error().error(@3, @4, "Ожидается статус конвертора");
			}
		}
	}
	| pat_params_end RDO_IDENTIF_COLON RDO_IDENTIF pat_conv error
	{
		#PASS2
		{
			switch (PARSER->getLastPATPattern()->getType())
			{
				case RDOPATPattern::PT_Rule:
				{
					PARSER->error().error(@5, "Ожидается способ выбора (first/with_min/with_max) или $Body");
					break;
				}
				case RDOPATPattern::PT_Event:
				{
					PARSER->error().error(@5, "Ожидается способ выбора (first/with_min/with_max) или $Body");
					break;
				}
				case RDOPATPattern::PT_Operation:
				case RDOPATPattern::PT_Keyboard :
				{
					PARSER->error().error(@4, @5, rdo::format("Ожидается статус конвертора конца, найдено: %s", LEXER->YYText()));
					break;
				}
			}
		}
	}
	| pat_rel_res RDO_IDENTIF_COLON RDO_IDENTIF pat_conv error
	{
		#PASS2
		{
			switch (PARSER->getLastPATPattern()->getType())
			{
				case RDOPATPattern::PT_Rule:
				{
					PARSER->error().error(@5, "Ожидается способ выбора (first/with_min/with_max) или $Body");
					break;
				}
				case RDOPATPattern::PT_Event:
				{
					PARSER->error().error(@5, "Ожидается способ выбора (first/with_min/with_max) или $Body");
					break;
				}
				case RDOPATPattern::PT_Operation:
				case RDOPATPattern::PT_Keyboard :
				{
					PARSER->error().error(@4, @5, rdo::format("Ожидается статус конвертора конца, найдено: %s", LEXER->YYText()));
					break;
				}
			}
		}
	}
	| pat_params_end RDO_IDENTIF_COLON RDO_IDENTIF_NoChange error
	{
		#PASS2
		{
			switch (PARSER->getLastPATPattern()->getType())
			{
				case RDOPATPattern::PT_Rule:
				{
					PARSER->error().error(@4, "Ожидается способ выбора (first/with_min/with_max) или $Body");
					break;
				}
				case RDOPATPattern::PT_Event:
				{
					PARSER->error().error(@4, "Ожидается способ выбора (first/with_min/with_max) или $Body");
					break;
				}
				case RDOPATPattern::PT_Operation:
				case RDOPATPattern::PT_Keyboard :
				{
					PARSER->error().error(@3, @4, rdo::format("Ожидается статус конвертора конца, найдено: %s", LEXER->YYText()));
					break;
				}
			}
		}
	}
	| pat_rel_res RDO_IDENTIF_COLON RDO_IDENTIF_NoChange error
	{
		#PASS2
		{
			switch (PARSER->getLastPATPattern()->getType())
			{
				case RDOPATPattern::PT_Rule:
				{
					PARSER->error().error(@4, "Ожидается способ выбора (first/with_min/with_max) или $Body");
					break;
				}
				case RDOPATPattern::PT_Event:
				{
					PARSER->error().error(@4, "Ожидается способ выбора (first/with_min/with_max) или $Body");
					break;
				}
				case RDOPATPattern::PT_Operation:
				case RDOPATPattern::PT_Keyboard :
				{
					PARSER->error().error(@3, @4, rdo::format("Ожидается статус конвертора конца, найдено: %s", LEXER->YYText()));
					break;
				}
			}
		}
	}
	;

pat_conv
	: RDO_Keep
	{
		#PASS2
		{
			$$ = rdo::runtime::RDOResource::CS_Keep;
		}
	}
	| RDO_Create
	{
		#PASS2
		{
			$$ = rdo::runtime::RDOResource::CS_Create;
		}
	}
	| RDO_Erase
	{
		#PASS2
		{
			$$ = rdo::runtime::RDOResource::CS_Erase;
		}
	}
	| RDO_NonExist
	{
		#PASS2
		{
			$$ = rdo::runtime::RDOResource::CS_NonExist;
		}
	}
	;

pat_common_choice
	: pat_rel_res
	| pat_rel_res RDO_first
	{
		#PASS2
		{
			LPRDOPATPattern pPattern = PARSER->stack().pop<RDOPATPattern>($1);
			if (pPattern->getType() == RDOPATPattern::PT_Event)
			{
				PARSER->error().error(@2, "В событиях не используется способ выбора релевантных ресурсов");
			}
			else
			{
				pPattern->setCommonChoiceFirst();
			}
			$$ = PARSER->stack().push(pPattern);
		}
	}
	| pat_rel_res RDO_with_min fun_arithm
	{
		#PASS2
		{
			LPRDOPATPattern pPattern = PARSER->stack().pop<RDOPATPattern>($1);
			if (pPattern->getType() == RDOPATPattern::PT_Event)
			{
				PARSER->error().error(@2, "В событиях не используется способ выбора релевантных ресурсов");
			}
			else
			{
				LPRDOFUNArithm pArithm = PARSER->stack().pop<RDOFUNArithm>($3);
				ASSERT(pArithm);
				pArithm->setSrcPos (@2, @3);
				pArithm->setSrcText("with_min " + pArithm->src_text());
				pPattern->setCommonChoiceWithMin(pArithm);
			}
			$$ = PARSER->stack().push(pPattern);
		}
	}
	| pat_rel_res RDO_with_max fun_arithm
	{
		#PASS2
		{
			LPRDOPATPattern pPattern = PARSER->stack().pop<RDOPATPattern>($1);
			if ( pPattern->getType() == RDOPATPattern::PT_Event)
			{
				PARSER->error().error(@2, "В событиях не используется способ выбора релевантных ресурсов");
			}
			else
			{
				LPRDOFUNArithm pArithm = PARSER->stack().pop<RDOFUNArithm>($3);
				ASSERT(pArithm);
				pArithm->setSrcPos (@2, @3);
				pArithm->setSrcText("with_max " + pArithm->src_text());
				pPattern->setCommonChoiceWithMax(pArithm);
			}
			$$ = PARSER->stack().push(pPattern);
		}
	}
	| pat_rel_res RDO_with_min error
	{
		#PASS2
		{
			PARSER->error().error(@3, "Ошибка в арифметическом выражении");
		}
	}
	| pat_rel_res RDO_with_max error
	{
		#PASS2
		{
			PARSER->error().error(@3, "Ошибка в арифметическом выражении");
		}
	}
	;

pat_time
	: pat_common_choice RDO_Body
	{
		#PASS2
		{
			LPRDOPATPattern pPattern = PARSER->stack().pop<RDOPATPattern>($1);
			switch (pPattern->getType())
			{
				case RDOPATPattern::PT_Operation:
				case RDOPATPattern::PT_Keyboard :
				{
					PARSER->error().error(@2, "Перед $Body пропущено ключевое слово $Time");
					break;
				}
				default:
					break;
			}
			$$ = PARSER->stack().push(pPattern);
		}
	}
	| pat_common_choice RDO_Time '=' fun_arithm RDO_Body
	{
		#PASS2
		{
			LPRDOPATPattern pPattern = PARSER->stack().pop<RDOPATPattern>($1);
			switch (pPattern->getType())
			{
				case RDOPATPattern::PT_Event:
				{
					PARSER->error().error(@2, "Поле $Time не используется в событии");
					break;
				}
				case RDOPATPattern::PT_Rule:
				{
					PARSER->error().error(@2, "Поле $Time не используется в продукционном правиле");
					break;
				}
				default:
					break;
			}
			LPRDOFUNArithm pArithm = PARSER->stack().pop<RDOFUNArithm>($4);
			ASSERT(pArithm);
			pArithm->setSrcPos (@2, @4);
			pArithm->setSrcText("$Time = " + pArithm->src_text());
			pPattern->setTime(pArithm);
			$$ = PARSER->stack().push(pPattern);
		}
	}
	| pat_common_choice RDO_Time '=' fun_arithm error
	{
		#PASS2
		{
			PARSER->error().error(@4, @5, "Ожидается ключевое слово $Body");
		}
	}
	| pat_common_choice RDO_Time '=' error
	{
		#PASS2
		{
			PARSER->error().error(@4, "Ошибка в арифметическом выражении");
		}
	}
	| pat_common_choice RDO_Time error
	{
		#PASS2
		{
			PARSER->error().error(@2, @3, "После ключевого слова $Time ожидается знак равенства");
		}
	}
	| pat_common_choice error
	{
		#PASS2
		{
			LPRDOPATPattern pPattern = PARSER->stack().pop<RDOPATPattern>($1);
			switch (pPattern->getType())
			{
				case RDOPATPattern::PT_Rule:
				{
					PARSER->error().error(@2, rdo::format("Ожидается $Body, найдено: %s", LEXER->YYText()));
					break;
				}
				case RDOPATPattern::PT_Event:
				{
					PARSER->error().error(@2, rdo::format("Ожидается $Body, найдено: %s", LEXER->YYText()));
					break;
				}
				case RDOPATPattern::PT_Operation:
				case RDOPATPattern::PT_Keyboard :
				{
					PARSER->error().error(@2, rdo::format("Ожидается $Time, найдено: %s", LEXER->YYText()));
					break;
				}
			}
			$$ = PARSER->stack().push(pPattern);
		}
	}
	;

pat_body
	: pat_time RDO_IDENTIF_RELRES
	{
		#PASS2
		{
			LPRDOPATPattern pPattern = PARSER->stack().pop<RDOPATPattern>($1);
			tstring         name     = PARSER->stack().pop<RDOValue>($2)->value().getIdentificator();
			pPattern->addRelResBody(RDOParserSrcInfo(@2, name));
			$$ = PARSER->stack().push(pPattern);
		}
	}
	| pat_convert RDO_IDENTIF_RELRES
	{
		#PASS2
		{
			LPRDOPATPattern pPattern = PARSER->stack().pop<RDOPATPattern>($1);
			tstring         name     = PARSER->stack().pop<RDOValue>($2)->value().getIdentificator();
			pPattern->addRelResBody(RDOParserSrcInfo(@2, name));
			$$ = PARSER->stack().push(pPattern);
		}
	}
	| pat_time error
	{
		#PASS2
		{
			tstring str(LEXER->YYText());
			PARSER->error().error(@2, rdo::format("Неизвестный релевантный ресурс: %s", str.c_str()));
		}
	}
	| pat_convert error
	{
		#PASS2
		{	
			tstring str(LEXER->YYText());
			PARSER->error().error(@2, rdo::format("Неизвестный релевантный ресурс: %s", str.c_str()));
		}
	}
	;

pat_res_usage
	: pat_body pat_choice pat_order
	{
		#PASS2
		{
			LPRDOPATChoiceFrom pChoiceFrom = PARSER->stack().pop<RDOPATChoiceFrom>($2);
			ASSERT(pChoiceFrom);
			pChoiceFrom->setSrcPos(@2);

			LPRDOPATChoiceOrder pChoiceOrder = PARSER->stack().pop<RDOPATChoiceOrder>($3);
			pChoiceOrder->setSrcPos(@3);

			LPRDOPATPattern pPattern = PARSER->stack().pop<RDOPATPattern>($1);
			ASSERT(pPattern);
			pPattern->addRelResUsage(pChoiceFrom, pChoiceOrder);
			$$ = PARSER->stack().push(pPattern);
		}
	}
	;

pat_choice
	: /* empty */
	{
		#PASS2
		{
			PARSER->getLastPATPattern()->m_pCurrRelRes->m_currentState = RDORelevantResource::choiceEmpty;
			LPRDOPATChoiceFrom pChoiceFrom = rdo::Factory<RDOPATChoiceFrom>::create(RDOParserSrcInfo("Choice NoCheck"), RDOPATChoiceFrom::ch_empty);
			ASSERT(pChoiceFrom);
			$$ = PARSER->stack().push(pChoiceFrom);
		}
	}
	| pat_choice_nocheck
	{
		#PASS2
		{
			LPRDOPATChoiceFrom pChoiceFrom = rdo::Factory<RDOPATChoiceFrom>::create(RDOParserSrcInfo("Choice NoCheck"), RDOPATChoiceFrom::ch_nocheck);
			ASSERT(pChoiceFrom);
			$$ = PARSER->stack().push(pChoiceFrom);
		}
	}
	| pat_choice_from fun_logic
	{
		#PASS2
		{
			LPRDOFUNLogic pLogic = PARSER->stack().pop<RDOFUNLogic>($2);
			ASSERT(pLogic);
			LPRDOPATChoiceFrom pChoiceFrom = rdo::Factory<RDOPATChoiceFrom>::create(RDOParserSrcInfo("Choice from " + pLogic->src_text()), RDOPATChoiceFrom::ch_from, pLogic);
			ASSERT(pChoiceFrom);
			$$ = PARSER->stack().push(pChoiceFrom);
		}
	}
	| pat_choice_from error
	{
		#PASS2
		{
			PARSER->error().error(@2, "Ошибка в логическом выражении");
		}
	}
	;

pat_choice_nocheck
	: RDO_Choice RDO_NoCheck
	{
		#PASS2
		{
			PARSER->getLastPATPattern()->m_pCurrRelRes->m_currentState = RDORelevantResource::choiceNoCheck;
		}
	}
	;

pat_choice_from
	: RDO_Choice RDO_from
	{
		#PASS2
		{
			PARSER->getLastPATPattern()->m_pCurrRelRes->m_currentState = RDORelevantResource::choiceFrom;
		}
	}
	;

pat_order
	: /* empty */
	{
		#PASS2
		{
			PARSER->getLastPATPattern()->m_pCurrRelRes->m_currentState = RDORelevantResource::choiceOrderEmpty;
			LPRDOPATChoiceOrder pChoiceOrder = rdo::Factory<RDOPATChoiceOrder>::create(RDOParserSrcInfo(), rdo::runtime::RDOSelectResourceCalc::order_empty);
			ASSERT(pChoiceOrder);
			$$ = PARSER->stack().push(pChoiceOrder);
		}
	}
	| pat_choice_first
	{
		#PASS2
		{
			LPRDOPATChoiceOrder pChoiceOrder = rdo::Factory<RDOPATChoiceOrder>::create(RDOParserSrcInfo("first"), rdo::runtime::RDOSelectResourceCalc::order_first);
			ASSERT(pChoiceOrder);
			$$ = PARSER->stack().push(pChoiceOrder);
		}
	}
	| pat_choice_with_min fun_arithm
	{
		#PASS2
		{
			LPRDOFUNArithm pArithm = PARSER->stack().pop<RDOFUNArithm>($2);
			ASSERT(pArithm);
			LPRDOPATChoiceOrder pChoiceOrder = rdo::Factory<RDOPATChoiceOrder>::create(RDOParserSrcInfo("with_min " + pArithm->src_text()), rdo::runtime::RDOSelectResourceCalc::order_with_min, pArithm);
			ASSERT(pChoiceOrder);
			$$ = PARSER->stack().push(pChoiceOrder);
		}
	}
	| pat_choice_with_max fun_arithm
	{
		#PASS2
		{
			LPRDOFUNArithm pArithm = PARSER->stack().pop<RDOFUNArithm>($2);
			ASSERT(pArithm);
			LPRDOPATChoiceOrder pChoiceOrder = rdo::Factory<RDOPATChoiceOrder>::create(RDOParserSrcInfo("with_max " + pArithm->src_text()), rdo::runtime::RDOSelectResourceCalc::order_with_max, pArithm);
			ASSERT(pChoiceOrder);
			$$ = PARSER->stack().push(pChoiceOrder);
		}
	}
	| pat_choice_with_min error
	{
		#PASS2
		{
			PARSER->error().error(@2, "Ошибка в арифметическом выражении");
		}
	}
	| pat_choice_with_max error
	{
		#PASS2
		{
			PARSER->error().error(@2, "Ошибка в арифметическом выражении");
		}
	}
	;

pat_choice_first
	: RDO_first
	{
		#PASS2
		{
			PARSER->getLastPATPattern()->m_pCurrRelRes->m_currentState = RDORelevantResource::choiceOrderFirst;
		}
	}
	;

pat_choice_with_min
	: RDO_with_min
	{
		#PASS2
		{
			PARSER->getLastPATPattern()->m_pCurrRelRes->m_currentState = RDORelevantResource::choiceOrderWithMin;
		}
	}
	;

pat_choice_with_max
	: RDO_with_max
	{
		#PASS2
		{
			PARSER->getLastPATPattern()->m_pCurrRelRes->m_currentState = RDORelevantResource::choiceOrderWithMax;
		}
	}
	;

pat_convert
	: pat_res_usage
	{
		#PASS2
		{
			LPRDOPATPattern pPattern = PARSER->stack().pop<RDOPATPattern>($1);
			ASSERT(pPattern);
			LPRDORelevantResource rel_res  = pPattern->m_pCurrRelRes;
			tstring str;
			if (rel_res->m_pChoiceOrder->m_type != rdo::runtime::RDOSelectResourceCalc::order_empty)
			{
				str = "Сразу после ключевого слова " + rel_res->m_pChoiceOrder->asString();
			}
			else if (rel_res->m_pChoiceFrom->m_type != RDOPATChoiceFrom::ch_empty)
			{
				str = "Сразу после условия выбора";
			}
			else
			{
				str = "Сразу после имени";
			}
			if (rel_res->m_statusBegin != rdo::runtime::RDOResource::CS_NoChange && rel_res->m_statusBegin != rdo::runtime::RDOResource::CS_Erase && rel_res->m_statusBegin != rdo::runtime::RDOResource::CS_NonExist)
			{
				switch (pPattern->getType())
				{
					case RDOPATPattern::PT_Event:
					{
						PARSER->error().error(@1, rdo::format("%s ожидается ключевое слово Convert_event для релевантного ресурса '%s', т.к. его статус '%s', но найдено: %s", str.c_str(), rel_res->name().c_str(), RDOPATPattern::StatusToStr(rel_res->m_statusBegin).c_str(), LEXER->YYText()));
						break;
					}
					case RDOPATPattern::PT_Rule:
					{
						PARSER->error().error(@1, rdo::format("%s ожидается ключевое слово Convert_rule для релевантного ресурса '%s', т.к. его статус '%s', но найдено: %s", str.c_str(), rel_res->name().c_str(), RDOPATPattern::StatusToStr(rel_res->m_statusBegin).c_str(), LEXER->YYText()));
						break;
					}
					case RDOPATPattern::PT_Operation:
					case RDOPATPattern::PT_Keyboard :
					{
						PARSER->error().error(@1, rdo::format("%s ожидается ключевое слово Convert_begin для релевантного ресурса '%s', т.к. его статус '%s', но найдено: %s", str.c_str(), rel_res->name().c_str(), RDOPATPattern::StatusToStr(rel_res->m_statusBegin).c_str(), LEXER->YYText()));
						break;
					}
				}
			}
			if (rel_res->m_statusEnd != rdo::runtime::RDOResource::CS_NoChange && rel_res->m_statusEnd != rdo::runtime::RDOResource::CS_Erase && rel_res->m_statusEnd != rdo::runtime::RDOResource::CS_NonExist)
			{
				switch (pPattern->getType())
				{
					case RDOPATPattern::PT_Event:
					case RDOPATPattern::PT_Rule:
					{
						PARSER->error().error(@1, "Внутренняя ошибка");
						break;
					}
					case RDOPATPattern::PT_Operation:
					case RDOPATPattern::PT_Keyboard :
					{
						PARSER->error().error(@1, rdo::format("%s ожидается ключевое слово Convert_end для релевантного ресурса '%s', т.к. его статус '%s', но найдено: %s", str.c_str(), rel_res->name().c_str(), RDOPATPattern::StatusToStr(rel_res->m_statusBegin).c_str(), LEXER->YYText()));
						break;
					}
				}
			}

			$$ = PARSER->stack().push(pPattern);
		}
	}
	| pat_res_usage convert_begin pat_trace statement_list
	{
		#PASS2
		{
			LPRDOPATPattern pPattern = PARSER->stack().pop<RDOPATPattern>($1);
			ASSERT(pPattern);
			if (pPattern->getType() != RDOPATPattern::PT_Operation && pPattern->getType() != RDOPATPattern::PT_Keyboard)
			{
				tstring type = "";
				switch (pPattern->getType())
				{
				case RDOPATPattern::PT_Event: type = "событии";               break;
				case RDOPATPattern::PT_Rule : type = "продукционном правиле"; break;
				default                     : break;
				}
				PARSER->error().error(@2, rdo::format("Ключевое слово Convert_begin может быть использовано в обыкновенной или клавиатурной операции, но не в %s '%s'", type.c_str(), pPattern->name().c_str()));
			}

			LPExpression pExpressionConvertBody = PARSER->stack().pop<Expression>($4);
			ASSERT(pExpressionConvertBody);

			rdo::runtime::LPRDOCalcStatementList pCalcStatementList = pExpressionConvertBody->calc().object_dynamic_cast<rdo::runtime::RDOCalcStatementList>();
			ASSERT(pCalcStatementList);

			rdo::runtime::LPRDOCalcBaseStatementList pCalcBaseStatementList = rdo::Factory<rdo::runtime::RDOCalcBaseStatementList>::create();
			ASSERT(pCalcBaseStatementList);

			rdo::runtime::LPRDOCalcOpenBrace pCalcOpenBrace = rdo::Factory<rdo::runtime::RDOCalcOpenBrace>::create();
			ASSERT(pCalcOpenBrace);

			rdo::runtime::LPRDOCalcCloseBrace pCalcCloseBrace = rdo::Factory<rdo::runtime::RDOCalcCloseBrace>::create();
			ASSERT(pCalcCloseBrace);

			pCalcBaseStatementList->addCalcStatement(pCalcOpenBrace);
			pCalcBaseStatementList->addCalcStatement(pCalcStatementList);
			pCalcBaseStatementList->addCalcStatement(pCalcCloseBrace);

			LPExpression pExpressionConvert = rdo::Factory<Expression>::create(pExpressionConvertBody->typeInfo(), pCalcBaseStatementList, pCalcStatementList->srcInfo());
			ASSERT(pExpressionConvert);

			pPattern.object_static_cast<RDOPatternOperation>()->addRelResConvertBeginEnd($3 != 0, pExpressionConvert, false, NULL, @2, @2, @3, @3);

			RDOParser::s_parser()->contextStack()->pop<ContextReturnable>();

			$$ = PARSER->stack().push(pPattern);
		}
	}
	| pat_res_usage convert_end pat_trace statement_list
	{
		#PASS2
		{
			LPRDOPATPattern pPattern = PARSER->stack().pop<RDOPATPattern>($1);
			ASSERT(pPattern);
			if (pPattern->getType() != RDOPATPattern::PT_Operation && pPattern->getType() != RDOPATPattern::PT_Keyboard)
			{
				tstring type = "";
				switch (pPattern->getType())
				{
				case RDOPATPattern::PT_Event: type = "событии";               break;
				case RDOPATPattern::PT_Rule : type = "продукционном правиле"; break;
				default                     : break;
				}
				PARSER->error().error(@2, rdo::format("Ключевое слово Convert_end может быть использовано в обыкновенной и клавиатурной операции, но не в %s '%s'", type.c_str(), pPattern->name().c_str()));
			}

			LPExpression pExpressionConvertBody = PARSER->stack().pop<Expression>($4);
			ASSERT(pExpressionConvertBody);

			rdo::runtime::LPRDOCalcStatementList pCalcStatementList = pExpressionConvertBody->calc().object_dynamic_cast<rdo::runtime::RDOCalcStatementList>();
			ASSERT(pCalcStatementList);

			rdo::runtime::LPRDOCalcBaseStatementList pCalcBaseStatementList = rdo::Factory<rdo::runtime::RDOCalcBaseStatementList>::create();
			ASSERT(pCalcBaseStatementList);

			rdo::runtime::LPRDOCalcOpenBrace pCalcOpenBrace = rdo::Factory<rdo::runtime::RDOCalcOpenBrace>::create();
			ASSERT(pCalcOpenBrace);

			rdo::runtime::LPRDOCalcCloseBrace pCalcCloseBrace = rdo::Factory<rdo::runtime::RDOCalcCloseBrace>::create();
			ASSERT(pCalcCloseBrace);

			pCalcBaseStatementList->addCalcStatement(pCalcOpenBrace);
			pCalcBaseStatementList->addCalcStatement(pCalcStatementList);
			pCalcBaseStatementList->addCalcStatement(pCalcCloseBrace);

			LPExpression pExpressionConvert = rdo::Factory<Expression>::create(pExpressionConvertBody->typeInfo(), pCalcBaseStatementList, pCalcStatementList->srcInfo());
			ASSERT(pExpressionConvert);

			pPattern.object_static_cast<RDOPatternOperation>()->addRelResConvertBeginEnd(false, NULL, $3 != 0, pExpressionConvert, @2, @2, @3, @3);

			RDOParser::s_parser()->contextStack()->pop<ContextReturnable>();

			$$ = PARSER->stack().push(pPattern);
		}
	}
	| pat_res_usage convert_begin pat_trace statement_list convert_end pat_trace statement_list
	{
		#PASS2
		{
			LPRDOPATPattern pPattern = PARSER->stack().pop<RDOPATPattern>($1);
			ASSERT(pPattern);
			if (pPattern->getType() != RDOPATPattern::PT_Operation && pPattern->getType() != RDOPATPattern::PT_Keyboard)
			{
				tstring type = "";
				switch (pPattern->getType())
				{
				case RDOPATPattern::PT_Event: type = "событии";               break;
				case RDOPATPattern::PT_Rule : type = "продукционном правиле"; break;
				default                     : break;
				}
				PARSER->error().error(@2, rdo::format("Ключевые слова Convert_begin и Convert_end могут быть использованы в обыкновенной и клавиатурной операции, но не в %s '%s'", type.c_str(), pPattern->name().c_str()));
			}

			LPExpression pExpressionConvertBodyBegin = PARSER->stack().pop<Expression>($4);
			ASSERT(pExpressionConvertBodyBegin);
			LPExpression pExpressionConvertBodyEnd = PARSER->stack().pop<Expression>($7);
			ASSERT(pExpressionConvertBodyEnd);

			rdo::runtime::LPRDOCalcStatementList pCalcStatementListBegin = pExpressionConvertBodyBegin->calc().object_dynamic_cast<rdo::runtime::RDOCalcStatementList>();
			ASSERT(pCalcStatementListBegin);
			rdo::runtime::LPRDOCalcStatementList pCalcStatementListEnd = pExpressionConvertBodyEnd->calc().object_dynamic_cast<rdo::runtime::RDOCalcStatementList>();
			ASSERT(pCalcStatementListEnd);

			rdo::runtime::LPRDOCalcBaseStatementList pCalcBaseStatementListBegin = rdo::Factory<rdo::runtime::RDOCalcBaseStatementList>::create();
			ASSERT(pCalcBaseStatementListBegin);

			rdo::runtime::LPRDOCalcBaseStatementList pCalcBaseStatementListEnd = rdo::Factory<rdo::runtime::RDOCalcBaseStatementList>::create();
			ASSERT(pCalcBaseStatementListEnd);

			rdo::runtime::LPRDOCalcOpenBrace pCalcOpenBrace = rdo::Factory<rdo::runtime::RDOCalcOpenBrace>::create();
			ASSERT(pCalcOpenBrace);

			rdo::runtime::LPRDOCalcCloseBrace pCalcCloseBrace = rdo::Factory<rdo::runtime::RDOCalcCloseBrace>::create();
			ASSERT(pCalcCloseBrace);

			pCalcBaseStatementListBegin->addCalcStatement(pCalcOpenBrace);
			pCalcBaseStatementListBegin->addCalcStatement(pCalcStatementListBegin);
			pCalcBaseStatementListBegin->addCalcStatement(pCalcCloseBrace);

			pCalcBaseStatementListEnd->addCalcStatement(pCalcOpenBrace);
			pCalcBaseStatementListEnd->addCalcStatement(pCalcStatementListEnd);
			pCalcBaseStatementListEnd->addCalcStatement(pCalcCloseBrace);

			LPExpression pExpressionConvertBegin =  rdo::Factory<Expression>::create(pExpressionConvertBodyBegin->typeInfo(),pCalcBaseStatementListBegin,pCalcBaseStatementListBegin->srcInfo());
			ASSERT(pExpressionConvertBegin);

			LPExpression pExpressionConvertEnd =  rdo::Factory<Expression>::create(pExpressionConvertBodyEnd->typeInfo(),pCalcBaseStatementListEnd,pCalcBaseStatementListEnd->srcInfo());
			ASSERT(pExpressionConvertEnd);

			pPattern.object_static_cast<RDOPatternOperation>()->addRelResConvertBeginEnd(
				$3 != 0,
				pExpressionConvertBegin ,
				$6 != 0                 ,
				pExpressionConvertEnd   ,
				@2, @5, @3, @6          );


			RDOParser::s_parser()->contextStack()->pop<ContextReturnable>();
			RDOParser::s_parser()->contextStack()->pop<ContextReturnable>();

			$$ = PARSER->stack().push(pPattern);
		}
	}
	| pat_res_usage convert_rule pat_trace statement_list
	{
		#PASS2
		{
			LPRDOPATPattern pPattern = PARSER->stack().pop<RDOPATPattern>($1);
			ASSERT(pPattern);
			if (pPattern->getType() != RDOPATPattern::PT_Rule)
			{
				tstring type = "";
				switch (pPattern->getType())
				{
				case RDOPATPattern::PT_Event    : type = "событии";               break;
				case RDOPATPattern::PT_Operation: type = "операции";              break;
				case RDOPATPattern::PT_Keyboard : type = "клавиатурной операции"; break;
				default                         : break;
				}
				PARSER->error().error(@2, rdo::format("Ключевое слово Convert_rule может быть использовано в продукционном правиле, но не в %s '%s'", type.c_str(), pPattern->name().c_str()));
			}

			LPRDORelevantResource pRelRes = pPattern->m_pCurrRelRes;
			ASSERT(pRelRes);

			LPExpression pExpressionConvertBody = PARSER->stack().pop<Expression>($4);
			ASSERT(pExpressionConvertBody);

			rdo::runtime::LPRDOCalcStatementList pCalcStatementList = pExpressionConvertBody->calc().object_dynamic_cast<rdo::runtime::RDOCalcStatementList>();
			ASSERT(pCalcStatementList);

			rdo::runtime::LPRDOCalcBaseStatementList pCalcBaseStatementList = rdo::Factory<rdo::runtime::RDOCalcBaseStatementList>::create();
			ASSERT(pCalcBaseStatementList);

			rdo::runtime::LPRDOCalcOpenBrace pCalcOpenBrace = rdo::Factory<rdo::runtime::RDOCalcOpenBrace>::create();
			ASSERT(pCalcOpenBrace);

			rdo::runtime::LPRDOCalcCloseBrace pCalcCloseBrace = rdo::Factory<rdo::runtime::RDOCalcCloseBrace>::create();
			ASSERT(pCalcCloseBrace);

			pCalcBaseStatementList->addCalcStatement(pCalcOpenBrace);
			pCalcBaseStatementList->addCalcStatement(pCalcStatementList);
			pCalcBaseStatementList->addCalcStatement(pCalcCloseBrace);

			LPExpression pExpressionConvert = rdo::Factory<Expression>::create(pExpressionConvertBody->typeInfo(), pCalcBaseStatementList, pCalcStatementList->srcInfo());
			ASSERT(pExpressionConvert);

			pPattern->addRelResConvert($3 != 0, pExpressionConvert, @2, @3, pRelRes->m_statusBegin);

			RDOParser::s_parser()->contextStack()->pop<ContextReturnable>();

			$$ = PARSER->stack().push(pPattern);
		}
	}
	| pat_res_usage convert_event pat_trace statement_list
	{
		#PASS2
		{
			LPRDOPATPattern pPattern = PARSER->stack().pop<RDOPATPattern>($1);
			ASSERT(pPattern);

			if (pPattern->getType() != RDOPATPattern::PT_Event)
			{
				tstring type = "";
				switch (pPattern->getType())
				{
				case RDOPATPattern::PT_Rule     : type = "продукционном правиле"; break;
				case RDOPATPattern::PT_Operation: type = "операции";              break;
				case RDOPATPattern::PT_Keyboard : type = "клавиатурной операции"; break;
				default                         : break;
				}
				PARSER->error().error(@2, rdo::format("Ключевое слово Convert_event может быть использовано в событии, но не в %s '%s'", type.c_str(), pPattern->name().c_str()));
			}

			LPExpression pExpressionConvertBody = PARSER->stack().pop<Expression>($4);
			ASSERT(pExpressionConvertBody);

			rdo::runtime::LPRDOCalcStatementList pCalcStatementList = pExpressionConvertBody->calc().object_dynamic_cast<rdo::runtime::RDOCalcStatementList>();
			ASSERT(pCalcStatementList);

			rdo::runtime::LPRDOCalcBaseStatementList pCalcBaseStatementList = rdo::Factory<rdo::runtime::RDOCalcBaseStatementList>::create();
			ASSERT(pCalcBaseStatementList);

			rdo::runtime::LPRDOCalcOpenBrace pCalcOpenBrace = rdo::Factory<rdo::runtime::RDOCalcOpenBrace>::create();
			ASSERT(pCalcOpenBrace);

			rdo::runtime::LPRDOCalcCloseBrace pCalcCloseBrace = rdo::Factory<rdo::runtime::RDOCalcCloseBrace>::create();
			ASSERT(pCalcCloseBrace);

			pCalcBaseStatementList->addCalcStatement(pCalcOpenBrace);
			pCalcBaseStatementList->addCalcStatement(pCalcStatementList);
			pCalcBaseStatementList->addCalcStatement(pCalcCloseBrace);

			LPExpression pExpressionConvert = rdo::Factory<Expression>::create(pExpressionConvertBody->typeInfo(), pCalcBaseStatementList, pCalcStatementList->srcInfo());
			ASSERT(pExpressionConvert);

			ASSERT(pPattern->m_pCurrRelRes);
			pPattern->addRelResConvert($3 != 0, pExpressionConvert, @2, @3, pPattern->m_pCurrRelRes->m_statusBegin);

			RDOParser::s_parser()->contextStack()->pop<ContextReturnable>();

			$$ = PARSER->stack().push(pPattern);
		}
	}
	;

convert_rule
	: RDO_Convert_rule
	{
		#PASS2
		{
			PARSER->getLastPATPattern()->m_pCurrRelRes->m_currentState = RDORelevantResource::convertBegin;

			LPContextReturnable pContextReturnable = rdo::Factory<ContextReturnable>::create();
			ASSERT(pContextReturnable);

			PARSER->contextStack()->push(pContextReturnable);
		}
	}
	;

convert_event
	: RDO_Convert_event
	{
		#PASS2
		{
			PARSER->getLastPATPattern()->m_pCurrRelRes->m_currentState = RDORelevantResource::convertBegin;

			LPContextReturnable pContextReturnable = rdo::Factory<ContextReturnable>::create();
			ASSERT(pContextReturnable);

			PARSER->contextStack()->push(pContextReturnable);
		}
	}
	;

convert_begin
	: RDO_Convert_begin
	{
		#PASS2
		{
			PARSER->getLastPATPattern()->m_pCurrRelRes->m_currentState = RDORelevantResource::convertBegin;

			LPContextReturnable pContextReturnable = rdo::Factory<ContextReturnable>::create();
			ASSERT(pContextReturnable);

			PARSER->contextStack()->push(pContextReturnable);
		}
	}
	;

convert_end
	:	RDO_Convert_end
	{
		#PASS2
		{
			PARSER->getLastPATPattern()->m_pCurrRelRes->m_currentState = RDORelevantResource::convertEnd;

			LPContextReturnable pContextReturnable = rdo::Factory<ContextReturnable>::create();
			ASSERT(pContextReturnable);

			PARSER->contextStack()->push(pContextReturnable);
		}
	}
	;

pat_pattern
	: pat_convert RDO_End
	{
		#PASS2
		{
			LPRDOPATPattern pPattern = PARSER->stack().pop<RDOPATPattern>($1);
			pPattern->end();
			$$ = PARSER->stack().push(pPattern);
		}
	}
	;

// --------------------------------------------------------------------------------
// -------------------- Список statement'ов для паттернов
// --------------------------------------------------------------------------------
nochange_statement
	: RDO_IDENTIF_NoChange ';'
	{
		#PASS2
		{
			rdo::runtime::LPRDOCalc pCalc = rdo::Factory<rdo::runtime::RDOCalcNoChange>::create();
			ASSERT(pCalc);

			LPTypeInfo pType = rdo::Factory<TypeInfo>::delegate<RDOType__void>(RDOParserSrcInfo(@1));
			ASSERT(pType);

			LPExpression pExpression = rdo::Factory<Expression>::create(pType, pCalc, RDOParserSrcInfo(@1));
			ASSERT(pExpression);

			$$ = PARSER->stack().push(pExpression);
		}
	}
	| RDO_IDENTIF_NoChange error
	{
		#PASS2
		{
			PARSER->error().error(@2, "Не найден символ окончания инструкции - точка с запятой");
		}
	}
	;

stopping_statement
	: RDO_IDENTIF '.' RDO_Stopping '(' ')' ';'
	{
		#PASS2
		{
			tstring    eventName = PARSER->stack().pop<RDOValue>($1)->value().getIdentificator();
			LPRDOEvent pEvent    = PARSER->findEvent(eventName);
			if (!pEvent)
			{
				PARSER->error().error(@1, rdo::format("Попытка остановить неизвестное событие: %s", eventName.c_str()));
			}

			rdo::runtime::LPRDOCalcEventStop pCalc = rdo::Factory<rdo::runtime::RDOCalcEventStop>::create();
			pCalc->setSrcInfo(RDOParserSrcInfo(@1, @6, rdo::format("Остановка события %s", eventName.c_str())));
			ASSERT(pCalc);
			pEvent->attachCalc(pCalc);

			LPTypeInfo pType = rdo::Factory<TypeInfo>::delegate<RDOType__void>(RDOParserSrcInfo(@1));
			ASSERT(pType);

			LPExpression pExpression = rdo::Factory<Expression>::create(pType, pCalc, RDOParserSrcInfo(@1));
			ASSERT(pExpression);

			$$ = PARSER->stack().push(pExpression);
		}
	}
	| RDO_IDENTIF '.' RDO_Stopping '(' ')' error
	{
		#PASS2
		{
			PARSER->error().error(@4, "Не найден символ окончания инструкции - точка с запятой");
		}
	}
	;

planning_statement
	: RDO_IDENTIF '.' RDO_Planning '(' arithm_list ')' ';'
	{
		#PASS2
		{
			tstring           eventName   = PARSER->stack().pop<RDOValue>($1)->value().getIdentificator();
			LPArithmContainer pArithmList = PARSER->stack().pop<ArithmContainer>($5);

			LPRDOEvent pEvent = PARSER->findEvent(eventName);
			if (!pEvent)
			{
				PARSER->error().error(@1, rdo::format("Попытка запланировать неизвестное событие: %s", eventName.c_str()));
			}

			ArithmContainer::Container::const_iterator arithmIt = pArithmList->getContainer().begin();
			if (arithmIt == pArithmList->getContainer().end())
			{
				PARSER->error().error(@1, rdo::format("Не указано время планирования события: %s", eventName.c_str()));
			}

			LPRDOFUNArithm pTimeArithm = *arithmIt;
			ASSERT(pTimeArithm);
			++arithmIt;

			LPArithmContainer pParamList = rdo::Factory<ArithmContainer>::create();
			ASSERT(pParamList);

			while (arithmIt != pArithmList->getContainer().end())
			{
				pParamList->addItem(*arithmIt);
				++arithmIt;
			}

			pEvent->setParamList(pParamList);

			rdo::runtime::LPRDOCalc pCalcTime = pTimeArithm->createCalc();
			pCalcTime->setSrcInfo(pTimeArithm->src_info());
			ASSERT(pCalcTime);

			rdo::runtime::LPRDOCalcEventPlan pCalc = rdo::Factory<rdo::runtime::RDOCalcEventPlan>::create(pCalcTime);
			pCalc->setSrcInfo(RDOParserSrcInfo(@1, @7, rdo::format("Планирование события %s в момент времени %s", eventName.c_str(), pCalcTime->srcInfo().src_text().c_str())));
			ASSERT(pCalc);
			pEvent->attachCalc(pCalc);

			LPTypeInfo pType = rdo::Factory<TypeInfo>::delegate<RDOType__void>(RDOParserSrcInfo(@1));
			ASSERT(pType);

			LPExpression pExpression = rdo::Factory<Expression>::create(pType, pCalc, RDOParserSrcInfo(@1));
			ASSERT(pExpression);

			$$ = PARSER->stack().push(pExpression);
		}
	}
	| RDO_IDENTIF '.' RDO_Planning '(' arithm_list ')' error
	{
		#PASS2
		{
			PARSER->error().error(@7, "Не найден символ окончания инструкции - точка с запятой");
		}
	}
	| RDO_IDENTIF '.' RDO_Planning '(' error
	{
		#PASS2
		{
			PARSER->error().error(@5, "Ошибка в арифметическом выражении");
		}
	}
	| RDO_IDENTIF '.' RDO_Planning error
	{
		#PASS2
		{
			PARSER->error().error(@4, "Ожидается открывающая скобка");
		}
	}
	| RDO_IDENTIF '.' RDO_Planning '(' arithm_list error
	{
		#PASS2
		{
			PARSER->error().error(@6, "Ожидается закрывающая скобка");
		}
	}
	;

process_input_statement
	: RDO_IDENTIF '.' RDO_ProcessStart '(' RDO_IDENTIF_RELRES ')' ';'
	{
		#PASS2
		{
			tstring          processName = PARSER->stack().pop<RDOValue>($1)->value().getIdentificator();
			LPRDOPROCProcess pProcess    = PARSER->findPROCProcess(processName);
			if (!pProcess)
			{
				PARSER->error().error(@1, rdo::format("Попытка запустить неизвестный процесс: %s", processName.c_str()));
			}

			LPIPROCBlock pBlock = (*(pProcess->getBlockList().begin()))->getRuntimeBlock();
			ASSERT(pBlock);

			tstring relResName = PARSER->stack().pop<RDOValue>($5)->value().getIdentificator();

			LPRDOPATPattern pPattern = PARSER->getLastPATPattern();
			ASSERT(pPattern);
			/*из-за использования RDO_IDENTIF_RELRES findRelevantResource() всегда находит ресурс*/
			LPRDORelevantResource pRelRes = pPattern->findRelevantResource(relResName);
			tstring relResTypeName = pRelRes->getType()->name();

			if (!pProcess->checkTransactType(relResTypeName))
			{
				PARSER->error().error(@1, rdo::format("Процесс %s ожидает в качестве транзактов ресурсы типа %s, а не %s", processName.c_str(), "true_resTypeName", relResTypeName.c_str()));
			}

			rdo::runtime::LPRDOCalcProcessControl pCalc = rdo::Factory<rdo::runtime::RDOCalcProcessControl>::create(pBlock, pRelRes->m_relResID);
			ASSERT(pCalc);

			LPTypeInfo pType = rdo::Factory<TypeInfo>::delegate<RDOType__void>(RDOParserSrcInfo(@1));
			ASSERT(pType);

			LPExpression pExpression = rdo::Factory<Expression>::create(pType, pCalc, RDOParserSrcInfo(@1));
			ASSERT(pExpression);

			$$ = PARSER->stack().push(pExpression);
		}
	}
	| RDO_IDENTIF '.' RDO_ProcessStart '(' error ')' ';'
	{
		#PASS2
		{
			PARSER->error().error(@5, "В качестве транзакта процессу можно передавать только релеватный ресурс");
		}
	}
	;

watch_start
	: RDO_IDENTIF '.' RDO_WatchStart '(' ')' ';'
	{
		#PASS2
		{
			tstring          name         = PARSER->stack().pop<RDOValue>($1)->value().getIdentificator();
			LPRDOResultGroup pResultGroup = PARSER->findResultGroup(name);
			if (!pResultGroup)
			{
				PARSER->error().error(@1, rdo::format("Неизвестная группа показателей: %s", name.c_str()));
			}

			rdo::runtime::LPRDOCalcWatchGroupStart pCalc = rdo::Factory<rdo::runtime::RDOCalcWatchGroupStart>::create(pResultGroup->getRuntime());
			ASSERT(pCalc);

			LPTypeInfo pType = rdo::Factory<TypeInfo>::delegate<RDOType__void>(RDOParserSrcInfo(@1));
			ASSERT(pType);

			LPExpression pExpression = rdo::Factory<Expression>::create(pType, pCalc, RDOParserSrcInfo(@1));
			ASSERT(pExpression);

			$$ = PARSER->stack().push(pExpression);
		}
	}
	;

watch_stop
	: RDO_IDENTIF '.' RDO_WatchStop '(' ')' ';'
	{
		#PASS2
		{
			tstring          name         = PARSER->stack().pop<RDOValue>($1)->value().getIdentificator();
			LPRDOResultGroup pResultGroup = PARSER->findResultGroup(name);
			if (!pResultGroup)
			{
				PARSER->error().error(@1, rdo::format("Неизвестная группа показателей: %s", name.c_str()));
			}

			rdo::runtime::LPRDOCalcWatchGroupStop pCalc = rdo::Factory<rdo::runtime::RDOCalcWatchGroupStop>::create(pResultGroup->getRuntime());
			ASSERT(pCalc);

			LPTypeInfo pType = rdo::Factory<TypeInfo>::delegate<RDOType__void>(RDOParserSrcInfo(@1));
			ASSERT(pType);

			LPExpression pExpression = rdo::Factory<Expression>::create(pType, pCalc, RDOParserSrcInfo(@1));
			ASSERT(pExpression);

			$$ = PARSER->stack().push(pExpression);
		}
	}
	;

// --------------------------------------------------------------------------------
// -------------------- Синтаксис точек принятия решений
// --------------------------------------------------------------------------------
// -------------------- DPT
// --------------------------------------------------------------------------------
dpt_main
	: dpt_search_end
	{
		#PASS2
		{
			LPRDODPTSearch pDPTSearch = PARSER->stack().pop<RDODPTSearch>($1);
			ASSERT(pDPTSearch);
		}
	}
	| dpt_some_end
	{
		#PASS2
		{
			LPRDODPTSome pDPTSome = PARSER->stack().pop<RDODPTSome>($1);
			ASSERT(pDPTSome);
		}
	}
	| dpt_prior_end
	{
		#PASS2
		{
			LPRDODPTPrior pDPTPrior = PARSER->stack().pop<RDODPTPrior>($1);
			ASSERT(pDPTPrior);
		}
	}
	;

// --------------------------------------------------------------------------------
// -------------------- DPTSearch
// --------------------------------------------------------------------------------
dpt_search_trace
	: /* empty */
	{
		#PASS2
		{
			$$ = rdo::runtime::RDODPTSearchTrace::DPT_no_trace;
		}
	}
	| RDO_no_trace
	{
		#PASS2
		{
			$$ = rdo::runtime::RDODPTSearchTrace::DPT_no_trace;
		}
	}
	| RDO_trace
	{
		#PASS2
		{
			PARSER->error().error(@1, "Данный признак трассировки не используется в точке типа search");
		}
	}
	| RDO_trace_stat
	{
		#PASS2
		{
			$$ = rdo::runtime::RDODPTSearchTrace::DPT_trace_stat;
		}
	}
	| RDO_trace_tops
	{
		#PASS2
		{
			$$ = rdo::runtime::RDODPTSearchTrace::DPT_trace_tops;
		}
	}
	| RDO_trace_all
	{
		#PASS2
		{
			$$ = rdo::runtime::RDODPTSearchTrace::DPT_trace_all;
		}
	}
	;

dpt_search_parent
	: /* empty */
	{
		#PASS2
		{
			$$ = PARSER->stack().push(rdo::Factory<RDOValue>::create());
		}
	}
	| RDO_Parent RDO_IDENTIF
	{
		#PASS2
		{
			$$ = $2;
		}
	}
	| RDO_Parent error
	{
		#PASS2
		{
			PARSER->error().error(@1, "Ошибка в имени родительской точки");
		}
	}
	;

dpt_search_begin
	: RDO_Decision_point RDO_IDENTIF_COLON RDO_search dpt_search_parent dpt_search_trace
	{
		#PASS2
		{
			LPRDOValue pName       = PARSER->stack().pop<RDOValue>($2);
			LPRDOValue pParentName = PARSER->stack().pop<RDOValue>($4);
			ASSERT(pName);

			LPRDODPTSearch pDPTSearch;
			if (pParentName->defined())
			{
				LPRDODPTPrior  pParentDPTPrior  = PARSER->findDPTPrior (pParentName->value().getIdentificator());
				LPRDODPTSearch pParentDPTSearch = PARSER->findDPTSearch(pParentName->value().getIdentificator());
				LPRDODPTSome   pParentDPTSome   = PARSER->findDPTSome  (pParentName->value().getIdentificator());
				if (!pParentDPTPrior && !pParentDPTSearch && !pParentDPTSome)
				{
					PARSER->error().error(@1, rdo::format("Не найдена родитеская точка %s", pParentName->value().getIdentificator().c_str()));
				}
				if (pParentDPTSearch)
				{
					PARSER->error().error(@1, "Точка принятия решений типа search может содержать лишь активности типа rule и не может быть указана в качестве родительской точки");
				}
				else if (pParentDPTPrior)
				{
					LPILogic pParent = pParentDPTPrior->getLogic();
					ASSERT(pParent);
					pDPTSearch = rdo::Factory<RDODPTSearch>::create(pName->src_info(), *reinterpret_cast<PTR(rdo::runtime::RDODPTSearchTrace::DPT_TraceFlag)>(&$5), pParent);
				}
				else if (pParentDPTSome)
				{
					LPILogic pParent = pParentDPTSome->getLogic();
					ASSERT(pParent);
					pDPTSearch = rdo::Factory<RDODPTSearch>::create(pName->src_info(), *reinterpret_cast<PTR(rdo::runtime::RDODPTSearchTrace::DPT_TraceFlag)>(&$5), pParent);
				}
			}
			else
			{
				pDPTSearch = rdo::Factory<RDODPTSearch>::create(pName->src_info(), *reinterpret_cast<PTR(rdo::runtime::RDODPTSearchTrace::DPT_TraceFlag)>(&$5));
			}
			ASSERT(pDPTSearch);
			$$ = PARSER->stack().push(pDPTSearch);
		}
	}
	| RDO_Decision_point RDO_IDENTIF_COLON error
	{
		#PASS2
		{
			PARSER->error().error(@2, @3, "Ожидается тип точки");
		}
	}
	| RDO_Decision_point RDO_IDENTIF error
	{
		#PASS2
		{
			PARSER->error().error(@2, "Ожидается двоеточие");
		}
	}
	| RDO_Decision_point error
	{
		#PASS2
		{
			PARSER->error().error(@1, @2, "После ключевого слова $Decision_point ожидается имя точки");
		}
	}
	;

dpt_search_condition
	: dpt_search_begin RDO_Condition fun_logic
	{
		#PASS2
		{
			LPRDODPTSearch pDPTSearch = PARSER->stack().pop<RDODPTSearch>($1);
			ASSERT(pDPTSearch);
			pDPTSearch->setCondition(PARSER->stack().pop<RDOFUNLogic>($3));
			$$ = PARSER->stack().push(pDPTSearch);
		}
	}
	| dpt_search_begin RDO_Condition RDO_NoCheck
	{
		#PASS2
		{
			LPRDODPTSearch pDPTSearch = PARSER->stack().pop<RDODPTSearch>($1);
			ASSERT(pDPTSearch);
			pDPTSearch->setCondition();
			$$ = PARSER->stack().push(pDPTSearch);
		}
	}
	| dpt_search_begin RDO_Condition error
	{
		#PASS2
		{
			PARSER->error().error(@2, @3, "После ключевого слова $Condition ожидается условие начала поиска (начальная вершина)");
		}
	}
	| dpt_search_begin error
	{
		#PASS2
		{
			PARSER->error().error(@2, "Ожидается ключевое слово $Condition");
		}
	}
	;

dpt_search_prior
	: dpt_search_condition
	| dpt_search_condition RDO_Priority fun_arithm
	{
		#PASS2
		{
			LPRDOFUNArithm pArithm = PARSER->stack().pop<RDOFUNArithm>($3);
			ASSERT(pArithm);
			if (!PARSER->getLastDPTSearch()->setPrior(pArithm))
			{
				PARSER->error().error(@3, "Точка принятия решений пока не может иметь приоритет");
			}
		}
	}
	| dpt_search_condition RDO_Priority error
	{
		#PASS2
		{
			PARSER->error().error(@1, @2, "Ошибка описания приоритета точки принятия решений");
		}
	}
	| dpt_search_condition error
	{
		#PASS2
		{
			PARSER->error().error(@1, @2, "Ожидается ключевое слово $Priority");
		}
	}
	;

dpt_search_term
	: dpt_search_prior RDO_Term_condition fun_logic
	{
		#PASS2
		{
			LPRDODPTSearch pDPTSearch = PARSER->stack().pop<RDODPTSearch>($1);
			ASSERT(pDPTSearch);
			pDPTSearch->setTermCondition(PARSER->stack().pop<RDOFUNLogic>($3));
			$$ = PARSER->stack().push(pDPTSearch);
		}
	}
	| dpt_search_prior RDO_Term_condition RDO_NoCheck
	{
		#PASS2
		{
			LPRDODPTSearch pDPTSearch = PARSER->stack().pop<RDODPTSearch>($1);
			ASSERT(pDPTSearch);
			pDPTSearch->setTermCondition();
			$$ = PARSER->stack().push(pDPTSearch);
		}
	}
	| dpt_search_prior RDO_Term_condition error
	{
		#PASS2
		{
			PARSER->error().error(@2, @3, "После ключевого слова $Term_condition ожидается условие остановки поиска (конечная вершина)");
		}
	}
	| dpt_search_prior error
	{
		#PASS2
		{
			PARSER->error().error(@2, "Ожидается ключевое слово $Term_condition");
		}
	}
	;

dpt_search_evaluate
	: dpt_search_term RDO_Evaluate_by fun_arithm
	{
		#PASS2
		{
			LPRDODPTSearch pDPTSearch = PARSER->stack().pop<RDODPTSearch>($1);
			ASSERT(pDPTSearch);
			pDPTSearch->setEvaluateBy(PARSER->stack().pop<RDOFUNArithm>($3));
			$$ = PARSER->stack().push(pDPTSearch);
		}
	}
	| dpt_search_term RDO_Evaluate_by error
	{
		#PASS2
		{
			PARSER->error().error(@2, @3, "После ключевого слова $Evaluate_by ожидается оценочная функция, например, 0 для поиска в ширину");
		}
	}
	| dpt_search_term error
	{
		#PASS2
		{
			PARSER->error().error(@2, "Ожидается ключевое слово $Evaluate_by");
		}
	}
	;

dp_searcht_compare
	: dpt_search_evaluate RDO_Compare_tops '=' RDO_NO
	{
		#PASS2
		{
			LPRDODPTSearch pDPTSearch = PARSER->stack().pop<RDODPTSearch>($1);
			ASSERT(pDPTSearch);
			pDPTSearch->setCompareTops(false);
			$$ = PARSER->stack().push(pDPTSearch);
		}
	}
	| dpt_search_evaluate RDO_Compare_tops '=' RDO_YES
	{
		#PASS2
		{
			LPRDODPTSearch pDPTSearch = PARSER->stack().pop<RDODPTSearch>($1);
			ASSERT(pDPTSearch);
			pDPTSearch->setCompareTops(true);
			$$ = PARSER->stack().push(pDPTSearch);
		}
	}
	| dpt_search_evaluate RDO_Compare_tops '=' error
	{
		#PASS2
		{
			PARSER->error().error(@3, @4, "Ожидается режим запоминания пройденных вершин (YES или NO)");
		}
	}
	| dpt_search_evaluate RDO_Compare_tops error
	{
		#PASS2
		{
			PARSER->error().error(@2, @3, "Ожидается знак равенства");
		}
	}
	| dpt_search_evaluate error
	{
		#PASS2
		{
			PARSER->error().error(@2, "Ожидается ключевое слово $Compare_tops");
		}
	}
	;

dpt_search_descr_param
	: /* empty */
	| dpt_search_descr_param fun_arithm
	{
		#PASS2
		{
			LPRDOValue pConstant = PARSER->stack().pop<RDOFUNArithm>($2)->expression()->constant();
			if (!pConstant || !pConstant->defined())
			{
				PARSER->error().error(@2, "Параметр может быть только константой");
			}
			LPRDOValue pValue = rdo::Factory<RDOValue>::create(pConstant);
			ASSERT(pValue);
			PARSER->getLastDPTSearch()->getLastActivity()->addParam(pValue);
		}
	}
	| dpt_search_descr_param error
	{
		#PASS2
		{
			PARSER->error().error(@1, @2, "Ошибка описания параметра образца");
		}
	}
	;

dpt_search_descr_value
	: RDO_value_before fun_arithm
	{
		#PASS2
		{
			LPRDODPTSearch pDPTSearch = PARSER->getLastDPTSearch();
			ASSERT(pDPTSearch);
			pDPTSearch->getLastActivity()->setValue(IDPTSearchActivity::vt_before, PARSER->stack().pop<RDOFUNArithm>($2));
		}
	}
	| RDO_value_after fun_arithm
	{
		#PASS2
		{
			LPRDODPTSearch pDPTSearch = PARSER->getLastDPTSearch();
			ASSERT(pDPTSearch);
			pDPTSearch->getLastActivity()->setValue(IDPTSearchActivity::vt_after, PARSER->stack().pop<RDOFUNArithm>($2));
		}
	}
	| RDO_value_before error
	{
		#PASS2
		{
			PARSER->error().error(@1, @2, "Ошибка в арифметическом выражении");
		}
	}
	| RDO_value_after error
	{
		#PASS2
		{
			PARSER->error().error(@1, @2, "Ошибка в арифметическом выражении");
		}
	}
	;

dpt_search_name
	: RDO_IDENTIF_COLON RDO_IDENTIF
	{
		#PASS2
		{
			LPRDODPTSearch pDPTSearch = PARSER->getLastDPTSearch();
			ASSERT(pDPTSearch);
			LPRDOValue pName    = PARSER->stack().pop<RDOValue>($1);
			LPRDOValue pPattern = PARSER->stack().pop<RDOValue>($2);
			ASSERT(pName   );
			ASSERT(pPattern);
			LPRDODPTActivity pActivity = pDPTSearch->addNewActivity(pName->src_info(), pPattern->src_info());
			ASSERT(pActivity);
			$$ = PARSER->stack().push(pActivity);
		}
	}
	| RDO_IDENTIF_COLON error
	{
		#PASS2
		{
			PARSER->error().error(@1, @2, "Ожидается имя образца");
		}
	}
	| RDO_IDENTIF
	{
		#PASS2
		{
			PARSER->error().error(@1, "Ожидается ':'");
		}
	}
	| error
	{
		#PASS2
		{
			PARSER->error().error(@1, "Ожидается имя активности");
		}
	}
	;

dpt_searcht_activity
	: /* empty */
	{
		#PASS2
		{
			$$ = PARSER->stack().push(LPRDODPTActivity());
		}
	}
	| dpt_searcht_activity dpt_search_name dpt_search_descr_param dpt_search_descr_value
	{
		#PASS2
		{
			LPRDODPTActivity pActivity = PARSER->stack().pop<RDODPTActivity>($2);
			ASSERT(pActivity)
			pActivity->endParam(@3);
			$$ = PARSER->stack().push(pActivity);
		}
	}
	| dpt_searcht_activity dpt_search_name dpt_search_descr_param error
	{
		#PASS2
		{
			PARSER->error().error(@3, @4, "Ожидаются ключевые слова value before или value after и стоимость применения правила");
		}
	}
	;

dpt_search_header
	: dp_searcht_compare RDO_Activities dpt_searcht_activity
	| dp_searcht_compare error
	{
		#PASS2
		{
			PARSER->error().error(@1, @2, "После режима запоминания пройденных вершин ожидается ключевое слово $Activities");
		}
	}
	;

dpt_search_end
	: dpt_search_header RDO_End
	{
		#PASS2
		{
			LPRDODPTSearch pDPTSearch = PARSER->stack().pop<RDODPTSearch>($1);
			ASSERT(pDPTSearch);
			pDPTSearch->end();
			$$ = PARSER->stack().push(pDPTSearch);
		}
	}
	| dpt_search_header
	{
		#PASS2
		{
			PARSER->error().error(@1, "Ожидается ключевое слово $End");
		}
	}
	;

// --------------------------------------------------------------------------------
// -------------------- DPTSome
// --------------------------------------------------------------------------------
dpt_some_trace
	: /* empty */
	{
		#PASS2
		{
			$$ = 1;
		}
	}
	| RDO_no_trace
	{
		#PASS2
		{
			$$ = 1;
		}
	}
	| RDO_trace
	{
		#PASS2
		{
			$$ = 2;
		}
	}
	| RDO_trace_stat
	{
		#PASS2
		{
			PARSER->error().error(@1, "Данный признак трассировки не используется в точке типа some");
		}
	}
	| RDO_trace_tops
	{
		#PASS2
		{
			PARSER->error().error(@1, "Данный признак трассировки не используется в точке типа some");
		}
	}
	| RDO_trace_all
	{
		#PASS2
		{
			PARSER->error().error(@1, "Данный признак трассировки не используется в точке типа some");
		}
	}
	;

dpt_some_parent
	: /* empty */
	{
		#PASS2
		{
			$$ = PARSER->stack().push(rdo::Factory<RDOValue>::create());
		}
	}
	| RDO_Parent RDO_IDENTIF
	{
		#PASS2
		{
			$$ = $2;
		}
	}
	| RDO_Parent error
	{
		#PASS2
		{
			PARSER->error().error(@1, "Ошибка в имени родительской точки");
		}
	}
	;

dpt_some_begin
	: RDO_Decision_point RDO_IDENTIF_COLON RDO_some dpt_some_trace dpt_some_parent
	{
		#PASS2
		{
			LPRDOValue pName       = PARSER->stack().pop<RDOValue>($2);
			LPRDOValue pParentName = PARSER->stack().pop<RDOValue>($5);
			ASSERT(pName);

			LPRDODPTSome pDPTSome;
			if (pParentName->defined())
			{
				LPRDODPTPrior  pParentDPTPrior  = PARSER->findDPTPrior (pParentName->value().getIdentificator());
				LPRDODPTSearch pParentDPTSearch = PARSER->findDPTSearch(pParentName->value().getIdentificator());
				LPRDODPTSome   pParentDPTSome   = PARSER->findDPTSome  (pParentName->value().getIdentificator());
				if (!pParentDPTPrior && !pParentDPTSearch && !pParentDPTSome)
				{
					PARSER->error().error(@1, rdo::format("Не найдена родитеская точка %s", pParentName->value().getIdentificator().c_str()));
				}
				if (pParentDPTSearch)
				{
					PARSER->error().error(@5, @1, "Точка принятия решений типа search может содержать лишь активности типа rule и не может быть указана в качестве родительской точки");
				}
				else if (pParentDPTPrior)
				{
					LPILogic pParentLogic = pParentDPTPrior->getLogic();
					ASSERT(pParentLogic);
					pDPTSome = rdo::Factory<RDODPTSome>::create(pName->src_info(), pParentLogic);
				}
				else if (pParentDPTSome)
				{
					LPILogic pParentLogic = pParentDPTSome->getLogic();
					ASSERT(pParentLogic);
					pDPTSome = rdo::Factory<RDODPTSome>::create(pName->src_info(), pParentLogic);
				}
			}
			else
			{
				pDPTSome = rdo::Factory<RDODPTSome>::create(pName->src_info());
			}
			ASSERT(pDPTSome);
			$$ = PARSER->stack().push(pDPTSome);
		}
	}
	;

dpt_some_condition
	: dpt_some_begin RDO_Condition fun_logic
	{
		#PASS2
		{
			LPRDOLogicBase pLogicBase = PARSER->stack().pop<RDOLogicBase>($1);
			ASSERT(pLogicBase);
			pLogicBase->setCondition(PARSER->stack().pop<RDOFUNLogic>($3));
			$$ = PARSER->stack().push(pLogicBase);
		}
	}
	| dpt_some_begin RDO_Condition RDO_NoCheck
	{
		#PASS2
		{
			LPRDOLogicBase pLogicBase = PARSER->stack().pop<RDOLogicBase>($1);
			ASSERT(pLogicBase);
			pLogicBase->setCondition();
			$$ = PARSER->stack().push(pLogicBase);
		}
	}
	| dpt_some_begin RDO_Condition error
	{
		#PASS2
		{
			PARSER->error().error(@2, @3, "После ключевого слова $Condition ожидается условие запуска точки");
		}
	}
	| dpt_some_begin
	{
		#PASS2
		{
			LPRDOLogicBase pLogicBase = PARSER->stack().pop<RDOLogicBase>($1);
			ASSERT(pLogicBase);
			pLogicBase->setCondition();
			$$ = PARSER->stack().push(pLogicBase);
		}
	}
	;

dpt_some_multi
	: dpt_some_condition RDO_Multithreading '=' RDO_NO
	{
		#PASS2
		{
			LPRDOLogicBase pLogicBase = PARSER->stack().pop<RDOLogicBase>($1);
			ASSERT(pLogicBase);
			pLogicBase->setMultithreading(false);
			$$ = PARSER->stack().push(pLogicBase);
		}
	}
	| dpt_some_condition RDO_Multithreading '=' RDO_YES
	{
		#PASS2
		{
			LPRDOLogicBase pLogicBase = PARSER->stack().pop<RDOLogicBase>($1);
			ASSERT(pLogicBase);
			pLogicBase->setMultithreading(true);
			$$ = PARSER->stack().push(pLogicBase);
		}
	}
	| dpt_some_condition RDO_Multithreading error
	{
		#PASS2
		{
			PARSER->error().error(@2, @3, "После ключевого слова $Multithreading ожидается знак равенства и слово YES или NO");
		}
	}
	| dpt_some_condition
	{
		#PASS2
		{
			LPRDOLogicBase pLogicBase = PARSER->stack().pop<RDOLogicBase>($1);
			ASSERT(pLogicBase);
			pLogicBase->setMultithreading(false);
			$$ = PARSER->stack().push(pLogicBase);
		}
	}
	;

dpt_some_prior
	: dpt_some_multi
	| dpt_some_multi RDO_Priority fun_arithm
	{
		#PASS2
		{
			LPRDOFUNArithm pArithm = PARSER->stack().pop<RDOFUNArithm>($3);
			ASSERT(pArithm);
			if (!PARSER->getLastDPTSome()->setPrior(pArithm))
			{
				PARSER->error().error(@3, "Точка принятия решений пока не может иметь приоритет");
			}
		}
	}
	| dpt_some_multi RDO_Priority error
	{
		#PASS2
		{
			PARSER->error().error(@1, @2, "Ошибка описания приоритета точки принятия решений");
		}
	}
	| dpt_some_multi error
	{
		#PASS2
		{
			PARSER->error().error(@1, @2, "После слова $Condition ожидается ключевое слово $Multithreading");
		}
	}
	;

dpt_some_name
	: RDO_IDENTIF_COLON RDO_IDENTIF
	{
		#PASS2
		{
			LPRDODPTSome pDPTSome = PARSER->getLastDPTSome();
			ASSERT(pDPTSome);
			LPRDOValue pName    = PARSER->stack().pop<RDOValue>($1);
			LPRDOValue pPattern = PARSER->stack().pop<RDOValue>($2);
			ASSERT(pName   );
			ASSERT(pPattern);
			LPRDODPTActivity pActivity = pDPTSome->addNewActivity(pName->src_info(), pPattern->src_info());
			ASSERT(pActivity);
			$$ = PARSER->stack().push(pActivity);
		}
	}
	| RDO_IDENTIF_COLON error
	{
		#PASS2
		{
			PARSER->error().error(@1, @2, "Ожидается имя образца");
		}
	}
	| RDO_IDENTIF
	{
		#PASS2
		{
			PARSER->error().error(@1, "Ожидается ':'");
		}
	}
	| error
	{
		#PASS2
		{
			PARSER->error().error(@1, "Ожидается имя активности");
		}
	}
	;

dpt_some_descr_keyb
	: /* empty */
	| dpt_some_descr_keyb '+' RDO_STRING_CONST
	{
		#PASS2
		{
			LPRDODPTActivityHotKey pActivityHotKey = PARSER->getLastDPTSome()->getLastActivity();
			ASSERT(pActivityHotKey);
			tstring key = PARSER->stack().pop<RDOValue>($3)->value().getString();
			pActivityHotKey->addHotKey(key, @3);
		}
	}
	| RDO_STRING_CONST
	{
		#PASS2
		{
			LPRDODPTActivityHotKey pActivityHotKey = PARSER->getLastDPTSome()->getLastActivity();
			ASSERT(pActivityHotKey);
			tstring key = PARSER->stack().pop<RDOValue>($1)->value().getString();
			pActivityHotKey->addHotKey(key, @1);
		}
	}
	;

dpt_some_descr_param
	: /* empty */
	| dpt_some_descr_param fun_arithm
	{
		#PASS2
		{
			LPRDOValue pConstant = PARSER->stack().pop<RDOFUNArithm>($2)->expression()->constant();
			if (!pConstant || !pConstant->defined())
			{
				PARSER->error().error(@2, "Параметр может быть только константой");
			}
			LPRDOValue pValue = rdo::Factory<RDOValue>::create(pConstant);
			ASSERT(pValue);
			PARSER->getLastDPTSome()->getLastActivity()->addParam(pValue);
		}
	}
	| dpt_some_descr_param error
	{
		#PASS2
		{
			PARSER->error().error(@1, @2, "Ошибка описания параметра образца");
		}
	}
	;

dpt_some_activity
	: /* empty */
	{
		#PASS2
		{
			$$ = PARSER->stack().push(LPRDODPTActivity());
		}
	}
	| dpt_some_activity dpt_some_name dpt_some_descr_keyb dpt_some_descr_param
	{
		#PASS2
		{
			LPRDODPTActivity pActivity = PARSER->stack().pop<RDODPTSomeActivity>($2);
			ASSERT(pActivity);
			pActivity->endParam(@3);
			$$ = PARSER->stack().push(pActivity);
		}
	}
	;

dpt_some_header
	: dpt_some_prior RDO_Activities dpt_some_activity
	| dpt_some_prior error
	{
		#PASS2
		{
			PARSER->error().error(@1, @2, "Ожидается ключевое слово $Activities");
		}
	}
	;

dpt_some_end
	: dpt_some_header RDO_End
	{
		#PASS2
		{
			LPRDOLogicBase pLogicBase = PARSER->stack().pop<RDOLogicBase>($1);
			ASSERT(pLogicBase);
			pLogicBase->end();
			$$ = PARSER->stack().push(pLogicBase);
		}
	}
	| dpt_some_header
	{
		#PASS2
		{
			PARSER->error().error(@1, "Ожидается ключевое слово $End");
		}
	}
	;

// --------------------------------------------------------------------------------
// -------------------- DPT Prior
// --------------------------------------------------------------------------------
dpt_prior_trace
	: /* empty */
	{
		#PASS2
		{
			$$ = 1;
		}
	}
	| RDO_no_trace
	{
		#PASS2
		{
			$$ = 1;
		}
	}
	| RDO_trace
	{
		#PASS2
		{
			$$ = 2;
		}
	}
	| RDO_trace_stat
	{
		#PASS2
		{
			PARSER->error().error(@1, "Данный признак трассировки не используется в точке типа prior");
		}
	}
	| RDO_trace_tops
	{
		#PASS2
		{
			PARSER->error().error(@1, "Данный признак трассировки не используется в точке типа prior");
		}
	}
	| RDO_trace_all
	{
		#PASS2
		{
			PARSER->error().error(@1, "Данный признак трассировки не используется в точке типа prior");
		}
	}
	;

dpt_prior_parent
	: /* empty */
	{
		#PASS2
		{
			$$ = PARSER->stack().push(rdo::Factory<RDOValue>::create());
		}
	}
	| RDO_Parent RDO_IDENTIF
	{
		#PASS2
		{
			$$ = $2;
		}
	}
	| RDO_Parent error
	{
		#PASS2
		{
			PARSER->error().error(@1, "Ошибка в имени родительской точки");
		}
	}
	;

dpt_prior_begin
	: RDO_Decision_point RDO_IDENTIF_COLON RDO_prior dpt_prior_parent dpt_prior_trace
	{
		#PASS2
		{
			//! @todo а где признак трассировки для prior ?
			LPRDOValue pName       = PARSER->stack().pop<RDOValue>($2);
			LPRDOValue pParentName = PARSER->stack().pop<RDOValue>($4);
			ASSERT(pName);

			LPRDODPTPrior pDPTPrior;
			if (pParentName->defined())
			{
				LPRDODPTPrior  pParentDPTPrior  = PARSER->findDPTPrior (pParentName->value().getIdentificator());
				LPRDODPTSearch pParentDPTSearch = PARSER->findDPTSearch(pParentName->value().getIdentificator());
				LPRDODPTSome   pParentDPTSome   = PARSER->findDPTSome  (pParentName->value().getIdentificator());
				if (!pParentDPTPrior && !pParentDPTSome && !pParentDPTSearch)
				{
					PARSER->error().error(@1, rdo::format("Не найдена родитеская точка %s", pParentName->value().getIdentificator().c_str()));
				}
				if (pParentDPTSearch)
				{
					PARSER->error().error(@5, @1, "Точка принятия решений типа search может содержать лишь активности типа rule и не может быть указана в качестве родительской точки");
				}
				else if (pParentDPTPrior)
				{
					LPILogic pParentLogic = pParentDPTPrior->getLogic();
					ASSERT(pParentLogic);
					pDPTPrior = rdo::Factory<RDODPTPrior>::create(pName->src_info(), pParentLogic);
				}
				else if (pParentDPTSome)
				{
					LPILogic pParentLogic = pParentDPTSome->getLogic();
					ASSERT(pParentLogic);
					pDPTPrior = rdo::Factory<RDODPTPrior>::create(pName->src_info(), pParentLogic);
				}
			}
			else
			{
				pDPTPrior = rdo::Factory<RDODPTPrior>::create(pName->src_info());
			}
			ASSERT(pDPTPrior);
			$$ = PARSER->stack().push(pDPTPrior);
		}
	}
	;

dpt_prior_condition
	: dpt_prior_begin RDO_Condition fun_logic
	{
		#PASS2
		{
			LPRDODPTPrior pDPTPrior = PARSER->stack().pop<RDODPTPrior>($1);
			ASSERT(pDPTPrior);
			pDPTPrior->setCondition(PARSER->stack().pop<RDOFUNLogic>($3));
			$$ = PARSER->stack().push(pDPTPrior);
		}
	}
	| dpt_prior_begin RDO_Condition RDO_NoCheck
	{
		#PASS2
		{
			LPRDODPTPrior pDPTPrior = PARSER->stack().pop<RDODPTPrior>($1);
			ASSERT(pDPTPrior);
			pDPTPrior->setCondition();
			$$ = PARSER->stack().push(pDPTPrior);
		}
	}
	| dpt_prior_begin RDO_Condition error
	{
		#PASS2
		{
			PARSER->error().error(@2, @3, "После ключевого слова $Condition ожидается условие запуска точки");
		}
	}
	| dpt_prior_begin
	{
		#PASS2
		{
			LPRDODPTPrior pDPTPrior = PARSER->stack().pop<RDODPTPrior>($1);
			ASSERT(pDPTPrior);
			pDPTPrior->setCondition();
			$$ = PARSER->stack().push(pDPTPrior);
		}
	}
	;

dpt_prior_prior
	: dpt_prior_condition
	| dpt_prior_condition RDO_Priority fun_arithm
	{
		#PASS2
		{
			LPRDOFUNArithm pArithm = PARSER->stack().pop<RDOFUNArithm>($3);
			ASSERT(pArithm);
			if (!PARSER->getLastDPTPrior()->setPrior(pArithm))
			{
				PARSER->error().error(@3, "Точка принятия решений пока не может иметь приоритет");
			}
		}
	}
	| dpt_prior_condition RDO_Priority error
	{
		#PASS2
		{
			PARSER->error().error(@1, @2, "Ошибка описания приоритета точки принятия решений");
		}
	}
	| dpt_some_condition error
	{
		#PASS2
		{
			PARSER->error().error(@1, @2, "Ожидается ключевое слово $Priority");
		}
	}
	;

dpt_prior_name
	: RDO_IDENTIF_COLON RDO_IDENTIF
	{
		#PASS2
		{
			LPRDODPTPrior pDPTPrior = PARSER->getLastDPTPrior();
			ASSERT(pDPTPrior);
			LPRDOValue pName    = PARSER->stack().pop<RDOValue>($1);
			LPRDOValue pPattern = PARSER->stack().pop<RDOValue>($2);
			ASSERT(pName   );
			ASSERT(pPattern);
			LPRDODPTActivity pActivity = pDPTPrior->addNewActivity(pName->src_info(), pPattern->src_info());
			ASSERT(pActivity);
			$$ = PARSER->stack().push(pActivity);
		}
	}
	| RDO_IDENTIF_COLON error
	{
		#PASS2
		{
			PARSER->error().error(@1, @2, "Ожидается имя образца");
		}
	}
	| RDO_IDENTIF
	{
		#PASS2
		{
			PARSER->error().error(@1, "Ожидается ':'");
		}
	}
	| error
	{
		#PASS2
		{
			PARSER->error().error(@1, "Ожидается имя активности");
		}
	}
	;

dpt_prior_descr_keyb
	: /* empty */
	| dpt_prior_descr_keyb '+' RDO_STRING_CONST
	{
		#PASS2
		{
			LPRDODPTActivityHotKey pActivityHotKey = PARSER->getLastDPTPrior()->getLastActivity();
			ASSERT(pActivityHotKey);
			tstring key = PARSER->stack().pop<RDOValue>($3)->value().getString();
			pActivityHotKey->addHotKey(key, @3);
		}
	}
	| RDO_STRING_CONST
	{
		#PASS2
		{
			LPRDODPTActivityHotKey pActivityHotKey = PARSER->getLastDPTPrior()->getLastActivity();
			ASSERT(pActivityHotKey);
			tstring key = PARSER->stack().pop<RDOValue>($1)->value().getString();
			pActivityHotKey->addHotKey(key, @1);
		}
	}
	;

dpt_prior_descr_param
	: /* empty */
	| dpt_prior_descr_param fun_arithm
	{
		#PASS2
		{
			LPRDOValue pConstant = PARSER->stack().pop<RDOFUNArithm>($2)->expression()->constant();
			if (!pConstant || !pConstant->defined())
			{
				PARSER->error().error(@2, "Параметр может быть только константой");
			}
			LPRDOValue pValue = rdo::Factory<RDOValue>::create(pConstant);
			ASSERT(pValue);
			PARSER->getLastDPTPrior()->getLastActivity()->addParam(pValue);
		}
	}
	| dpt_prior_descr_param error
	{
		#PASS2
		{
			PARSER->error().error(@1, @2, "Ошибка описания параметра образца");
		}
	}
	;

dpt_prior_activ_prior
	: /* empty */
	| RDO_CF '=' fun_arithm
	{
		#PASS2
		{
			LPRDOFUNArithm pArithm = PARSER->stack().pop<RDOFUNArithm>($3);
			ASSERT(pArithm);
			if (!PARSER->getLastDPTPrior()->getLastActivity()->setPrior(pArithm))
			{
				PARSER->error().error(@3, "Активность не может иметь приоритет");
			}
		}
	}
	| RDO_CF '=' error
	{
		#PASS2
		{
			PARSER->error().error(@1, @2, "Ошибка описания приоритета активности");
		}
	}
	| RDO_CF error
	{
		#PASS2
		{
			PARSER->error().error(@1, @2, "Ошибка: ожидается знак равенства");
		}
	}
	;

dpt_prior_activity
	: /* empty */
	{
		#PASS2
		{
			$$ = PARSER->stack().push(LPRDODPTActivity());
		}
	}
	| dpt_prior_activity dpt_prior_name dpt_prior_descr_keyb dpt_prior_descr_param dpt_prior_activ_prior
	{
		#PASS2
		{
			LPRDODPTActivity pActivity = PARSER->stack().pop<RDODPTActivity>($2);
			ASSERT(pActivity);
			pActivity->endParam(@3);
			$$ = PARSER->stack().push(pActivity);
		}
	}
	;

dpt_prior_header
	: dpt_prior_prior RDO_Activities dpt_prior_activity
	| dpt_prior_prior error
	{
		#PASS2
		{
			PARSER->error().error(@1, @2, "Ожидается ключевое слово $Activities");
		}
	}
	;

dpt_prior_end
	: dpt_prior_header RDO_End
	{
		#PASS2
		{
			LPRDODPTPrior pDPTPrior = PARSER->stack().pop<RDODPTPrior>($1);
			ASSERT(pDPTPrior);
			pDPTPrior->end();
			$$ = PARSER->stack().push(pDPTPrior);
		}
	}
	| dpt_prior_header
	{
		#PASS2
		{
			PARSER->error().error(@1, "Ожидается ключевое слово $End");
		}
	}
	;

// --------------------------------------------------------------------------------
// -------------------- Синтаксис анимации
// --------------------------------------------------------------------------------
// -------------------- Основной цикл
// --------------------------------------------------------------------------------
frm_main
	: frm_end
	| frm_sprite_end
	;

// --------------------------------------------------------------------------------
// -------------------- Фрейм
// --------------------------------------------------------------------------------
frm_begin
	: RDO_Frame RDO_IDENTIF
	{
		#PASS2
		{
			LPRDOFRMFrame pFrame = rdo::Factory<RDOFRMFrame>::create(PARSER->stack().pop<RDOValue>($2)->src_info());
			ASSERT(pFrame);
			$$ = PARSER->stack().push(pFrame);

			LPIContextParamDefinitionManager pContextParamDefinitionManager = PARSER->context()->interface_cast<IContextParamDefinitionManager>();
			ASSERT(pContextParamDefinitionManager);
			pContextParamDefinitionManager->pushParamDefinitionContext();
			pContextParamDefinitionManager->popParamDefinitionContext ();

			LPIContextFunctionBodyManager pContextFunctionBodyManager = PARSER->context()->interface_cast<IContextFunctionBodyManager>();
			ASSERT(pContextFunctionBodyManager);
			pContextFunctionBodyManager->pushFunctionBodyContext();
		}
	}
	;

frm_background
	: frm_begin RDO_Back_picture '=' frm_color
	{
		#PASS2
		{
			LPRDOFRMFrame pFrame = PARSER->stack().pop<RDOFRMFrame>($1);
			ASSERT(pFrame);
			LPRDOFRMColor pBgColor = PARSER->stack().pop<RDOFRMColor>($4);
			ASSERT(pBgColor);
			if (pBgColor->getType() != RDOFRMColor::CT_TRANSPARENT && pBgColor->getType() != RDOFRMColor::CT_RGB)
			{
				PARSER->error().error(@4, "Цвет фона не может быть указан ссылкой на последнее значение");
			}
			pFrame->frame()->setBackgroundColor(pBgColor);
			$$ = PARSER->stack().push(pFrame);
		}
	}
	| frm_begin RDO_Back_picture '='
	{
		#PASS2
		{
			LPRDOFRMFrame pFrame = PARSER->stack().pop<RDOFRMFrame>($1);
			ASSERT(pFrame);
			$$ = PARSER->stack().push(pFrame);
		}
	}
	| frm_begin RDO_Back_picture error
	{
		#PASS2
		{
			PARSER->error().error(@3, "После ключевого слова $Back_picture ожидается знак равенства");
		}
	}
	| frm_begin error
	{
		#PASS2
		{
			PARSER->error().error(@2, "После имени кадра ожидается ключевое слово $Back_picture");
		}
	}
	;

frm_backpicture
	: frm_background RDO_IDENTIF
	{
		#PASS2
		{
			LPRDOFRMFrame pFrame = PARSER->stack().pop<RDOFRMFrame>($1);
			ASSERT(pFrame);
			pFrame->frame()->setBackPicture(PARSER->stack().pop<RDOValue>($2)->value().getIdentificator());
			$$ = PARSER->stack().push(pFrame);
		}
	}
	| frm_background RDO_INT_CONST RDO_INT_CONST
	{
		#PASS2
		{
			LPRDOFRMFrame pFrame = PARSER->stack().pop<RDOFRMFrame>($1);
			ASSERT(pFrame);
			pFrame->frame()->setBackPicture(PARSER->stack().pop<RDOValue>($2)->value().getInt(), PARSER->stack().pop<RDOValue>($3)->value().getInt());
			$$ = PARSER->stack().push(pFrame);
		}
	}
	| frm_background RDO_INT_CONST error
	{
		#PASS2
		{
			PARSER->error().error(@2, "После ширины кадра необходимо указать его высоту");
		}
	}
	| frm_background
	{
		#PASS2
		{
			PARSER->error().error(@1, "Необходимо указать имя фоновой картинки или размер кадра");
		}
	}
	;

frm_header
	: frm_backpicture statement_list
	{
		#PASS2
		{
			LPExpression pExpressionBody = PARSER->stack().pop<Expression>($2);
			ASSERT(pExpressionBody);

			LPContextFunctionBody pContextFunctionBody = PARSER->context()->cast<ContextFunctionBody>();
			ASSERT(pContextFunctionBody);
			pContextFunctionBody->setBody(pExpressionBody->calc());

			LPIContextFunctionBodyManager pContextFunctionBodyManager = PARSER->context()->interface_cast<IContextFunctionBodyManager>();
			ASSERT(pContextFunctionBodyManager);
			pContextFunctionBodyManager->popFunctionBodyContext();

			LPRDOFRMFrame pFrame = PARSER->stack().pop<RDOFRMFrame>($1);
			ASSERT(pFrame);
			$$ = PARSER->stack().push(pFrame);
		}
	}
	;

frm_end
	: frm_header RDO_End
	{
		#PASS2
		{
			LPRDOFRMFrame pFrame = PARSER->stack().pop<RDOFRMFrame>($1);
			ASSERT(pFrame);
			pFrame->end();
		}
	}
	;

// --------------------------------------------------------------------------------
// -------------------- Спрайт
// --------------------------------------------------------------------------------
frm_sprite_end
	: frm_sprite_begin RDO_End
	{
		#PASS2
		{
			LPRDOFRMSprite pSprite = PARSER->stack().pop<RDOFRMSprite>($1);
			ASSERT(pSprite);
			pSprite->end();
		}
	}
	;

frm_sprite_begin
	: frm_sprite_header statement_list
	{
		#PASS2
		{
			LPExpression pExpressionBody = PARSER->stack().pop<Expression>($2);
			ASSERT(pExpressionBody);

			LPContextFunctionBody pContextFunctionBody = PARSER->context()->cast<ContextFunctionBody>();
			ASSERT(pContextFunctionBody);
			pContextFunctionBody->setBody(pExpressionBody->calc());

			LPIContextFunctionBodyManager pContextFunctionBodyManager = PARSER->context()->interface_cast<IContextFunctionBodyManager>();
			ASSERT(pContextFunctionBodyManager);
			pContextFunctionBodyManager->popFunctionBodyContext();

			LPRDOFRMSprite pSprite = PARSER->stack().pop<RDOFRMSprite>($1);
			ASSERT(pSprite);
			$$ = PARSER->stack().push(pSprite);
		}
	}
	;

frm_sprite_header_begin
	: RDO_Sprite RDO_IDENTIF
	{
		#PASS2
		{
			LPRDOFRMSprite pSprite = rdo::Factory<RDOFRMSprite>::create(PARSER->stack().pop<RDOValue>($2)->src_info());
			ASSERT(pSprite);
			$$ = PARSER->stack().push(pSprite);
		}
	}
	;

frm_sprite_header
	: frm_sprite_header_begin param_list
	{
		#PASS2
		{
			LPIContextFunctionBodyManager pContextFunctionBodyManager = PARSER->context()->interface_cast<IContextFunctionBodyManager>();
			ASSERT(pContextFunctionBodyManager);
			pContextFunctionBodyManager->pushFunctionBodyContext();

			LPRDOFRMSprite pSprite = PARSER->stack().pop<RDOFRMSprite>($1);
			ASSERT(pSprite);
			$$ = PARSER->stack().push(pSprite);
		}
	}
	;

frm_sprite
	: RDO_sprite_call RDO_IDENTIF '(' arithm_list ')'
	{
		#PASS2
		{
			LPRDOValue        pValue           = PARSER->stack().pop<RDOValue>($2);
			LPArithmContainer pArithmContainer = PARSER->stack().pop<ArithmContainer>($4);
			ASSERT(pValue);
			ASSERT(pArithmContainer);

			tstring funName = pValue->value().getIdentificator();

			LPExpression pFunctionExpression = RDOFUNArithm::generateByIdentificator(pValue)->expression();
			ASSERT(pFunctionExpression);

			LPRDOFUNParams pFunParams = rdo::Factory<RDOFUNParams>::create(pArithmContainer);
			ASSERT(pFunParams);

			pFunParams->getFunseqName().setSrcInfo(RDOParserSrcInfo(@2, funName));
			pFunParams->setSrcPos (@2, @5);
			pFunParams->setSrcText(funName + "(" + pArithmContainer->src_text() + ")");
			LPExpression pExpression = pFunParams->createCallExpression(pFunctionExpression);
			ASSERT(pExpression);
			$$ = PARSER->stack().push(pExpression);
		}
	}
	| RDO_sprite_call RDO_IDENTIF '(' arithm_list error
	{
		#PASS2
		{
			PARSER->error().error(@5, "Ожидается закрывающая скобка");
		}
	}
	| RDO_sprite_call RDO_IDENTIF '(' error
	{
		#PASS2
		{
			PARSER->error().error(@4, "Ошибка задания параметров");
		}
	}
	| RDO_sprite_call RDO_IDENTIF error
	{
		#PASS2
		{
			PARSER->error().error(@3, "Ожидается открывающая скобка");
		}
	}
	;

param_list
	: param_list_open param_list_body param_list_close
	| param_list_open param_list_body error
	{
		#PASS2
		{
			PARSER->error().error(@3, "Ожидается закрывающая скобка");
		}
	}
	| param_list_open error
	{
		#PASS2
		{
			PARSER->error().error(@2, "Ошибка при описании параметра");
		}
	}
	| error
	{
		#PASS2
		{
			PARSER->error().error(@1, "Ожидается открывающая скобка");
		}
	}
	;

param_list_open
	: '('
	{
		#PASS2
		{
			LPContext pContext = RDOParser::s_parser()->context();
			ASSERT(pContext);
			LPIContextParamDefinitionManager pContextParamDefinitionManager = pContext->interface_cast<IContextParamDefinitionManager>();
			ASSERT(pContextParamDefinitionManager);
			pContextParamDefinitionManager->pushParamDefinitionContext();
		}
	}
	;

param_list_close
	: ')'
	{
		#PASS2
		{
			LPContext pContext = RDOParser::s_parser()->context();
			ASSERT(pContext);
			LPIContextParamDefinitionManager pContextParamDefinitionManager = pContext->interface_cast<IContextParamDefinitionManager>();
			ASSERT(pContextParamDefinitionManager);
			pContextParamDefinitionManager->popParamDefinitionContext();
		}
	}
	;

param_list_body
	: /* empty */
	| param_declaration
	| param_list_body ',' param_declaration
	| param_list_body ',' error
	{
		#PASS2
		{
			PARSER->error().error(@3, "Ошибка в задании параметра");
		}
	}
	;

param_declaration
	: type_declaration RDO_IDENTIF
	{
		#PASS2
		{
			LPTypeInfo pType = PARSER->stack().pop<TypeInfo>($1);
			ASSERT(pType);

			LPRDOValue pName = PARSER->stack().pop<RDOValue>($2);
			ASSERT(pName);

			LPRDOParam pParam = rdo::Factory<RDOParam>::create(pName->src_info(), pType);
			ASSERT(pParam);

			LPContextParamDefinition pContextParamDefinition =
				RDOParser::s_parser()->context().object_dynamic_cast<ContextParamDefinition>();
			ASSERT(pContextParamDefinition);
			pContextParamDefinition->pushParam(pParam);
		}
	}
	;

// --------------------------------------------------------------------------------
// -------------------- Элементы
// --------------------------------------------------------------------------------
frm_item_statement
	: frm_item
	{
		#PASS2
		{
			rdo::runtime::LPRDOFRMItem pItem = PARSER->stack().pop<rdo::runtime::RDOFRMItem>($1);
			ASSERT(pItem);

			PARSER->getLastFRMCommandList()->list()->insertItem(pItem);

			LPExpression pExpression = RDOFRMCommandList::generateExpression(
				pItem,
				RDOParserSrcInfo(@1)
			);
			ASSERT(pExpression);

			$$ = PARSER->stack().push(pExpression);
		}
	}
	| frm_sprite
	{
		#PASS2
		{
			LPExpression pExpression = PARSER->stack().pop<Expression>($1);
			ASSERT(pExpression);

			PARSER->getLastFRMCommandList()->list()->insertItem(pExpression->calc());

			$$ = PARSER->stack().push(pExpression);
		}
	}
	;

frm_item
	: frm_text
	| frm_bitmap
	| frm_rect
	| frm_line
	| frm_circle
	| frm_ellipse
	| frm_r_rect
	| frm_triang
	| frm_s_bmp
	| frm_active
	| frm_ruler
	| frm_space
	;

frm_color
	: RDO_color_transparent
	{
		#PASS2
		{
			LPRDOFRMColor pColor = rdo::Factory<RDOFRMColor>::create(RDOFRMColor::CT_TRANSPARENT);
			ASSERT(pColor);
			$$ = PARSER->stack().push(pColor);
		}
	}
	| RDO_color_last
	{
		#PASS2
		{
			LPRDOFRMColor pColor = rdo::Factory<RDOFRMColor>::create();
			ASSERT(pColor);
			$$ = PARSER->stack().push(pColor);
		}
	}
	| RDO_color_white
	{
		#PASS2
		{
			LPRDOFRMColor pColor = rdo::Factory<RDOFRMColor>::create(rbyte(255), rbyte(255), rbyte(255), RDOParserSrcInfo(@1, LEXER->YYText()));
			ASSERT(pColor);
			$$ = PARSER->stack().push(pColor);
		}
	}
	| RDO_color_black
	{
		#PASS2
		{
			LPRDOFRMColor pColor = rdo::Factory<RDOFRMColor>::create(rbyte(0), rbyte(0), rbyte(0), RDOParserSrcInfo(@1, LEXER->YYText()));
			ASSERT(pColor);
			$$ = PARSER->stack().push(pColor);
		}
	}
	| RDO_color_red
	{
		#PASS2
		{
			LPRDOFRMColor pColor = rdo::Factory<RDOFRMColor>::create(rbyte(255), rbyte(0), rbyte(0), RDOParserSrcInfo(@1, LEXER->YYText()));
			ASSERT(pColor);
			$$ = PARSER->stack().push(pColor);
		}
	}
	| RDO_color_green
	{
		#PASS2
		{
			LPRDOFRMColor pColor = rdo::Factory<RDOFRMColor>::create(rbyte(0), rbyte(255), rbyte(0), RDOParserSrcInfo(@1, LEXER->YYText()));
			ASSERT(pColor);
			$$ = PARSER->stack().push(pColor);
		}
	}
	| RDO_color_blue
	{
		#PASS2
		{
			LPRDOFRMColor pColor = rdo::Factory<RDOFRMColor>::create(rbyte(0), rbyte(0), rbyte(255), RDOParserSrcInfo(@1, LEXER->YYText()));
			ASSERT(pColor);
			$$ = PARSER->stack().push(pColor);
		}
	}
	| RDO_color_cyan
	{
		#PASS2
		{
			LPRDOFRMColor pColor = rdo::Factory<RDOFRMColor>::create(rbyte(0), rbyte(255), rbyte(255), RDOParserSrcInfo(@1, LEXER->YYText()));
			ASSERT(pColor);
			$$ = PARSER->stack().push(pColor);
		}
	}
	| RDO_color_magenta
	{
		#PASS2
		{
			LPRDOFRMColor pColor = rdo::Factory<RDOFRMColor>::create(rbyte(255), rbyte(0), rbyte(255), RDOParserSrcInfo(@1, LEXER->YYText()));
			ASSERT(pColor);
			$$ = PARSER->stack().push(pColor);
		}
	}
	| RDO_color_yellow
	{
		#PASS2
		{
			LPRDOFRMColor pColor = rdo::Factory<RDOFRMColor>::create(rbyte(255), rbyte(255), rbyte(0), RDOParserSrcInfo(@1, LEXER->YYText()));
			ASSERT(pColor);
			$$ = PARSER->stack().push(pColor);
		}
	}
	| RDO_color_gray
	{
		#PASS2
		{
			LPRDOFRMColor pColor = rdo::Factory<RDOFRMColor>::create(rbyte(127), rbyte(127), rbyte(127), RDOParserSrcInfo(@1, LEXER->YYText()));
			ASSERT(pColor);
			$$ = PARSER->stack().push(pColor);
		}
	}
	| '<' RDO_INT_CONST RDO_INT_CONST RDO_INT_CONST '>'
	{
		#PASS2
		{
			LPRDOFUNArithm pRed   = RDOFUNArithm::generateByConst(PARSER->stack().pop<RDOValue>($2));
			LPRDOFUNArithm pGreen = RDOFUNArithm::generateByConst(PARSER->stack().pop<RDOValue>($3));
			LPRDOFUNArithm pBlue  = RDOFUNArithm::generateByConst(PARSER->stack().pop<RDOValue>($4));
			{
				LPRDOTypeRangeRange pRange    = rdo::Factory<RDOTypeRangeRange>::create(rdo::Factory<RDOValue>::create(rdo::explicit_value<ruint>(0), @2), rdo::Factory<RDOValue>::create(rdo::explicit_value<ruint>(255), @2), @2);
				LPRDOTypeIntRange   pIntRange = rdo::Factory<RDOTypeIntRange>::create(pRange);
				LPTypeInfo          pType     = rdo::Factory<TypeInfo>::create(pIntRange, @2);
				pRed->checkParamType(pType);
			}
			{
				LPRDOTypeRangeRange pRange    = rdo::Factory<RDOTypeRangeRange>::create(rdo::Factory<RDOValue>::create(rdo::explicit_value<ruint>(0), @3), rdo::Factory<RDOValue>::create(rdo::explicit_value<ruint>(255), @3), @3);
				LPRDOTypeIntRange   pIntRange = rdo::Factory<RDOTypeIntRange>::create(pRange);
				LPTypeInfo          pType     = rdo::Factory<TypeInfo>::create(pIntRange, @3);
				pGreen->checkParamType(pType);
			}
			{
				LPRDOTypeRangeRange pRange    = rdo::Factory<RDOTypeRangeRange>::create(rdo::Factory<RDOValue>::create(rdo::explicit_value<ruint>(0), @4), rdo::Factory<RDOValue>::create(rdo::explicit_value<ruint>(255), @4), @4);
				LPRDOTypeIntRange   pIntRange = rdo::Factory<RDOTypeIntRange>::create(pRange);
				LPTypeInfo          pType     = rdo::Factory<TypeInfo>::create(pIntRange, @4);
				pBlue->checkParamType(pType);
			}
			LPRDOFRMColor pColor = rdo::Factory<RDOFRMColor>::create(pRed->createCalc(), pGreen->createCalc(), pBlue->createCalc());
			ASSERT(pColor);
			$$ = PARSER->stack().push(pColor);
		}
	}
	| '<' RDO_INT_CONST RDO_INT_CONST RDO_INT_CONST error
	{
		#PASS2
		{
			PARSER->error().error(@4, "Найдены все составляющие цвета, ожидается '>'");
		}
	}
	| '<' RDO_INT_CONST RDO_INT_CONST error
	{
		#PASS2
		{
			PARSER->error().error(@3, @4, "Ожидается синяя составляющая цвета");
		}
	}
	| '<' RDO_INT_CONST error
	{
		#PASS2
		{
			PARSER->error().error(@2, @3, "Ожидается зеленая составляющая цвета");
		}
	}
	| '<' fun_arithm ',' fun_arithm ',' fun_arithm '>'
	{
		#PASS2
		{
			LPRDOFUNArithm pRed   = PARSER->stack().pop<RDOFUNArithm>($2);
			LPRDOFUNArithm pGreen = PARSER->stack().pop<RDOFUNArithm>($4);
			LPRDOFUNArithm pBlue  = PARSER->stack().pop<RDOFUNArithm>($6);
			{
				LPRDOTypeRangeRange pRange    = rdo::Factory<RDOTypeRangeRange>::create(rdo::Factory<RDOValue>::create(rdo::explicit_value<ruint>(0), @2), rdo::Factory<RDOValue>::create(rdo::explicit_value<ruint>(255), @2), @2);
				LPRDOTypeIntRange   pIntRange = rdo::Factory<RDOTypeIntRange>::create(pRange);
				LPTypeInfo          pType     = rdo::Factory<TypeInfo>::create(pIntRange, @2);
				pRed->checkParamType(pType);
			}
			{
				LPRDOTypeRangeRange pRange    = rdo::Factory<RDOTypeRangeRange>::create(rdo::Factory<RDOValue>::create(rdo::explicit_value<ruint>(0), @4), rdo::Factory<RDOValue>::create(rdo::explicit_value<ruint>(255), @4), @4);
				LPRDOTypeIntRange   pIntRange = rdo::Factory<RDOTypeIntRange>::create(pRange);
				LPTypeInfo          pType     = rdo::Factory<TypeInfo>::create(pIntRange, @4);
				pGreen->checkParamType(pType);
			}
			{
				LPRDOTypeRangeRange pRange    = rdo::Factory<RDOTypeRangeRange>::create(rdo::Factory<RDOValue>::create(rdo::explicit_value<ruint>(0), @6), rdo::Factory<RDOValue>::create(rdo::explicit_value<ruint>(255), @6), @6);
				LPRDOTypeIntRange   pIntRange = rdo::Factory<RDOTypeIntRange>::create(pRange);
				LPTypeInfo          pType     = rdo::Factory<TypeInfo>::create(pIntRange, @6);
				pBlue->checkParamType(pType);
			}
			LPRDOFRMColor pColor = rdo::Factory<RDOFRMColor>::create(pRed->createCalc(), pGreen->createCalc(), pBlue->createCalc());
			ASSERT(pColor);
			$$ = PARSER->stack().push(pColor);
		}
	}
	| '<' fun_arithm ',' fun_arithm ',' fun_arithm error
	{
		#PASS2
		{
			PARSER->error().error(@6, "Найдены все составляющие цвета, ожидается '>'");
		}
	}
	| '<' fun_arithm ',' fun_arithm ',' error
	{
		#PASS2
		{
			PARSER->error().error(@5, @6, "Ожидается синяя составляющая цвета");
		}
	}
	| '<' fun_arithm ',' fun_arithm error
	{
		#PASS2
		{
			PARSER->error().error(@4, "После зеленой составляющей цвета ожидается запятая");
		}
	}
	| '<' fun_arithm ',' error
	{
		#PASS2
		{
			PARSER->error().error(@3, @4, "Ожидается зеленая составляющая цвета");
		}
	}
	| '<' fun_arithm error
	{
		#PASS2
		{
			PARSER->error().error(@2, "После красной составляющей цвета ожидается запятая");
		}
	}
	| '<' error
	{
		#PASS2
		{
			PARSER->error().error(@1, "После '<' ожидается красная составляющая цвета");
		}
	}
	;

frm_postype
	: /* empty */
	{
		#PASS2
		{
			$$ = RDOFRMPosition::PT_ABSOLUTE;
		}
	}
	| '+'
	{
		#PASS2
		{
			$$ = RDOFRMPosition::PT_DELTA;
		}
	}
	| '*'
	{
		#PASS2
		{
			$$ = RDOFRMPosition::PT_MULT;
		}
	}
	| '#' RDO_INT_CONST
	{
		#PASS2
		{
			int rilet_id = PARSER->stack().pop<RDOValue>($2)->value().getInt();
			if (rilet_id <= 0)
			{
				PARSER->error().error(@2, "Номер рулетки должен быть больше нуля");
			}
			if (!PARSER->getLastFRMCommandList()->list()->findRulet(rilet_id))
			{
				PARSER->error().error(@2, rdo::format("Рулетки с номером '%d' не существует", rilet_id));
			}
			$$ = RDOFRMPosition::PT_RULET + rilet_id;
		}
	}
	| '#' error
	{
		#PASS2
		{
			PARSER->error().error(@1, "После '#' ожидается целочисленный номер рулетки");
		}
	}
	;

frm_postype_xy
	: frm_postype
	| '='
	{
		#PASS2
		{
			$$ = RDOFRMPosition::PT_GABARIT;
		}
	}
	;

frm_postype_wh
	: frm_postype;
	| '='
	{
		#PASS2
		{
			PARSER->error().error(@1, "Нельзя использовать данное выравнивание для ширины или высоты");
		}
	}
	;

frm_position_xy
	: fun_arithm frm_postype_xy
	{
		#PASS2
		{
			rdo::runtime::LPRDOCalc pCalc = PARSER->stack().pop<RDOFUNArithm>($1)->createCalc();
			if ($2 >= RDOFRMPosition::PT_RULET)
			{
				LPRDOFRMPosition pPosition = rdo::Factory<RDOFRMPosition>::create(pCalc, RDOFRMPosition::PT_RULET, $2 - RDOFRMPosition::PT_RULET);
				ASSERT(pPosition);
				$$ = PARSER->stack().push(pPosition);
			}
			else
			{
				LPRDOFRMPosition pPosition = rdo::Factory<RDOFRMPosition>::create(pCalc, (RDOFRMPosition::PositionType)$2);
				ASSERT(pPosition);
				$$ = PARSER->stack().push(pPosition);
			}
		}
	}
	;

frm_position_wh
	: fun_arithm frm_postype_wh
	{
		#PASS2
		{
			rdo::runtime::LPRDOCalc pCalc = PARSER->stack().pop<RDOFUNArithm>($1)->createCalc();
			if ($2 >= RDOFRMPosition::PT_RULET)
			{
				LPRDOFRMPosition pPosition = rdo::Factory<RDOFRMPosition>::create(pCalc, RDOFRMPosition::PT_RULET, $2 - RDOFRMPosition::PT_RULET);
				ASSERT(pPosition);
				$$ = PARSER->stack().push(pPosition);
			}
			else
			{
				LPRDOFRMPosition pPosition = rdo::Factory<RDOFRMPosition>::create(pCalc, (RDOFRMPosition::PositionType)$2);
				ASSERT(pPosition);
				$$ = PARSER->stack().push(pPosition);
			}
		}
	}
	;

frm_radius
	: fun_arithm frm_postype_xy
	{
		#PASS2
		{
			if ($2 != rdo::runtime::RDOFRMFrame::RDOFRMPosition::PT_ABSOLUTE &&
			    $2 != rdo::runtime::RDOFRMFrame::RDOFRMPosition::PT_DELTA    &&
			    $2 != rdo::runtime::RDOFRMFrame::RDOFRMPosition::PT_MULT
			)
			{
				PARSER->error().error(@2, "Нельзя использовать данное выравнивание для радиуса");
			}

			rdo::runtime::LPRDOCalc pCalc = PARSER->stack().pop<RDOFUNArithm>($1)->createCalc();
			ASSERT(pCalc);

			LPRDOFRMPosition pPosition = rdo::Factory<RDOFRMPosition>::create(pCalc, (RDOFRMPosition::PositionType)$2);
			ASSERT(pPosition);
			$$ = PARSER->stack().push(pPosition);
		}
	};

frm_ruler
	: RDO_ruler '(' RDO_INT_CONST ',' frm_position_xy ',' frm_position_xy ')'
	{
		#PASS2
		{
			LPRDOValue pRuletID = PARSER->stack().pop<RDOValue>($3);
			ASSERT(pRuletID);
			LPRDOFRMRulet pRulet = PARSER->getLastFRMCommandList()->list()->findRulet(pRuletID->value().getInt());
			if (pRulet)
			{
				PARSER->error().push_only(@3, rdo::format("Рулетка с номером '%d' уже существует", pRuletID->value().getInt()));
				PARSER->error().push_only(pRulet->src_info(), "См. первое определение");
				PARSER->error().push_done();
			}
			LPRDOFRMPosition pX = PARSER->stack().pop<RDOFRMPosition>($5);
			LPRDOFRMPosition pY = PARSER->stack().pop<RDOFRMPosition>($7);
			ASSERT(pX);
			ASSERT(pY);
			if (pX->getType() != RDOFRMPosition::PT_ABSOLUTE)
			{
				PARSER->error().error(@5, "Координаты рулетки должны быть абсолютными");
			}
			if (pY->getType() != RDOFRMPosition::PT_ABSOLUTE)
			{
				PARSER->error().error(@7, "Координаты рулетки должны быть абсолютными");
			}
			pRulet = rdo::Factory<RDOFRMRulet>::create(RDOParserSrcInfo(@1), pRuletID->value().getInt(), pX, pY);
			ASSERT(pRulet);
			$$ = PARSER->stack().push(pRulet);
		}
	}
	| RDO_ruler '(' RDO_INT_CONST ',' frm_position_xy ',' frm_position_xy error
	{
		#PASS2
		{
			PARSER->error().error(@7, "Ожидается ')'");
		}
	}
	| RDO_ruler '(' RDO_INT_CONST ',' frm_position_xy ',' error
	{
		#PASS2
		{
			PARSER->error().error(@6, @7, "Ожидается координата по оси Y");
		}
	}
	| RDO_ruler '(' RDO_INT_CONST ',' frm_position_xy error
	{
		#PASS2
		{
			PARSER->error().error(@5, "Ожидается запятая");
		}
	}
	| RDO_ruler '(' RDO_INT_CONST ',' error
	{
		#PASS2
		{
			PARSER->error().error(@4, @5, "Ожидается координата по оси X");
		}
	}
	| RDO_ruler '(' RDO_INT_CONST error
	{
		#PASS2
		{
			PARSER->error().error(@3, "Ожидается запятая");
		}
	}
	| RDO_ruler '(' error
	{
		#PASS2
		{
			PARSER->error().error(@2, @3, "Ожидается номер рулетки");
		}
	}
	| RDO_ruler error
	{
		#PASS2
		{
			PARSER->error().error(@1, "Ожидается '('");
		}
	}
	;

frm_space
	: RDO_space '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh ',' frm_position_wh ')'
	{
		#PASS2
		{
			LPRDOFRMPosition pX      = PARSER->stack().pop<RDOFRMPosition>($3);
			LPRDOFRMPosition pY      = PARSER->stack().pop<RDOFRMPosition>($5);
			LPRDOFRMPosition pWidth  = PARSER->stack().pop<RDOFRMPosition>($7);
			LPRDOFRMPosition pHeight = PARSER->stack().pop<RDOFRMPosition>($9);
			ASSERT(pX     );
			ASSERT(pY     );
			ASSERT(pWidth );
			ASSERT(pHeight);
			LPRDOFRMSpace pSpace = rdo::Factory<RDOFRMSpace>::create(PARSER->getLastFRMCommandList()->list(), pX, pY, pWidth, pHeight);
			ASSERT(pSpace);
			$$ = PARSER->stack().push(pSpace);
		}
	}
	| RDO_space '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh ',' frm_position_wh error
	{
		#PASS2
		{
			PARSER->error().error(@9, "Ожидается ')'");
		}
	}
	| RDO_space '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh ',' error
	{
		#PASS2
		{
			PARSER->error().error(@8, @9, "Ожидается высота");
		}
	}
	| RDO_space '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh error
	{
		#PASS2
		{
			PARSER->error().error(@7, "Ожидается запятая");
		}
	}
	| RDO_space '(' frm_position_xy ',' frm_position_xy ',' error
	{
		#PASS2
		{
			PARSER->error().error(@6, @7, "Ожидается ширина");
		}
	}
	| RDO_space '(' frm_position_xy ',' frm_position_xy error
	{
		#PASS2
		{
			PARSER->error().error(@5, "Ожидается запятая");
		}
	}
	| RDO_space '(' frm_position_xy ',' error
	{
		#PASS2
		{
			PARSER->error().error(@4, @5, "Ожидается координата по оси Y");
		}
	}
	| RDO_space '(' frm_position_xy error
	{
		#PASS2
		{
			PARSER->error().error(@3, "Ожидается запятая");
		}
	}
	| RDO_space '(' error
	{
		#PASS2
		{
			PARSER->error().error(@2, @3, "Ожидается координата по оси X");
		}
	}
	| RDO_space error
	{
		#PASS2
		{
			PARSER->error().error(@1, "Ожидается '('");
		}
	}
	;

frm_text_align
	: /* empty */ 
	{
		#PASS2
		{
			$$ = rdo::animation::TextElement::TETA_LEFT;  
		}
	}
	| '<'         
	{
		#PASS2
		{
			$$ = rdo::animation::TextElement::TETA_LEFT;  
		}
	}
	| '='         
	{
		#PASS2
		{
			$$ = rdo::animation::TextElement::TETA_CENTER;
		}
	}
	| '>'         
	{
		#PASS2
		{
			$$ = rdo::animation::TextElement::TETA_RIGHT; 
		}
	}
	;

frm_text_common
	: RDO_text '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh ',' frm_position_wh ',' frm_color ',' frm_color ','
	{
		#PASS2
		{
			LPRDOFRMPosition pX      = PARSER->stack().pop<RDOFRMPosition>($3);
			LPRDOFRMPosition pY      = PARSER->stack().pop<RDOFRMPosition>($5);
			LPRDOFRMPosition pWidth  = PARSER->stack().pop<RDOFRMPosition>($7);
			LPRDOFRMPosition pHeight = PARSER->stack().pop<RDOFRMPosition>($9);
			ASSERT(pX     );
			ASSERT(pY     );
			ASSERT(pWidth );
			ASSERT(pHeight);
			LPRDOFRMColor pBgColor = PARSER->stack().pop<RDOFRMColor>($11);
			LPRDOFRMColor pFgColor = PARSER->stack().pop<RDOFRMColor>($13);
			ASSERT(pBgColor);
			ASSERT(pFgColor);
			pBgColor->setType(RDOFRMColor::CT_LAST_BG_TEXT);
			pFgColor->setType(RDOFRMColor::CT_LAST_FG_TEXT);
			LPRDOFRMText pText = rdo::Factory<RDOFRMText>::create(PARSER->getLastFRMCommandList()->list(), pX, pY, pWidth, pHeight, pBgColor, pFgColor);
			ASSERT(pText);
			$$ = PARSER->stack().push(pText);
		}
	}
	| RDO_text '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh ',' frm_position_wh ',' frm_color ',' frm_color error
	{
		#PASS2
		{
			PARSER->error().error(@13, "Ожидается запятая");
		}
	}
	| RDO_text '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh ',' frm_position_wh ',' frm_color ',' error
	{
		#PASS2
		{
			PARSER->error().error(@12, @13, "Ожидается цвет текста");
		}
	}
	| RDO_text '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh ',' frm_position_wh ',' frm_color error
	{
		#PASS2
		{
			PARSER->error().error(@11, "Ожидается запятая");
		}
	}
	| RDO_text '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh ',' frm_position_wh ',' error
	{
		#PASS2
		{
			PARSER->error().error(@10, @11, "Ожидается цвет фона");
		}
	}
	| RDO_text '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh ',' frm_position_wh error
	{
		#PASS2
		{
			PARSER->error().error(@9, "Ожидается запятая");
		}
	}
	| RDO_text '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh ',' error
	{
		#PASS2
		{
			PARSER->error().error(@8, @9, "Ожидается высота");
		}
	}
	| RDO_text '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh error
	{
		#PASS2
		{
			PARSER->error().error(@7, "Ожидается запятая");
		}
	}
	| RDO_text '(' frm_position_xy ',' frm_position_xy ',' error
	{
		#PASS2
		{
			PARSER->error().error(@6, @7, "Ожидается ширина");
		}
	}
	| RDO_text '(' frm_position_xy ',' frm_position_xy error
	{
		#PASS2
		{
			PARSER->error().error(@5, "Ожидается запятая");
		}
	}
	| RDO_text '(' frm_position_xy ',' error
	{
		#PASS2
		{
			PARSER->error().error(@4, @5, "Ожидается координата по оси Y");
		}
	}
	| RDO_text '(' frm_position_xy error
	{
		#PASS2
		{
			PARSER->error().error(@3, "Ожидается запятая");
		}
	}
	| RDO_text '(' error
	{
		#PASS2
		{
			PARSER->error().error(@2, @3, "Ожидается координата по оси X");
		}
	}
	| RDO_text error
	{
		#PASS2
		{
			PARSER->error().error(@1, "Ожидается '('");
		}
	}
	;

frm_text
	: frm_text_common frm_text_align fun_arithm ')'
	{
		#PASS2
		{
			LPRDOFRMText pText = PARSER->stack().pop<RDOFRMText>($1);
			ASSERT(pText);
			pText->setText((rdo::animation::TextElement::TextAlign)$2, PARSER->stack().pop<RDOFUNArithm>($3)->createCalc());
			$$ = PARSER->stack().push(pText);
		}
	}
	| frm_text_common frm_text_align RDO_STRING_CONST ')'
	{
		#PASS2
		{
			LPRDOFRMText pText = PARSER->stack().pop<RDOFRMText>($1);
			ASSERT(pText);
			pText->setText((rdo::animation::TextElement::TextAlign)$2, PARSER->stack().pop<RDOValue>($3)->value().getString());
			$$ = PARSER->stack().push(pText);
		}
	}
	| frm_text_common frm_text_align fun_arithm error
	{
		#PASS2
		{
			PARSER->error().error(@3, "Ожидается ')'");
		}
	}
	| frm_text_common frm_text_align RDO_STRING_CONST error
	{
		#PASS2
		{
			PARSER->error().error(@3, "Ожидается ')'");
		}
	}
	| frm_text_common frm_text_align error
	{
		#PASS2
		{
			PARSER->error().error(@2, "Ожидается параметр ресурса или строка");
		}
	}
	;

frm_bitmap
	: RDO_bitmap '(' frm_position_xy ',' frm_position_xy ',' RDO_IDENTIF ')'
	{
		#PASS2
		{
			LPRDOFRMPosition pX = PARSER->stack().pop<RDOFRMPosition>($3);
			LPRDOFRMPosition pY = PARSER->stack().pop<RDOFRMPosition>($5);
			ASSERT(pX);
			ASSERT(pY);
			LPRDOFRMBitmap pBitmap = rdo::Factory<RDOFRMBitmap>::create(PARSER->getLastFRMCommandList()->list(), pX, pY, PARSER->stack().pop<RDOValue>($7)->value().getIdentificator());
			ASSERT(pBitmap);
			$$ = PARSER->stack().push(pBitmap);
		}
	}
	| RDO_bitmap '(' frm_position_xy ',' frm_position_xy ',' RDO_IDENTIF ',' RDO_IDENTIF ')'
	{
		#PASS2
		{
			LPRDOFRMPosition pX = PARSER->stack().pop<RDOFRMPosition>($3);
			LPRDOFRMPosition pY = PARSER->stack().pop<RDOFRMPosition>($5);
			ASSERT(pX);
			ASSERT(pY);
			LPRDOFRMBitmap pBitmap = rdo::Factory<RDOFRMBitmap>::create(PARSER->getLastFRMCommandList()->list(), pX, pY, PARSER->stack().pop<RDOValue>($7)->value().getIdentificator(), PARSER->stack().pop<RDOValue>($9)->value().getIdentificator());
			ASSERT(pBitmap);
			$$ = PARSER->stack().push(pBitmap);
		}
	}
	| RDO_bitmap '(' frm_position_xy ',' frm_position_xy ',' RDO_IDENTIF ',' RDO_IDENTIF error
	{
		#PASS2
		{
			PARSER->error().error(@9, "Ожидается ')'");
		}
	}
	| RDO_bitmap '(' frm_position_xy ',' frm_position_xy ',' RDO_IDENTIF ',' error
	{
		#PASS2
		{
			PARSER->error().error(@8, @9, "Ожидается имя маски для картинки");
		}
	}
	| RDO_bitmap '(' frm_position_xy ',' frm_position_xy ',' RDO_IDENTIF error
	{
		#PASS2
		{
			PARSER->error().error(@7, "Ожидается ')'");
		}
	}
	| RDO_bitmap '(' frm_position_xy ',' frm_position_xy ',' error
	{
		#PASS2
		{
			PARSER->error().error(@6, @7, "Ожидается имя картинки");
		}
	}
	| RDO_bitmap '(' frm_position_xy ',' frm_position_xy error
	{
		#PASS2
		{
			PARSER->error().error(@5, "Ожидается запятая");
		}
	}
	| RDO_bitmap '(' frm_position_xy ',' error
	{
		#PASS2
		{
			PARSER->error().error(@4, @5, "Ожидается координата по оси Y");
		}
	}
	| RDO_bitmap '(' frm_position_xy error
	{
		#PASS2
		{
			PARSER->error().error(@3, "Ожидается запятая");
		}
	}
	| RDO_bitmap '(' error
	{
		#PASS2
		{
			PARSER->error().error(@2, @3, "Ожидается координата по оси X");
		}
	}
	| RDO_bitmap error
	{
		#PASS2
		{
			PARSER->error().error(@1, "Ожидается '('");
		}
	}
	;

frm_s_bmp
	: RDO_s_bmp '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh ',' frm_position_wh ',' RDO_IDENTIF ')'
	{
		#PASS2
		{
			LPRDOFRMPosition pX      = PARSER->stack().pop<RDOFRMPosition>($3);
			LPRDOFRMPosition pY      = PARSER->stack().pop<RDOFRMPosition>($5);
			LPRDOFRMPosition pWidth  = PARSER->stack().pop<RDOFRMPosition>($7);
			LPRDOFRMPosition pHeight = PARSER->stack().pop<RDOFRMPosition>($9);
			ASSERT(pX     );
			ASSERT(pY     );
			ASSERT(pWidth );
			ASSERT(pHeight);
			LPRDOFRMBitmapStretch pBitmap = rdo::Factory<RDOFRMBitmapStretch>::create(PARSER->getLastFRMCommandList()->list(), pX, pY, pWidth, pHeight, PARSER->stack().pop<RDOValue>($11)->value().getIdentificator());
			ASSERT(pBitmap);
			$$ = PARSER->stack().push(pBitmap);
		}
	}
	| RDO_s_bmp '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh ',' frm_position_wh ',' RDO_IDENTIF ',' RDO_IDENTIF ')'
	{
		#PASS2
		{
			LPRDOFRMPosition pX      = PARSER->stack().pop<RDOFRMPosition>($3);
			LPRDOFRMPosition pY      = PARSER->stack().pop<RDOFRMPosition>($5);
			LPRDOFRMPosition pWidth  = PARSER->stack().pop<RDOFRMPosition>($7);
			LPRDOFRMPosition pHeight = PARSER->stack().pop<RDOFRMPosition>($9);
			ASSERT(pX     );
			ASSERT(pY     );
			ASSERT(pWidth );
			ASSERT(pHeight);
			LPRDOFRMBitmapStretch pBitmap = rdo::Factory<RDOFRMBitmapStretch>::create(PARSER->getLastFRMCommandList()->list(), pX, pY, pWidth, pHeight, PARSER->stack().pop<RDOValue>($11)->value().getIdentificator(), PARSER->stack().pop<RDOValue>($13)->value().getIdentificator());
			ASSERT(pBitmap);
			$$ = PARSER->stack().push(pBitmap);
		}
	}
	| RDO_s_bmp '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh ',' frm_position_wh ',' RDO_IDENTIF ',' RDO_IDENTIF error
	{
		#PASS2
		{
			PARSER->error().error(@13, "Ожидается ')'");
		}
	}
	| RDO_s_bmp '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh ',' frm_position_wh ',' RDO_IDENTIF ',' error
	{
		#PASS2
		{
			PARSER->error().error(@12, @13, "Ожидается имя маски для картинки");
		}
	}
	| RDO_s_bmp '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh ',' frm_position_wh ',' RDO_IDENTIF error
	{
		#PASS2
		{
			PARSER->error().error(@11, "Ожидается ')'");
		}
	}
	| RDO_s_bmp '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh ',' frm_position_wh ',' error
	{
		#PASS2
		{
			PARSER->error().error(@10, @11, "Ожидается имя картинки");
		}
	}
	| RDO_s_bmp '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh ',' frm_position_wh error
	{
		#PASS2
		{
			PARSER->error().error(@9, "Ожидается запятая");
		}
	}
	| RDO_s_bmp '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh ',' error
	{
		#PASS2
		{
			PARSER->error().error(@8, @9, "Ожидается высота");
		}
	}
	| RDO_s_bmp '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh error
	{
		#PASS2
		{
			PARSER->error().error(@7, "Ожидается запятая");
		}
	}
	| RDO_s_bmp '(' frm_position_xy ',' frm_position_xy ',' error
	{
		#PASS2
		{
			PARSER->error().error(@6, @7, "Ожидается ширина");
		}
	}
	| RDO_s_bmp '(' frm_position_xy ',' frm_position_xy error
	{
		#PASS2
		{
			PARSER->error().error(@5, "Ожидается запятая");
		}
	}
	| RDO_s_bmp '(' frm_position_xy ',' error
	{
		#PASS2
		{
			PARSER->error().error(@4, @5, "Ожидается координата по оси Y");
		}
	}
	| RDO_s_bmp '(' frm_position_xy error
	{
		#PASS2
		{
			PARSER->error().error(@3, "Ожидается запятая");
		}
	}
	| RDO_s_bmp '(' error
	{
		#PASS2
		{
			PARSER->error().error(@2, @3, "Ожидается координата по оси X");
		}
	}
	| RDO_s_bmp error
	{
		#PASS2
		{
			PARSER->error().error(@1, "Ожидается '('");
		}
	}
	;

frm_rect
	: RDO_rect '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh ',' frm_position_wh ',' frm_color ',' frm_color ')'
	{
		#PASS2
		{
			LPRDOFRMPosition pX      = PARSER->stack().pop<RDOFRMPosition>($3);
			LPRDOFRMPosition pY      = PARSER->stack().pop<RDOFRMPosition>($5);
			LPRDOFRMPosition pWidth  = PARSER->stack().pop<RDOFRMPosition>($7);
			LPRDOFRMPosition pHeight = PARSER->stack().pop<RDOFRMPosition>($9);
			ASSERT(pX     );
			ASSERT(pY     );
			ASSERT(pWidth );
			ASSERT(pHeight);
			LPRDOFRMColor pBgColor = PARSER->stack().pop<RDOFRMColor>($11);
			LPRDOFRMColor pFgColor = PARSER->stack().pop<RDOFRMColor>($13);
			ASSERT(pBgColor);
			ASSERT(pFgColor);
			pBgColor->setType(RDOFRMColor::CT_LAST_BG);
			pFgColor->setType(RDOFRMColor::CT_LAST_FG);
			LPRDOFRMRect pRect = rdo::Factory<RDOFRMRect>::create(PARSER->getLastFRMCommandList()->list(), pX, pY, pWidth, pHeight, pBgColor, pFgColor);
			ASSERT(pRect);
			$$ = PARSER->stack().push(pRect);
		}
	}
	| RDO_rect '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh ',' frm_position_wh ',' frm_color ')'
	{
		#PASS2
		{
			LPRDOFRMPosition pX      = PARSER->stack().pop<RDOFRMPosition>($3);
			LPRDOFRMPosition pY      = PARSER->stack().pop<RDOFRMPosition>($5);
			LPRDOFRMPosition pWidth  = PARSER->stack().pop<RDOFRMPosition>($7);
			LPRDOFRMPosition pHeight = PARSER->stack().pop<RDOFRMPosition>($9);
			ASSERT(pX     );
			ASSERT(pY     );
			ASSERT(pWidth );
			ASSERT(pHeight);
			LPRDOFRMColor pBgColor = PARSER->stack().pop<RDOFRMColor>($11);
			LPRDOFRMColor pFgColor = rdo::Factory<RDOFRMColor>::create();
			ASSERT(pBgColor);
			ASSERT(pFgColor);
			pBgColor->setType(RDOFRMColor::CT_LAST_BG);
			pFgColor->setType(RDOFRMColor::CT_LAST_FG);
			LPRDOFRMRect pRect = rdo::Factory<RDOFRMRect>::create(PARSER->getLastFRMCommandList()->list(), pX, pY, pWidth, pHeight, pBgColor, pFgColor);
			ASSERT(pRect);
			$$ = PARSER->stack().push(pRect);
		}
	}
	| RDO_rect '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh ',' frm_position_wh ')'
	{
		#PASS2
		{
			LPRDOFRMPosition pX      = PARSER->stack().pop<RDOFRMPosition>($3);
			LPRDOFRMPosition pY      = PARSER->stack().pop<RDOFRMPosition>($5);
			LPRDOFRMPosition pWidth  = PARSER->stack().pop<RDOFRMPosition>($7);
			LPRDOFRMPosition pHeight = PARSER->stack().pop<RDOFRMPosition>($9);
			ASSERT(pX     );
			ASSERT(pY     );
			ASSERT(pWidth );
			ASSERT(pHeight);
			LPRDOFRMColor pBgColor = rdo::Factory<RDOFRMColor>::create();
			LPRDOFRMColor pFgColor = rdo::Factory<RDOFRMColor>::create();
			ASSERT(pBgColor);
			ASSERT(pFgColor);
			pBgColor->setType(RDOFRMColor::CT_LAST_BG);
			pFgColor->setType(RDOFRMColor::CT_LAST_FG);
			LPRDOFRMRect pRect = rdo::Factory<RDOFRMRect>::create(PARSER->getLastFRMCommandList()->list(), pX, pY, pWidth, pHeight, pBgColor, pFgColor);
			ASSERT(pRect);
			$$ = PARSER->stack().push(pRect);
		}
	}
	| RDO_rect '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh ')'
	{
		#PASS2
		{
			LPRDOFRMPosition pX      = PARSER->stack().pop<RDOFRMPosition>($3);
			LPRDOFRMPosition pY      = PARSER->stack().pop<RDOFRMPosition>($5);
			LPRDOFRMPosition pWidth  = PARSER->stack().pop<RDOFRMPosition>($7);
			LPRDOFRMPosition pHeight = rdo::Factory<RDOFRMPosition>::create(rdo::Factory<rdo::runtime::RDOCalcConst>::create(0), RDOFRMPosition::PT_DELTA);
			ASSERT(pX     );
			ASSERT(pY     );
			ASSERT(pWidth );
			ASSERT(pHeight);
			LPRDOFRMColor pBgColor = rdo::Factory<RDOFRMColor>::create();
			LPRDOFRMColor pFgColor = rdo::Factory<RDOFRMColor>::create();
			ASSERT(pBgColor);
			ASSERT(pFgColor);
			pBgColor->setType(RDOFRMColor::CT_LAST_BG);
			pFgColor->setType(RDOFRMColor::CT_LAST_FG);
			LPRDOFRMRect pRect = rdo::Factory<RDOFRMRect>::create(PARSER->getLastFRMCommandList()->list(), pX, pY, pWidth, pHeight, pBgColor, pFgColor);
			ASSERT(pRect);
			$$ = PARSER->stack().push(pRect);
		}
	}
	| RDO_rect '(' frm_position_xy ',' frm_position_xy ')'
	{
		#PASS2
		{
			LPRDOFRMPosition pX      = PARSER->stack().pop<RDOFRMPosition>($3);
			LPRDOFRMPosition pY      = PARSER->stack().pop<RDOFRMPosition>($5);
			LPRDOFRMPosition pWidth  = rdo::Factory<RDOFRMPosition>::create(rdo::Factory<rdo::runtime::RDOCalcConst>::create(0), RDOFRMPosition::PT_DELTA);
			LPRDOFRMPosition pHeight = rdo::Factory<RDOFRMPosition>::create(rdo::Factory<rdo::runtime::RDOCalcConst>::create(0), RDOFRMPosition::PT_DELTA);
			ASSERT(pX     );
			ASSERT(pY     );
			ASSERT(pWidth );
			ASSERT(pHeight);
			LPRDOFRMColor pBgColor = rdo::Factory<RDOFRMColor>::create();
			LPRDOFRMColor pFgColor = rdo::Factory<RDOFRMColor>::create();
			ASSERT(pBgColor);
			ASSERT(pFgColor);
			pBgColor->setType(RDOFRMColor::CT_LAST_BG);
			pFgColor->setType(RDOFRMColor::CT_LAST_FG);
			LPRDOFRMRect pRect = rdo::Factory<RDOFRMRect>::create(PARSER->getLastFRMCommandList()->list(), pX, pY, pWidth, pHeight, pBgColor, pFgColor);
			ASSERT(pRect);
			$$ = PARSER->stack().push(pRect);
		}
	}
	| RDO_rect '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh ',' frm_position_wh ',' frm_color ',' frm_color error
	{
		#PASS2
		{
			PARSER->error().error(@13, "Ожидается ')'");
		}
	}
	| RDO_rect '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh ',' frm_position_wh ',' frm_color ',' error
	{
		#PASS2
		{
			PARSER->error().error(@12, @13, "Ожидается цвет линии прямоугольника");
		}
	}
	| RDO_rect '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh ',' frm_position_wh ',' frm_color error
	{
		#PASS2
		{
			PARSER->error().error(@11, "Ожидается запятая");
		}
	}
	| RDO_rect '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh ',' frm_position_wh ',' error
	{
		#PASS2
		{
			PARSER->error().error(@10, @11, "Ожидается цвет фона");
		}
	}
	| RDO_rect '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh ',' frm_position_wh error
	{
		#PASS2
		{
			PARSER->error().error(@9, "Ожидается запятая");
		}
	}
	| RDO_rect '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh ',' error
	{
		#PASS2
		{
			PARSER->error().error(@8, @9, "Ожидается высота");
		}
	}
	| RDO_rect '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh error
	{
		#PASS2
		{
			PARSER->error().error(@7, "Ожидается запятая");
		}
	}
	| RDO_rect '(' frm_position_xy ',' frm_position_xy ',' error
	{
		#PASS2
		{
			PARSER->error().error(@6, @7, "Ожидается ширина");
		}
	}
	| RDO_rect '(' frm_position_xy ',' frm_position_xy error
	{
		#PASS2
		{
			PARSER->error().error(@5, "Ожидается запятая");
		}
	}
	| RDO_rect '(' frm_position_xy ',' error
	{
		#PASS2
		{
			PARSER->error().error(@4, @5, "Ожидается координата по оси Y");
		}
	}
	| RDO_rect '(' frm_position_xy error
	{
		#PASS2
		{
			PARSER->error().error(@3, "Ожидается запятая");
		}
	}
	| RDO_rect '(' error
	{
		#PASS2
		{
			PARSER->error().error(@2, @3, "Ожидается координата по оси X");
		}
	}
	| RDO_rect error
	{
		#PASS2
		{
			PARSER->error().error(@1, "Ожидается '('");
		}
	}
	;

frm_r_rect
	: RDO_r_rect '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh ',' frm_position_wh ',' frm_color ',' frm_color ')'
	{
		#PASS2
		{
			LPRDOFRMPosition pX      = PARSER->stack().pop<RDOFRMPosition>($3);
			LPRDOFRMPosition pY      = PARSER->stack().pop<RDOFRMPosition>($5);
			LPRDOFRMPosition pWidth  = PARSER->stack().pop<RDOFRMPosition>($7);
			LPRDOFRMPosition pHeight = PARSER->stack().pop<RDOFRMPosition>($9);
			ASSERT(pX     );
			ASSERT(pY     );
			ASSERT(pWidth );
			ASSERT(pHeight);
			LPRDOFRMColor pBgColor = PARSER->stack().pop<RDOFRMColor>($11);
			LPRDOFRMColor pFgColor = PARSER->stack().pop<RDOFRMColor>($13);
			ASSERT(pBgColor);
			ASSERT(pFgColor);
			pBgColor->setType(RDOFRMColor::CT_LAST_BG);
			pFgColor->setType(RDOFRMColor::CT_LAST_FG);
			LPRDOFRMRectRound pRoundRect = rdo::Factory<RDOFRMRectRound>::create(PARSER->getLastFRMCommandList()->list(), pX, pY, pWidth, pHeight, pBgColor, pFgColor);
			ASSERT(pRoundRect);
			$$ = PARSER->stack().push(pRoundRect);
		}
	}
	| RDO_r_rect '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh ',' frm_position_wh ',' frm_color ',' frm_color error
	{
		#PASS2
		{
			PARSER->error().error(@13, "Ожидается ')'");
		}
	}
	| RDO_r_rect '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh ',' frm_position_wh ',' frm_color ',' error
	{
		#PASS2
		{
			PARSER->error().error(@12, @13, "Ожидается цвет линии прямоугольника");
		}
	}
	| RDO_r_rect '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh ',' frm_position_wh ',' frm_color error
	{
		#PASS2
		{
			PARSER->error().error(@11, "Ожидается запятая");
		}
	}
	| RDO_r_rect '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh ',' frm_position_wh ',' error
	{
		#PASS2
		{
			PARSER->error().error(@10, @11, "Ожидается цвет фона");
		}
	}
	| RDO_r_rect '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh ',' frm_position_wh error
	{
		#PASS2
		{
			PARSER->error().error(@9, "Ожидается запятая");
		}
	}
	| RDO_r_rect '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh ',' error
	{
		#PASS2
		{
			PARSER->error().error(@8, @9, "Ожидается высота");
		}
	}
	| RDO_r_rect '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh error
	{
		#PASS2
		{
			PARSER->error().error(@7, "Ожидается запятая");
		}
	}
	| RDO_r_rect '(' frm_position_xy ',' frm_position_xy ',' error
	{
		#PASS2
		{
			PARSER->error().error(@6, @7, "Ожидается ширина");
		}
	}
	| RDO_r_rect '(' frm_position_xy ',' frm_position_xy error
	{
		#PASS2
		{
			PARSER->error().error(@5, "Ожидается запятая");
		}
	}
	| RDO_r_rect '(' frm_position_xy ',' error
	{
		#PASS2
		{
			PARSER->error().error(@4, @5, "Ожидается координата по оси Y");
		}
	}
	| RDO_r_rect '(' frm_position_xy error
	{
		#PASS2
		{
			PARSER->error().error(@3, "Ожидается запятая");
		}
	}
	| RDO_r_rect '(' error
	{
		#PASS2
		{
			PARSER->error().error(@2, @3, "Ожидается координата по оси X");
		}
	}
	| RDO_r_rect error
	{
		#PASS2
		{
			PARSER->error().error(@1, "Ожидается '('");
		}
	}
	;

frm_circle
	: RDO_circle '(' frm_position_xy ',' frm_position_xy ',' frm_radius ',' frm_color ',' frm_color ')'
	{
		#PASS2
		{
			LPRDOFRMPosition pX      = PARSER->stack().pop<RDOFRMPosition>($3);
			LPRDOFRMPosition pY      = PARSER->stack().pop<RDOFRMPosition>($5);
			LPRDOFRMPosition pRadius = PARSER->stack().pop<RDOFRMPosition>($7);
			ASSERT(pX     );
			ASSERT(pY     );
			ASSERT(pRadius);
			LPRDOFRMColor pBgColor = PARSER->stack().pop<RDOFRMColor>($9);
			LPRDOFRMColor pFgColor = PARSER->stack().pop<RDOFRMColor>($11);
			ASSERT(pBgColor);
			ASSERT(pFgColor);
			pBgColor->setType(RDOFRMColor::CT_LAST_BG);
			pFgColor->setType(RDOFRMColor::CT_LAST_FG);
			LPRDOFRMCircle pCircle = rdo::Factory<RDOFRMCircle>::create(PARSER->getLastFRMCommandList()->list(), pX, pY, pRadius, pBgColor, pFgColor);
			ASSERT(pCircle);
			$$ = PARSER->stack().push(pCircle);
		}
	}
	| RDO_circle '(' frm_position_xy ',' frm_position_xy ',' frm_radius ',' frm_color ',' frm_color error
	{
		#PASS2
		{
			PARSER->error().error(@11, "Ожидается ')'");
		}
	}
	| RDO_circle '(' frm_position_xy ',' frm_position_xy ',' frm_radius ',' frm_color ',' error
	{
		#PASS2
		{
			PARSER->error().error(@10, @11, "Ожидается цвет линии круга");
		}
	}
	| RDO_circle '(' frm_position_xy ',' frm_position_xy ',' frm_radius ',' frm_color error
	{
		#PASS2
		{
			PARSER->error().error(@9, "Ожидается запятая");
		}
	}
	| RDO_circle '(' frm_position_xy ',' frm_position_xy ',' frm_radius ',' error
	{
		#PASS2
		{
			PARSER->error().error(@8, @9, "Ожидается цвет фона");
		}
	}
	| RDO_circle '(' frm_position_xy ',' frm_position_xy ',' frm_radius error
	{
		#PASS2
		{
			PARSER->error().error(@7, "Ожидается запятая");
		}
	}
	| RDO_circle '(' frm_position_xy ',' frm_position_xy ',' error
	{
		#PASS2
		{
			PARSER->error().error(@6, @7, "Ожидается радиус");
		}
	}
	| RDO_circle '(' frm_position_xy ',' frm_position_xy error
	{
		#PASS2
		{
			PARSER->error().error(@5, "Ожидается запятая");
		}
	}
	| RDO_circle '(' frm_position_xy ',' error
	{
		#PASS2
		{
			PARSER->error().error(@4, @5, "Ожидается координата по оси Y");
		}
	}
	| RDO_circle '(' frm_position_xy error
	{
		#PASS2
		{
			PARSER->error().error(@3, "Ожидается запятая");
		}
	}
	| RDO_circle '(' error
	{
		#PASS2
		{
			PARSER->error().error(@2, @3, "Ожидается координата по оси X");
		}
	}
	| RDO_circle error
	{
		#PASS2
		{
			PARSER->error().error(@1, "Ожидается '('");
		}
	};

frm_ellipse
	: RDO_ellipse '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh ',' frm_position_wh ',' frm_color ',' frm_color ')'
	{
		#PASS2
		{
			LPRDOFRMPosition pX      = PARSER->stack().pop<RDOFRMPosition>($3);
			LPRDOFRMPosition pY      = PARSER->stack().pop<RDOFRMPosition>($5);
			LPRDOFRMPosition pWidth  = PARSER->stack().pop<RDOFRMPosition>($7);
			LPRDOFRMPosition pHeight = PARSER->stack().pop<RDOFRMPosition>($9);
			ASSERT(pX     );
			ASSERT(pY     );
			ASSERT(pWidth );
			ASSERT(pHeight);
			LPRDOFRMColor pBgColor = PARSER->stack().pop<RDOFRMColor>($11);
			LPRDOFRMColor pFgColor = PARSER->stack().pop<RDOFRMColor>($13);
			ASSERT(pBgColor);
			ASSERT(pFgColor);
			pBgColor->setType(RDOFRMColor::CT_LAST_BG);
			pFgColor->setType(RDOFRMColor::CT_LAST_FG);
			LPRDOFRMEllipse pEllipse = rdo::Factory<RDOFRMEllipse>::create(PARSER->getLastFRMCommandList()->list(), pX, pY, pWidth, pHeight, pBgColor, pFgColor);
			ASSERT(pEllipse);
			$$ = PARSER->stack().push(pEllipse);
		}
	}
	| RDO_ellipse '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh ',' frm_position_wh ',' frm_color ',' frm_color error
	{
		#PASS2
		{
			PARSER->error().error(@13, "Ожидается ')'");
		}
	}
	| RDO_ellipse '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh ',' frm_position_wh ',' frm_color ',' error
	{
		#PASS2
		{
			PARSER->error().error(@12, @13, "Ожидается цвет линии эллипса");
		}
	}
	| RDO_ellipse '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh ',' frm_position_wh ',' frm_color error
	{
		#PASS2
		{
			PARSER->error().error(@11, "Ожидается запятая");
		}
	}
	| RDO_ellipse '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh ',' frm_position_wh ',' error
	{
		#PASS2
		{
			PARSER->error().error(@10, @11, "Ожидается цвет фона");
		}
	}
	| RDO_ellipse '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh ',' frm_position_wh error
	{
		#PASS2
		{
			PARSER->error().error(@9, "Ожидается запятая");
		}
	}
	| RDO_ellipse '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh ',' error
	{
		#PASS2
		{
			PARSER->error().error(@8, @9, "Ожидается высота");
		}
	}
	| RDO_ellipse '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh error
	{
		#PASS2
		{
			PARSER->error().error(@7, "Ожидается запятая");
		}
	}
	| RDO_ellipse '(' frm_position_xy ',' frm_position_xy ',' error
	{
		#PASS2
		{
			PARSER->error().error(@6, @7, "Ожидается ширина");
		}
	}
	| RDO_ellipse '(' frm_position_xy ',' frm_position_xy error
	{
		#PASS2
		{
			PARSER->error().error(@5, "Ожидается запятая");
		}
	}
	| RDO_ellipse '(' frm_position_xy ',' error
	{
		#PASS2
		{
			PARSER->error().error(@4, @5, "Ожидается координата по оси Y");
		}
	}
	| RDO_ellipse '(' frm_position_xy error
	{
		#PASS2
		{
			PARSER->error().error(@3, "Ожидается запятая");
		}
	}
	| RDO_ellipse '(' error
	{
		#PASS2
		{
			PARSER->error().error(@2, @3, "Ожидается координата по оси X");
		}
	}
	| RDO_ellipse error
	{
		#PASS2
		{
			PARSER->error().error(@1, "Ожидается '('");
		}
	}
	;

frm_line
	: RDO_line '(' frm_position_xy ',' frm_position_xy ',' frm_position_xy ',' frm_position_xy ',' frm_color ')'
	{
		#PASS2
		{
			LPRDOFRMPosition pX      = PARSER->stack().pop<RDOFRMPosition>($3);
			LPRDOFRMPosition pY      = PARSER->stack().pop<RDOFRMPosition>($5);
			LPRDOFRMPosition pWidth  = PARSER->stack().pop<RDOFRMPosition>($7);
			LPRDOFRMPosition pHeight = PARSER->stack().pop<RDOFRMPosition>($9);
			ASSERT(pX     );
			ASSERT(pY     );
			ASSERT(pWidth );
			ASSERT(pHeight);
			LPRDOFRMColor pColor = PARSER->stack().pop<RDOFRMColor>($11);
			ASSERT(pColor);
			pColor->setType(RDOFRMColor::CT_LAST_FG);
			LPRDOFRMLine pLine = rdo::Factory<RDOFRMLine>::create(PARSER->getLastFRMCommandList()->list(), pX, pY, pWidth, pHeight, pColor);
			ASSERT(pLine);
			$$ = PARSER->stack().push(pLine);
		}
	}
	| RDO_line '(' frm_position_xy ',' frm_position_xy ',' frm_position_xy ',' frm_position_xy ',' frm_color error
	{
		#PASS2
		{
			PARSER->error().error(@11, "Ожидается ')'");
		}
	}
	| RDO_line '(' frm_position_xy ',' frm_position_xy ',' frm_position_xy ',' frm_position_xy ',' error
	{
		#PASS2
		{
			PARSER->error().error(@10, @11, "Ожидается цвет линии");
		}
	}
	| RDO_line '(' frm_position_xy ',' frm_position_xy ',' frm_position_xy ',' frm_position_xy error
	{
		#PASS2
		{
			PARSER->error().error(@9, "Ожидается запятая");
		}
	}
	| RDO_line '(' frm_position_xy ',' frm_position_xy ',' frm_position_xy ',' error
	{
		#PASS2
		{
			PARSER->error().error(@8, @9, "Ожидается Y2");
		}
	}
	| RDO_line '(' frm_position_xy ',' frm_position_xy ',' frm_position_xy error
	{
		#PASS2
		{
			PARSER->error().error(@7, "Ожидается запятая");
		}
	}
	| RDO_line '(' frm_position_xy ',' frm_position_xy ',' error
	{
		#PASS2
		{
			PARSER->error().error(@6, @7, "Ожидается X2");
		}
	}
	| RDO_line '(' frm_position_xy ',' frm_position_xy error
	{
		#PASS2
		{
			PARSER->error().error(@5, "Ожидается запятая");
		}
	}
	| RDO_line '(' frm_position_xy ',' error
	{
		#PASS2
		{
			PARSER->error().error(@4, @5, "Ожидается Y1");
		}
	}
	| RDO_line '(' frm_position_xy error
	{
		#PASS2
		{
			PARSER->error().error(@3, "Ожидается запятая");
		}
	}
	| RDO_line '(' error
	{
		#PASS2
		{
			PARSER->error().error(@2, @3, "Ожидается X1");
		}
	}
	| RDO_line error
	{
		#PASS2
		{
			PARSER->error().error(@1, "Ожидается '('");
		}
	}
	;

frm_triang
	: RDO_triang '(' frm_position_xy ',' frm_position_xy ',' frm_position_xy ',' frm_position_xy ',' frm_position_xy ',' frm_position_xy ',' frm_color ',' frm_color ')'
	{
		#PASS2
		{
			LPRDOFRMPosition pX1 = PARSER->stack().pop<RDOFRMPosition>($3);
			LPRDOFRMPosition pY1 = PARSER->stack().pop<RDOFRMPosition>($5);
			LPRDOFRMPosition pX2 = PARSER->stack().pop<RDOFRMPosition>($7);
			LPRDOFRMPosition pY2 = PARSER->stack().pop<RDOFRMPosition>($9);
			LPRDOFRMPosition pX3 = PARSER->stack().pop<RDOFRMPosition>($11);
			LPRDOFRMPosition pY3 = PARSER->stack().pop<RDOFRMPosition>($13);
			ASSERT(pX1);
			ASSERT(pY1);
			ASSERT(pX2);
			ASSERT(pY2);
			ASSERT(pX3);
			ASSERT(pY3);
			LPRDOFRMColor pBgColor = PARSER->stack().pop<RDOFRMColor>($15);
			LPRDOFRMColor pFgColor = PARSER->stack().pop<RDOFRMColor>($17);
			ASSERT(pBgColor);
			ASSERT(pFgColor);
			pBgColor->setType(RDOFRMColor::CT_LAST_BG);
			pFgColor->setType(RDOFRMColor::CT_LAST_FG);
			LPRDOFRMTriang pTriang = rdo::Factory<RDOFRMTriang>::create(PARSER->getLastFRMCommandList()->list(), pX1, pY1, pX2, pY2, pX3, pY3, pBgColor, pFgColor);
			ASSERT(pTriang);
			$$ = PARSER->stack().push(pTriang);
		}
	}
	| RDO_triang '(' frm_position_xy ',' frm_position_xy ',' frm_position_xy ',' frm_position_xy ',' frm_position_xy ',' frm_position_xy ',' frm_color ',' frm_color error
	{
		#PASS2
		{
			PARSER->error().error(@17, "Ожидается ')'");
		}
	}
	| RDO_triang '(' frm_position_xy ',' frm_position_xy ',' frm_position_xy ',' frm_position_xy ',' frm_position_xy ',' frm_position_xy ',' frm_color ',' error
	{
		#PASS2
		{
			PARSER->error().error(@16, @17, "Ожидается цвет линии");
		}
	}
	| RDO_triang '(' frm_position_xy ',' frm_position_xy ',' frm_position_xy ',' frm_position_xy ',' frm_position_xy ',' frm_position_xy ',' frm_color error
	{
		#PASS2
		{
			PARSER->error().error(@15, "Ожидается запятая");
		}
	}
	| RDO_triang '(' frm_position_xy ',' frm_position_xy ',' frm_position_xy ',' frm_position_xy ',' frm_position_xy ',' frm_position_xy ',' error
	{
		#PASS2
		{
			PARSER->error().error(@14, @15, "Ожидается цвет треугольника");
		}
	}
	| RDO_triang '(' frm_position_xy ',' frm_position_xy ',' frm_position_xy ',' frm_position_xy ',' frm_position_xy ',' frm_position_xy error
	{
		#PASS2
		{
			PARSER->error().error(@13, "Ожидается запятая");
		}
	}
	| RDO_triang '(' frm_position_xy ',' frm_position_xy ',' frm_position_xy ',' frm_position_xy ',' frm_position_xy ',' error
	{
		#PASS2
		{
			PARSER->error().error(@12, @13, "Ожидается Y3");
		}
	}
	| RDO_triang '(' frm_position_xy ',' frm_position_xy ',' frm_position_xy ',' frm_position_xy ',' frm_position_xy error
	{
		#PASS2
		{
			PARSER->error().error(@11, "Ожидается запятая");
		}
	}
	| RDO_triang '(' frm_position_xy ',' frm_position_xy ',' frm_position_xy ',' frm_position_xy ',' error
	{
		#PASS2
		{
			PARSER->error().error(@10, @11, "Ожидается X3");
		}
	}
	| RDO_triang '(' frm_position_xy ',' frm_position_xy ',' frm_position_xy ',' frm_position_xy error
	{
		#PASS2
		{
			PARSER->error().error(@9, "Ожидается запятая");
		}
	}
	| RDO_triang '(' frm_position_xy ',' frm_position_xy ',' frm_position_xy ',' error
	{
		#PASS2
		{
			PARSER->error().error(@8, @9, "Ожидается Y2");
		}
	}
	| RDO_triang '(' frm_position_xy ',' frm_position_xy ',' frm_position_xy error
	{
		#PASS2
		{
			PARSER->error().error(@7, "Ожидается запятая");
		}
	}
	| RDO_triang '(' frm_position_xy ',' frm_position_xy ',' error
	{
		#PASS2
		{
			PARSER->error().error(@6, @7, "Ожидается X2");
		}
	}
	| RDO_triang '(' frm_position_xy ',' frm_position_xy error
	{
		#PASS2
		{
			PARSER->error().error(@5, "Ожидается запятая");
		}
	}
	| RDO_triang '(' frm_position_xy ',' error
	{
		#PASS2
		{
			PARSER->error().error(@4, @5, "Ожидается Y1");
		}
	}
	| RDO_triang '(' frm_position_xy error
	{
		#PASS2
		{
			PARSER->error().error(@3, "Ожидается запятая");
		}
	}
	| RDO_triang '(' error
	{
		#PASS2
		{
			PARSER->error().error(@2, @3, "Ожидается X1");
		}
	}
	| RDO_triang error
	{
		#PASS2
		{
			PARSER->error().error(@1, "Ожидается '('");
		}
	}
	;

frm_active
	: RDO_active RDO_IDENTIF '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh ',' frm_position_wh ')'
	{
		#PASS2
		{
			tstring oprName = PARSER->stack().pop<RDOValue>($2)->value().getIdentificator();
			LPRDODPTActivity pActivity = PARSER->findDPTActivity(oprName);
			if (!pActivity)
			{
				PARSER->error().error(@2, rdo::format("Активность '%s' не найдена", oprName.c_str()));
			}
			else
			{
				if (pActivity->pattern()->getType() != RDOPATPattern::PT_Keyboard)
				{
					PARSER->error().push_only(@2, rdo::format("Активность '%s' должна быть клавиатурной", pActivity->name().c_str()));
					PARSER->error().push_only(pActivity->src_info(), "См. акивность");
					PARSER->error().push_only(pActivity->pattern()->src_info(), "См. образец");
					PARSER->error().push_done();
				}
			}
			LPRDOFRMPosition pX      = PARSER->stack().pop<RDOFRMPosition>($4);
			LPRDOFRMPosition pY      = PARSER->stack().pop<RDOFRMPosition>($6);
			LPRDOFRMPosition pWidth  = PARSER->stack().pop<RDOFRMPosition>($8);
			LPRDOFRMPosition pHeight = PARSER->stack().pop<RDOFRMPosition>($10);
			ASSERT(pX     );
			ASSERT(pY     );
			ASSERT(pWidth );
			ASSERT(pHeight);
			LPRDOFRMActive pActive = rdo::Factory<RDOFRMActive>::create(PARSER->getLastFRMCommandList()->list(), pX, pY, pWidth, pHeight, oprName);
			ASSERT(pActive);
			$$ = PARSER->stack().push(pActive);
		}
	}
	| RDO_active RDO_IDENTIF '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh ',' frm_position_wh error
	{
		#PASS2
		{
			PARSER->error().error(@10, "Ожидается ')'");
		}
	}
	| RDO_active RDO_IDENTIF '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh ',' error
	{
		#PASS2
		{
			PARSER->error().error(@9, @10, "Ожидается высота");
		}
	}
	| RDO_active RDO_IDENTIF '(' frm_position_xy ',' frm_position_xy ',' frm_position_wh error
	{
		#PASS2
		{
			PARSER->error().error(@8, "Ожидается запятая");
		}
	}
	| RDO_active RDO_IDENTIF '(' frm_position_xy ',' frm_position_xy ',' error
	{
		#PASS2
		{
			PARSER->error().error(@7, @8, "Ожидается ширина");
		}
	}
	| RDO_active RDO_IDENTIF '(' frm_position_xy ',' frm_position_xy error
	{
		#PASS2
		{
			PARSER->error().error(@6, "Ожидается запятая");
		}
	}
	| RDO_active RDO_IDENTIF '(' frm_position_xy ',' error
	{
		#PASS2
		{
			PARSER->error().error(@5, @6, "Ожидается координата по оси Y");
		}
	}
	| RDO_active RDO_IDENTIF '(' frm_position_xy error
	{
		#PASS2
		{
			PARSER->error().error(@4, "Ожидается запятая");
		}
	}
	| RDO_active RDO_IDENTIF '(' error
	{
		#PASS2
		{
			PARSER->error().error(@3, @4, "Ожидается координата по оси X");
		}
	}
	| RDO_active RDO_IDENTIF error
	{
		#PASS2
		{
			PARSER->error().error(@2, "Ожидается '('");
		}
	}
	| RDO_active error
	{
		#PASS2
		{
			PARSER->error().error(@1, "Ожидается имя клавиатурной операции");
		}
	}
	;

// --------------------------------------------------------------------------------
// -------------------- Список statement'ов для анимации
// --------------------------------------------------------------------------------
return_statement
	: RDO_Return
	{
		#PASS2
		{
			LPTypeInfo pType = rdo::Factory<TypeInfo>::delegate<RDOType__void>(RDOParserSrcInfo(@1));
			ASSERT(pType);

			rdo::runtime::LPRDOCalc pCalc = rdo::Factory<rdo::runtime::RDOCalcConst>::create(rdo::runtime::RDOValue(0));
			ASSERT(pCalc);

			rdo::runtime::LPRDOCalc pCalcReturn = rdo::Factory<rdo::runtime::RDOCalcFunReturn>::create(pCalc);
			ASSERT(pCalcReturn);

			LPExpression pExpression = rdo::Factory<Expression>::create(pType, pCalcReturn, RDOParserSrcInfo(@1));
			ASSERT(pExpression);

			LPContextReturnable pContextReturnable = PARSER->context()->cast<ContextReturnable>();
			ASSERT(pContextReturnable);
			pContextReturnable->setReturnFlag();

			$$ = PARSER->stack().push(pExpression);
		}
	}
	;

// --------------------------------------------------------------------------------
// -------------------- Список общих statement'ов
// --------------------------------------------------------------------------------
statement
	: empty_statement ';'
	| empty_statement error
	{
		#PASS2
		{
			PARSER->error().error(@1, "Не найден символ окончания инструкции - точка с запятой");
		}
	}
	| equal_statement ';'
	| equal_statement error
	{
		#PASS2
		{
			PARSER->error().error(@1, "Не найден символ окончания инструкции - точка с запятой");
		}
	}
	| set_array_item_statement ';'
	| set_array_item_statement error
	{
		#PASS2
		{
			PARSER->error().error(@1, "Не найден символ окончания инструкции - точка с запятой");
		}
	}
	| local_variable_declaration ';'
	| local_variable_declaration error
	{
		#PASS2
		{
			PARSER->error().error(@1, "Не найден символ окончания инструкции - точка с запятой");
		}
	}
	| if_statement
	| for_statement
	| break_statement ';'
	| break_statement error
	{
		#PASS2
		{
			PARSER->error().error(@1, "Не найден символ окончания инструкции - точка с запятой");
		}
	}
	| return_statement ';'
	| return_statement error
	{
		#PASS2
		{
			PARSER->error().error(@1, "Не найден символ окончания инструкции - точка с запятой");
		}
	}
	| nochange_statement
//	| member_statement ';'
	| process_input_statement
	| stopping_statement
	| planning_statement
	| watch_start
	| watch_stop
	| open_brace statement_list close_brace
	{
		#PASS2
		{
			LPExpression pStatementList = PARSER->stack().pop<Expression>($2);
			ASSERT(pStatementList);

			rdo::runtime::LPRDOCalcStatementList pCalcStatementList = pStatementList->calc().object_dynamic_cast<rdo::runtime::RDOCalcStatementList>();
			ASSERT(pCalcStatementList);

			rdo::runtime::LPRDOCalcBaseStatementList pCalcBaseStatementList = rdo::Factory<rdo::runtime::RDOCalcBaseStatementList>::create();
			ASSERT(pCalcBaseStatementList);

			rdo::runtime::LPRDOCalcOpenBrace pCalcOpenBrace = rdo::Factory<rdo::runtime::RDOCalcOpenBrace>::create();
			ASSERT(pCalcOpenBrace);

			rdo::runtime::LPRDOCalcCloseBrace pCalcCloseBrace = rdo::Factory<rdo::runtime::RDOCalcCloseBrace>::create();
			ASSERT(pCalcCloseBrace);

			pCalcBaseStatementList->addCalcStatement(pCalcOpenBrace);
			pCalcBaseStatementList->addCalcStatement(pCalcStatementList);
			pCalcBaseStatementList->addCalcStatement(pCalcCloseBrace);

			LPExpression pExpression = rdo::Factory<Expression>::create(pStatementList->typeInfo(), pCalcBaseStatementList, RDOParserSrcInfo(@1, @3));
			ASSERT(pExpression);

			$$ = PARSER->stack().push(pExpression);
		}
	}
	| frm_item_statement ';'
	| frm_item_statement
	{
		#PASS2
		{
			PARSER->error().error(@1, "Ожидается ';'");
		}
	}
	| error
	{
		#PASS2
		{
			PARSER->error().error(@1, "Неизвестная инструкция");
		}
	}
	;

returnable_statement
	: returnable_context_push statement returnable_context_pop
	{
		#PASS2
		{
			$$ = $2;
		}
	}
	;

returnable_context_push
	: /* empty */
	{
		#PASS2
		{
			LPContextReturnable pContextReturnable = PARSER->context()->cast<ContextReturnable>();
			ASSERT(pContextReturnable);
			pContextReturnable->addChildContext();
		}
	}
	;

returnable_context_pop
	: /* empty */
	{
		#PASS2
		{
			PARSER->contextStack()->pop<ContextReturnable>();
		}
	}
	;

open_brace
	: '{'
	{
		#PASS2
		{
			ContextMemory::push();
		}
	}
	;

close_brace
	: '}'
	{
		#PASS2
		{
			ContextMemory::pop();
		}
	}
	;

statement_list
	: /* empty */
	{
		#PASS2
		{
			rdo::runtime::LPRDOCalcStatementList pCalcStatementList = rdo::Factory<rdo::runtime::RDOCalcStatementList>::create();
			ASSERT(pCalcStatementList);

			LPTypeInfo pType = rdo::Factory<TypeInfo>::delegate<RDOType__void>(RDOParserSrcInfo());
			ASSERT(pType);

			LPExpression pExpression = rdo::Factory<Expression>::create(pType, pCalcStatementList, RDOParserSrcInfo());
			ASSERT(pExpression);

			$$ = PARSER->stack().push(pExpression);
		}
	}
	| statement_list statement
	{
		#PASS2
		{
			LPExpression pExpressionStatementList = PARSER->stack().pop<Expression>($1);
			ASSERT(pExpressionStatementList);

			LPExpression pExpressionStatement = PARSER->stack().pop<Expression>($2);
			ASSERT(pExpressionStatement);

			rdo::runtime::LPRDOCalcStatementList pCalcStatementList = pExpressionStatementList->calc().object_dynamic_cast<rdo::runtime::RDOCalcStatementList>();
			ASSERT(pCalcStatementList);

			pCalcStatementList->addCalcStatement(pExpressionStatement->calc());

			pExpressionStatementList->setSrcInfo(RDOParserSrcInfo(@1, @2));

			$$ = PARSER->stack().push(pExpressionStatementList);
		}
	}
	;

empty_statement
	: ';'
	{
		#PASS2
		{
			rdo::runtime::LPRDOCalc pCalc = rdo::Factory<rdo::runtime::RDOCalcNoChange>::create();
			ASSERT(pCalc);

			LPTypeInfo pType = rdo::Factory<TypeInfo>::delegate<RDOType__void>(RDOParserSrcInfo(@1));
			ASSERT(pType);

			LPExpression pExpression = rdo::Factory<Expression>::create(pType, pCalc, RDOParserSrcInfo(@1));
			ASSERT(pExpression);

			$$ = PARSER->stack().push(pExpression);
		}
	}
	| error ';'
	{
		#PASS2
		{
			PARSER->error().error(@1, "Ошибка в инструкции");
		}
	}
	;

member_statement_parent
	: RDO_IDENTIF
	{
		#PASS2
		{
			LPRDOValue pIdentificator = PARSER->stack().pop<RDOValue>($1);
			ASSERT(pIdentificator);

			LPContext pCurrentContext = PARSER->context();
			ASSERT(pCurrentContext);

			LPContext pContext = pCurrentContext->find(pIdentificator);
			if (!pContext)
			{
				PARSER->error().error(@1, rdo::format("Неизвестный идентификатор: %s", pIdentificator->value().getIdentificator().c_str()));
			}

			$$ = PARSER->stack().push(pContext);
		}
	}
	;

member_statement
	: member_statement_parent '.' RDO_IDENTIF
	{
		#PASS2
		{
			LPContext  pContext       = PARSER->stack().pop<Context>($1);
			LPRDOValue pIdentificator = PARSER->stack().pop<RDOValue>($3);
			ASSERT(pContext      );
			ASSERT(pIdentificator);

			LPExpression pExpression = pContext->create(pIdentificator);
			if (!pExpression)
			{
				PARSER->error().error(@3, rdo::format("Неизвестный идентификатор: %s", pIdentificator->value().getIdentificator().c_str()));
			}

			$$ = PARSER->stack().push(pExpression);
		}
	}
	;

equal_statement
	: RDO_IDENTIF increment_or_decrement_type
	{
		#PASS2
		{
			LPRDOValue              pParamName = PARSER->stack().pop<RDOValue>($1);
			tstring                 paramName  = pParamName->value().getIdentificator();
			rdo::runtime::EqualType equalType  = static_cast<rdo::runtime::EqualType>($2);
			LPContext pContext = PARSER->context();
			ASSERT(pContext);
			LPContextMemory pContextMemory = pContext->cast<ContextMemory>();
			ASSERT(pContextMemory);
			LPLocalVariableListStack pLocalVariableListStack = pContextMemory->getLocalMemory();
			ASSERT(pLocalVariableListStack);
			LPLocalVariable pLocalVariable = pLocalVariableListStack->findLocalVariable(paramName);
			rdo::runtime::LPRDOCalc pCalc;
			LPTypeInfo pLeftArithmType;
			if(pLocalVariable)
			{
				pLeftArithmType = pLocalVariable->getTypeInfo();

				switch (equalType)
				{
					case rdo::runtime::ET_INCR:
					{
						pCalc = rdo::Factory<rdo::runtime::RDOCalcSetLocalVariable<rdo::runtime::ET_INCR> >::create(paramName);
						break;
					}
					case rdo::runtime::ET_DECR:
					{
						pCalc = rdo::Factory<rdo::runtime::RDOCalcSetLocalVariable<rdo::runtime::ET_DECR> >::create(paramName);
						break;
					}
					default:
					{
						NEVER_REACH_HERE;
					}
				}
			}
			else
			{
				LPRDORelevantResource pRelRes = PARSER->getLastPATPattern()->m_pCurrRelRes;
				ASSERT(pRelRes);
				LPRDORTPParam pParam = pRelRes->getType()->findRTPParam(paramName);
				if (!pParam)
				{
					PARSER->error().error(@1, rdo::format("Неизвестный параметр: %s", paramName.c_str()));
				}

				pLeftArithmType = pParam->getTypeInfo();

				switch (equalType)
				{
					case rdo::runtime::ET_INCR:
					{
						pCalc = rdo::Factory<rdo::runtime::RDOSetRelResParamCalc<rdo::runtime::ET_INCR> >::create(pRelRes->m_relResID, pRelRes->getType()->getRTPParamNumber(paramName));
						break;
					}
					case rdo::runtime::ET_DECR:
					{
						pCalc = rdo::Factory<rdo::runtime::RDOSetRelResParamCalc<rdo::runtime::ET_DECR> >::create(pRelRes->m_relResID, pRelRes->getType()->getRTPParamNumber(paramName));
						break;
					}
					default:
					{
						NEVER_REACH_HERE;
					}
				}
				ASSERT(pCalc);

				//! Проверка на диапазон
				LPRDOTypeIntRange pTypeIntRange = pParam->getTypeInfo()->type().object_dynamic_cast<RDOTypeIntRange>();
				if (pTypeIntRange)
				{
					pCalc = rdo::Factory<rdo::runtime::RDOCalcCheckRange>::create(pTypeIntRange->range()->getMin()->value(), pTypeIntRange->range()->getMax()->value(), pCalc);
				}

				LPRDOTypeRealRange pTypeRealRange = pParam->getTypeInfo()->type().object_dynamic_cast<RDOTypeRealRange>();
				if (pTypeRealRange)
				{
					pCalc = rdo::Factory<rdo::runtime::RDOCalcCheckRange>::create(pTypeRealRange->range()->getMin()->value(), pTypeRealRange->range()->getMax()->value(), pCalc);
				}
			}

			tstring oprStr;
			switch (equalType)
			{
				case rdo::runtime::ET_INCR:
				{
					oprStr = "++";
					break;
				}
				case rdo::runtime::ET_DECR:
				{
					oprStr = "--";
					break;
				}
				default:
				{
					oprStr = "";
					break;
				}
			}
			pCalc->setSrcInfo(RDOParserSrcInfo(@1, @2, rdo::format("%s %s", paramName.c_str(), oprStr.c_str())));

			LPExpression pExpression = rdo::Factory<Expression>::create(pLeftArithmType, pCalc, pCalc->srcInfo());
			ASSERT(pExpression);

			$$ = PARSER->stack().push(pExpression);
		}
	}
	| RDO_IDENTIF param_equal_type fun_arithm
	{
		#PASS2
		{
			LPRDOValue              pParamName   = PARSER->stack().pop<RDOValue>($1);
			tstring                 paramName    = pParamName->value().getIdentificator();
			rdo::runtime::EqualType equalType    = static_cast<rdo::runtime::EqualType>($2);
			LPRDOFUNArithm          pRightArithm = PARSER->stack().pop<RDOFUNArithm>($3);
			LPContext pContext = PARSER->context();
			ASSERT(pContext);
			LPContextMemory pContextMemory = pContext->cast<ContextMemory>();
			ASSERT(pContextMemory);
			LPLocalVariableListStack pLocalVariableListStack = pContextMemory->getLocalMemory();
			ASSERT(pLocalVariableListStack);
			LPLocalVariable pLocalVariable = pLocalVariableListStack->findLocalVariable(paramName);
			rdo::runtime::LPRDOCalc pCalc;
			rdo::runtime::LPRDOCalc pCalcRight;
			LPTypeInfo pLeftArithmType;
			if (pLocalVariable)
			{
				pLeftArithmType = pLocalVariable->getTypeInfo();

				pCalcRight = pRightArithm->createCalc(pLocalVariable->getTypeInfo());
				switch (equalType)
				{
					case rdo::runtime::ET_NOCHANGE:
					{
						break;
					}
					case rdo::runtime::ET_EQUAL:
					{
						pCalc = rdo::Factory<rdo::runtime::RDOCalcSetLocalVariable<rdo::runtime::ET_EQUAL> >::create(paramName, pCalcRight);
						break;
					}
					case rdo::runtime::ET_PLUS:
					{
						pCalc = rdo::Factory<rdo::runtime::RDOCalcSetLocalVariable<rdo::runtime::ET_PLUS> >::create(paramName, pCalcRight);
						break;
					}
					case rdo::runtime::ET_MINUS:
					{
						pCalc = rdo::Factory<rdo::runtime::RDOCalcSetLocalVariable<rdo::runtime::ET_MINUS> >::create(paramName, pCalcRight);
						break;
					}
					case rdo::runtime::ET_MULTIPLY:
					{
						pCalc = rdo::Factory<rdo::runtime::RDOCalcSetLocalVariable<rdo::runtime::ET_MULTIPLY> >::create(paramName, pCalcRight);
						break;
					}
					case rdo::runtime::ET_DIVIDE:
					{
						pCalc = rdo::Factory<rdo::runtime::RDOCalcSetLocalVariable<rdo::runtime::ET_DIVIDE> >::create(paramName, pCalcRight);
						break;
					}
					default:
					{
						NEVER_REACH_HERE;
					}
				}
			}
			else
			{
				LPRDORelevantResource pRelRes = PARSER->getLastPATPattern()->m_pCurrRelRes;
				ASSERT(pRelRes);
				LPRDORTPParam pParam = pRelRes->getType()->findRTPParam(paramName);
				if (!pParam)
				{
					PARSER->error().error(@1, rdo::format("Неизвестный параметр: %s", paramName.c_str()));
				}

				pLeftArithmType = pParam->getTypeInfo();

				pCalcRight = pRightArithm->createCalc(pParam->getTypeInfo());
				switch (equalType)
				{
					case rdo::runtime::ET_NOCHANGE:
					{
						break;
					}
					case rdo::runtime::ET_EQUAL:
					{
						pCalc = rdo::Factory<rdo::runtime::RDOSetRelResParamCalc<rdo::runtime::ET_EQUAL> >::create(pRelRes->m_relResID, pRelRes->getType()->getRTPParamNumber(paramName), pCalcRight);
						ASSERT(pCalc);
						pCalc->setSrcInfo(RDOParserSrcInfo(@1, rdo::format("%s.%s", pRelRes->src_text().c_str(), paramName.c_str())));

						LPExpression pExpressionLeft = rdo::Factory<Expression>::create(
							pParam->getTypeInfo(),
							pCalc,
							pCalc->srcInfo()
						);
						ASSERT(pExpressionLeft);

						LPRDOFUNArithm pArithmLeft = rdo::Factory<RDOFUNArithm>::create(pExpressionLeft);
						ASSERT(pArithmLeft);
						pArithmLeft->setEqual(pRightArithm);

						pRelRes->getParamSetList().insert(pParam);
						break;
					}
					case rdo::runtime::ET_PLUS:
					{
						pCalc = rdo::Factory<rdo::runtime::RDOSetRelResParamCalc<rdo::runtime::ET_PLUS> >::create(pRelRes->m_relResID, pRelRes->getType()->getRTPParamNumber(paramName), pCalcRight);
						break;
					}
					case rdo::runtime::ET_MINUS:
					{
						pCalc = rdo::Factory<rdo::runtime::RDOSetRelResParamCalc<rdo::runtime::ET_MINUS> >::create(pRelRes->m_relResID, pRelRes->getType()->getRTPParamNumber(paramName), pCalcRight);
						break;
					}
					case rdo::runtime::ET_MULTIPLY:
					{
						pCalc = rdo::Factory<rdo::runtime::RDOSetRelResParamCalc<rdo::runtime::ET_MULTIPLY> >::create(pRelRes->m_relResID, pRelRes->getType()->getRTPParamNumber(paramName), pCalcRight);
						break;
					}
					case rdo::runtime::ET_DIVIDE:
					{
						pCalc = rdo::Factory<rdo::runtime::RDOSetRelResParamCalc<rdo::runtime::ET_DIVIDE> >::create(pRelRes->m_relResID, pRelRes->getType()->getRTPParamNumber(paramName), pCalcRight);
						break;
					}
					default:
					{
						NEVER_REACH_HERE;
					}
				}
				ASSERT(pCalc);

				//! Проверка на диапазон
				LPRDOTypeIntRange pTypeIntRange = pParam->getTypeInfo()->type().object_dynamic_cast<RDOTypeIntRange>();
				if (pTypeIntRange)
				{
					pCalc = rdo::Factory<rdo::runtime::RDOCalcCheckRange>::create(pTypeIntRange->range()->getMin()->value(), pTypeIntRange->range()->getMax()->value(), pCalc);
				}

				LPRDOTypeRealRange pTypeRealRange = pParam->getTypeInfo()->type().object_dynamic_cast<RDOTypeRealRange>();
				if (pTypeRealRange)
				{
					pCalc = rdo::Factory<rdo::runtime::RDOCalcCheckRange>::create(pTypeRealRange->range()->getMin()->value(), pTypeRealRange->range()->getMax()->value(), pCalc);
				}
			}

			tstring oprStr;
			switch (equalType)
			{
				case rdo::runtime::ET_EQUAL:
				{
					oprStr = "=";
					break;
				}
				case rdo::runtime::ET_PLUS:
				{
					oprStr = "+=";
					break;
				}
				case rdo::runtime::ET_MINUS:
				{
					oprStr = "-=";
					break;
				}
				case rdo::runtime::ET_MULTIPLY:
				{
					oprStr = "*=";
					break;
				}
				case rdo::runtime::ET_DIVIDE:
				{
					oprStr = "/=";
					break;
				}
				default:
				{
					oprStr = "";
					break;
				}
			}
			pCalc->setSrcInfo(RDOParserSrcInfo(@1, @3, rdo::format("%s %s %s", paramName.c_str(), oprStr.c_str(), pCalcRight->srcInfo().src_text().c_str())));

			LPExpression pExpression = rdo::Factory<Expression>::create(pLeftArithmType, pCalc, pCalc->srcInfo());
			ASSERT(pExpression);

			$$ = PARSER->stack().push(pExpression);
		}
	}
	| RDO_IDENTIF param_equal_type error
	{
		#PASS2
		{
			PARSER->error().error(@3, "Ошибка в арифметическом выражении");
		}
	}
	;

increment_or_decrement_type
	: RDO_IncrEqual
	{
		#PASS2
		{
			$$ = rdo::runtime::ET_INCR;
		}
	}
	| RDO_DecrEqual
	{
		#PASS2
		{
			$$ = rdo::runtime::ET_DECR;
		}
	}
	;

param_equal_type
	: RDO_set
	{
		#PASS2
		{
			$$ = rdo::runtime::ET_EQUAL;
		}
	}
	| '='
	{
		#PASS2
		{
			$$ = rdo::runtime::ET_EQUAL;
		}
	}
	| RDO_PlusEqual
	{
		#PASS2
		{
			$$ = rdo::runtime::ET_PLUS;
		}
	}
	| RDO_MinusEqual
	{
		#PASS2
		{
			$$ = rdo::runtime::ET_MINUS;
		}
	}
	| RDO_MultiplyEqual
	{
		#PASS2
		{
			$$ = rdo::runtime::ET_MULTIPLY;
		}
	}
	| RDO_DivideEqual
	{
		#PASS2
		{
			$$ = rdo::runtime::ET_DIVIDE;
		}
	}
	;

set_array_item_statement
	: RDO_IDENTIF '[' fun_arithm ']' '=' fun_arithm
	{
		#PASS2
		{
			LPRDOValue     pParamName   = PARSER->stack().pop<RDOValue>($1);
			ASSERT(pParamName);
			LPRDOFUNArithm pArrayArithm = RDOFUNArithm::generateByIdentificator(pParamName);
			LPRDOFUNArithm pArithmInd   = PARSER->stack().pop<RDOFUNArithm>($3);
			LPRDOFUNArithm pRightArithm = PARSER->stack().pop<RDOFUNArithm>($6);
			ASSERT(pArrayArithm);
			ASSERT(pArithmInd  );
			ASSERT(pRightArithm);

			if (!pArrayArithm->typeInfo()->type().object_dynamic_cast<RDOArrayType>())
			{
				PARSER->error().error(@1, rdo::format("'%s' не является массивом.", pParamName->value().getIdentificator().c_str()));
			}

			LPRDOType pType = pArrayArithm->typeInfo()->type();
			ASSERT(pType);
			LPRDOArrayType pArrayType = pType.object_dynamic_cast<RDOArrayType>();
			ASSERT(pArrayType);

			LPTypeInfo pItemType = pArrayType->getItemType()->type_cast(pRightArithm->typeInfo(), RDOParserSrcInfo(@1));
			ASSERT(pItemType);

			rdo::runtime::LPRDOCalc pArrayItemCalc = rdo::Factory<rdo::runtime::RDOCalcSetArrayItem>::create(pArrayArithm->calc(), pArithmInd->calc(), pRightArithm->calc());
			ASSERT(pArrayItemCalc);
			
			tstring   paramName = pParamName->value().getIdentificator();
			LPContext pContext  = PARSER->context();
			ASSERT(pContext);
			LPContextMemory pContextMemory = pContext->cast<ContextMemory>();
			ASSERT(pContextMemory);
			LPLocalVariableListStack pLocalVariableListStack = pContextMemory->getLocalMemory();
			ASSERT(pLocalVariableListStack);
			LPLocalVariable pLocalVariable = pLocalVariableListStack->findLocalVariable(paramName);
			rdo::runtime::LPRDOCalc pCalc;
			if (pLocalVariable)
			{
				pCalc = rdo::Factory<rdo::runtime::RDOCalcSetLocalVariable<rdo::runtime::ET_EQUAL> >::create(paramName, pArrayItemCalc);
			}
			else
			{
				LPRDORelevantResource pRelRes = PARSER->getLastPATPattern()->m_pCurrRelRes;
				ASSERT(pRelRes);
				LPRDORTPParam pParam = pRelRes->getType()->findRTPParam(paramName);
				ASSERT(pParam);

				pCalc = rdo::Factory<rdo::runtime::RDOSetRelResParamCalc<rdo::runtime::ET_EQUAL> >::create(pRelRes->m_relResID, pRelRes->getType()->getRTPParamNumber(paramName), pArrayItemCalc);
				ASSERT(pCalc);
				pCalc->setSrcInfo(RDOParserSrcInfo(@1, rdo::format("%s.%s", pRelRes->src_text().c_str(), paramName.c_str())));
			}

			LPExpression pExpression = rdo::Factory<Expression>::create(pArrayArithm->typeInfo(), pCalc, RDOParserSrcInfo(@1));
			ASSERT(pExpression);

			$$ = PARSER->stack().push(pExpression);
		}
	}
	;

local_variable_declaration
	: local_variable_declaration_context init_declaration_list
	{
		#PASS2
		{
			LPTypeContext pTypeContext = PARSER->context()->cast<TypeContext>();
			ASSERT(pTypeContext);

			LPTypeInfo pType = pTypeContext->getTypeInfo();
			ASSERT(pType);

			LPContextLocalVariable pContextLocalVariable = PARSER->context().object_dynamic_cast<ContextLocalVariable>();
			ASSERT(pContextLocalVariable);

			LPExpression pExpression = rdo::Factory<Expression>::create(
				pType, pContextLocalVariable->calc(), RDOParserSrcInfo(@1, @2)
			);
			ASSERT(pExpression);

			PARSER->contextStack()->pop<ContextLocalVariable>();
			PARSER->contextStack()->pop<TypeContext>();

			$$ = PARSER->stack().push(pExpression);
		}
	}
	;

local_variable_declaration_context
	: type_declaration_context
	{
		#PASS2
		{
			LPContextMemory pContextMemory = PARSER->context()->cast<ContextMemory>();
			ASSERT(pContextMemory);

			LPLocalVariableListStack pLocalVariableListStack = pContextMemory->getLocalMemory();
			ASSERT(pLocalVariableListStack);
			LPLocalVariableList pLocalVariableList = pLocalVariableListStack->top();
			ASSERT(pLocalVariableList);

			LPContextLocalVariable pContextLocalVariable = rdo::Factory<ContextLocalVariable>::create(
				boost::bind(&LocalVariableList::append, pLocalVariableList.get(), _1)
			);
			ASSERT(pContextLocalVariable);
			PARSER->contextStack()->push(pContextLocalVariable);
		}
	}
	;

init_declaration_list
	: init_declaration_list_item
	| init_declaration_list ',' init_declaration_list_item
	;

init_declaration_list_item
	: RDO_IDENTIF init_declaration_value
	{
		#PASS2
		{
			LPRDOValue pVariableName = PARSER->stack().pop<RDOValue>($1);
			ASSERT(pVariableName);

			LPExpression pExpression = PARSER->stack().pop<Expression>($2);
			ASSERT(pExpression);

			pExpression->setSrcInfo(RDOParserSrcInfo(@1, @2, pVariableName->src_text()));

			LPLocalVariable pLocalVariable = rdo::Factory<LocalVariable>::create(pVariableName, pExpression);
			ASSERT(pLocalVariable);

			LPContextLocalVariable pContextLocalVariable = PARSER->context().object_dynamic_cast<ContextLocalVariable>();
			ASSERT(pContextLocalVariable);
			pContextLocalVariable->pushLocalVariable(pLocalVariable);
		}
	}
	;

init_declaration_value
	: /* empty */
	{
		#PASS2
		{
			LPTypeContext pTypeContext = PARSER->context()->cast<TypeContext>();
			ASSERT(pTypeContext);

			LPTypeInfo pTypeInfo = pTypeContext->getTypeInfo();
			ASSERT(pTypeInfo);

			LPExpression pExpression = rdo::Factory<Expression>::create(
				pTypeInfo,
				rdo::Factory<rdo::runtime::RDOCalcConst>::create(pTypeInfo->type()->get_default()),
				RDOParserSrcInfo()
			);
			ASSERT(pExpression);
			$$ = PARSER->stack().push(pExpression);
		}
	}
	| '=' fun_arithm
	{
		#PASS2
		{
			LPRDOFUNArithm pArithm = PARSER->stack().pop<RDOFUNArithm>($2);
			ASSERT(pArithm);
			$$ = PARSER->stack().push(pArithm->expression());
		}
	}
	;

if_statement
	: if_condition if_then_statement if_else_statement
	{
		#PASS2
		{
			LPExpression pIfExpression = PARSER->stack().pop<Expression>($1);
			ASSERT(pIfExpression);

			rdo::runtime::LPRDOCalcIf pIfCalc = pIfExpression->calc().object_dynamic_cast<rdo::runtime::RDOCalcIf>();
			ASSERT(pIfCalc);

			pIfCalc->setThenStatement(PARSER->stack().pop<Expression>($2)->calc());

			LPExpression pIfElseExpression = PARSER->stack().pop<Expression>($3);
			ASSERT(pIfElseExpression);

			if (!pIfElseExpression.object_dynamic_cast<ExpressionEmpty>())
			{
				pIfCalc->setElseStatement(pIfElseExpression->calc());
			}

			PARSER->contextStack()->pop<ContextReturnable>();

			$$ = PARSER->stack().push(pIfExpression);
		}
	}
	;

if_condition
	: RDO_if '(' fun_logic ')'
	{
		#PASS2
		{
			LPRDOFUNLogic pCondition = PARSER->stack().pop<RDOFUNLogic>($3);
			ASSERT(pCondition);

			rdo::runtime::LPRDOCalc pConditionCalc = pCondition->getCalc();
			ASSERT(pConditionCalc);

			LPTypeInfo pType = rdo::Factory<TypeInfo>::delegate<RDOType__void>(RDOParserSrcInfo(@1));
			ASSERT(pType);

			rdo::runtime::LPRDOCalc pCalc = rdo::Factory<rdo::runtime::RDOCalcIf>::create(pConditionCalc);
			ASSERT(pCalc);

			LPContextReturnable pContextReturnable = PARSER->context()->cast<ContextReturnable>();
			ASSERT(pContextReturnable);
			pContextReturnable->addChildContext();

			LPExpression pExpression = rdo::Factory<Expression>::create(pType, pCalc, RDOParserSrcInfo(@1));
			ASSERT(pExpression);
			$$ = PARSER->stack().push(pExpression);
		}
	}
	| RDO_if error fun_logic
	{
		#PASS2
		{
			PARSER->error().error(@2, "Ожидается открывающая скобка");
		}
	}
	| RDO_if '(' fun_logic error
	{
		#PASS2
		{
			PARSER->error().error(@4, "Ожидается закрывающая скобка");
		}
	}
	;

if_then_statement
	: returnable_statement
	;

if_else_statement
	: returnable_context_push returnable_context_pop
	{
		#PASS2
		{
			$$ = PARSER->stack().push(rdo::Factory<ExpressionEmpty>::create());
		}
	}
	| RDO_else returnable_statement
	{
		#PASS2
		{
			$$ = $2;
		}
	}
	;

for_statement
	: for_header statement
	{
		#PASS2
		{
			LPExpression pExpressionHeader = PARSER->stack().pop<Expression>($1);
			ASSERT(pExpressionHeader);

			LPExpression pExpressionStatement = PARSER->stack().pop<Expression>($2);
			ASSERT(pExpressionStatement);

			rdo::runtime::LPRDOCalc pCalcStatementList = pExpressionStatement->calc();
			ASSERT(pCalcStatementList);

			rdo::runtime::LPRDOCalcFor pCalcFor = pExpressionHeader->calc().object_dynamic_cast<rdo::runtime::RDOCalcFor>();
			ASSERT(pCalcFor);

			pCalcFor->setStatement(pCalcStatementList);

			rdo::runtime::LPRDOCalcBreakCatch pCalcBreakCatch = rdo::Factory<rdo::runtime::RDOCalcBreakCatch>::create();
			ASSERT(pCalcBreakCatch);
			pCalcBreakCatch->addStatementList(pCalcFor);

			LPExpression pExpression = rdo::Factory<Expression>::create(pExpressionStatement->typeInfo(), pCalcBreakCatch, RDOParserSrcInfo(@1, @2));

			PARSER->contextStack()->pop<ContextBreakable>();

			$$ = PARSER->stack().push(pExpression);
		}
	}
	;

for_header
	: RDO_for '(' local_variable_declaration ';' fun_logic ';' equal_statement ')'
	{
		#PASS2
		{
			LPExpression pDeclarationExpression = PARSER->stack().pop<Expression>($3);
			ASSERT(pDeclarationExpression);

			LPRDOFUNLogic pCondition = PARSER->stack().pop<RDOFUNLogic>($5);
			ASSERT(pCondition);
			
			rdo::runtime::LPRDOCalc pConditionCalc = pCondition->getCalc();
			ASSERT(pConditionCalc);

			LPExpression pEqualExpression = PARSER->stack().pop<Expression>($7);
			ASSERT(pEqualExpression);

			rdo::runtime::LPRDOCalc pCalc = rdo::Factory<rdo::runtime::RDOCalcFor>::create(
				pDeclarationExpression->calc(),
				pConditionCalc                ,
				pEqualExpression->calc()      );
			ASSERT(pCalc);

			LPTypeInfo pType = rdo::Factory<TypeInfo>::delegate<RDOType__void>(RDOParserSrcInfo(@1, @8));
			ASSERT(pType);

			LPExpression pExpression = rdo::Factory<Expression>::create(pType, pCalc, RDOParserSrcInfo(@1, @8));

			LPContextBreakable pContextBreakable = rdo::Factory<ContextBreakable>::create();
			ASSERT(pContextBreakable);

			PARSER->contextStack()->push(pContextBreakable);

			$$ = PARSER->stack().push(pExpression);
		}
	}
	| RDO_for '(' equal_statement ';' fun_logic ';' equal_statement ')'
	{
		#PASS2
		{
			LPExpression pInitExpression = PARSER->stack().pop<Expression>($3);
			ASSERT(pInitExpression);

			LPRDOFUNLogic pCondition = PARSER->stack().pop<RDOFUNLogic>($5);
			ASSERT(pCondition);

			rdo::runtime::LPRDOCalc pConditionCalc = pCondition->getCalc();
			ASSERT(pConditionCalc);

			LPExpression pEqualExpression = PARSER->stack().pop<Expression>($7);
			ASSERT(pEqualExpression);

			LPTypeInfo pType = rdo::Factory<TypeInfo>::delegate<RDOType__void>(RDOParserSrcInfo(@1, @8));
			ASSERT(pType);

			rdo::runtime::LPRDOCalc pCalc = rdo::Factory<rdo::runtime::RDOCalcFor>::create(
				pInitExpression->calc()     ,
				pConditionCalc              ,
				pEqualExpression->calc()    );
			ASSERT(pCalc);

			LPExpression pExpression = rdo::Factory<Expression>::create(pType, pCalc, RDOParserSrcInfo(@1, @8));

			LPContextBreakable pContextBreakable = rdo::Factory<ContextBreakable>::create();
			ASSERT(pContextBreakable);

			PARSER->contextStack()->push(pContextBreakable);

			$$ = PARSER->stack().push(pExpression);
		}
	}
	;

break_statement
	:RDO_Break
	{
		#PASS2
		{
			LPContext pContext = RDOParser::s_parser()->context();
			ASSERT(pContext);

			if (pContext->cast<ContextBreakable>())
			{
				rdo::runtime::LPRDOCalc pCalcBreak = rdo::Factory<rdo::runtime::RDOCalcFunBreak>::create();
				ASSERT(pCalcBreak);

				LPTypeInfo pType = rdo::Factory<TypeInfo>::delegate<RDOType__void>(RDOParserSrcInfo(@1));
				ASSERT(pType);

				LPExpression pExpression = rdo::Factory<Expression>::create(pType, pCalcBreak, RDOParserSrcInfo(@1));
				ASSERT(pExpression);

				$$ = PARSER->stack().push(pExpression);
			}
			else
			{
				PARSER->error().error(@1, "Нельзя использовать break вне цикла");
			}
		}
	}
	;

// --------------------------------------------------------------------------------
// -------------------- Общие составные токены для всех объектов РДО
// --------------------------------------------------------------------------------
// -------------------- Описание переменной
// --------------------------------------------------------------------------------
param_value
	: RDO_INT_CONST
	{
		#PASS2
		{
			$$ = $1;
		}
	}
	| RDO_REAL_CONST
	{
		#PASS2
		{
			$$ = $1;
		}
	}
	| RDO_STRING_CONST
	{
		#PASS2
		{
			$$ = $1;
		}
	}
	| RDO_IDENTIF
	{
		#PASS2
		{
			$$ = $1;
		}
	}
	| RDO_BOOL_CONST
	{
		#PASS2
		{
			$$ = $1;
		}
	}
	| param_array_value
	{
		#PASS2
		{
			$$ = $1;
		}
	}
	;

param_array_value
	: '[' array_item ']'
	{
		#PASS2
		{
			LPRDOArrayValue pArrayValue = PARSER->stack().pop<RDOArrayValue>($2);
			ASSERT(pArrayValue);
			RDOParserSrcInfo srcInfo(@1, @3, pArrayValue->getAsString());
			pArrayValue->setSrcInfo(srcInfo);
			pArrayValue->getArrayType()->setSrcInfo(srcInfo);
			$$ = PARSER->stack().push(rdo::Factory<RDOValue>::create(pArrayValue->getArrayType()->typeInfo(), pArrayValue));
		}
	}
	| '[' array_item error
	{
		#PASS2
		{
			PARSER->error().error(@2, "Массив должен закрываться скобкой");
		}
	}
	;

array_item
	: param_value
	{
		#PASS2
		{
			LPRDOValue pValue = PARSER->stack().pop<RDOValue>($1);
			ASSERT(pValue);
			LPRDOArrayType pArrayType = rdo::Factory<RDOArrayType>::create(pValue->typeInfo(), RDOParserSrcInfo(@1));
			ASSERT(pArrayType);
			LPRDOArrayValue pArrayValue = rdo::Factory<RDOArrayValue>::create(pArrayType);
			ASSERT(pArrayValue);
			pArrayValue->insertItem(pValue);
			$$ = PARSER->stack().push(pArrayValue);
		}
	}
	| array_item ',' param_value
	{
		#PASS2
		{
			LPRDOArrayValue pArrayValue = PARSER->stack().pop<RDOArrayValue>($1);
			ASSERT(pArrayValue);
			LPRDOValue pValue = PARSER->stack().pop<RDOValue>($3);
			ASSERT(pValue);
			pArrayValue->insertItem(pValue);
			$$ = PARSER->stack().push(pArrayValue);
		}
	}
	| array_item param_value
	{
		#PASS2
		{
			LPRDOArrayValue pArrayValue = PARSER->stack().pop<RDOArrayValue>($1);
			ASSERT(pArrayValue);
			LPRDOValue pValue = PARSER->stack().pop<RDOValue>($2);
			ASSERT(pValue);
			pArrayValue->insertItem(pValue);
			$$ = PARSER->stack().push(pArrayValue);
			PARSER->error().warning(@1, rdo::format("Пропущена запятая перед: %s", pValue->value().getAsString().c_str()));
		}
	}
	;

param_value_default
	: /* empty */
	{
		#PASS2
		{
			LPRDOValue pValue = rdo::Factory<RDOValue>::create();
			ASSERT(pValue);
			$$ = PARSER->stack().push(pValue);
		}
	}
	| '=' param_value
	{
		#PASS2
		{
			$$ = $2;
		}
	}
	| '=' error
	{
		#PASS2
		{
			RDOParserSrcInfo src_info(@1, @2, true);
			if (src_info.src_pos().point())
			{
				PARSER->error().error(src_info, "Не указано значение по умолчанию");
			}
			else
			{
				PARSER->error().error(src_info, "Неверное значение по умолчанию");
			}
		}
	}
	;

// --------------------------------------------------------------------------------
// -------------------- Логические выражения
// --------------------------------------------------------------------------------
fun_logic_eq
	: RDO_eq
	{
		#PASS2
		{
			$$ = RDO_eq;
		}
	}
	;

fun_logic
	: fun_arithm fun_logic_eq fun_arithm
	{
		#PASS2
		{
			LPRDOFUNArithm pArithm1 = PARSER->stack().pop<RDOFUNArithm>($1);
			LPRDOFUNArithm pArithm2 = PARSER->stack().pop<RDOFUNArithm>($3);
			ASSERT(pArithm1);
			ASSERT(pArithm2);
			LPRDOFUNLogic pResult = pArithm1->operator ==(pArithm2);
			ASSERT(pResult);
			$$ = PARSER->stack().push(pResult);
		}
	}
	| fun_arithm RDO_neq fun_arithm
	{
		#PASS2
		{
			LPRDOFUNArithm pArithm1 = PARSER->stack().pop<RDOFUNArithm>($1);
			LPRDOFUNArithm pArithm2 = PARSER->stack().pop<RDOFUNArithm>($3);
			ASSERT(pArithm1);
			ASSERT(pArithm2);
			LPRDOFUNLogic pResult = pArithm1->operator !=(pArithm2);
			ASSERT(pResult);
			$$ = PARSER->stack().push(pResult);
		}
	}
	| fun_arithm '<' fun_arithm
	{
		#PASS2
		{
			LPRDOFUNArithm pArithm1 = PARSER->stack().pop<RDOFUNArithm>($1);
			LPRDOFUNArithm pArithm2 = PARSER->stack().pop<RDOFUNArithm>($3);
			ASSERT(pArithm1);
			ASSERT(pArithm2);
			LPRDOFUNLogic pResult = pArithm1->operator <(pArithm2);
			ASSERT(pResult);
			$$ = PARSER->stack().push(pResult);
		}
	}
	| fun_arithm '>' fun_arithm
	{
		#PASS2
		{
			LPRDOFUNArithm pArithm1 = PARSER->stack().pop<RDOFUNArithm>($1);
			LPRDOFUNArithm pArithm2 = PARSER->stack().pop<RDOFUNArithm>($3);
			ASSERT(pArithm1);
			ASSERT(pArithm2);
			LPRDOFUNLogic pResult = pArithm1->operator >(pArithm2);
			ASSERT(pResult);
			$$ = PARSER->stack().push(pResult);
		}
	}
	| fun_arithm RDO_leq fun_arithm
	{
		#PASS2
		{
			LPRDOFUNArithm pArithm1 = PARSER->stack().pop<RDOFUNArithm>($1);
			LPRDOFUNArithm pArithm2 = PARSER->stack().pop<RDOFUNArithm>($3);
			ASSERT(pArithm1);
			ASSERT(pArithm2);
			LPRDOFUNLogic pResult = pArithm1->operator <=(pArithm2);
			ASSERT(pResult);
			$$ = PARSER->stack().push(pResult);
		}
	}
	| fun_arithm RDO_geq fun_arithm
	{
		#PASS2
		{
			LPRDOFUNArithm pArithm1 = PARSER->stack().pop<RDOFUNArithm>($1);
			LPRDOFUNArithm pArithm2 = PARSER->stack().pop<RDOFUNArithm>($3);
			ASSERT(pArithm1);
			ASSERT(pArithm2);
			LPRDOFUNLogic pResult = pArithm1->operator >=(pArithm2);
			ASSERT(pResult);
			$$ = PARSER->stack().push(pResult);
		}
	}
	| fun_logic RDO_and fun_logic
	{
		#PASS2
		{
			LPRDOFUNLogic pLogic1 = PARSER->stack().pop<RDOFUNLogic>($1);
			LPRDOFUNLogic pLogic2 = PARSER->stack().pop<RDOFUNLogic>($3);
			ASSERT(pLogic1);
			ASSERT(pLogic2);
			LPRDOFUNLogic pResult = pLogic1->operator &&(pLogic2);
			ASSERT(pResult);
			$$ = PARSER->stack().push(pResult);
		}
	}
	| fun_logic RDO_or fun_logic
	{
		#PASS2
		{
			LPRDOFUNLogic pLogic1 = PARSER->stack().pop<RDOFUNLogic>($1);
			LPRDOFUNLogic pLogic2 = PARSER->stack().pop<RDOFUNLogic>($3);
			ASSERT(pLogic1);
			ASSERT(pLogic2);
			LPRDOFUNLogic pResult = pLogic1->operator ||(pLogic2);
			ASSERT(pResult);
			$$ = PARSER->stack().push(pResult);
		}
	}
	| fun_arithm
	{
		#PASS2
		{
			LPRDOFUNArithm pArithm = PARSER->stack().pop<RDOFUNArithm>($1);
			ASSERT(pArithm);
			LPRDOFUNLogic pResult = rdo::Factory<RDOFUNLogic>::create(pArithm);
			ASSERT(pResult);
			$$ = PARSER->stack().push(pResult);
		}
	}
	| fun_group
	| fun_select_logic
	| '[' fun_logic ']'
	{
		#PASS2
		{
			LPRDOFUNLogic pLogic = PARSER->stack().pop<RDOFUNLogic>($2);
			ASSERT(pLogic);
			pLogic->setSrcPos (@1, @3);
			pLogic->setSrcText("[" + pLogic->src_text() + "]");
			$$ = PARSER->stack().push(pLogic);
		}
	}
	| '(' fun_logic ')'
	{
		#PASS2
		{
			LPRDOFUNLogic pLogic = PARSER->stack().pop<RDOFUNLogic>($2);
			ASSERT(pLogic);
			pLogic->setSrcPos (@1, @3);
			pLogic->setSrcText("(" + pLogic->src_text() + ")");
			$$ = PARSER->stack().push(pLogic);
		}
	}
	| RDO_not fun_logic
	{
		#PASS2
		{
			LPRDOFUNLogic pLogic = PARSER->stack().pop<RDOFUNLogic>($2);
			ASSERT(pLogic);
			RDOParserSrcInfo src_info(@1, @2);
			LPRDOFUNLogic pLogicNot = pLogic->operator_not(src_info.src_pos());
			ASSERT(pLogicNot);
			$$ = PARSER->stack().push(pLogicNot);
		}
	}
	| '[' fun_logic error
	{
		#PASS2
		{
			PARSER->error().error(@2, "Ожидается закрывающаяся скобка");
		}
	}
	| '(' fun_logic error
	{
		#PASS2
		{
			PARSER->error().error(@2, "Ожидается закрывающаяся скобка");
		}
	}
	;

// --------------------------------------------------------------------------------
// -------------------- Арифметические выражения
// --------------------------------------------------------------------------------
fun_arithm
	: RDO_INT_CONST
	{
		#PASS2
		{
			$$ = PARSER->stack().push(RDOFUNArithm::generateByConst(PARSER->stack().pop<RDOValue>($1))); 
		}
	}
	| RDO_REAL_CONST
	{
		#PASS2
		{
			$$ = PARSER->stack().push(RDOFUNArithm::generateByConst(PARSER->stack().pop<RDOValue>($1))); 
		}
	}
	| RDO_BOOL_CONST
	{
		#PASS2
		{
			$$ = PARSER->stack().push(RDOFUNArithm::generateByConst(PARSER->stack().pop<RDOValue>($1))); 
		}
	}
	| RDO_STRING_CONST
	{
		#PASS2
		{
			$$ = PARSER->stack().push(RDOFUNArithm::generateByConst(PARSER->stack().pop<RDOValue>($1))); 
		}
	}
	| param_array_value
	{
		#PASS2
		{
			$$ = PARSER->stack().push(RDOFUNArithm::generateByConst(PARSER->stack().pop<RDOValue>($1))); 
		}
	}
	| RDO_IDENTIF
	{
		#PASS2
		{
			$$ = PARSER->stack().push(RDOFUNArithm::generateByIdentificator(PARSER->stack().pop<RDOValue>($1))); 
		}
	}
	| RDO_IDENTIF_RELRES
	{
		#PASS2
		{
			$$ = PARSER->stack().push(RDOFUNArithm::generateByIdentificator(PARSER->stack().pop<RDOValue>($1))); 
		}
	}
	| RDO_IDENTIF '.' RDO_IDENTIF
	{
		#PASS2
		{
			$$ = PARSER->stack().push(RDOFUNArithm::generateByIdentificator(PARSER->stack().pop<RDOValue>($1), PARSER->stack().pop<RDOValue>($3))); 
		}
	}
	| RDO_IDENTIF_RELRES '.' RDO_IDENTIF
	{
		#PASS2
		{
			$$ = PARSER->stack().push(RDOFUNArithm::generateByIdentificator(PARSER->stack().pop<RDOValue>($1), PARSER->stack().pop<RDOValue>($3))); 
		}
	}
	| '*'
	{
		#PASS2
		{
			LPRDOValue pValue = rdo::Factory<RDOValue>::create(RDOParserSrcInfo(@1, "*"));
			ASSERT(pValue);
			LPExpression pExpression = rdo::Factory<Expression>::create(pValue);
			ASSERT(pExpression);
			LPRDOFUNArithm pArithm = rdo::Factory<RDOFUNArithm>::create(pExpression);
			ASSERT(pArithm);
			$$ = PARSER->stack().push(pArithm);
		}
	}
	| fun_arithm '+' fun_arithm
	{
		#PASS2
		{
			LPRDOFUNArithm pArithm1 = PARSER->stack().pop<RDOFUNArithm>($1);
			LPRDOFUNArithm pArithm2 = PARSER->stack().pop<RDOFUNArithm>($3);
			ASSERT(pArithm1);
			ASSERT(pArithm2);
			LPRDOFUNArithm pResult = pArithm1->operator +(pArithm2);
			ASSERT(pResult);
			$$ = PARSER->stack().push(pResult);
		}
	}
	| fun_arithm '-' fun_arithm
	{
		#PASS2
		{
			LPRDOFUNArithm pArithm1 = PARSER->stack().pop<RDOFUNArithm>($1);
			LPRDOFUNArithm pArithm2 = PARSER->stack().pop<RDOFUNArithm>($3);
			ASSERT(pArithm1);
			ASSERT(pArithm2);
			LPRDOFUNArithm pResult = pArithm1->operator -(pArithm2);
			ASSERT(pResult);
			$$ = PARSER->stack().push(pResult);
		}
	}
	| fun_arithm '*' fun_arithm
	{
		#PASS2
		{
			LPRDOFUNArithm pArithm1 = PARSER->stack().pop<RDOFUNArithm>($1);
			LPRDOFUNArithm pArithm2 = PARSER->stack().pop<RDOFUNArithm>($3);
			ASSERT(pArithm1);
			ASSERT(pArithm2);
			LPRDOFUNArithm pResult = pArithm1->operator *(pArithm2);
			ASSERT(pResult);
			$$ = PARSER->stack().push(pResult);
		}
	}
	| fun_arithm '/' fun_arithm
	{
		#PASS2
		{
			LPRDOFUNArithm pArithm1 = PARSER->stack().pop<RDOFUNArithm>($1);
			LPRDOFUNArithm pArithm2 = PARSER->stack().pop<RDOFUNArithm>($3);
			ASSERT(pArithm1);
			ASSERT(pArithm2);
			LPRDOFUNArithm pResult = pArithm1->operator /(pArithm2);
			ASSERT(pResult);
			$$ = PARSER->stack().push(pResult);
		}
	}
	| fun_arithm_func_call
	| fun_select_arithm
	| '(' fun_arithm ')'
	{
		#PASS2
		{
			LPRDOFUNArithm pArithm = PARSER->stack().pop<RDOFUNArithm>($2);
			ASSERT(pArithm);
			pArithm->setSrcPos (@1, @3);
			pArithm->setSrcText("(" + pArithm->src_text() + ")");
			$$ = PARSER->stack().push(pArithm);
		}
	}
	| '-' fun_arithm %prec RDO_UMINUS
	{
		#PASS2
		{
			LPRDOFUNArithm pArithm = PARSER->stack().pop<RDOFUNArithm>($2);
			ASSERT(pArithm);
			RDOParserSrcInfo info;
			info.setSrcPos(@1, @2);
			$$ = PARSER->stack().push(pArithm->uminus(info.src_pos()));
		}
	}
	| RDO_IDENTIF '.' RDO_Size
	{
		#PASS2
		{
			LPRDOValue pValue = PARSER->stack().pop<RDOValue>($1);
			ASSERT(pValue);

			LPRDOFUNArithm pArithm = RDOFUNArithm::generateByIdentificator(pValue);
			ASSERT(pArithm);

			rdo::runtime::LPRDOCalc pCalc;
			if (pArithm->typeInfo()->type().object_dynamic_cast<RDOArrayType>())
			{
				pCalc = rdo::Factory<rdo::runtime::RDOCalcArraySize>::create(pArithm->calc());
				ASSERT(pCalc);
			}
			else
			{
				PARSER->error().error(@1, rdo::format("'%s' не является массивом.", pValue->value().getIdentificator().c_str()));
			}

			LPTypeInfo pType = rdo::Factory<TypeInfo>::delegate<RDOType__int>(RDOParserSrcInfo(@1));
			ASSERT(pType);

			LPExpression pExpression = rdo::Factory<Expression>::create(pType, pCalc, RDOParserSrcInfo(@1));
			ASSERT(pExpression);

			LPRDOFUNArithm pArithmArraySize = rdo::Factory<RDOFUNArithm>::create(pExpression);
			ASSERT(pArithmArraySize);

			$$ = PARSER->stack().push(pArithmArraySize);
		}
	}
	| RDO_IDENTIF '[' fun_arithm ']' '.' RDO_IDENTIF
	{
		#PASS2
		{
			LPRDOValue pArrayValue = PARSER->stack().pop<RDOValue>($1);
			ASSERT(pArrayValue);

			LPRDOFUNArithm pArrayArithm = RDOFUNArithm::generateByIdentificator(pArrayValue);
			ASSERT(pArrayArithm);

			LPRDOArrayType pArrayType = pArrayArithm->typeInfo()->type().object_dynamic_cast<RDOArrayType>();
			if (!pArrayType)
			{
				PARSER->error().error(@1, rdo::format("'%s' не является массивом"
					, pArrayValue->value().getIdentificator().c_str())
				);
			}

			LPRDORTPResType pResType = pArrayType->getItemType()->type().object_dynamic_cast<RDORTPResType>();
			if (!pResType)
			{
				PARSER->error().error(@1, rdo::format("'%s' не является массивом ресурсов"
					, pArrayValue->value().getIdentificator().c_str())
				);
			}

			LPRDOFUNArithm pArrayIndex = PARSER->stack().pop<RDOFUNArithm>($3);
			ASSERT(pArrayIndex);

			LPRDOValue pParamName = PARSER->stack().pop<RDOValue>($6);
			ASSERT(pParamName);

			rsint paramIndex = pResType->getRTPParamNumber(pParamName->value().getAsString());

			if (paramIndex == RDORTPResType::UNDEFINED_PARAM)
			{
				PARSER->error().error(@6, rdo::format("'%s' не является параметром ресурса '%s'"
					, pParamName->value().getAsString().c_str()
					, pResType->name().c_str())
				);
			}

			rdo::runtime::LPRDOCalc pArrayItem = rdo::Factory<rdo::runtime::RDOCalcArrayItem>::create(
				pArrayArithm->calc(),
				pArrayIndex->calc()
			);
			ASSERT(pArrayItem);

			rdo::runtime::LPRDOCalc pParamValue = rdo::Factory<rdo::runtime::RDOCalcGetResourceParam>::create(
				pArrayItem, paramIndex
			);
			ASSERT(pParamValue);

			LPExpression pParamExpression = rdo::Factory<Expression>::create(
				pResType->getParams()[paramIndex]->getTypeInfo(),
				pParamValue,
				RDOParserSrcInfo(@6)
			);
			ASSERT(pParamExpression);

			LPRDOFUNArithm pParamArithm = rdo::Factory<RDOFUNArithm>::create(pParamExpression);
			ASSERT(pParamArithm);

			$$ = PARSER->stack().push(pParamArithm);
		}
	}
	| RDO_IDENTIF '[' fun_arithm ']'
	{
		#PASS2
		{
			LPRDOValue pValue = PARSER->stack().pop<RDOValue>($1);
			ASSERT(pValue);

			LPRDOFUNArithm pArithm = RDOFUNArithm::generateByIdentificator(pValue);
			ASSERT(pArithm);

			LPRDOFUNArithm pArithmInd = PARSER->stack().pop<RDOFUNArithm>($3);
			ASSERT(pArithmInd);

			LPRDOType pType = pArithm->typeInfo()->type();
			ASSERT(pType);

			LPRDOArrayType pArrayType = pType.object_dynamic_cast<RDOArrayType>();
			if (!pArrayType)
			{
				PARSER->error().error(@1, rdo::format("'%s' не является массивом.", pValue->value().getIdentificator().c_str()));
			}

			rdo::runtime::LPRDOCalc pCalc = rdo::Factory<rdo::runtime::RDOCalcArrayItem>::create(pArithm->calc(), pArithmInd->calc());
			ASSERT(pCalc);

			LPTypeInfo pItemType = pArrayType->getItemType();
			ASSERT(pItemType);

			LPExpression pExpression = rdo::Factory<Expression>::create(pItemType, pCalc, RDOParserSrcInfo(@1));
			ASSERT(pExpression);

			LPRDOFUNArithm pArithmArrayItem = rdo::Factory<RDOFUNArithm>::create(pExpression);
			ASSERT(pArithmArrayItem);

			$$ = PARSER->stack().push(pArithmArrayItem);
		}
	}
	;

// --------------------------------------------------------------------------------
// -------------------- Функции и последовательности
// --------------------------------------------------------------------------------
fun_arithm_func_call
	: RDO_IDENTIF '(' arithm_list ')'
	{
		#PASS2
		{
			tstring funName                    = PARSER->stack().pop<RDOValue>($1)->value().getIdentificator();
			LPArithmContainer pArithmContainer = PARSER->stack().pop<ArithmContainer>($3);
			ASSERT(pArithmContainer);

			LPRDOFUNParams pFunParams = rdo::Factory<RDOFUNParams>::create(pArithmContainer);
			ASSERT(pFunParams);

			pFunParams->getFunseqName().setSrcInfo(RDOParserSrcInfo(@1, funName));
			pFunParams->setSrcPos (@1, @4);
			pFunParams->setSrcText(funName + "(" + pArithmContainer->src_text() + ")");
			LPRDOFUNArithm pArithm = pFunParams->createCall(funName);
			ASSERT(pArithm);
			$$ = PARSER->stack().push(pArithm);
		}
	}
	| RDO_IDENTIF '(' error
	{
		#PASS2
		{
			PARSER->error().error(@3, "Ошибка в параметрах функции");
		}
	}
	;

arithm_list
	: /* empty */
	{
		#PASS2
		{
			LPArithmContainer pArithmContainer = rdo::Factory<ArithmContainer>::create();
			ASSERT(pArithmContainer);
			$$ = PARSER->stack().push(pArithmContainer);
		}
	}
	| arithm_list_body
	;

arithm_list_body
	: fun_arithm
	{
		#PASS2
		{
			LPArithmContainer pArithmContainer = rdo::Factory<ArithmContainer>::create();
			LPRDOFUNArithm    pArithm          = PARSER->stack().pop<RDOFUNArithm>($1);
			ASSERT (pArithmContainer);
			ASSERT (pArithm);
			pArithmContainer->setSrcText(pArithm->src_text());
			pArithmContainer->addItem   (pArithm);
			$$ = PARSER->stack().push(pArithmContainer);
		}
	}
	| arithm_list_body ',' fun_arithm
	{
		#PASS2
		{
			LPArithmContainer pArithmContainer = PARSER->stack().pop<ArithmContainer>($1);
			LPRDOFUNArithm    pArithm          = PARSER->stack().pop<RDOFUNArithm>($3);
			ASSERT (pArithmContainer);
			ASSERT (pArithm);
			pArithmContainer->setSrcText(pArithmContainer->src_text() + ", " + pArithm->src_text());
			pArithmContainer->addItem   (pArithm);
			$$ = PARSER->stack().push(pArithmContainer);
		}
	}
	| arithm_list_body ',' error
	{
		#PASS2
		{
			PARSER->error().error(@3, "Ошибка в арифметическом выражении");
		}
	}
	;

// --------------------------------------------------------------------------------
// -------------------- Групповые выражения
// --------------------------------------------------------------------------------
fun_group_keyword
	: RDO_Exist
	{
		#PASS2
		{
			$$ = RDOFUNGroupLogic::fgt_exist;
		}
	}
	| RDO_Not_Exist
	{
		#PASS2
		{
			$$ = RDOFUNGroupLogic::fgt_notexist;
		}
	}
	| RDO_For_All
	{
		#PASS2
		{
			$$ = RDOFUNGroupLogic::fgt_forall;
		}
	}
	| RDO_Not_For_All
	{
		#PASS2
		{
			$$ = RDOFUNGroupLogic::fgt_notforall;
		}
	}
	;

fun_group_header
	: fun_group_keyword '(' RDO_IDENTIF_COLON
	{
		#PASS2
		{
			LPRDOValue pValue = PARSER->stack().pop<RDOValue>($3);
			ASSERT(pValue);
			$$ = PARSER->stack().push(rdo::Factory<RDOFUNGroupLogic>::create((RDOFUNGroupLogic::FunGroupType)$1, pValue->src_info()));
		}
	}
	| fun_group_keyword '(' error
	{
		#PASS2
		{
			PARSER->error().error(@3, "Ожидается имя типа");
		}
	}
	| fun_group_keyword error
	{
		#PASS2
		{
			PARSER->error().error(@1, "После имени функции ожидается октрывающаяся скобка");
		}
	}
	;

fun_group
	: fun_group_header fun_logic ')'
	{
		#PASS2
		{
			LPRDOFUNGroupLogic pGroupFun = PARSER->stack().pop<RDOFUNGroupLogic>($1);
			LPRDOFUNLogic      pLogic    = PARSER->stack().pop<RDOFUNLogic>     ($2);
			ASSERT(pGroupFun);
			ASSERT(pLogic   );
			pGroupFun->setSrcPos(@1, @3);
			$$ = PARSER->stack().push(pGroupFun->createFunLogic(pLogic));
		}
	}
	| fun_group_header RDO_NoCheck ')'
	{
		#PASS2
		{
			LPRDOFUNGroupLogic pGroupFun = PARSER->stack().pop<RDOFUNGroupLogic>($1);
			ASSERT(pGroupFun);
			pGroupFun->setSrcPos(@1, @3);
			LPRDOFUNLogic pTrueLogic = RDOFUNLogic::generateTrue(RDOParserSrcInfo(@2, "NoCheck"));
			ASSERT(pTrueLogic);
			$$ = PARSER->stack().push(pGroupFun->createFunLogic(pTrueLogic));
		}
	}
	| fun_group_header fun_logic error
	{
		#PASS2
		{
			PARSER->error().error(@2, "Ожидается закрывающаяся скобка");
		}
	}
	| fun_group_header RDO_NoCheck error
	{
		#PASS2
		{
			PARSER->error().error(@2, "Ожидается закрывающаяся скобка");
		}
	}
	| fun_group_header error
	{
		#PASS2
		{
			PARSER->error().error(@1, @2, "Ошибка в логическом выражении");
		}
	}
	;

// --------------------------------------------------------------------------------
// -------------------- Select
// --------------------------------------------------------------------------------
fun_select_header
	: RDO_Select '(' RDO_IDENTIF_COLON
	{
		#PASS2
		{
			LPRDOValue pValue = PARSER->stack().pop<RDOValue>($3);
			ASSERT(pValue);
			LPRDOFUNSelect pSelect   = rdo::Factory<RDOFUNSelect>::create(pValue->src_info());
			ASSERT(pSelect);
			pSelect->setSrcText("Select(" + pValue->value().getIdentificator() + ": ");
			$$ = PARSER->stack().push(pSelect);
		}
	}
	| RDO_Select '(' error
	{
		#PASS2
		{
			PARSER->error().error(@3, "Ожидается имя типа");
		}
	}
	| RDO_Select error
	{
		#PASS2
		{
			PARSER->error().error(@1, "Ожидается октрывающаяся скобка");
		}
	}
	;

fun_select_body
	: fun_select_header fun_logic ')'
	{
		#PASS2
		{
			LPRDOFUNSelect pSelect = PARSER->stack().pop<RDOFUNSelect>($1);
			LPRDOFUNLogic  pLogic  = PARSER->stack().pop<RDOFUNLogic> ($2);
			ASSERT(pSelect);
			ASSERT(pLogic );
			pSelect->setSrcText(pSelect->src_text() + pLogic->src_text() + ")");
			pSelect->initSelect(pLogic);
			$$ = PARSER->stack().push(pSelect);
		}
	}
	| fun_select_header RDO_NoCheck ')'
	{
		#PASS2
		{
			LPRDOFUNSelect pSelect = PARSER->stack().pop<RDOFUNSelect>($1);
			ASSERT(pSelect);
			RDOParserSrcInfo info(@2, "NoCheck");
			pSelect->setSrcText(pSelect->src_text() + info.src_text() + ")");
			LPRDOFUNLogic pTrueLogic = RDOFUNLogic::generateTrue(info);
			ASSERT(pTrueLogic);
			pSelect->initSelect(pTrueLogic);
			$$ = PARSER->stack().push(pSelect);
		}
	}
	| fun_select_header fun_logic error
	{
		#PASS2
		{
			PARSER->error().error(@2, "Ожидается закрывающаяся скобка");
		}
	}
	| fun_select_header RDO_NoCheck error
	{
		#PASS2
		{
			PARSER->error().error(@2, "Ожидается закрывающаяся скобка");
		}
	}
	| fun_select_header error
	{
		#PASS2
		{
			PARSER->error().error(@1, @2, "Ошибка в логическом выражении");
		}
	}
	;

fun_select_keyword
	: RDO_Exist
	{
		#PASS2
		{
			$$ = RDOFUNGroupLogic::fgt_exist;
		}
	}
	| RDO_Not_Exist
	{
		#PASS2
		{
			$$ = RDOFUNGroupLogic::fgt_notexist;
		}
	}
	| RDO_For_All
	{
		#PASS2
		{
			$$ = RDOFUNGroupLogic::fgt_forall;
		}
	}
	| RDO_Not_For_All
	{
		#PASS2
		{
			$$ = RDOFUNGroupLogic::fgt_notforall;
		}
	}
	;

fun_select_logic
	: fun_select_body '.' fun_select_keyword '(' fun_logic ')'
	{
		#PASS2
		{
			LPRDOFUNSelect pSelect = PARSER->stack().pop<RDOFUNSelect>($1);
			LPRDOFUNLogic  pLogic  = PARSER->stack().pop<RDOFUNLogic> ($5);
			ASSERT(pSelect);
			ASSERT(pLogic );
			pSelect->setSrcPos(@1, @6);
			LPRDOFUNLogic pLogicSelect = pSelect->createFunSelectGroup((RDOFUNGroupLogic::FunGroupType)$3, pLogic);
			ASSERT(pLogicSelect);
			$$ = PARSER->stack().push(pLogicSelect);
		}
	}
	| fun_select_body '.' fun_select_keyword '(' error
	{
		#PASS2
		{
			PARSER->error().error(@4, @5, "Ошибка в логическом выражении");
		}
	}
	| fun_select_body '.' fun_select_keyword error
	{
		#PASS2
		{
			PARSER->error().error(@3, "Ожидается октрывающаяся скобка");
		}
	}
	| fun_select_body '.' RDO_Empty '(' ')'
	{
		#PASS2
		{
			LPRDOFUNSelect pSelect = PARSER->stack().pop<RDOFUNSelect>($1);
			ASSERT(pSelect);
			pSelect->setSrcPos(@1, @5);
			RDOParserSrcInfo emptyInfo(@3, @5, "Empty()");
			LPRDOFUNLogic pLogic = pSelect->createFunSelectEmpty(emptyInfo);
			ASSERT(pLogic);
			$$ = PARSER->stack().push(pLogic);
		}
	}
	| fun_select_body '.' RDO_Empty '(' error
	{
		#PASS2
		{
			PARSER->error().error(@4, "Ожидается закрывающаяся скобка");
		}
	}
	| fun_select_body '.' RDO_Empty error
	{
		#PASS2
		{
			PARSER->error().error(@3, "Ожидается октрывающаяся скобка");
		}
	}
	| fun_select_body '.' error
	{
		#PASS2
		{
			PARSER->error().error(@2, @3, "Ожидается метод списка ресурсов");
		}
	}
	| fun_select_body error
	{
		#PASS2
		{
			PARSER->error().error(@1, "Ожидается '.' (точка) для вызова метода списка ресурсов");
		}
	}
	;

fun_select_arithm
	: fun_select_body '.' RDO_Size '(' ')'
	{
		#PASS2
		{
			LPRDOFUNSelect pSelect = PARSER->stack().pop<RDOFUNSelect>($1);
			ASSERT(pSelect);
			pSelect->setSrcPos(@1, @5);
			RDOParserSrcInfo sizeInfo(@3, @5, "Size()");
			LPRDOFUNArithm pArithm = pSelect->createFunSelectSize(sizeInfo);
			ASSERT(pArithm);
			$$ = PARSER->stack().push(pArithm);
		}
	}
	| fun_select_body '.' RDO_Size error
	{
		#PASS2
		{
			PARSER->error().error(@3, "Ожидается октрывающаяся скобка");
		}
	}
	| fun_select_body '.' RDO_Size '(' error
	{
		#PASS2
		{
			PARSER->error().error(@4, "Ожидается закрывающаяся скобка");
		}
	}
	| fun_select_body '.' RDO_Select_Array '(' ')'
	{
		#PASS2
		{
			LPRDOFUNSelect pSelect = PARSER->stack().pop<RDOFUNSelect>($1);
			ASSERT(pSelect);
			pSelect->setSrcPos(@1, @5);
			RDOParserSrcInfo arrayInfo(@3, @5, "Array()");
			LPRDOFUNArithm pArithm = pSelect->createFunSelectArray(arrayInfo);
			ASSERT(pArithm);
			$$ = PARSER->stack().push(pArithm);
		}
	}
	| fun_select_body '.' RDO_Select_Array error
	{
		#PASS2
		{
			PARSER->error().error(@3, "Ожидается октрывающаяся скобка");
		}
	}
	| fun_select_body '.' RDO_Select_Array '(' error
	{
		#PASS2
		{
			PARSER->error().error(@4, "Ожидается закрывающаяся скобка");
		}
	}
	;

%%

CLOSE_RDO_PARSER_NAMESPACE
