0.1 Найти на винте 10Gb и несколько часов терпения
0.2 http://qt-project.org/wiki/Building_Qt_5_from_Git
0.3 На хабре тоже есть инструкция для компиляции Qt5 под 2008 студию: http://habrahabr.ru/post/164357/, но в ней не рассматривается компиляция некоторых модулей Qt
0.4 Тестировалось на Qt 5.0.1 и Qt 5.1.1

1. Загрузка Qt
http://qt-project.org/downloads

Ищем ссылку в виде:
The source code is available as a zip (280 MB)

Архив должен называться
qt-everywhere-opensource-src-<версия>.zip

Качаем, распаковываем в любое место, например, в C:\qt-5.1.1. Эта директория должна содержать
gnuwin32
qtactiveqt
qtbase
qtdeclarative
qtdoc
qtgraphicaleffects
qtimageformats
qtjsbackend
qtmultimedia
и др. файлы и папки

2. Подготовка к компиляции Qt. Проверялось только на пакетах для x86

2.1 Установить ActiveState Perl
http://www.activestate.com/activeperl/downloads

2.2 Установить Python
http://www.python.org/download/
(выбрать Add python.exe to PATH)

2.3 Установить Ruby
http://www.rubyinstaller.org/downloads/
(выбрать Add Ruby executables to your PATH)

После установки (2.1 - 2.3) лучше перелогиниться в винде (перезагружаться не обязательно)

2.4 Установить библиотеку ICU с cygwin'ом. См. install.icu.txt. Перепишите *.dll и *.lib в папку C:\qt-5.1.1\qtbase\bin.

2.5 Установить jom
http://qt-project.org/wiki/jom
Разархивировать в любую папку, например в C:\Program\jom
Прописать путь в PATH

3. Конфигурация и компиляция Qt
3.1 Открыть 'правильную консоль' [install.txt:2.1]

3.2 Запуск конфигуратора
3.2.1 Без поддержки PostgreSQL
cd c:\qt-5.1.1
[install.txt:2.2]
set PATH=C:\qt-5.1.1\qtbase\bin;C:\qt-5.1.1\gnuwin32\bin;%PATH%
set INCLUDE=C:\Program\cygwin\usr\local\include;%INCLUDE%
set LIB=C:\Program\cygwin\usr\local\lib;%LIB%

configure.bat -debug-and-release -opensource -confirm-license -nomake tests -nomake examples -opengl desktop

3.2.2 С пожддержкой PostgreSQL
cd c:\qt-5.1.1
[install.txt:2.2]
set PATH=C:\qt-5.1.1\qtbase\bin;C:\qt-5.1.1\gnuwin32\bin;%PATH%
set INCLUDE=%PSQL%\include;C:\Program\cygwin\usr\local\include;%INCLUDE%
set LIB=%PSQL%\lib;C:\Program\cygwin\usr\local\lib;%LIB%

configure.bat -debug-and-release -opensource -confirm-license -nomake tests -nomake examples -opengl desktop -plugin-sql-psql

После конфигурации.
Если выдает Error, то попробуйте запустить консоль от имени Администратора. В конце конфигурации должно быть

Qt is now configured for building. Just run nmake.
To reconfigure, run nmake confclean and configure.

+ qtbase\bin\qmake c:\qt-5.1.1\
Info: creating super cache file C:/qt-5.1.1/.qmake.super

И больше никаких упоминаний, ни про WebKit, ни про другие модули. Если что-то вывелось, то нади читать сообщения и думать, почему Qt не смогла их сконфигурировать.

Еще можно проверить, что icu найдена:
ICU support.............yes

3.3 Компиляция
jom

4. Настройка окружения и IDE

4.1. Добавляем переменную окружения
QTDIR=C:\qt-5.1.1\qtbase
Не забывам перелогиниться в винде.

4.2. Для Windows запускаем Visual Studio, заходим в настройки
Tools/Options/Projects and Solutions/VC++ Directories

Platform             = Win32
Show directories for = Include files, добавляем $(QTDIR)\include
Show directories for = Library files, добавляем $(QTDIR)\lib

или берёза

5. Чтобы скомпиленная Qt стала переносимой в другие папки, необходимо подредактировать файл
C:\qt-5.1.1\qtbase\bin\qt.conf

5.1 Для переноса исходников и бинарников самой библиотеки
прописать
[Paths]
Prefix=..

5.2 А для релиза РДО

5.2.1 Если плагины расположены в подпапке plugins, которая в корне бинарника РДО. При этом каждый плагин в своей отдельной папке внутри plugins
Создать qt.conf в корне бинарников РДО со следующим содержимым
[Paths]
Plugins=./plugins

5.2.2 Если плагины располагаются в своих подпапках, но сразу в корне бинарников РДО
Этот файл вообще не нужен, его лучше не создавать
