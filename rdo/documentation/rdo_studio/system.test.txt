В настоящее время существуют следующие виды тестов для моделей:

    1. Тесты на хорошо
    2. Тесты на плохо с кодом возврата
    3. Тесты на плохо с ошибками компиляции

Структура файла проекта тестирования

    Файлы тестирования представляет собой проект, описывающий какие действия будут выполняться системой тестирования.
    Для системы тестирования РДО файлы тестирования пишутся с использованием XML. Описание файла тестирования .rtestx:

    <?xml version="1.0"?>
    <test>
        <model></model>
        <target></target>
        <exit_code></exit_code>
        <trace></trace>
        <result></result>
        <log_compilation></log_compilation>
    </test>

    * <model></model> - тут пишется относительный путь к модели от файла .rtestx
    * <target></target> - указать цель
    * <exit_code><exit_code> - код завершения
    <trace></trace> - относительный путь к файлу эталонов трассировки
    <result></result> - относительный путь к файлу эталонов результатов
    <log_compilation></log_compilation> - относительный путь к файлу лога компиляции

    * ЗВЕЗДОЧНОЙ ОТМЕЧЕНЫ ОБЯЗАТЕЛЬНЫЕ ПОЛЯ

Список доступных целей:

    CONSOLE

    Для разработчиков смотреть в файле scripts/python/test.py раздел «test target type»

Список доступных кодов завершения

    RDO_CONSOLE_TERMINATION_NORMAL                         = 0
    RDO_CONSOLE_TERMINATION_WITH_AN_ERROR_NO_MODEL         = 1
    RDO_CONSOLE_TERMINATION_WITH_AN_ERROR_OPEN_MODEL_ERROR = 2
    RDO_CONSOLE_TERMINATION_WITH_AN_ERROR_PARSE_ERROR      = 3
    RDO_CONSOLE_TERMINATION_WITH_AN_ERROR_RUNTIME_ERROR    = 4

    Для разработчиков смотреть в файле scripts/python/test.py раздел «rdo console exit code»
    
-------------------------------------------------------------------------------
    
Для добавление теста на хорошо необходимо:

    1. Написать модель на языке РДО. Формат файла проекта .rdox
    2. Провести моделирование на своем компьютере, получив результаты и трассировку
    3. Создать текстовый файл с расширением .rtestx и заполнить его по примеру
    4. Созданные файлы модели, .rtestx файл проекта и эталоны с результатами нужно переместить в папку в репозитории РДО, назвав ее вменяемо

    Пример:

    <?xml version="1.0"?>
    <test>
      <model>simple_qs.rdox</model>
      <target>CONSOLE</target>
      <exit_code>0</exit_code>
      <trace>simple_qs_etalon.trc</trace>
      <result>simple_qs_etalon.pmv</result>
    </test>

    Особенностью тестов на хорошо является обязательное наличие результатов и трассировки

    и другие ...

-------------------------------------------------------------------------------

Для добавления теста на плохо с кодом возврата

    1. Написать модель на языке РДО. Формат файла проекта .rdox
    2. Провести моделирование на своем компьютере, получив код ошибки
    3. Создать текстовый файл с расширением .rtestx и заполнить его по примеру
    4. Созданные файлы модели, .rtestx файл проекта нужно переместить в папку в репозитории РДО, назвав ее вменяемо

    Пример:

    <?xml version="1.0"?>
    <test>
      <model>division_by_zero_error.rdox</model>
      <target>CONSOLE</target>
      <exit_code>4</exit_code>
    </test>

    Особенностью тестов на плохо является код ошибки. Брать их нужно из раздела «Структура файла проекта тестирования > Список доступных кодов завершения».

-------------------------------------------------------------------------------

Для добавления теста на плохо с ошибками компиляции

    1. Написать модель на языке РДО. Формат файла проекта .rdox
    2. Провести моделирование на своем компьютере, получив код ошибки
    3. Создать текстовый файл с расширением .rtestx и заполнить его по примеру
    4. Созданные файлы модели, файл .rlog, .rtestx файл проекта нужно переместить в папку в репозитории РДО, назвав ее вменяемо

    Пример:

    <?xml version="1.0"?>
    <test>
        <model>syntax_error.rdox</model>
        <target>CONSOLE</target>
        <exit_code>3</exit_code>
        <log_compilation>syntax_error.rlog</log_compilation>
    </test>

    Особенностью тестов на плохо является файл с ошибками компиляции.

    Файл содержит список ошибок построчно. Пример:

    PMD (4): предупреждение: Преобразование 'real' в 'integer', возможна потеря данных
    PMD (4): предупреждение: Преобразование 'real' в 'integer', возможна потеря данных
    PMD (5): предупреждение: Преобразование 'real' в 'integer', возможна потеря данных
    PMD (5): предупреждение: Преобразование 'real' в 'integer', возможна потеря данных
    PMD (6): ошибка: Ожидается ключевое слово $End

-------------------------------------------------------------------------------

Пример как расположены файлы проекта тестирования в папке :

    evgeny@linux-omzk:~/repository/rdo> ls -l app/rdo_console/examples_of_tests/syntax_error/
    итого 44
    -rw-r--r-- 1 evgeny users 106 сент. 21 17:10 syntax_error.dpt
    -rw-r--r-- 1 evgeny users 292 сент. 21 17:10 syntax_error.evn
    -rw-r--r-- 1 evgeny users 151 сент. 21 17:10 syntax_error.fun
    -rw-r--r-- 1 evgeny users 548 сент. 21 17:10 syntax_error.pat
    -rw-r--r-- 1 evgeny users 414 сент. 21 17:10 syntax_error.pmd
    -rw-r--r-- 1 evgeny users  96 сент. 21 17:10 syntax_error.rdox
    -rw-r--r-- 1 evgeny users 382 сент. 21 17:10 syntax_error.rlog
    -rw-r--r-- 1 evgeny users 128 сент. 21 17:10 syntax_error.rss
    -rw-r--r-- 1 evgeny users 230 сент. 21 17:10 syntax_error.rtestx
    -rw-r--r-- 1 evgeny users 175 сент. 21 17:10 syntax_error.rtp
    -rw-r--r-- 1 evgeny users 164 сент. 21 17:10 syntax_error.smr

    (вывод ls -l в bash linux)