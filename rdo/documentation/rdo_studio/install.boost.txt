Boost - The Boost C++ libraries are a set of free software libraries that extend the functionality of C++.

    Используется в исходном коде РДО.

0. Проверяем, что на компьютере есть не меньше 1.8Гб свободного места.

1. Скачиваем boost
    http://www.boost.org/
    текущая версия 1.53

    Для Windows предположим, что разархивировали в 'с:\boost_1_49_0'
    Для GNU/Linux предположим, что разархивировали в '/home/user/boost'

2. Собираем статические либы буста
2.1. Для Windows (из Far'а или cmd.exe):

    cd c:\boost_1_53_0
    bootstrap.bat

    Если вывелось
    Bootstrapping is done. To build, run:

        .\b2
    , то всё хорошо, переходим к 2.3.

    Иначе смотрим на ошибку. У меня в путях (переменная PATH) было с виду правильное имя
    "C:\Program Files\Microsoft DirectX SDK (August 2006)\Utilities\Bin\x86"
    Оно в кавычках, и  инсталятор упорно ругался на
    \Utilities\Bin\x86";"C:\Program...
    Заходим в редактор переменных окружения и удаляем все двойные кавычки из PATH. Делаем это в двух местах: для пользователя и общесистемные.
    Повторяем 2.1.

2.2. Для GNU/Linux:

    cd /home/user/boost
    ./bootstrap.sh

2.3. Для Windows запускаем bjam.exe с параметрами (можно запускать b2.exe - разницы нет)

2.3.1 Для компиляции библиотек под Visual Studio 2008

    bjam debug link=static threading=multi
    bjam release link=static threading=multi

    дело это еще более долгое, чем пункт 2, так что тоже не нервничеам;-)
    чтобы ускорить процесс можно добавить флаг
    -j N
    где N - количество потоков компиляции,
    для i7 пишем
    bjam debug link=static threading=multi -j 8
    bjam release link=static threading=multi -j 8

    для i5 пишем
    bjam debug link=static threading=multi -j 4
    bjam release link=static threading=multi -j 4

    Собранные либы лежат в 'C:\boost_1_49_0\stage\lib'

2.3.2 Для MinGW в корне буста находим файл project-config.jam и заменяем директиву using на using gcc ;

    Далее запускаем blam как и для Visual Studio:
    bjam debug link=static threading=multi
    bjam release link=static threading=multi

    Если вы уже скомпилили буст под Visual Studio, то ничего страшного.
    Библиотеки буста после компиляции MinGW и Visual Studio имеют разные имена и располагаются в одном месте.

    Если возникла ошибка 'ml...', то необходимо добавить путь к ml.exe в PATH. Искать ml.exe надо в районе в
    C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\bin


2.3.3 Для GNU/Linux запускаем bjam с параметрами

    ./b2 --layout=tagged --build-type=complete --prefix=/home/user/boost-install threading=multi -j 8 install

3. Настройка окружения и IDE

3.1. Для Windows
3.1.1. В Visual Studio, заходим в настройки

    Tools/Options/Projects and Solutions/VC++ Directories

	Platform             = Win32
	Show directories for = Include files, добавляем с:\boost_1_53_0
	Show directories for = Library files, добавляем с:\boost_1_53_0\stage\lib

    Теперь можно компилировать rdo_studio.

3.2. Для GNU/Linux

    export BOOST_ROOT=~/boost-install
    Лучше добавить в .bashrc - чтобы не делать этого постоянно.

    Добавить эту переменную в IDE.

4. Если потребуется пересобрать буст, то

4.1 bjam --clean-all
4.2 удаляем папку lib из C:\boost_1_49_0\bin.v2
4.3 удаляем папку lib из C:\boost_1_49_0\stage

    и повторяем шаг 2

    PS: Уже не в первый раз понадобилось описание имён бибилиотек, вот оно
    http://www.boost.org/doc/libs/1_49_0/more/getting_started/unix-variants.html#library-naming

    PSS: Параметры запуска bjam
    http://www.boost.org/boost-build2/doc/html/bbv2/overview/invocation.html#bbv2.overview.invocation.properties
