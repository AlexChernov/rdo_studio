#line 2 "rdolex.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
class istream;
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 140
#define YY_END_OF_BUFFER 141
static yyconst short int yy_acclist[959] =
    {   0,
      123,  123,  141,  140,  129,  140,  139,  140,  140,  130,
      140,  130,  140,  130,  140,  130,  140,  132,  133,  140,
      130,  140,  130,  140,  139,  140,  139,  140,  139,  140,
      139,  140,  139,  140,  139,  140,  139,  140,  139,  140,
      139,  140,  139,  140,  139,  140,  139,  140,  139,  140,
      139,  140,  139,  140,  139,  140,  139,  140,  139,  140,
      139,  140,  139,  140,  139,  140,  139,  140,  139,  140,
      139,  140,  139,  140,  139,  140,  139,  140,  139,  140,
      139,  140,  139,  140,  139,  140,  139,  140,  122,  140,
      123,  140,  124,  128,  140,  125,  128,  140,  126,  140,

      129,  139,  138,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  120,  132,  133,    9,  127,  134,
      133,  132,  133,  134,   32,   31,   33,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
       94,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
       36,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  123,  128,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,

      139,  139,  139,  139,  139,  139,  121,  134,  131,  133,
      134,  133,  134,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
       95,  139,  139,  139,   37,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,    6,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,

      139,  139,  133,  133,  133,  134,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,   44,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
       81,  139,  108,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,   51,  139,  139,  139,
      139,  139,  116,  139,   19,  139,  139,  139,  139,  139,
      139,    5,  139,  114,  139,   41,  139,  139,  139,  104,
      139,  139,  139,  139,  110,  139,  139,  139,  139,  139,
      139,  139,  139,  135,  139,  139,   14,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,

      139,  139,  139,  139,   49,  139,   16,  139,  133,  134,
      133,  139,  139,  139,  139,  139,  139,   46,  139,   27,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,   98,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,   52,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  113,  139,  139,  139,   18,  139,  139,   11,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  105,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,   50,  139,

      139,   45,  139,  139,  139,  139,  139,  139,  139,  139,
       82,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  119,  139,  139,  112,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
       24,  139,  139,  139,  115,  139,   86,  139,  139,  139,
      139,  139,  118,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,   29,
      139,  139,  139,  139,  139,   83,  139,  139,   34,  139,
      139,  139,  139,  139,  139,  139,  139,  106,  139,  139,

      139,  139,  139,  139,  139,  139,  139,   25,  139,  117,
      139,  139,  139,  139,  139,    4,  139,  139,  139,  139,
      139,  139,    8,  139,  139,  139,  139,  139,  139,   22,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,   38,
      139,   97,  139,  139,  139,   60,  139,  139,  139,  139,
      139,  139,  139,  139,  139,   99,  139,  139,   48,  139,
       47,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  109,  139,
      139,  139,   42,  139,   12,  139,  139,  139,  139,  139,

      139,  139,  139,  139,  139,  139,  139,  139,  139,   57,
      139,   58,  139,  139,  139,  139,  139,   13,  139,  139,
      139,   15,  139,  139,  139,  139,  139,   21,  139,  139,
       84,  139,  139,  139,  139,  139,  139,  139,  139,  139,
       28,  139,  139,  139,  139,  139,  139,   73,  139,   75,
      139,  139,  139,  139,  139,  139,  139,  139,  139,   65,
      139,  139,   39,  139,    2,  139,    7,  139,   89,  139,
      139,  139,  139,  139,  139,   61,  139,  139,  139,  139,
      137,  139,  139,  139,   90,  139,  139,  139,  139,  139,
      139,  139,   10,  139,  139,  139,  139,  139,  139,  139,

      139,   69,  139,  139,   66,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,   72,  139,  139,  139,  139,
      139,   87,  139,   88,  139,  139,  139,  139,  139,  139,
      139,   96,  139,  139,  139,  139,  139,   59,  139,    3,
      139,  139,  139,  139,   80,  139,  139,  139,   54,  139,
      139,  139,  139,   30,  139,   68,  139,  139,  139,  139,
      139,  139,  139,  139,   17,  139,   26,  139,   23,  139,
      139,  111,  139,  101,  103,  139,  139,   63,  139,   62,
      139,   64,  139,  139,  139,  139,   92,  139,  139,  139,
      139,   20,   35,  139,  139,  139,   55,  139,   74,  139,

      139,   71,  139,  139,  139,   79,  139,  139,  139,  139,
      100,  102,  139,  107,  139,   93,  139,  139,  139,  139,
      139,   53,  139,   56,  139,   67,  139,   76,  139,  139,
       78,  139,  139,  139,  139,  139,    1,  139,  139,   70,
      139,  139,  139,   85,  139,  139,   91,  139,   77,  139,
       40,  139,  139,  139,  139,  136,   43,  139
    } ;

static yyconst short int yy_accept[832] =
    {   0,
        1,    1,    1,    2,    3,    4,    5,    7,    9,   10,
       12,   14,   16,   18,   21,   23,   25,   27,   29,   31,
       33,   35,   37,   39,   41,   43,   45,   47,   49,   51,
       53,   55,   57,   59,   61,   63,   65,   67,   69,   71,
       73,   75,   77,   79,   81,   83,   85,   87,   89,   91,
       93,   96,   99,  101,  102,  102,  103,  104,  105,  106,
      107,  108,  109,  110,  111,  112,  113,  114,  115,  115,
      115,  116,  118,  119,  120,  121,  121,  122,  124,  125,
      126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
      136,  137,  138,  139,  140,  141,  143,  144,  145,  146,

      147,  148,  149,  150,  151,  152,  153,  154,  155,  156,
      157,  158,  159,  160,  161,  162,  163,  164,  165,  166,
      167,  168,  169,  170,  171,  173,  174,  175,  176,  177,
      178,  179,  180,  181,  182,  183,  184,  185,  186,  187,
      188,  189,  190,  190,  190,  191,  192,  193,  194,  195,
      196,  197,  198,  199,  200,  201,  202,  203,  204,  205,
      206,  207,  208,  209,  209,  210,  211,  212,  212,  214,
      215,  216,  217,  218,  219,  220,  221,  222,  223,  224,
      225,  226,  227,  228,  229,  230,  231,  232,  233,  234,
      235,  236,  237,  238,  239,  240,  241,  243,  244,  245,

      247,  248,  249,  250,  251,  252,  253,  254,  255,  256,
      257,  258,  259,  260,  261,  262,  263,  264,  265,  266,
      267,  268,  269,  270,  271,  272,  273,  274,  275,  276,
      277,  278,  279,  280,  281,  282,  282,  282,  283,  284,
      285,  286,  287,  288,  290,  291,  292,  293,  294,  295,
      296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
      307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
      317,  318,  320,  321,  322,  323,  324,  325,  326,  327,
      328,  329,  330,  331,  333,  335,  336,  337,  338,  339,
      340,  341,  342,  343,  344,  345,  346,  347,  349,  350,

      351,  352,  353,  355,  357,  358,  359,  360,  361,  362,
      364,  366,  368,  369,  370,  372,  373,  374,  375,  377,
      378,  379,  380,  381,  382,  383,  384,  384,  385,  386,
      387,  389,  390,  391,  392,  393,  394,  395,  396,  397,
      398,  399,  400,  401,  402,  403,  404,  405,  407,  409,
      410,  411,  412,  413,  414,  415,  416,  417,  418,  420,
      422,  423,  424,  425,  426,  427,  428,  429,  430,  431,
      432,  433,  434,  435,  436,  437,  439,  440,  441,  442,
      443,  444,  445,  446,  447,  448,  449,  450,  452,  453,
      454,  455,  456,  457,  458,  459,  460,  461,  462,  464,

      465,  466,  468,  469,  471,  472,  473,  474,  475,  476,
      477,  477,  478,  479,  480,  481,  482,  483,  484,  486,
      487,  488,  489,  490,  491,  492,  493,  494,  495,  496,
      496,  496,  497,  498,  499,  501,  502,  504,  505,  506,
      507,  508,  509,  510,  511,  513,  514,  515,  516,  517,
      518,  519,  520,  521,  522,  523,  524,  525,  526,  528,
      529,  531,  532,  533,  534,  535,  536,  537,  538,  539,
      540,  541,  543,  544,  545,  547,  549,  550,  551,  552,
      553,  555,  556,  556,  557,  558,  559,  559,  560,  561,
      562,  563,  564,  565,  566,  567,  568,  569,  570,  571,

      572,  573,  574,  575,  576,  577,  578,  579,  580,  582,
      583,  584,  585,  586,  588,  589,  591,  592,  593,  594,
      595,  596,  597,  598,  600,  601,  602,  603,  604,  605,
      606,  607,  608,  610,  612,  613,  614,  615,  616,  618,
      619,  620,  621,  622,  623,  625,  626,  627,  628,  629,
      630,  632,  632,  632,  633,  634,  635,  636,  637,  638,
      639,  640,  640,  641,  642,  643,  644,  645,  646,  647,
      648,  649,  650,  652,  654,  655,  656,  658,  659,  660,
      661,  662,  663,  664,  665,  666,  668,  669,  671,  673,
      674,  675,  676,  677,  678,  679,  680,  681,  682,  683,

      684,  685,  686,  687,  688,  689,  691,  692,  693,  695,
      697,  698,  699,  700,  701,  702,  703,  704,  704,  704,
      705,  706,  707,  708,  709,  710,  712,  714,  714,  715,
      716,  717,  718,  720,  721,  722,  724,  725,  726,  727,
      728,  730,  731,  733,  734,  735,  736,  737,  738,  739,
      740,  741,  743,  744,  745,  746,  747,  748,  750,  752,
      753,  754,  755,  756,  757,  758,  759,  760,  762,  763,
      765,  767,  769,  771,  772,  773,  774,  774,  774,  775,
      776,  778,  779,  780,  781,  782,  783,  784,  785,  787,
      788,  789,  790,  791,  792,  793,  795,  796,  797,  798,

      799,  800,  801,  802,  804,  805,  807,  808,  809,  810,
      811,  812,  813,  814,  815,  816,  818,  819,  820,  821,
      822,  824,  826,  827,  827,  827,  828,  829,  830,  831,
      832,  832,  834,  835,  836,  837,  838,  840,  842,  843,
      844,  845,  847,  848,  849,  851,  852,  853,  854,  856,
      858,  859,  860,  861,  862,  863,  864,  865,  867,  869,
      871,  872,  874,  875,  875,  877,  878,  880,  882,  884,
      884,  885,  886,  887,  889,  890,  891,  892,  895,  896,
      897,  899,  901,  902,  904,  905,  906,  908,  909,  910,
      911,  912,  914,  914,  916,  918,  919,  920,  921,  922,

      924,  926,  928,  930,  931,  933,  934,  935,  935,  936,
      937,  939,  940,  942,  943,  944,  944,  946,  947,  949,
      951,  953,  953,  954,  954,  955,  955,  956,  957,  959,
      959
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    5,    1,    1,    6,    7,
        7,    7,    8,    7,    8,    9,   10,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   12,    1,   13,
       14,   15,    1,    1,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   23,   25,   23,   26,   27,   28,   29,
       23,   30,   31,   32,   23,   23,   23,   23,   33,   34,
        7,    1,    7,    1,   35,    1,   36,   37,   38,   39,

       40,   41,   42,   43,   44,   23,   45,   46,   47,   48,
       49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
       59,   23,   60,    1,   61,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   23,    1,    1,    1,    1,    1,    1,
        1,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23
    } ;

static yyconst int yy_meta[62] =
    {   0,
        1,    2,    3,    3,    4,    1,    1,    5,    6,    1,
        4,    2,    1,    1,    1,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    1,
        7
    } ;

static yyconst short int yy_base[838] =
    {   0,
        0,    0,   59,   61,  338, 5294,   64,  121,   66, 5294,
      326,  321,  317,   62,   60,  312,   81,   74,  132,   77,
       96,  107,   92,  103,  143,  158,  161,  175,  186,  191,
      197,  210,  216,  221,  232,  243,  247,  250,  261,  268,
      284,  289,  300,  304,  311,  316,  329,  346, 5294,    0,
       84,   87, 5294,  114,  358,  364, 5294,  369,  376,  389,
      392,  396,  411,  414,  417,  431,  437,  443,  124,  163,
     5294,  334, 5294, 5294,    0,  163,  448,  464,  120, 5294,
     5294, 5294,  477,  458,  488,  491,  503,  506,  520,  523,
      526,  540,  545,  551,  556,  562,  567,  578,  584,  590,

      604,  607,  610,  621,  632,  637,  648,  651,  662,  668,
      665,  679,  683,  686,  690,  697,  708,  713,  719,  724,
      730,  735,  742,  756,  749,  760,  767,  778,  783,  789,
      795,  801,  806,  818,  821,  833,  837,  848,  854,  859,
        0,  110,  276,  254,  870,  881,  884,  887,  898,  902,
      913,  918,  925,  936,  940,  953,  957,  960,  975,  978,
      981,  177,    0,  230, 5294,  980,    0,  289,  174,  993,
     1005, 1010, 1026, 1030, 1033, 1047, 1050, 1053, 1064, 1069,
     1075, 1080, 1092, 1095, 1106, 1110, 1125, 1129, 1140, 1143,
     1154, 1159, 1165, 1170, 1181, 1188, 1199, 1202, 1205, 1217,

     1228, 1231, 1235, 1246, 1249, 1253, 1260, 1264, 1278, 1282,
     1285, 1297, 1300, 1312, 1315, 1326, 1329, 1333, 1344, 1340,
     1347, 1351, 1358, 1373, 1386, 1390, 1404, 1407, 1410, 1425,
     1432, 1428, 1439, 1443, 1450,  271,  231, 1463, 1468, 1474,
     1480, 1485, 1496, 1499, 1502, 1513, 1516, 1519, 1532, 1539,
     1543, 1554, 1560, 1571, 1574, 1585, 1588, 1363,  313,  271,
     1599, 1602, 1615, 1620, 1627, 1634, 1638, 1641, 1652, 1657,
     1669, 1672, 1688, 1699, 1702, 1705, 1716, 1719, 1723, 1743,
     1746, 1757, 1763, 1768, 1774, 1787, 1791, 1798, 1802, 1809,
     1813, 1816, 1820, 1838, 1841, 1844, 1861, 1864, 1878, 1881,

     1884, 1898, 1901, 1904, 1915, 1918, 1929, 1933, 1936, 1940,
     1947, 1954, 1958, 1969, 1973, 1976, 1980, 1987, 1991, 1994,
     1998, 2010, 2013, 2025, 2028, 2040,  238, 5294, 2043, 2057,
     2064, 2070, 2075, 2081, 2086, 2092, 2098, 2105, 2109, 2120,
     2124, 2138, 2149, 2153, 2167, 2170, 2181, 2184, 2187,   81,
      194,  267, 2199, 2215, 2218, 2221, 2232, 2235, 2239, 2253,
     2256, 2268, 2274, 2279, 2285, 2292, 2297, 2303, 2308, 2314,
     2319, 2325, 2339, 2342, 2345, 2359, 2362, 2373, 2376, 2380,
     2391, 2398, 2409, 2415, 2426, 2431, 2437, 2442, 2448, 2453,
     2459, 2470, 2482, 2488, 2493, 2499, 2504, 2510, 2517, 2524,

     2529, 2542, 2545, 2556, 2559, 2570, 2573, 2576, 2591, 2596,
      232, 2602, 2615, 2618, 2629, 2632, 2635, 2646, 2649, 2652,
     2669, 2672, 2683, 2686, 2689, 2701, 2704, 2707, 2718,  266,
      255, 2724, 2729, 2740, 2745, 2757, 2760, 2763, 2778, 2781,
     2784, 2795, 2798, 2812, 2818, 2825, 2831, 2842, 2846, 2849,
     2860, 2864, 2867, 2880, 2886, 2893, 2899, 2912, 2915, 2934,
     2937, 2948, 2952, 2955, 2959, 2966, 2970, 2973, 2977, 2991,
     2994, 2997, 3015, 3018, 3032, 3035, 3038, 3049, 3052, 3063,
     3066, 3069, 3090, 3108, 3111, 3127,  213, 3130, 3134, 3145,
     3148, 3170, 3177, 3184, 3191, 3195, 3198, 3202, 3209, 3213,

     3220, 3225, 3231, 3242, 3245, 3261, 3264, 3268, 3280, 3283,
     3286, 3297, 3302, 3309, 3320, 3327, 3331, 3342, 3345, 3349,
     3360, 3363, 3366, 3379, 3384, 3390, 3401, 3404, 3407, 3418,
     3422, 3425, 3429, 3436, 3447, 3450, 3461, 3467, 3472, 3478,
     3484, 3490, 3496, 3507, 3513, 3524, 3529, 3535, 3546, 3540,
     3557,  216,  202, 3560, 3575, 3578, 3581, 3594, 3601, 3605,
     3608,  195, 3620, 3623, 3627, 3638, 3641, 3655, 3666, 3669,
     3672, 3686, 3689, 3706, 3710, 3721, 3725, 3728, 3732, 3739,
     3744, 3750, 3755, 3767, 3770, 3773, 3794, 3797, 3800, 3812,
     3816, 3819, 3823, 3834, 3840, 3845, 3852, 3857, 3868, 3874,

     3879, 3885, 3897, 3902, 3908, 3914, 3920, 3925, 3931, 3936,
     3947, 3951, 3954, 3966, 3970, 3977, 3981,  178,  186, 3984,
     3988, 3995, 3999, 4006, 4012, 4028, 4041,  181, 4047, 4052,
     4058, 4063, 4069, 4074, 4080, 4086, 4091, 4098, 4114, 4117,
     4120, 4132, 4139, 4143, 4154, 4157, 4160, 4171, 4174, 4178,
     4190, 4197, 4201, 4208, 4215, 4219, 4230, 4233, 4236, 4247,
     4262, 4266, 4269, 4273, 4284, 4287, 4290, 4302, 4305, 4308,
     4320, 4327, 4332, 4343, 4346, 4350,  176,  161, 4361, 4357,
     4364, 4368, 4375, 4379,  307, 4382, 4400, 4405, 4411, 4416,
     4428, 4434, 4439, 4445, 4456, 4459, 4470, 4473, 4476, 4487,

     4491, 4503, 4509, 4514, 4520, 4532, 4535, 4538, 4549, 4554,
     4560, 4565, 4571, 4582, 4585, 4599, 4605, 4610, 4616, 4621,
     4628, 4632, 4643,  156,  152, 4654, 4661, 4665, 4668, 4672,
      509, 4679, 4683, 4686, 4690, 4697, 4712, 4718, 4725, 4729,
     4740, 4743, 4746, 4757, 4760, 4764, 4771, 4777, 4788, 4793,
     4804, 4811, 4815, 4822, 4818, 4829, 4833, 4836, 4840, 4851,
     4865, 4868, 5294,  157, 4871, 4882, 4885, 4888, 4899,  147,
     4902, 4905, 4916, 4921, 4927, 4932, 4943, 4947, 4950, 4961,
     4964, 4967, 4981, 4987, 4992, 4998, 5004, 5010, 5015, 5021,
     5294, 5026,  173, 5033, 5037, 5044, 5050, 5061, 5064, 5067,

     5078, 5081, 5084, 5100, 5103, 5106, 5117,  133, 5120, 5123,
     5134, 5139, 5145, 5152, 5156,  122, 5159, 5173, 5177, 5191,
     5194,  109, 5197,   90, 5209,   63, 5212, 5294, 5215, 5294,
     5265, 5271, 5275, 5279, 5285,   93, 5288
    } ;

static yyconst short int yy_def[838] =
    {   0,
      830,    1,  831,  831,  830,  830,  830,  832,  833,  830,
      830,  830,  830,  834,  830,  830,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  830,  835,
      830,  830,  830,  830,  830,  832,  830,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  833,  833,
      830,  834,  830,  830,  836,  834,  834,  834,  837,  830,
      830,  830,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,

      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      835,  830,  830,  830,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  833,  836,  834,  830,  834,  836,  834,  837,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,

      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  830,  830,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  834,  834,  836,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,

      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  830,  830,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  830,
      836,  830,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,

      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      830,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  830,
      830,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  830,  832,  832,  832,  830,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,

      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  830,  830,  832,  832,  832,  832,  832,  832,  832,
      832,  830,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,

      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  830,  830,  832,
      832,  832,  832,  832,  832,  832,  832,  830,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  830,  830,  832,  832,
      832,  832,  832,  832,  830,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,

      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  830,  830,  832,  832,  832,  832,  832,
      830,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  830,  830,  832,  832,  832,  832,  832,  830,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      830,  832,  830,  832,  832,  832,  832,  832,  832,  832,

      832,  832,  832,  832,  832,  832,  832,  830,  832,  832,
      832,  832,  832,  832,  832,  830,  832,  832,  832,  832,
      832,  830,  832,  830,  832,  830,  832,  830,  832,    0,
      830,  830,  830,  830,  830,  830,  830
    } ;

static yyconst short int yy_nxt[5356] =
    {   0,
        6,    7,    7,    7,    8,    9,   10,   11,   12,   13,
       14,    6,   15,   10,   16,   17,   18,   19,   20,   21,
       22,   23,   20,   20,   24,   25,   26,   27,   20,   28,
       29,   30,   31,   20,   20,   32,   33,   20,   20,   34,
       35,   36,   20,   37,   38,   39,   20,   40,   41,   42,
       20,   43,   44,   45,   46,   47,   48,   20,   20,   49,
       10,   51,   52,   51,   52,   54,   54,   54,   70,   76,
       77,   71,   78,   80,   81,   55,   55,   55,   55,   55,
       55,   79,   55,   55,   55,   57,  142,  142,   57,  142,
      142,  350,   57,   55,   55,   55,  163,   55,   55,   55,

      430,   79,  828,   57,   55,   55,   55,   57,   55,   55,
       55,   93,  142,  142,   57,   54,   54,   54,   57,   53,
      430,   53,   55,   55,   55,   84,   70,  168,   83,   71,
      169,  826,   57,   55,   55,   55,   58,   59,   60,   61,
       62,   63,   94,   57,   55,   55,   55,   89,   64,   65,
       66,   67,   68,   90,   57,   91,  824,  822,   92,   55,
       55,   55,   55,   55,   55,   70,  162,   85,   71,   57,
      830,  830,   57,  164,   86,  816,   55,   55,   55,   70,
       87,  830,   71,   88,  260,   96,   57,   55,   55,   55,
      808,   95,   55,   55,   55,  793,  791,   57,   55,   55,

       55,  431,   57,  764,  260,  101,   97,  763,   57,  725,
       98,   55,   55,   55,   99,  724,  107,   55,   55,   55,
      685,   57,   55,   55,   55,  102,  678,   57,  103,  100,
      105,  677,   57,   55,   55,   55,  628,  830,  830,  104,
      830,  619,  106,   57,   55,   55,   55,  108,   55,   55,
       55,   55,   55,   55,   57,  109,  618,  110,   57,  111,
      562,   57,   55,   55,   55,  352,  113,  487,  114,   55,
       55,   55,   57,  431,  112,  116,  352,  352,  115,   57,
      411,  260,  118,  117,  328,   55,   55,   55,  327,  121,
       55,   55,   55,  237,  119,   57,  830,  830,  120,  259,

       57,   55,   55,   55,  122,   55,   55,   55,  731,  731,
      731,   57,   55,   55,   55,   57,  123,   55,   55,   55,
      830,  830,   57,  352,  236,   82,   74,   57,  126,   73,
       55,   55,   55,  124,  127,  125,   72,  830,  130,  128,
       57,   76,   77,  131,   78,  830,  134,   55,   55,   55,
      135,  830,  132,   79,  129,  830,  830,   57,  133,   55,
       55,   55,  136,  137,  138,   55,   55,   55,  830,   57,
       55,   55,   55,   79,  830,   57,  830,   55,   55,   55,
       57,  139,  830,  830,  143,  830,  830,   57,  830,  140,
       55,   55,   55,   55,   55,   55,  830,   55,   55,   55,

       57,  830,  830,   57,  830,  830,  145,   57,  830,  830,
      144,  146,   55,   55,   55,   55,   55,   55,   55,   55,
       55,  830,   57,  830,  147,   57,  830,  830,   57,  830,
      830,  149,   55,   55,   55,  830,  830,  148,   55,   55,
       55,  830,   57,  150,   55,   55,   55,  830,   57,  830,
      830,  151,  155,  830,   57,   76,  165,  830,  166,   55,
       55,   55,  152,  154,  830,  153,  830,   79,  156,   57,
      157,   76,   77,  830,   78,  830,  158,  830,   55,   55,
       55,  830,  159,   79,  830,  830,  160,   79,   57,   55,
       55,   55,   55,   55,   55,  830,  830,  171,  830,   57,

      830,  161,   57,   79,   55,   55,   55,   55,   55,   55,
      731,  731,  731,  830,   57,  830,  830,   57,  830,  830,
      170,   55,   55,   55,   55,   55,   55,   55,   55,   55,
      830,   57,  830,  172,   57,  770,  830,   57,  830,  173,
      830,   55,   55,   55,  830,  175,   55,   55,   55,  830,
      174,   57,   55,   55,   55,  176,   57,   55,   55,   55,
      830,  830,   57,   55,   55,   55,  177,   57,   55,   55,
       55,  180,  830,   57,  830,  179,  830,  178,   57,   55,
       55,   55,  830,  830,  184,   55,   55,   55,  830,   57,
      181,   55,   55,   55,  182,   57,  830,  185,  830,  830,

      830,   57,  830,  183,  830,   55,   55,   55,   55,   55,
       55,   55,   55,   55,  186,   57,  830,  830,   57,  830,
      187,   57,   55,   55,   55,  830,  830,  191,  830,  188,
      830,  830,   57,   55,   55,   55,  189,  190,   55,   55,
       55,  830,  830,   57,  830,  830,  192,  830,   57,   55,
       55,   55,   55,   55,   55,  830,  194,  830,  193,   57,
      830,  830,   57,   55,   55,   55,   55,   55,   55,   55,
       55,   55,  196,   57,  830,  830,   57,  830,  197,   57,
       55,   55,   55,  195,   55,   55,   55,   55,   55,   55,
       57,   55,   55,   55,   57,  830,  830,   57,   55,   55,

       55,   57,  830,  199,  198,  830,  200,  830,   57,   55,
       55,   55,  830,  202,   55,   55,   55,  830,  201,   57,
       55,   55,   55,  830,   57,   55,   55,   55,  203,  830,
       57,   55,   55,   55,  830,   57,   55,   55,   55,  205,
      204,   57,  830,   55,   55,   55,   57,  830,  206,  830,
       55,   55,   55,   57,  207,  830,  208,   55,   55,   55,
       57,   55,   55,   55,  830,  830,  209,   57,   55,   55,
       55,   57,  210,  830,  830,  211,  215,  830,   57,   55,
       55,   55,  213,  830,   55,   55,   55,  214,  212,   57,
       55,   55,   55,  216,   57,  217,   55,   55,   55,  830,

       57,  830,   55,   55,   55,  830,   57,   55,   55,   55,
      830,  218,   57,  220,  830,  221,  830,   57,  219,   55,
       55,   55,   55,   55,   55,  223,  830,  830,  222,   57,
      224,  830,   57,  830,   55,   55,   55,  830,   55,   55,
       55,  830,  830,  226,   57,  830,  830,  225,   57,   55,
       55,   55,  830,  830,  227,   55,   55,   55,  830,   57,
       55,   55,   55,  830,  830,   57,  830,  228,  230,  830,
       57,   55,   55,   55,  830,  830,  231,  830,  229,  830,
      232,   57,   55,   55,   55,   55,   55,   55,   55,   55,
       55,  830,   57,  233,  830,   57,  830,  830,   57,   55,

       55,   55,  830,   55,   55,   55,  830,  234,  830,   57,
      830,  830,  235,   57,   55,   55,   55,  830,  239,   55,
       55,   55,  240,  238,   57,  830,   55,   55,   55,   57,
      830,  830,  830,  241,  242,  243,   57,   55,   55,   55,
      244,   55,   55,   55,  830,  830,  830,   57,  245,  830,
      830,   57,  830,  246,   55,   55,   55,  830,   55,   55,
       55,   55,   55,   55,   57,  830,  830,  830,   57,  830,
      830,   57,  247,  830,  830,  248,   55,   55,   55,   55,
       55,   55,   55,   55,   55,  830,   57,   76,  830,   57,
      258,  249,   57,  250,   55,   55,   55,  830,  830,   79,

      830,  251,  252,  830,   57,  830,   55,   55,   55,  253,
      254,   55,   55,   55,  830,  830,   57,  830,  830,   79,
      830,   57,  830,  830,  256,  830,  255,   55,   55,   55,
      257,   55,   55,   55,   55,   55,   55,   57,  830,  261,
      262,   57,  830,  830,   57,  830,  830,  263,   55,   55,
       55,   55,   55,   55,   55,   55,   55,  830,   57,  830,
      830,   57,  830,  830,   57,   55,   55,   55,  266,  264,
       55,   55,   55,  830,  830,   57,   55,   55,   55,  830,
       57,   55,   55,   55,  830,  265,   57,  269,  271,  830,
      830,   57,  830,   55,   55,   55,   55,   55,   55,  267,

      830,  830,  268,   57,  830,  830,   57,   55,   55,   55,
      270,   55,   55,   55,  830,  830,  830,   57,  830,  273,
      830,   57,  830,  830,  272,  830,   55,   55,   55,  277,
       55,   55,   55,  830,  830,  274,   57,  275,  830,  830,
       57,   55,   55,   55,   55,   55,   55,  830,  276,  830,
      830,   57,  279,  830,   57,   55,   55,   55,  830,  278,
       55,   55,   55,  830,  830,   57,   55,   55,   55,  830,
       57,   55,   55,   55,  830,  830,   57,  282,  830,  830,
      830,   57,   55,   55,   55,  830,  830,  283,  280,   55,
       55,   55,   57,  830,  281,  830,  830,  284,  830,   57,

       55,   55,   55,   55,   55,   55,   55,   55,   55,  830,
       57,  830,  830,   57,  830,  830,   57,  830,   55,   55,
       55,  285,  830,  286,  830,  288,  830,  287,   57,   55,
       55,   55,   55,   55,   55,  830,   55,   55,   55,   57,
      830,  830,   57,  830,  830,  289,   57,   55,   55,   55,
       55,   55,   55,  290,   55,   55,   55,   57,  830,  830,
       57,   55,   55,   55,   57,   55,   55,   55,  830,  830,
      830,   57,  830,  292,  291,   57,  830,  830,  293,   55,
       55,   55,  830,   55,   55,   55,   55,   55,   55,   57,
      830,  830,  294,   57,  297,  830,   57,  295,   55,   55,

       55,   55,   55,   55,  830,  296,  830,  830,   57,  830,
      298,   57,  299,   55,   55,   55,   55,   55,   55,  830,
      830,  300,  830,   57,  301,  830,   57,   55,   55,   55,
       55,   55,   55,  302,   55,   55,   55,   57,  830,  303,
       57,   55,   55,   55,   57,   55,   55,   55,   55,   55,
       55,   57,   55,   55,   55,   57,  830,  830,   57,   55,
       55,   55,   57,  830,  830,  304,  830,  830,  305,   57,
      830,  830,  306,  350,   55,   55,   55,  830,  830,  308,
      307,  830,  351,  309,   57,  310,  830,   55,   55,   55,
      312,   55,   55,   55,  830,  830,  830,   57,  830,  830,

      311,   57,  351,  830,  313,   55,   55,   55,   55,   55,
       55,   55,   55,   55,  830,   57,  830,  830,   57,  830,
      830,   57,  830,  830,  314,  315,   55,   55,   55,   55,
       55,   55,  316,   55,   55,   55,   57,  830,  830,   57,
       55,   55,   55,   57,   55,   55,   55,  830,  830,  317,
       57,   55,   55,   55,   57,  830,  318,  830,  830,  830,
      830,   57,  320,  319,   55,   55,   55,  322,  323,   55,
       55,   55,  321,  830,   57,   55,   55,   55,  830,   57,
      325,   55,   55,   55,  830,   57,   55,   55,   55,  830,
      830,   57,  326,  324,  830,  830,   57,   55,   55,   55,

       55,   55,   55,   55,   55,   55,  329,   57,  830,  830,
       57,  830,  330,   57,   55,   55,   55,   55,   55,   55,
       55,   55,   55,  333,   57,  830,  830,   57,  830,  332,
       57,  830,  331,   55,   55,   55,  830,  334,  830,  335,
       55,   55,   55,   57,   55,   55,   55,  336,  830,  830,
       57,  830,  830,  338,   57,   55,   55,   55,  830,  337,
      830,   55,   55,   55,  830,   57,  830,  340,  830,  830,
      339,   57,   55,   55,   55,   55,   55,   55,  830,  830,
      342,  830,   57,  830,  830,   57,   55,   55,   55,   55,
       55,   55,  341,  343,  830,  830,   57,  830,  830,   57,

       55,   55,   55,   55,   55,   55,  830,  830,  344,  830,
       57,  830,  830,   57,  345,  830,   55,   55,   55,  830,
      347,   55,   55,   55,  348,  346,   57,  349,   55,   55,
       55,   57,  830,  830,  353,   55,   55,   55,   57,   55,
       55,   55,   55,   55,   55,   57,  354,  830,  830,   57,
      830,  830,   57,   55,   55,   55,  830,  356,   55,   55,
       55,  830,  830,   57,  830,  830,  357,  361,   57,  355,
       55,   55,   55,   55,   55,   55,  830,  359,  830,  830,
       57,  830,  830,   57,  830,  830,  830,  358,  830,   55,
       55,   55,  830,  830,  360,  830,  362,  830,  363,   57,

       55,   55,   55,   55,   55,   55,   55,   55,   55,  830,
       57,  830,  830,   57,  830,  830,   57,   55,   55,   55,
       55,   55,   55,  830,   55,   55,   55,   57,  830,  830,
       57,  830,  830,  364,   57,  830,  830,  366,  370,  371,
      830,  367,  830,  830,   55,   55,   55,   55,   55,   55,
      830,  830,  365,  368,   57,  830,  830,   57,   55,   55,
       55,  830,  372,  830,   55,   55,   55,  830,   57,   55,
       55,   55,  830,  369,   57,   55,   55,   55,  830,   57,
      830,  830,  376,  830,  830,   57,  830,  375,   55,   55,
       55,  374,   55,   55,   55,  830,  830,  373,   57,   55,

       55,   55,   57,   55,   55,   55,  830,  830,  377,   57,
       55,   55,   55,   57,   55,   55,   55,   55,   55,   55,
       57,   55,   55,   55,   57,  830,  830,   57,  830,  830,
      378,   57,  830,  830,  379,  830,  830,  380,  830,   55,
       55,   55,   55,   55,   55,   55,   55,   55,  383,   57,
      830,  830,   57,  830,  830,   57,  830,  381,  830,  384,
      382,  830,   55,   55,   55,   55,   55,   55,  830,  385,
      830,  830,   57,  830,  830,   57,  830,  386,  830,   55,
       55,   55,   55,   55,   55,   55,   55,   55,  387,   57,
      830,  830,   57,  830,  830,   57,  830,  388,  389,   55,

       55,   55,   55,   55,   55,   55,   55,   55,  830,   57,
      830,  830,   57,  830,  830,   57,   55,   55,   55,   55,
       55,   55,  391,  830,  830,  392,   57,  830,  830,   57,
       55,   55,   55,  390,   55,   55,   55,   55,   55,   55,
       57,   55,   55,   55,   57,  830,  393,   57,   55,   55,
       55,   57,  830,  395,  830,   55,   55,   55,   57,   55,
       55,   55,  830,  830,  396,   57,  394,  830,  397,   57,
       55,   55,   55,  398,   55,   55,   55,   55,   55,   55,
       57,   55,   55,   55,   57,  830,  830,   57,   55,   55,
       55,   57,   55,   55,   55,   55,   55,   55,   57,   55,

       55,   55,   57,  830,  830,   57,  400,  399,  830,   57,
      401,   55,   55,   55,   55,   55,   55,  830,  830,  402,
      830,   57,  830,  830,   57,  830,   55,   55,   55,   55,
       55,   55,  830,  404,  830,  403,   57,  830,  830,   57,
      830,   55,   55,   55,   55,   55,   55,  830,  830,  830,
      405,   57,  830,  830,   57,  830,  830,  406,   55,   55,
       55,  407,  830,  830,  408,   55,   55,   55,   57,  830,
      409,   55,   55,   55,  410,   57,   55,   55,   55,  830,
      830,   57,   55,   55,   55,  830,   57,   55,   55,   55,
      830,  413,   57,   55,   55,   55,  830,   57,  412,   55,

       55,   55,  830,   57,  830,  414,   55,   55,   55,   57,
       55,   55,   55,  830,  830,  830,   57,  830,  415,  830,
       57,   55,   55,   55,  830,   55,   55,   55,  830,  830,
      830,   57,  830,  830,  416,   57,  830,  419,  417,   55,
       55,   55,  830,  830,  421,  830,  418,  830,  830,   57,
       55,   55,   55,  830,   55,   55,   55,  830,  420,  830,
       57,  830,  830,  423,   57,  830,  422,  830,   55,   55,
       55,   55,   55,   55,  830,  830,  830,  424,   57,  830,
      830,   57,   55,   55,   55,   55,   55,   55,   55,   55,
       55,  830,   57,  830,  830,   57,  830,  830,   57,  830,

       55,   55,   55,  830,  425,  830,  830,  426,  830,  428,
       57,  830,  427,  830,  830,  429,   55,   55,   55,   55,
       55,   55,   55,   55,   55,  830,   57,  830,  830,   57,
      830,  830,   57,   55,   55,   55,   55,   55,   55,  830,
       55,   55,   55,   57,  830,  830,   57,  830,  830,  433,
       57,  830,  432,  830,   55,   55,   55,   55,   55,   55,
      435,  830,  830,  434,   57,  830,  830,   57,  830,   55,
       55,   55,  830,  830,  437,   55,   55,   55,  830,   57,
       55,   55,   55,  436,  830,   57,   55,   55,   55,  440,
       57,  830,  830,   55,   55,   55,   57,  830,   55,   55,

       55,  438,  439,   57,   55,   55,   55,  830,   57,   55,
       55,   55,  830,  441,   57,   55,   55,   55,  830,   57,
       55,   55,   55,  830,  830,   57,   55,   55,   55,  830,
       57,  830,  830,  442,  444,  830,   57,  830,  830,  443,
       55,   55,   55,   55,   55,   55,   55,   55,   55,  830,
       57,  446,  830,   57,  830,  830,   57,  830,  830,  445,
       55,   55,   55,   55,   55,   55,  830,  448,  830,  830,
       57,  447,  830,   57,   55,   55,   55,   55,   55,   55,
      449,   55,   55,   55,   57,  830,  830,   57,  830,  830,
      450,   57,   55,   55,   55,  451,  830,  830,  452,   55,

       55,   55,   57,  830,  830,  453,  830,  830,  454,   57,
       55,   55,   55,  455,  458,  830,   55,   55,   55,  830,
       57,  830,  830,  457,  830,  456,   57,   55,   55,   55,
      459,  830,   55,   55,   55,  830,  830,   57,   55,   55,
       55,  460,   57,   55,   55,   55,  830,  830,   57,   55,
       55,   55,  830,   57,   55,   55,   55,  830,  461,   57,
       55,   55,   55,  830,   57,  830,  830,  462,  830,  830,
       57,   55,   55,   55,  830,  830,  465,  830,  463,  830,
      830,   57,  464,   55,   55,   55,  830,  466,  467,   55,
       55,   55,  830,   57,   55,   55,   55,  830,  468,   57,

       55,   55,   55,  830,   57,   55,   55,   55,  830,  830,
       57,   55,   55,   55,  830,   57,  830,  470,   55,   55,
       55,   57,  830,  471,  469,   55,   55,   55,   57,  830,
       55,   55,   55,  830,  830,   57,  830,  830,  472,  830,
       57,  830,  830,   55,   55,   55,   55,   55,   55,  830,
      830,  474,  473,   57,  830,  830,   57,   55,   55,   55,
       55,   55,   55,  475,  477,  830,  476,   57,  830,  830,
       57,   55,   55,   55,   55,   55,   55,  483,  483,  483,
      830,   57,  830,  830,   57,  830,  830,   57,  830,  830,
      479,  830,   55,   55,   55,  830,  478,   55,   55,   55,

      830,  830,   57,   55,   55,   55,  830,   57,  480,  830,
      484,  481,  830,   57,  830,  830,   55,   55,   55,   55,
       55,   55,  830,  830,  482,  485,   57,  830,  830,   57,
       55,   55,   55,   55,   55,   55,   55,   55,   55,  830,
       57,  830,  486,   57,  830,  488,   57,   55,   55,   55,
       55,   55,   55,   55,   55,   55,  830,   57,  830,  830,
       57,  830,  830,   57,  489,  830,  830,  492,  830,  490,
       55,   55,   55,   55,   55,   55,  830,  830,  493,  830,
       57,  494,  491,   57,   55,   55,   55,   55,   55,   55,
       55,   55,   55,  830,   57,  495,  830,   57,  830,  830,

       57,  830,   55,   55,   55,   55,   55,   55,   55,   55,
       55,  497,   57,  830,  830,   57,  830,  830,   57,   55,
       55,   55,  496,  830,  500,   55,   55,   55,  830,   57,
       55,   55,   55,  830,  498,   57,  830,  830,  499,  830,
       57,   55,   55,   55,  830,  830,   55,   55,   55,  830,
      830,   57,  501,  830,  503,  504,   57,  502,   55,   55,
       55,   55,   55,   55,   55,   55,   55,  505,   57,  830,
      830,   57,  830,  830,   57,  507,  830,  830,  506,   55,
       55,   55,   55,   55,   55,   55,   55,   55,  830,   57,
      830,  830,   57,  830,  830,   57,   55,   55,   55,   55,

       55,   55,  830,  830,  830,  830,   57,  830,  509,   57,
      508,  830,  512,   55,   55,   55,  830,  830,  510,   55,
       55,   55,  830,   57,  830,  511,   55,   55,   55,   57,
      830,  513,   55,   55,   55,  830,   57,  830,  830,  515,
      830,  830,   57,   55,   55,   55,  514,   55,   55,   55,
       55,   55,   55,   57,  830,  830,  516,   57,  830,  830,
       57,   55,   55,   55,  830,   55,   55,   55,   55,   55,
       55,   57,  830,  830,  518,   57,  830,  517,   57,  830,
      520,   55,   55,   55,  830,  830,  521,   55,   55,   55,
      830,   57,  830,  519,   55,   55,   55,   57,  830,  523,

       55,   55,   55,  830,   57,  830,  830,  524,  830,  830,
       57,  830,  522,   55,   55,   55,   55,   55,   55,  830,
      830,  526,  830,   57,  830,  830,   57,  830,  525,  830,
      830,  529,  830,  830,  528,   55,   55,   55,   55,   55,
       55,  830,  530,  830,  830,   57,  527,  830,   57,   55,
       55,   55,  531,   55,   55,   55,   55,   55,   55,   57,
       55,   55,   55,   57,  830,  830,   57,   55,   55,   55,
       57,   55,   55,   55,   55,   55,   55,   57,   55,   55,
       55,   57,  830,  830,   57,  830,  830,  532,   57,  830,
      535,  534,   55,   55,   55,   55,   55,   55,   55,   55,

       55,  533,   57,  830,  830,   57,  536,  830,   57,  830,
      830,  537,  830,  830,  830,  538,   55,   55,   55,   55,
       55,   55,  540,  830,  539,  830,   57,  830,  830,   57,
      830,  542,  830,   55,   55,   55,   55,   55,   55,   55,
       55,   55,  541,   57,  830,  830,   57,  830,  830,   57,
       55,   55,   55,   55,   55,   55,  830,  544,  543,  830,
       57,  830,  830,   57,   55,   55,   55,   55,   55,   55,
       55,   55,   55,  830,   57,  830,  830,   57,  830,  830,
       57,  830,  830,  830,  546,  830,  830,  547,  830,  830,
      545,  483,  483,  483,  830,  830,  830,  830,  550,  830,

      830,   57,  830,  830,  548,  549,  830,  830,  830,   55,
       55,   55,   55,   55,   55,  551,  143,  830,  830,   57,
      830,  830,   57,  830,  830,  552,  553,  830,   55,   55,
       55,   55,   55,   55,  830,   55,   55,   55,   57,  830,
      830,   57,  144,  554,  555,   57,   55,   55,   55,   55,
       55,   55,  830,  830,  830,  830,   57,  830,  830,   57,
      556,  557,  560,  558,  830,  830,  559,  830,  830,  830,
      561,   55,   55,   55,  830,  830,  830,  564,   55,   55,
       55,   57,  830,  563,  565,   55,   55,   55,   57,  830,
      830,  566,   55,   55,   55,   57,   55,   55,   55,   55,

       55,   55,   57,   55,   55,   55,   57,  830,  830,   57,
       55,   55,   55,   57,   55,   55,   55,  567,  830,  830,
       57,   55,   55,   55,   57,  568,   55,   55,   55,  830,
      830,   57,   55,   55,   55,  830,   57,  569,  571,  570,
      830,  830,   57,   55,   55,   55,   55,   55,   55,  573,
      830,  572,  830,   57,  830,  830,   57,  576,  830,  830,
      575,  574,   55,   55,   55,   55,   55,   55,  578,   55,
       55,   55,   57,  830,  830,   57,  830,  577,  830,   57,
      830,   55,   55,   55,   55,   55,   55,   55,   55,   55,
      579,   57,  830,  580,   57,  830,  830,   57,   55,   55,

       55,  830,  583,   55,   55,   55,  830,  830,   57,  581,
       55,   55,   55,   57,  830,  830,  586,  582,  830,  830,
       57,   55,   55,   55,  830,  830,  584,  830,   55,   55,
       55,   57,   55,   55,   55,  830,  830,  587,   57,  830,
      585,  830,   57,   55,   55,   55,   55,   55,   55,  830,
       55,   55,   55,   57,  830,  830,   57,  830,  830,  588,
       57,   55,   55,   55,   55,   55,   55,   55,   55,   55,
      830,   57,  830,  830,   57,  830,  830,   57,  830,  591,
       55,   55,   55,  830,  589,   55,   55,   55,  830,  592,
       57,   55,   55,   55,  590,   57,  830,  594,  830,  593,

      830,   57,   55,   55,   55,   55,   55,   55,   55,   55,
       55,  830,   57,  830,  830,   57,  830,  595,   57,   55,
       55,   55,  596,   55,   55,   55,   55,   55,   55,   57,
       55,   55,   55,   57,  830,  830,   57,   55,   55,   55,
       57,  830,  830,  597,  598,  830,  830,   57,   55,   55,
       55,   55,   55,   55,  600,  830,  830,  599,   57,  830,
      830,   57,   55,   55,   55,  602,  830,  603,   55,   55,
       55,  601,   57,   55,   55,   55,  830,  830,   57,   55,
       55,   55,  830,   57,  830,   55,   55,   55,  830,   57,
      830,   55,   55,   55,  830,   57,  830,   55,   55,   55,

      604,   57,  830,  605,  830,  830,  606,   57,   55,   55,
       55,  830,  830,  608,   55,   55,   55,  830,   57,  830,
      830,  607,  609,  830,   57,   55,   55,   55,  830,  610,
       55,   55,   55,  830,  830,   57,   55,   55,   55,  830,
       57,   55,   55,   55,  611,  830,   57,   55,   55,   55,
      830,   57,  830,  830,  612,  830,  830,   57,   55,   55,
       55,   55,   55,   55,  830,  830,  830,  830,   57,  830,
      830,   57,  830,  830,  614,  613,   55,   55,   55,   55,
       55,   55,   55,   55,   55,  830,   57,  830,  615,   57,
      830,  617,   57,  830,  616,   55,   55,   55,  830,  830,

      620,  830,   55,   55,   55,   57,   55,   55,   55,   55,
       55,   55,   57,  622,  621,  830,   57,  830,  830,   57,
      830,   55,   55,   55,   55,   55,   55,  830,   55,   55,
       55,   57,  830,  830,   57,  623,  625,  830,   57,   55,
       55,   55,   55,   55,   55,  830,  830,  624,  830,   57,
      830,  830,   57,  830,  830,  627,   55,   55,   55,  830,
      630,  631,  626,  629,  830,  830,   57,   55,   55,   55,
       55,   55,   55,   55,   55,   55,  830,   57,  830,  830,
       57,  830,  830,   57,  830,  830,  632,   55,   55,   55,
       55,   55,   55,  830,  633,  830,  830,   57,  830,  830,

       57,  830,  634,  830,  830,  635,  830,   55,   55,   55,
      830,   55,   55,   55,  830,  830,  636,   57,  830,  830,
      637,   57,   55,   55,   55,  638,   55,   55,   55,   55,
       55,   55,   57,   55,   55,   55,   57,  830,  830,   57,
       55,   55,   55,   57,  830,   55,   55,   55,  830,  830,
       57,   55,   55,   55,  830,   57,   55,   55,   55,  830,
      640,   57,  830,  639,  830,  830,   57,  641,   55,   55,
       55,   55,   55,   55,   55,   55,   55,  830,   57,  642,
      830,   57,  830,  830,   57,  830,  643,  644,  830,  645,
      830,  646,  830,  830,  647,   55,   55,   55,   55,   55,

       55,   55,   55,   55,  830,   57,  648,  830,   57,  830,
      830,   57,  649,   55,   55,   55,  650,   55,   55,   55,
       55,   55,   55,   57,   55,   55,   55,   57,  830,  830,
       57,  653,  830,  830,   57,   55,   55,   55,  830,  830,
      651,   55,   55,   55,  830,   57,   55,   55,   55,  830,
      830,   57,  830,   55,   55,   55,   57,  655,   55,   55,
       55,  830,  654,   57,  830,  652,  830,  830,   57,   55,
       55,   55,  830,  830,  656,   55,   55,   55,  830,   57,
       55,   55,   55,  830,  658,   57,   55,   55,   55,  830,
       57,  659,  830,  657,  660,  830,   57,  830,   55,   55,

       55,  830,  830,   55,   55,   55,  830,  661,   57,   55,
       55,   55,  662,   57,  663,   55,   55,   55,  830,   57,
      830,   55,   55,   55,  830,   57,   55,   55,   55,  830,
      664,   57,   55,   55,   55,  830,   57,   55,   55,   55,
      830,  830,   57,  665,  830,  666,  830,   57,   55,   55,
       55,  667,   55,   55,   55,   55,   55,   55,   57,  668,
      830,  830,   57,  830,  830,   57,  830,   55,   55,   55,
      830,   55,   55,   55,  830,  830,  669,   57,   55,   55,
       55,   57,   55,   55,   55,   55,   55,   55,   57,   55,
       55,   55,   57,  830,  670,   57,   55,   55,   55,   57,

       55,   55,   55,  830,  671,  674,   57,   55,   55,   55,
       57,  673,  672,   55,   55,   55,  830,   57,  830,  830,
      676,  830,  830,   57,  830,  830,  675,  830,  680,   55,
       55,   55,  830,  830,  682,  830,  830,  679,  830,   57,
      830,  683,   55,   55,   55,  830,  681,  830,   55,   55,
       55,  830,   57,   55,   55,   55,  830,  684,   57,   55,
       55,   55,  830,   57,   55,   55,   55,  830,  830,   57,
       55,   55,   55,  830,   57,   55,   55,   55,  830,  830,
       57,   55,   55,   55,  830,   57,  686,   55,   55,   55,
      830,   57,   55,   55,   55,  830,  830,   57,  830,   55,

       55,   55,   57,  830,  830,  687,  830,  830,  690,   57,
      689,  688,  830,  830,  691,   55,   55,   55,   55,   55,
       55,   55,   55,   55,  830,   57,  830,  830,   57,  830,
      830,   57,  830,   55,   55,   55,  830,  830,  692,  830,
       55,   55,   55,   57,   55,   55,   55,  830,  694,  693,
       57,  695,  830,  830,   57,   55,   55,   55,   55,   55,
       55,   55,   55,   55,  830,   57,  830,  830,   57,  696,
      697,   57,   55,   55,   55,   55,   55,   55,  830,   55,
       55,   55,   57,  830,  830,   57,  830,  830,  699,   57,
      698,   55,   55,   55,  830,  830,  700,  830,   55,   55,

       55,   57,   55,   55,   55,  830,  830,  701,   57,   55,
       55,   55,   57,  704,  705,  702,   55,   55,   55,   57,
       55,   55,   55,  830,  830,  703,   57,  830,  830,  706,
       57,   55,   55,   55,   55,   55,   55,   55,   55,   55,
      830,   57,  830,  830,   57,  830,  707,   57,   55,   55,
       55,  830,  830,  708,  830,  709,  830,  830,   57,  830,
      830,  711,  710,   55,   55,   55,  830,   55,   55,   55,
       55,   55,   55,   57,   55,   55,   55,   57,  830,  830,
       57,  712,  830,  830,   57,   55,   55,   55,   55,   55,
       55,   55,   55,   55,  830,   57,  713,  714,   57,  830,

      830,   57,  830,   55,   55,   55,   55,   55,   55,   55,
       55,   55,  716,   57,  830,  830,   57,  830,  830,   57,
      715,   55,   55,   55,  830,  719,  830,  717,   55,   55,
       55,   57,  830,   55,   55,   55,  830,  830,   57,  720,
      830,  830,  718,   57,   55,   55,   55,   55,   55,   55,
      830,   55,   55,   55,   57,  830,  830,   57,   55,   55,
       55,   57,   55,   55,   55,   55,   55,   55,   57,   55,
       55,   55,   57,  830,  830,   57,   55,   55,   55,   57,
       55,   55,   55,   55,   55,   55,   57,  830,  830,  830,
       57,  830,  830,   57,  830,  830,  721,  723,  722,  830,

      726,   55,   55,   55,  830,  727,   55,   55,   55,  830,
      830,   57,   55,   55,   55,  728,   57,   55,   55,   55,
      830,  830,   57,  830,  830,  830,  830,   57,  729,   55,
       55,   55,  830,  730,  732,   55,   55,   55,  830,   57,
       55,   55,   55,  830,  830,   57,   55,   55,   55,  830,
       57,  830,  830,  734,  733,  830,   57,   55,   55,   55,
       55,   55,   55,  830,  736,  735,  830,   57,  830,  830,
       57,   55,   55,   55,   55,   55,   55,   55,   55,   55,
      830,   57,  830,  830,   57,  830,  737,   57,   55,   55,
       55,  738,   55,   55,   55,  830,  739,  830,   57,  830,

      830,  830,   57,  830,   55,   55,   55,  830,  830,  740,
       55,   55,   55,  741,   57,   55,   55,   55,  830,  743,
       57,   55,   55,   55,  830,   57,  742,  830,  744,  745,
      830,   57,  830,   55,   55,   55,   55,   55,   55,   55,
       55,   55,  746,   57,  830,  830,   57,  830,  830,   57,
       55,   55,   55,  830,  747,   55,   55,   55,  830,  748,
       57,   55,   55,   55,  830,   57,   55,   55,   55,  830,
      830,   57,   55,   55,   55,  830,   57,  750,  830,  830,
      749,  830,   57,   55,   55,   55,   55,   55,   55,  830,
      830,  830,  751,   57,  830,  830,   57,  830,  830,  752,

       55,   55,   55,  753,  830,  754,   55,   55,   55,  830,
       57,   55,   55,   55,  755,  830,   57,   55,   55,   55,
      830,   57,   55,   55,   55,  756,  830,   57,  830,   55,
       55,   55,   57,   55,   55,   55,  830,  830,  757,   57,
      830,  830,  758,   57,   55,   55,   55,  830,  830,  759,
      830,  830,  830,  830,   57,   55,   55,   55,  830,  830,
      761,  760,   55,   55,   55,   57,   55,   55,   55,   55,
       55,   55,   57,   55,   55,   55,   57,  830,  830,   57,
       55,   55,   55,   57,   55,   55,   55,   55,   55,   55,
       57,   55,   55,   55,   57,  830,  762,   57,   55,   55,

       55,   57,  830,  830,  830,  765,  830,  768,   57,  830,
      830,  769,  766,   55,   55,   55,  830,  830,  767,   55,
       55,   55,  830,   57,  830,  830,   55,   55,   55,   57,
       55,   55,   55,  830,  771,  772,   57,  830,  773,  830,
       57,   55,   55,   55,   55,   55,   55,   55,   55,   55,
      830,   57,  830,  830,   57,  774,  830,   57,   55,   55,
       55,   55,   55,   55,  775,   55,   55,   55,   57,  830,
      830,   57,   55,   55,   55,   57,  830,  830,   55,   55,
       55,  830,   57,  830,  830,  830,  778,  776,   57,   55,
       55,   55,  830,  777,   55,   55,   55,  830,  830,   57,

      779,  830,  830,  830,   57,   55,   55,   55,  830,  830,
      781,  780,   55,   55,   55,   57,   55,   55,   55,   55,
       55,   55,   57,   55,   55,   55,   57,  830,  782,   57,
       55,   55,   55,   57,   55,   55,   55,   55,   55,   55,
       57,   55,   55,   55,   57,  830,  830,   57,  830,  783,
      784,   57,   55,   55,   55,  830,  830,  830,  787,  830,
      830,  785,   57,  830,  789,  786,   55,   55,   55,   55,
       55,   55,   55,   55,   55,  788,   57,  830,  830,   57,
      830,  830,   57,   55,   55,   55,   55,   55,   55,   55,
       55,   55,  830,   57,  830,  830,   57,  830,  830,   57,

       55,   55,   55,   55,   55,   55,   55,   55,   55,  830,
       57,  830,  830,   57,  830,  830,   57,   55,   55,   55,
      790,  792,   55,   55,   55,  830,  830,   57,   55,   55,
       55,  830,   57,   55,   55,   55,  830,  830,   57,  830,
      830,  794,  830,   57,   55,   55,   55,  830,   55,   55,
       55,   55,   55,   55,   57,  830,  830,  795,   57,  796,
      830,   57,   55,   55,   55,   55,   55,   55,   55,   55,
       55,  830,   57,  830,  830,   57,  830,  830,   57,  797,
      830,  798,   55,   55,   55,  830,  799,  830,   55,   55,
       55,  830,   57,   55,   55,   55,  830,  800,   57,   55,

       55,   55,  830,   57,  830,   55,   55,   55,  830,   57,
      830,   55,   55,   55,  801,   57,   55,   55,   55,  830,
      802,   57,   55,   55,   55,  830,   57,   55,   55,   55,
      830,  803,   57,  830,   55,   55,   55,   57,   55,   55,
       55,  830,  830,  804,   57,   55,   55,   55,   57,  805,
      830,   55,   55,   55,  830,   57,  830,  830,  806,  830,
      807,   57,   55,   55,   55,   55,   55,   55,   55,   55,
       55,  830,   57,  830,  830,   57,  830,  830,   57,   55,
       55,   55,   55,   55,   55,   55,   55,   55,  830,   57,
      830,  809,   57,  830,  830,   57,  830,  830,  810,  830,

      811,   55,   55,   55,   55,   55,   55,   55,   55,   55,
      830,   57,  812,  830,   57,  830,  830,   57,   55,   55,
       55,   55,   55,   55,   55,   55,   55,  830,   57,  830,
      830,   57,  830,  830,   57,   55,   55,   55,  830,  813,
       55,   55,   55,  830,  830,   57,   55,   55,   55,  830,
       57,  830,  814,   55,   55,   55,   57,   55,   55,   55,
       55,   55,   55,   57,  815,  830,  830,   57,  830,  830,
       57,  830,  830,  817,   55,   55,   55,  818,   55,   55,
       55,  830,  830,  830,   57,  830,  819,  830,   57,  830,
      830,  820,   55,   55,   55,   55,   55,   55,   55,   55,

       55,  830,   57,  830,  830,   57,  830,  830,   57,  821,
       55,   55,   55,   55,   55,   55,   55,   55,   55,  830,
       57,  830,  830,   57,  823,  830,   57,  830,  830,  830,
      830,  830,  830,  830,  825,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  827,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  829,   50,   50,   50,   50,   50,
       50,   50,   56,   56,   56,   69,   69,   69,   69,   69,
       69,   69,   75,   75,   75,  141,  141,  830,  141,  141,
      141,  167,  167,    5,  830,  830,  830,  830,  830,  830,

      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830
    } ;

static yyconst short int yy_chk[5356] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    3,    4,    4,    7,    7,    7,    9,   14,
       14,    9,   14,   15,   15,   18,   18,   18,   20,   20,
       20,   14,   17,   17,   17,   18,   51,   51,   20,   52,
       52,  350,   17,   23,   23,   23,  836,   21,   21,   21,

      350,   14,  826,   23,   24,   24,   24,   21,   22,   22,
       22,   23,  142,  142,   24,   54,   54,   54,   22,    3,
      350,    4,    8,    8,    8,   18,   69,   79,   17,   69,
       79,  824,    8,   19,   19,   19,    8,    8,    8,    8,
        8,    8,   24,   19,   25,   25,   25,   21,    8,    8,
        8,    8,    8,   21,   25,   22,  822,  816,   22,   26,
       26,   26,   27,   27,   27,   70,   70,   19,   70,   26,
       76,   76,   27,   76,   19,  808,   28,   28,   28,  162,
       19,  169,  162,   19,  169,   26,   28,   29,   29,   29,
      793,   25,   30,   30,   30,  770,  764,   29,   31,   31,

       31,  351,   30,  725,  351,   29,   26,  724,   31,  678,
       27,   32,   32,   32,   28,  677,   31,   33,   33,   33,
      628,   32,   34,   34,   34,   29,  619,   33,   29,   28,
       30,  618,   34,   35,   35,   35,  562,  164,  164,   29,
      164,  553,   30,   35,   36,   36,   36,   32,   37,   37,
       37,   38,   38,   38,   36,   32,  552,   32,   37,   33,
      487,   38,   39,   39,   39,  431,   34,  411,   34,   40,
       40,   40,   39,  430,   33,   35,  430,  352,   34,   40,
      327,  260,   36,   35,  237,   41,   41,   41,  236,   38,
       42,   42,   42,  144,   37,   41,  168,  168,   37,  168,

       42,   43,   43,   43,   39,   44,   44,   44,  685,  685,
      685,   43,   45,   45,   45,   44,   40,   46,   46,   46,
      259,  259,   45,  259,  143,   16,   13,   46,   42,   12,
       47,   47,   47,   41,   43,   41,   11,    5,   44,   43,
       47,   72,   72,   44,   72,    0,   45,   48,   48,   48,
       45,    0,   44,   72,   43,    0,    0,   48,   44,   55,
       55,   55,   45,   46,   47,   56,   56,   56,    0,   55,
       58,   58,   58,   72,    0,   56,    0,   59,   59,   59,
       58,   48,    0,    0,   55,    0,    0,   59,    0,   48,
       60,   60,   60,   61,   61,   61,    0,   62,   62,   62,

       60,    0,    0,   61,    0,    0,   58,   62,    0,    0,
       55,   59,   63,   63,   63,   64,   64,   64,   65,   65,
       65,    0,   63,    0,   59,   64,    0,    0,   65,    0,
        0,   61,   66,   66,   66,    0,    0,   60,   67,   67,
       67,    0,   66,   62,   68,   68,   68,    0,   67,    0,
        0,   62,   65,    0,   68,   77,   77,    0,   77,   84,
       84,   84,   63,   64,    0,   63,    0,   77,   65,   84,
       66,   78,   78,    0,   78,    0,   67,    0,   83,   83,
       83,    0,   68,   78,    0,    0,   68,   77,   83,   85,
       85,   85,   86,   86,   86,    0,    0,   84,    0,   85,

        0,   68,   86,   78,   87,   87,   87,   88,   88,   88,
      731,  731,  731,    0,   87,    0,    0,   88,    0,    0,
       83,   89,   89,   89,   90,   90,   90,   91,   91,   91,
        0,   89,    0,   85,   90,  731,    0,   91,    0,   86,
        0,   92,   92,   92,    0,   88,   93,   93,   93,    0,
       87,   92,   94,   94,   94,   89,   93,   95,   95,   95,
        0,    0,   94,   96,   96,   96,   90,   95,   97,   97,
       97,   93,    0,   96,    0,   92,    0,   91,   97,   98,
       98,   98,    0,    0,   97,   99,   99,   99,    0,   98,
       94,  100,  100,  100,   95,   99,    0,   97,    0,    0,

        0,  100,    0,   95,    0,  101,  101,  101,  102,  102,
      102,  103,  103,  103,   97,  101,    0,    0,  102,    0,
       97,  103,  104,  104,  104,    0,    0,  101,    0,   98,
        0,    0,  104,  105,  105,  105,   99,  100,  106,  106,
      106,    0,    0,  105,    0,    0,  102,    0,  106,  107,
      107,  107,  108,  108,  108,    0,  104,    0,  103,  107,
        0,    0,  108,  109,  109,  109,  111,  111,  111,  110,
      110,  110,  106,  109,    0,    0,  111,    0,  107,  110,
      112,  112,  112,  105,  113,  113,  113,  114,  114,  114,
      112,  115,  115,  115,  113,    0,    0,  114,  116,  116,

      116,  115,    0,  109,  108,    0,  110,    0,  116,  117,
      117,  117,    0,  112,  118,  118,  118,    0,  111,  117,
      119,  119,  119,    0,  118,  120,  120,  120,  113,    0,
      119,  121,  121,  121,    0,  120,  122,  122,  122,  115,
      114,  121,    0,  123,  123,  123,  122,    0,  116,    0,
      125,  125,  125,  123,  117,    0,  117,  124,  124,  124,
      125,  126,  126,  126,    0,    0,  118,  124,  127,  127,
      127,  126,  119,    0,    0,  120,  123,    0,  127,  128,
      128,  128,  122,    0,  129,  129,  129,  122,  121,  128,
      130,  130,  130,  123,  129,  124,  131,  131,  131,    0,

      130,    0,  132,  132,  132,    0,  131,  133,  133,  133,
        0,  126,  132,  128,    0,  128,    0,  133,  127,  134,
      134,  134,  135,  135,  135,  130,    0,    0,  129,  134,
      131,    0,  135,    0,  136,  136,  136,    0,  137,  137,
      137,    0,    0,  133,  136,    0,    0,  132,  137,  138,
      138,  138,    0,    0,  134,  139,  139,  139,    0,  138,
      140,  140,  140,    0,    0,  139,    0,  135,  136,    0,
      140,  145,  145,  145,    0,    0,  136,    0,  135,    0,
      137,  145,  146,  146,  146,  147,  147,  147,  148,  148,
      148,    0,  146,  138,    0,  147,    0,    0,  148,  149,

      149,  149,    0,  150,  150,  150,    0,  139,    0,  149,
        0,    0,  140,  150,  151,  151,  151,    0,  146,  152,
      152,  152,  147,  145,  151,    0,  153,  153,  153,  152,
        0,    0,    0,  148,  148,  149,  153,  154,  154,  154,
      150,  155,  155,  155,    0,    0,    0,  154,  151,    0,
        0,  155,    0,  152,  156,  156,  156,    0,  157,  157,
      157,  158,  158,  158,  156,    0,    0,    0,  157,    0,
        0,  158,  153,    0,    0,  154,  159,  159,  159,  160,
      160,  160,  161,  161,  161,    0,  159,  166,  166,  160,
      166,  155,  161,  155,  170,  170,  170,    0,    0,  166,

        0,  156,  157,    0,  170,    0,  171,  171,  171,  157,
      158,  172,  172,  172,    0,    0,  171,    0,    0,  166,
        0,  172,    0,    0,  160,    0,  159,  173,  173,  173,
      161,  174,  174,  174,  175,  175,  175,  173,    0,  170,
      171,  174,    0,    0,  175,    0,    0,  172,  176,  176,
      176,  177,  177,  177,  178,  178,  178,    0,  176,    0,
        0,  177,    0,    0,  178,  179,  179,  179,  175,  173,
      180,  180,  180,    0,    0,  179,  181,  181,  181,    0,
      180,  182,  182,  182,    0,  174,  181,  178,  180,    0,
        0,  182,    0,  183,  183,  183,  184,  184,  184,  176,

        0,    0,  177,  183,    0,    0,  184,  185,  185,  185,
      179,  186,  186,  186,    0,    0,    0,  185,    0,  182,
        0,  186,    0,    0,  181,    0,  187,  187,  187,  186,
      188,  188,  188,    0,    0,  183,  187,  184,    0,    0,
      188,  189,  189,  189,  190,  190,  190,    0,  185,    0,
        0,  189,  188,    0,  190,  191,  191,  191,    0,  187,
      192,  192,  192,    0,    0,  191,  193,  193,  193,    0,
      192,  194,  194,  194,    0,    0,  193,  190,    0,    0,
        0,  194,  195,  195,  195,    0,    0,  191,  189,  196,
      196,  196,  195,    0,  189,    0,    0,  192,    0,  196,

      197,  197,  197,  198,  198,  198,  199,  199,  199,    0,
      197,    0,    0,  198,    0,    0,  199,    0,  200,  200,
      200,  193,    0,  194,    0,  196,    0,  195,  200,  201,
      201,  201,  202,  202,  202,    0,  203,  203,  203,  201,
        0,    0,  202,    0,    0,  198,  203,  204,  204,  204,
      205,  205,  205,  199,  206,  206,  206,  204,    0,    0,
      205,  207,  207,  207,  206,  208,  208,  208,    0,    0,
        0,  207,    0,  202,  201,  208,    0,    0,  203,  209,
      209,  209,    0,  210,  210,  210,  211,  211,  211,  209,
        0,    0,  204,  210,  207,    0,  211,  205,  212,  212,

      212,  213,  213,  213,    0,  206,    0,    0,  212,    0,
      208,  213,  209,  214,  214,  214,  215,  215,  215,    0,
        0,  210,    0,  214,  211,    0,  215,  216,  216,  216,
      217,  217,  217,  212,  218,  218,  218,  216,    0,  213,
      217,  220,  220,  220,  218,  219,  219,  219,  221,  221,
      221,  220,  222,  222,  222,  219,    0,    0,  221,  223,
      223,  223,  222,    0,    0,  214,    0,    0,  215,  223,
      258,  258,  216,  258,  224,  224,  224,    0,    0,  218,
      217,    0,  258,  219,  224,  220,    0,  225,  225,  225,
      222,  226,  226,  226,    0,    0,    0,  225,    0,    0,

      221,  226,  258,    0,  223,  227,  227,  227,  228,  228,
      228,  229,  229,  229,    0,  227,    0,    0,  228,    0,
        0,  229,    0,    0,  224,  225,  230,  230,  230,  232,
      232,  232,  226,  231,  231,  231,  230,    0,    0,  232,
      233,  233,  233,  231,  234,  234,  234,    0,    0,  227,
      233,  235,  235,  235,  234,    0,  228,    0,    0,    0,
        0,  235,  230,  229,  238,  238,  238,  231,  232,  239,
      239,  239,  230,    0,  238,  240,  240,  240,    0,  239,
      234,  241,  241,  241,    0,  240,  242,  242,  242,    0,
        0,  241,  235,  233,    0,    0,  242,  243,  243,  243,

      244,  244,  244,  245,  245,  245,  238,  243,    0,    0,
      244,    0,  239,  245,  246,  246,  246,  247,  247,  247,
      248,  248,  248,  242,  246,    0,    0,  247,    0,  241,
      248,    0,  240,  249,  249,  249,    0,  242,    0,  243,
      250,  250,  250,  249,  251,  251,  251,  245,    0,    0,
      250,    0,    0,  247,  251,  252,  252,  252,    0,  246,
        0,  253,  253,  253,    0,  252,    0,  249,    0,    0,
      248,  253,  254,  254,  254,  255,  255,  255,    0,    0,
      251,    0,  254,    0,    0,  255,  256,  256,  256,  257,
      257,  257,  250,  252,    0,    0,  256,    0,    0,  257,

      261,  261,  261,  262,  262,  262,    0,    0,  253,    0,
      261,    0,    0,  262,  253,    0,  263,  263,  263,    0,
      255,  264,  264,  264,  256,  254,  263,  257,  265,  265,
      265,  264,    0,    0,  261,  266,  266,  266,  265,  267,
      267,  267,  268,  268,  268,  266,  262,    0,    0,  267,
        0,    0,  268,  269,  269,  269,    0,  264,  270,  270,
      270,    0,    0,  269,    0,    0,  265,  269,  270,  263,
      271,  271,  271,  272,  272,  272,    0,  267,    0,    0,
      271,    0,    0,  272,    0,    0,    0,  266,    0,  273,
      273,  273,    0,    0,  268,    0,  270,    0,  271,  273,

      274,  274,  274,  275,  275,  275,  276,  276,  276,    0,
      274,    0,    0,  275,    0,    0,  276,  277,  277,  277,
      278,  278,  278,    0,  279,  279,  279,  277,    0,    0,
      278,    0,    0,  273,  279,    0,    0,  275,  278,  278,
        0,  275,    0,    0,  280,  280,  280,  281,  281,  281,
        0,    0,  274,  276,  280,    0,    0,  281,  282,  282,
      282,    0,  279,    0,  283,  283,  283,    0,  282,  284,
      284,  284,    0,  277,  283,  285,  285,  285,    0,  284,
        0,    0,  283,    0,    0,  285,    0,  282,  286,  286,
      286,  281,  287,  287,  287,    0,    0,  280,  286,  288,

      288,  288,  287,  289,  289,  289,    0,    0,  285,  288,
      290,  290,  290,  289,  291,  291,  291,  292,  292,  292,
      290,  293,  293,  293,  291,    0,    0,  292,    0,    0,
      286,  293,    0,    0,  287,    0,    0,  288,    0,  294,
      294,  294,  295,  295,  295,  296,  296,  296,  291,  294,
        0,    0,  295,    0,    0,  296,    0,  289,    0,  292,
      290,    0,  297,  297,  297,  298,  298,  298,    0,  293,
        0,    0,  297,    0,    0,  298,    0,  294,    0,  299,
      299,  299,  300,  300,  300,  301,  301,  301,  295,  299,
        0,    0,  300,    0,    0,  301,    0,  296,  297,  302,

      302,  302,  303,  303,  303,  304,  304,  304,    0,  302,
        0,    0,  303,    0,    0,  304,  305,  305,  305,  306,
      306,  306,  300,    0,    0,  301,  305,    0,    0,  306,
      307,  307,  307,  299,  308,  308,  308,  309,  309,  309,
      307,  310,  310,  310,  308,    0,  302,  309,  311,  311,
      311,  310,    0,  306,    0,  312,  312,  312,  311,  313,
      313,  313,    0,    0,  307,  312,  305,    0,  308,  313,
      314,  314,  314,  309,  315,  315,  315,  316,  316,  316,
      314,  317,  317,  317,  315,    0,    0,  316,  318,  318,
      318,  317,  319,  319,  319,  320,  320,  320,  318,  321,

      321,  321,  319,    0,    0,  320,  314,  313,    0,  321,
      316,  322,  322,  322,  323,  323,  323,    0,    0,  317,
        0,  322,    0,    0,  323,    0,  324,  324,  324,  325,
      325,  325,    0,  320,    0,  318,  324,    0,    0,  325,
        0,  326,  326,  326,  329,  329,  329,    0,    0,    0,
      321,  326,    0,    0,  329,    0,    0,  322,  330,  330,
      330,  323,    0,    0,  324,  331,  331,  331,  330,    0,
      325,  332,  332,  332,  326,  331,  333,  333,  333,    0,
        0,  332,  334,  334,  334,    0,  333,  335,  335,  335,
        0,  330,  334,  336,  336,  336,    0,  335,  329,  337,

      337,  337,    0,  336,    0,  332,  338,  338,  338,  337,
      339,  339,  339,    0,    0,    0,  338,    0,  333,    0,
      339,  340,  340,  340,    0,  341,  341,  341,    0,    0,
        0,  340,    0,    0,  334,  341,    0,  337,  335,  342,
      342,  342,    0,    0,  339,    0,  336,    0,    0,  342,
      343,  343,  343,    0,  344,  344,  344,    0,  338,    0,
      343,    0,    0,  341,  344,    0,  340,    0,  345,  345,
      345,  346,  346,  346,    0,    0,    0,  342,  345,    0,
        0,  346,  347,  347,  347,  348,  348,  348,  349,  349,
      349,    0,  347,    0,    0,  348,    0,    0,  349,    0,

      353,  353,  353,    0,  343,    0,    0,  344,    0,  346,
      353,    0,  345,    0,    0,  347,  354,  354,  354,  355,
      355,  355,  356,  356,  356,    0,  354,    0,    0,  355,
        0,    0,  356,  357,  357,  357,  358,  358,  358,    0,
      359,  359,  359,  357,    0,    0,  358,    0,    0,  354,
      359,    0,  353,    0,  360,  360,  360,  361,  361,  361,
      356,    0,    0,  355,  360,    0,    0,  361,    0,  362,
      362,  362,    0,    0,  358,  363,  363,  363,    0,  362,
      364,  364,  364,  357,    0,  363,  365,  365,  365,  363,
      364,    0,    0,  366,  366,  366,  365,    0,  367,  367,

      367,  361,  362,  366,  368,  368,  368,    0,  367,  369,
      369,  369,    0,  364,  368,  370,  370,  370,    0,  369,
      371,  371,  371,    0,    0,  370,  372,  372,  372,    0,
      371,    0,    0,  365,  367,    0,  372,    0,    0,  366,
      373,  373,  373,  374,  374,  374,  375,  375,  375,    0,
      373,  369,    0,  374,    0,    0,  375,    0,    0,  368,
      376,  376,  376,  377,  377,  377,    0,  371,    0,    0,
      376,  370,    0,  377,  378,  378,  378,  379,  379,  379,
      372,  380,  380,  380,  378,    0,    0,  379,    0,    0,
      373,  380,  381,  381,  381,  374,    0,    0,  375,  382,

      382,  382,  381,    0,    0,  377,    0,    0,  377,  382,
      383,  383,  383,  377,  380,    0,  384,  384,  384,    0,
      383,    0,    0,  379,    0,  378,  384,  385,  385,  385,
      381,    0,  386,  386,  386,    0,    0,  385,  387,  387,
      387,  382,  386,  388,  388,  388,    0,    0,  387,  389,
      389,  389,    0,  388,  390,  390,  390,    0,  383,  389,
      391,  391,  391,    0,  390,    0,    0,  384,    0,    0,
      391,  392,  392,  392,    0,    0,  387,    0,  385,    0,
        0,  392,  386,  393,  393,  393,    0,  389,  390,  394,
      394,  394,    0,  393,  395,  395,  395,    0,  391,  394,

      396,  396,  396,    0,  395,  397,  397,  397,    0,    0,
      396,  398,  398,  398,    0,  397,    0,  393,  399,  399,
      399,  398,    0,  394,  392,  400,  400,  400,  399,    0,
      401,  401,  401,    0,    0,  400,    0,    0,  395,    0,
      401,    0,    0,  402,  402,  402,  403,  403,  403,    0,
        0,  397,  396,  402,    0,    0,  403,  404,  404,  404,
      405,  405,  405,  398,  401,    0,  400,  404,    0,    0,
      405,  406,  406,  406,  407,  407,  407,  408,  408,  408,
        0,  406,    0,    0,  407,    0,    0,  408,    0,    0,
      404,    0,  409,  409,  409,    0,  403,  410,  410,  410,

        0,    0,  409,  412,  412,  412,    0,  410,  405,    0,
      408,  406,    0,  412,    0,    0,  413,  413,  413,  414,
      414,  414,    0,    0,  407,  409,  413,    0,    0,  414,
      415,  415,  415,  416,  416,  416,  417,  417,  417,    0,
      415,    0,  410,  416,    0,  412,  417,  418,  418,  418,
      419,  419,  419,  420,  420,  420,    0,  418,    0,    0,
      419,    0,    0,  420,  413,    0,    0,  416,    0,  414,
      421,  421,  421,  422,  422,  422,    0,    0,  417,    0,
      421,  418,  415,  422,  423,  423,  423,  424,  424,  424,
      425,  425,  425,    0,  423,  420,    0,  424,    0,    0,

      425,    0,  426,  426,  426,  427,  427,  427,  428,  428,
      428,  422,  426,    0,    0,  427,    0,    0,  428,  429,
      429,  429,  421,    0,  425,  432,  432,  432,    0,  429,
      433,  433,  433,    0,  423,  432,    0,    0,  424,    0,
      433,  434,  434,  434,    0,    0,  435,  435,  435,    0,
        0,  434,  426,    0,  428,  429,  435,  427,  436,  436,
      436,  437,  437,  437,  438,  438,  438,  432,  436,    0,
        0,  437,    0,    0,  438,  434,    0,    0,  433,  439,
      439,  439,  440,  440,  440,  441,  441,  441,    0,  439,
        0,    0,  440,    0,    0,  441,  442,  442,  442,  443,

      443,  443,    0,    0,    0,    0,  442,    0,  438,  443,
      436,    0,  440,  444,  444,  444,    0,    0,  439,  445,
      445,  445,    0,  444,    0,  439,  446,  446,  446,  445,
        0,  441,  447,  447,  447,    0,  446,    0,    0,  443,
        0,    0,  447,  448,  448,  448,  442,  449,  449,  449,
      450,  450,  450,  448,    0,    0,  444,  449,    0,    0,
      450,  451,  451,  451,    0,  452,  452,  452,  453,  453,
      453,  451,    0,    0,  447,  452,    0,  446,  453,    0,
      449,  454,  454,  454,    0,    0,  450,  455,  455,  455,
        0,  454,    0,  448,  456,  456,  456,  455,    0,  452,

      457,  457,  457,    0,  456,    0,    0,  453,    0,    0,
      457,    0,  451,  458,  458,  458,  459,  459,  459,    0,
        0,  455,    0,  458,    0,    0,  459,    0,  454,    0,
        0,  458,    0,    0,  457,  460,  460,  460,  461,  461,
      461,    0,  458,    0,    0,  460,  456,    0,  461,  462,
      462,  462,  458,  463,  463,  463,  464,  464,  464,  462,
      465,  465,  465,  463,    0,    0,  464,  466,  466,  466,
      465,  467,  467,  467,  468,  468,  468,  466,  469,  469,
      469,  467,    0,    0,  468,    0,    0,  460,  469,    0,
      464,  463,  470,  470,  470,  471,  471,  471,  472,  472,

      472,  462,  470,    0,    0,  471,  465,    0,  472,    0,
        0,  466,    0,    0,    0,  467,  473,  473,  473,  474,
      474,  474,  469,    0,  468,    0,  473,    0,    0,  474,
        0,  471,    0,  475,  475,  475,  476,  476,  476,  477,
      477,  477,  470,  475,    0,    0,  476,    0,    0,  477,
      478,  478,  478,  479,  479,  479,    0,  474,  473,    0,
      478,    0,    0,  479,  480,  480,  480,  481,  481,  481,
      482,  482,  482,    0,  480,    0,    0,  481,    0,    0,
      482,    0,    0,    0,  478,    0,    0,  479,    0,    0,
      477,  483,  483,  483,    0,    0,    0,    0,  480,    0,

        0,  483,    0,    0,  479,  479,    0,    0,    0,  484,
      484,  484,  485,  485,  485,  482,  483,    0,    0,  484,
        0,    0,  485,    0,    0,  483,  483,    0,  486,  486,
      486,  488,  488,  488,    0,  489,  489,  489,  486,    0,
        0,  488,  483,  484,  484,  489,  490,  490,  490,  491,
      491,  491,    0,    0,    0,    0,  490,    0,    0,  491,
      485,  485,  486,  485,    0,    0,  485,    0,    0,    0,
      486,  492,  492,  492,    0,    0,    0,  489,  493,  493,
      493,  492,    0,  488,  490,  494,  494,  494,  493,    0,
        0,  491,  495,  495,  495,  494,  496,  496,  496,  497,

      497,  497,  495,  498,  498,  498,  496,    0,    0,  497,
      499,  499,  499,  498,  500,  500,  500,  492,    0,    0,
      499,  501,  501,  501,  500,  493,  502,  502,  502,    0,
        0,  501,  503,  503,  503,    0,  502,  494,  496,  495,
        0,    0,  503,  504,  504,  504,  505,  505,  505,  498,
        0,  497,    0,  504,    0,    0,  505,  501,    0,    0,
      500,  499,  506,  506,  506,  507,  507,  507,  503,  508,
      508,  508,  506,    0,    0,  507,    0,  502,    0,  508,
        0,  509,  509,  509,  510,  510,  510,  511,  511,  511,
      504,  509,    0,  505,  510,    0,    0,  511,  512,  512,

      512,    0,  508,  513,  513,  513,    0,    0,  512,  506,
      514,  514,  514,  513,    0,    0,  512,  507,    0,    0,
      514,  515,  515,  515,    0,    0,  510,    0,  516,  516,
      516,  515,  517,  517,  517,    0,    0,  513,  516,    0,
      511,    0,  517,  518,  518,  518,  519,  519,  519,    0,
      520,  520,  520,  518,    0,    0,  519,    0,    0,  515,
      520,  521,  521,  521,  522,  522,  522,  523,  523,  523,
        0,  521,    0,    0,  522,    0,    0,  523,    0,  519,
      524,  524,  524,    0,  517,  525,  525,  525,    0,  520,
      524,  526,  526,  526,  518,  525,    0,  522,    0,  521,

        0,  526,  527,  527,  527,  528,  528,  528,  529,  529,
      529,    0,  527,    0,    0,  528,    0,  523,  529,  530,
      530,  530,  525,  531,  531,  531,  532,  532,  532,  530,
      533,  533,  533,  531,    0,    0,  532,  534,  534,  534,
      533,    0,    0,  526,  527,    0,    0,  534,  535,  535,
      535,  536,  536,  536,  529,    0,    0,  528,  535,    0,
        0,  536,  537,  537,  537,  531,    0,  532,  538,  538,
      538,  530,  537,  539,  539,  539,    0,    0,  538,  540,
      540,  540,    0,  539,    0,  541,  541,  541,    0,  540,
        0,  542,  542,  542,    0,  541,    0,  543,  543,  543,

      535,  542,    0,  536,    0,    0,  537,  543,  544,  544,
      544,    0,    0,  540,  545,  545,  545,    0,  544,    0,
        0,  538,  541,    0,  545,  546,  546,  546,    0,  542,
      547,  547,  547,    0,    0,  546,  548,  548,  548,    0,
      547,  550,  550,  550,  543,    0,  548,  549,  549,  549,
        0,  550,    0,    0,  544,    0,    0,  549,  551,  551,
      551,  554,  554,  554,    0,    0,    0,    0,  551,    0,
        0,  554,    0,    0,  547,  546,  555,  555,  555,  556,
      556,  556,  557,  557,  557,    0,  555,    0,  548,  556,
        0,  550,  557,    0,  549,  558,  558,  558,    0,    0,

      554,    0,  559,  559,  559,  558,  560,  560,  560,  561,
      561,  561,  559,  556,  555,    0,  560,    0,    0,  561,
        0,  563,  563,  563,  564,  564,  564,    0,  565,  565,
      565,  563,    0,    0,  564,  557,  559,    0,  565,  566,
      566,  566,  567,  567,  567,    0,    0,  558,    0,  566,
        0,    0,  567,    0,    0,  561,  568,  568,  568,    0,
      564,  565,  560,  563,    0,    0,  568,  569,  569,  569,
      570,  570,  570,  571,  571,  571,    0,  569,    0,    0,
      570,    0,    0,  571,    0,    0,  566,  572,  572,  572,
      573,  573,  573,    0,  567,    0,    0,  572,    0,    0,

      573,    0,  568,    0,    0,  569,    0,  574,  574,  574,
        0,  575,  575,  575,    0,    0,  570,  574,    0,    0,
      571,  575,  576,  576,  576,  572,  577,  577,  577,  578,
      578,  578,  576,  579,  579,  579,  577,    0,    0,  578,
      580,  580,  580,  579,    0,  581,  581,  581,    0,    0,
      580,  582,  582,  582,    0,  581,  583,  583,  583,    0,
      576,  582,    0,  575,    0,    0,  583,  578,  584,  584,
      584,  585,  585,  585,  586,  586,  586,    0,  584,  579,
        0,  585,    0,    0,  586,    0,  580,  581,    0,  582,
        0,  583,    0,    0,  583,  587,  587,  587,  588,  588,

      588,  589,  589,  589,    0,  587,  583,    0,  588,    0,
        0,  589,  584,  590,  590,  590,  585,  591,  591,  591,
      592,  592,  592,  590,  593,  593,  593,  591,    0,    0,
      592,  591,    0,    0,  593,  594,  594,  594,    0,    0,
      587,  595,  595,  595,    0,  594,  596,  596,  596,    0,
        0,  595,    0,  597,  597,  597,  596,  593,  598,  598,
      598,    0,  592,  597,    0,  590,    0,    0,  598,  599,
      599,  599,    0,    0,  594,  600,  600,  600,    0,  599,
      601,  601,  601,    0,  596,  600,  602,  602,  602,    0,
      601,  597,    0,  595,  598,    0,  602,    0,  603,  603,

      603,    0,    0,  604,  604,  604,    0,  599,  603,  605,
      605,  605,  600,  604,  601,  606,  606,  606,    0,  605,
        0,  607,  607,  607,    0,  606,  608,  608,  608,    0,
      602,  607,  609,  609,  609,    0,  608,  610,  610,  610,
        0,    0,  609,  603,    0,  604,    0,  610,  611,  611,
      611,  605,  612,  612,  612,  613,  613,  613,  611,  607,
        0,    0,  612,    0,    0,  613,    0,  614,  614,  614,
        0,  615,  615,  615,    0,    0,  608,  614,  616,  616,
      616,  615,  617,  617,  617,  620,  620,  620,  616,  621,
      621,  621,  617,    0,  611,  620,  622,  622,  622,  621,

      623,  623,  623,    0,  612,  615,  622,  624,  624,  624,
      623,  614,  613,  625,  625,  625,    0,  624,    0,    0,
      617,    0,    0,  625,    0,    0,  616,    0,  621,  626,
      626,  626,    0,    0,  623,    0,    0,  620,    0,  626,
        0,  624,  627,  627,  627,    0,  622,    0,  629,  629,
      629,    0,  627,  630,  630,  630,    0,  625,  629,  631,
      631,  631,    0,  630,  632,  632,  632,    0,    0,  631,
      633,  633,  633,    0,  632,  634,  634,  634,    0,    0,
      633,  635,  635,  635,    0,  634,  629,  636,  636,  636,
        0,  635,  637,  637,  637,    0,    0,  636,    0,  638,

      638,  638,  637,    0,    0,  630,    0,    0,  634,  638,
      632,  631,    0,    0,  635,  639,  639,  639,  640,  640,
      640,  641,  641,  641,    0,  639,    0,    0,  640,    0,
        0,  641,    0,  642,  642,  642,    0,    0,  637,    0,
      643,  643,  643,  642,  644,  644,  644,    0,  639,  638,
      643,  640,    0,    0,  644,  645,  645,  645,  646,  646,
      646,  647,  647,  647,    0,  645,    0,    0,  646,  640,
      642,  647,  648,  648,  648,  649,  649,  649,    0,  650,
      650,  650,  648,    0,    0,  649,    0,    0,  645,  650,
      644,  651,  651,  651,    0,    0,  646,    0,  652,  652,

      652,  651,  653,  653,  653,    0,    0,  647,  652,  654,
      654,  654,  653,  649,  650,  647,  655,  655,  655,  654,
      656,  656,  656,    0,    0,  648,  655,    0,    0,  651,
      656,  657,  657,  657,  658,  658,  658,  659,  659,  659,
        0,  657,    0,    0,  658,    0,  653,  659,  660,  660,
      660,    0,    0,  654,    0,  655,    0,    0,  660,    0,
        0,  657,  656,  661,  661,  661,    0,  662,  662,  662,
      663,  663,  663,  661,  664,  664,  664,  662,    0,    0,
      663,  660,    0,    0,  664,  665,  665,  665,  666,  666,
      666,  667,  667,  667,    0,  665,  661,  662,  666,    0,

        0,  667,    0,  668,  668,  668,  669,  669,  669,  670,
      670,  670,  664,  668,    0,    0,  669,    0,    0,  670,
      663,  671,  671,  671,    0,  667,    0,  665,  672,  672,
      672,  671,    0,  673,  673,  673,    0,    0,  672,  669,
        0,    0,  666,  673,  674,  674,  674,  675,  675,  675,
        0,  676,  676,  676,  674,    0,    0,  675,  680,  680,
      680,  676,  679,  679,  679,  681,  681,  681,  680,  682,
      682,  682,  679,    0,    0,  681,  683,  683,  683,  682,
      684,  684,  684,  686,  686,  686,  683,    0,    0,    0,
      684,    0,    0,  686,    0,    0,  674,  676,  675,    0,

      679,  687,  687,  687,    0,  680,  688,  688,  688,    0,
        0,  687,  689,  689,  689,  682,  688,  690,  690,  690,
        0,    0,  689,    0,    0,    0,    0,  690,  683,  691,
      691,  691,    0,  684,  686,  692,  692,  692,    0,  691,
      693,  693,  693,    0,    0,  692,  694,  694,  694,    0,
      693,    0,    0,  688,  687,    0,  694,  695,  695,  695,
      696,  696,  696,    0,  691,  690,    0,  695,    0,    0,
      696,  697,  697,  697,  698,  698,  698,  699,  699,  699,
        0,  697,    0,    0,  698,    0,  692,  699,  700,  700,
      700,  693,  701,  701,  701,    0,  694,    0,  700,    0,

        0,    0,  701,    0,  702,  702,  702,    0,    0,  695,
      703,  703,  703,  697,  702,  704,  704,  704,    0,  699,
      703,  705,  705,  705,    0,  704,  698,    0,  700,  701,
        0,  705,    0,  706,  706,  706,  707,  707,  707,  708,
      708,  708,  702,  706,    0,    0,  707,    0,    0,  708,
      709,  709,  709,    0,  703,  710,  710,  710,    0,  705,
      709,  711,  711,  711,    0,  710,  712,  712,  712,    0,
        0,  711,  713,  713,  713,    0,  712,  708,    0,    0,
      707,    0,  713,  714,  714,  714,  715,  715,  715,    0,
        0,    0,  709,  714,    0,    0,  715,    0,    0,  710,

      716,  716,  716,  711,    0,  712,  717,  717,  717,    0,
      716,  718,  718,  718,  713,    0,  717,  719,  719,  719,
        0,  718,  720,  720,  720,  714,    0,  719,    0,  721,
      721,  721,  720,  722,  722,  722,    0,    0,  715,  721,
        0,    0,  717,  722,  723,  723,  723,    0,    0,  718,
        0,    0,    0,    0,  723,  726,  726,  726,    0,    0,
      720,  719,  727,  727,  727,  726,  728,  728,  728,  729,
      729,  729,  727,  730,  730,  730,  728,    0,    0,  729,
      732,  732,  732,  730,  733,  733,  733,  734,  734,  734,
      732,  735,  735,  735,  733,    0,  723,  734,  736,  736,

      736,  735,    0,    0,    0,  726,    0,  729,  736,    0,
        0,  730,  727,  737,  737,  737,    0,    0,  728,  738,
      738,  738,    0,  737,    0,    0,  739,  739,  739,  738,
      740,  740,  740,    0,  733,  734,  739,    0,  735,    0,
      740,  741,  741,  741,  742,  742,  742,  743,  743,  743,
        0,  741,    0,    0,  742,  736,    0,  743,  744,  744,
      744,  745,  745,  745,  739,  746,  746,  746,  744,    0,
        0,  745,  747,  747,  747,  746,    0,    0,  748,  748,
      748,    0,  747,    0,    0,    0,  743,  740,  748,  749,
      749,  749,    0,  741,  750,  750,  750,    0,    0,  749,

      744,    0,    0,    0,  750,  751,  751,  751,    0,    0,
      747,  746,  752,  752,  752,  751,  753,  753,  753,  755,
      755,  755,  752,  754,  754,  754,  753,    0,  748,  755,
      756,  756,  756,  754,  757,  757,  757,  758,  758,  758,
      756,  759,  759,  759,  757,    0,    0,  758,    0,  751,
      752,  759,  760,  760,  760,    0,    0,    0,  755,    0,
        0,  753,  760,    0,  757,  754,  761,  761,  761,  762,
      762,  762,  765,  765,  765,  756,  761,    0,    0,  762,
        0,    0,  765,  766,  766,  766,  767,  767,  767,  768,
      768,  768,    0,  766,    0,    0,  767,    0,    0,  768,

      769,  769,  769,  771,  771,  771,  772,  772,  772,    0,
      769,    0,    0,  771,    0,    0,  772,  773,  773,  773,
      761,  766,  774,  774,  774,    0,    0,  773,  775,  775,
      775,    0,  774,  776,  776,  776,    0,    0,  775,    0,
        0,  771,    0,  776,  777,  777,  777,    0,  778,  778,
      778,  779,  779,  779,  777,    0,    0,  772,  778,  773,
        0,  779,  780,  780,  780,  781,  781,  781,  782,  782,
      782,    0,  780,    0,    0,  781,    0,    0,  782,  775,
        0,  776,  783,  783,  783,    0,  777,    0,  784,  784,
      784,    0,  783,  785,  785,  785,    0,  779,  784,  786,

      786,  786,    0,  785,    0,  787,  787,  787,    0,  786,
        0,  788,  788,  788,  780,  787,  789,  789,  789,    0,
      783,  788,  790,  790,  790,    0,  789,  792,  792,  792,
        0,  785,  790,    0,  794,  794,  794,  792,  795,  795,
      795,    0,    0,  786,  794,  796,  796,  796,  795,  788,
        0,  797,  797,  797,    0,  796,    0,    0,  789,    0,
      790,  797,  798,  798,  798,  799,  799,  799,  800,  800,
      800,    0,  798,    0,    0,  799,    0,    0,  800,  801,
      801,  801,  802,  802,  802,  803,  803,  803,    0,  801,
        0,  796,  802,    0,    0,  803,    0,    0,  797,    0,

      798,  804,  804,  804,  805,  805,  805,  806,  806,  806,
        0,  804,  799,    0,  805,    0,    0,  806,  807,  807,
      807,  809,  809,  809,  810,  810,  810,    0,  807,    0,
        0,  809,    0,    0,  810,  811,  811,  811,    0,  804,
      812,  812,  812,    0,    0,  811,  813,  813,  813,    0,
      812,    0,  806,  814,  814,  814,  813,  815,  815,  815,
      817,  817,  817,  814,  807,    0,    0,  815,    0,    0,
      817,    0,    0,  809,  818,  818,  818,  810,  819,  819,
      819,    0,    0,    0,  818,    0,  812,    0,  819,    0,
        0,  814,  820,  820,  820,  821,  821,  821,  823,  823,

      823,    0,  820,    0,    0,  821,    0,    0,  823,  815,
      825,  825,  825,  827,  827,  827,  829,  829,  829,    0,
      825,    0,    0,  827,  818,    0,  829,    0,    0,    0,
        0,    0,    0,    0,  823,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  825,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  827,  831,  831,  831,  831,  831,
      831,  831,  832,  832,  832,  833,  833,  833,  833,  833,
      833,  833,  834,  834,  834,  835,  835,    0,  835,  835,
      835,  837,  837,  830,  830,  830,  830,  830,  830,  830,

      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830
    } ;

#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 ".\\parser.l"
#define INITIAL 0
#line 2 ".\\parser.l"
#include "pch.h"
#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

#include "rdogramma.h"
#include "rdoparser.h"

#define YY_INTERACTIVE

#define YY_USER_INIT {                      \
	rdoParse::currParser->lexer_loc_init(); \
}

#define YY_USER_ACTION {                      \
	rdoParse::currParser->lexer_loc_action(); \
}

#define comment 1

#line 1915 "rdolex.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 26 ".\\parser.l"


#line 2045 "rdolex.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 831 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5294 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 28 ".\\parser.l"
return(Resource_type);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 29 ".\\parser.l"
return(permanent);
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 30 ".\\parser.l"
return(Parameters);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 31 ".\\parser.l"
return(integer);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 32 ".\\parser.l"
return(real);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 33 ".\\parser.l"
return(End);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 34 ".\\parser.l"
return(temporary);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 35 ".\\parser.l"
return(such_as);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 36 ".\\parser.l"
return(dblpoint);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 38 ".\\parser.l"
return(Resources);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 39 ".\\parser.l"
return(trace_keyword);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 40 ".\\parser.l"
return(no_trace);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 42 ".\\parser.l"
return(Constant);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 43 ".\\parser.l"
return(Body);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 44 ".\\parser.l"
return(Function_keyword);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 45 ".\\parser.l"
return(Type_keyword);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 46 ".\\parser.l"
return(algorithmic);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 47 ".\\parser.l"
return(table_keyword);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 48 ".\\parser.l"
return(list_keyword);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 49 ".\\parser.l"
return(Calculate_if);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 50 ".\\parser.l"
return(Sequence);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 51 ".\\parser.l"
return(uniform);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 52 ".\\parser.l"
return(exponential);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 53 ".\\parser.l"
return(normal_keyword);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 54 ".\\parser.l"
return(by_hist);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 55 ".\\parser.l"
return(enumerative);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 57 ".\\parser.l"
return(Exist);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 58 ".\\parser.l"
return(Not_Exist);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 59 ".\\parser.l"
return(For_All);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 60 ".\\parser.l"
return(Not_For_All);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 61 ".\\parser.l"
return(neq);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 62 ".\\parser.l"
return(leq);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 63 ".\\parser.l"
return(geq);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 64 ".\\parser.l"
return(NoCheck);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 65 ".\\parser.l"
return(Calculate_if);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 66 ".\\parser.l"
return(or_keyword);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 67 ".\\parser.l"
return(and_keyword);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 70 ".\\parser.l"
return(Pattern);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 71 ".\\parser.l"
return(operation);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 72 ".\\parser.l"
return(irregular_event);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 73 ".\\parser.l"
return(rule_keyword);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 74 ".\\parser.l"
return(keyboard);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 75 ".\\parser.l"
return(Relevant_resources);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 76 ".\\parser.l"
return(Keep);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 77 ".\\parser.l"
return(Create_keyword);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 78 ".\\parser.l"
return(Erase);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 79 ".\\parser.l"
return(NonExist);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 80 ".\\parser.l"
return(NoChange);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 81 ".\\parser.l"
return(Time);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 82 ".\\parser.l"
return(Choice);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 83 ".\\parser.l"
return(from_keyword);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 84 ".\\parser.l"
return(first_keyword);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 85 ".\\parser.l"
return(Convert_begin);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 86 ".\\parser.l"
return(Convert_end);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 87 ".\\parser.l"
return(Convert_rule);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 88 ".\\parser.l"
return(Convert_event);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 89 ".\\parser.l"
return(with_max);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 90 ".\\parser.l"
return(with_min);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 91 ".\\parser.l"
return(Operations);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 92 ".\\parser.l"
return(Results);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 93 ".\\parser.l"
return(watch_par);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 94 ".\\parser.l"
return(watch_state);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 95 ".\\parser.l"
return(watch_quant);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 96 ".\\parser.l"
return(watch_value);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 97 ".\\parser.l"
return(get_value);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 99 ".\\parser.l"
return(Model_name);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 100 ".\\parser.l"
return(Resource_file);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 101 ".\\parser.l"
return(OprIev_file);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 102 ".\\parser.l"
return(Frame_file);	
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 103 ".\\parser.l"
return(Statistic_file);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 104 ".\\parser.l"
return(Results_file);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 105 ".\\parser.l"
return(Trace_file);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 106 ".\\parser.l"
return(Show_mode);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 107 ".\\parser.l"
return(Frame_number);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 108 ".\\parser.l"
return(Show_rate);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 109 ".\\parser.l"
return(Run_StartTime);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 110 ".\\parser.l"
return(Trace_StartTime);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 111 ".\\parser.l"
return(Trace_EndTime);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 112 ".\\parser.l"
return(Terminate_if);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 113 ".\\parser.l"
return(Break_point);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 114 ".\\parser.l"
return(Seed);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 115 ".\\parser.l"
return(NoShow);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 116 ".\\parser.l"
return(Monitor);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 117 ".\\parser.l"
return(Animation);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 120 ".\\parser.l"
return(Decision_point);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 121 ".\\parser.l"
return(search_keyword);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 122 ".\\parser.l"
return(trace_stat);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 123 ".\\parser.l"
return(trace_tops);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 124 ".\\parser.l"
return(trace_all);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 125 ".\\parser.l"
return(Condition_keyword);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 126 ".\\parser.l"
return(Term_condition);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 127 ".\\parser.l"
return(Evaluate_by);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 128 ".\\parser.l"
return(Compare_tops);
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 129 ".\\parser.l"
return(NO);
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 130 ".\\parser.l"
return(YES);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 131 ".\\parser.l"
return(Activities);
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 132 ".\\parser.l"
return(Process);
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 133 ".\\parser.l"
return(SEIZE);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 134 ".\\parser.l"
return(GENERATE);
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 135 ".\\parser.l"
return(value_before);
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 136 ".\\parser.l"
return(value_after);
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 137 ".\\parser.l"
return(value_before);
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 138 ".\\parser.l"
return(value_after);
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 139 ".\\parser.l"
return(some);
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 141 ".\\parser.l"
return(Frame);
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 142 ".\\parser.l"
return(Show_if);
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 143 ".\\parser.l"
return(Back_picture);
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 144 ".\\parser.l"
return(Show);
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 145 ".\\parser.l"
return(frm_cell);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 146 ".\\parser.l"
return(text);
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 147 ".\\parser.l"
return(transparent);
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 148 ".\\parser.l"
return(bitmap);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 149 ".\\parser.l"
return(s_bmp);
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 150 ".\\parser.l"
return(rect_keyword);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 151 ".\\parser.l"
return(r_rect);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 152 ".\\parser.l"
return(line);
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 153 ".\\parser.l"
return(ellipse);
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 154 ".\\parser.l"
return(triang);
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 155 ".\\parser.l"
return(active);
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 157 ".\\parser.l"
{
						std::string n1(YYText());
						int len = n1.length();
						std::string *name = new std::string(n1, 1, len-2);
						rdoParse::currParser->addName(name);
						rdoParse::currParser->lexer_setvalue((int)name);
						return QUOTED_IDENTIF;
					}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 166 ".\\parser.l"
{
						std::string *name = new std::string(YYText());
						rdoParse::currParser->addName(name);
						rdoParse::currParser->lexer_setvalue((int)name);
						return QUOTED_IDENTIF_BAD;
					}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 173 ".\\parser.l"
BEGIN(comment);
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 174 ".\\parser.l"
;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 175 ".\\parser.l"
;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 176 ".\\parser.l"
;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 177 ".\\parser.l"
BEGIN(INITIAL);
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 179 ".\\parser.l"
BEGIN(comment);
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 180 ".\\parser.l"
BEGIN(INITIAL);
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 182 ".\\parser.l"
;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 183 ".\\parser.l"
return(YYText()[YYLeng()-1]);
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 185 ".\\parser.l"
{
						std::string n1(YYText(), YYLeng()-2);
						rdoParse::currParser->lexer_setvalue(atoi(n1.c_str()));
						unput('.');
						unput('.');
						rdoParse::currParser->lexer_loc_delta_pos( -2 );
						return INT_CONST;
					}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 194 ".\\parser.l"
{
						rdoParse::currParser->lexer_setvalue(atoi(YYText()));
						return INT_CONST;
					}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 199 ".\\parser.l"
{
						double *val = rdoParse::currParser->addDouble(new double(atof(YYText())));
						rdoParse::currParser->lexer_setvalue((int)val);
						return REAL_CONST;
					}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 205 ".\\parser.l"
{
						std::string *name = new std::string(YYText());
						rdoParse::currParser->addName(name);
						rdoParse::currParser->lexer_setvalue((int)name);
						return IDENTIF_BAD;
					}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 212 ".\\parser.l"
{
					std::string n1(YYText());
					std::string::size_type pos = n1.find_first_of("\r\n\t :");
					std::string *name = new std::string(n1, 0, pos);
					rdoParse::currParser->addName(name);
					rdoParse::currParser->lexer_setvalue((int)name);
					return IDENTIF_set;
				}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 221 ".\\parser.l"
{
					std::string n1(YYText());
					std::string::size_type pos = n1.find_first_of("\r\n\t :");
					std::string *name = new std::string(n1, 0, pos);
					rdoParse::currParser->addName(name);
					rdoParse::currParser->lexer_setvalue((int)name);
					return IDENTIF_NoChange_NoChange;
				}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 230 ".\\parser.l"
{
					std::string n1(YYText());
					std::string::size_type pos = n1.find_first_of("\r\n\t :");
					std::string *name = new std::string(n1, 0, pos);
					rdoParse::currParser->addName(name);
					rdoParse::currParser->lexer_setvalue((int)name);
					return IDENTIF_NoChange;
				}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 239 ".\\parser.l"
{
					std::string n1(YYText());
					std::string::size_type pos = n1.find_first_of("\r\n\t :");
					std::string *name = new std::string(n1, 0, pos);
					rdoParse::currParser->addName(name);
					rdoParse::currParser->lexer_setvalue((int)name);
					return IDENTIF_COLON;
				}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 248 ".\\parser.l"
{
					std::string *name = new std::string(YYText());
					rdoParse::currParser->addName(name);
					rdoParse::currParser->lexer_setvalue((int)name);
					return IDENTIF;
				}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 255 ".\\parser.l"
ECHO;
	YY_BREAK
#line 2900 "rdolex.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(comment):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 831 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 831 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 830);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 255 ".\\parser.l"

