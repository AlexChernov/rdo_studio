#line 2 "rdolex.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
class istream;
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 136
#define YY_END_OF_BUFFER 137
static yyconst short int yy_acclist[926] =
    {   0,
      122,  122,  137,  136,  126,  136,  135,  136,  136,  127,
      136,  127,  136,  127,  136,  130,  136,  127,  136,  127,
      136,  135,  136,  135,  136,  135,  136,  135,  136,  135,
      136,  135,  136,  135,  136,  135,  136,  135,  136,  135,
      136,  135,  136,  135,  136,  135,  136,  135,  136,  135,
      136,  135,  136,  135,  136,  135,  136,  135,  136,  135,
      136,  135,  136,  135,  136,  135,  136,  135,  136,  135,
      136,  135,  136,  135,  136,  135,  136,  135,  136,  135,
      136,  135,  136,  121,  136,  122,  136,  123,  136,  124,
      136,  126,  135,  134,  135,  135,  135,  135,  135,  135,

      135,  135,  135,  135,  135,  120,  119,  130,    9,  129,
       32,   31,   33,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,   94,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,   36,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  125,  122,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  128,  129,  135,  135,  135,  135,  135,  135,  135,

      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,   95,
      135,  135,  135,   37,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,    6,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  129,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,   44,  135,  135,  135,  135,  135,  135,  135,

      135,  135,  135,  135,  135,   81,  135,  107,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,   51,  135,  135,  135,  135,  135,  115,  135,   19,
      135,  135,  135,  135,  135,  135,    5,  135,  113,  135,
       41,  135,  135,  135,  103,  135,  135,  135,  135,  109,
      135,  135,  135,  135,  135,  135,  135,  135,  131,  135,
      135,   14,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,   49,
      135,   16,  135,  135,  135,  135,  135,  135,  135,   46,
      135,   27,  135,  135,  135,  135,  135,  135,  135,  135,

      135,  135,  135,  135,  135,  135,  135,   98,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
       52,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  112,  135,  135,  135,   18,  135,  135,   11,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  104,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,   50,
      135,  135,   45,  135,  135,  135,  135,  135,  135,  135,
       82,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  118,  135,  135,  111,  135,

      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
       24,  135,  135,  135,  114,  135,   86,  135,  135,  135,
      135,  135,  117,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,   29,
      135,  135,  135,  135,   83,  135,  135,   34,  135,  135,
      135,  135,  135,  135,  135,  135,  105,  135,  135,  135,
      135,  135,  135,  135,  135,  135,   25,  135,  116,  135,
      135,  135,  135,  135,    4,  135,  135,  135,  135,  135,
      135,    8,  135,  135,  135,  135,  135,  135,   22,  135,

      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,   38,  135,
       97,  135,  135,  135,   60,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,   48,  135,   47,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  108,  135,  135,  135,   42,
      135,   12,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,   57,  135,   58,  135,
      135,  135,  135,  135,   13,  135,  135,  135,   15,  135,
      135,  135,  135,  135,   21,  135,  135,   84,  135,  135,

      135,  135,  135,  135,  135,  135,  135,   28,  135,  135,
      135,  135,  135,  135,   73,  135,   75,  135,  135,  135,
      135,  135,  135,  135,  135,  135,   65,  135,  135,   39,
      135,    2,  135,    7,  135,   89,  135,  135,  135,  135,
      135,  135,   61,  135,  135,  135,  135,  133,  135,  135,
      135,   90,  135,  135,  135,  135,  135,  135,  135,   10,
      135,  135,  135,  135,  135,  135,  135,  135,   69,  135,
      135,   66,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,   72,  135,  135,  135,  135,  135,   87,  135,
       88,  135,  135,  135,  135,  135,  135,  135,   96,  135,

      135,  135,  135,  135,   59,  135,    3,  135,  135,  135,
      135,   80,  135,  135,  135,   54,  135,  135,  135,  135,
       30,  135,   68,  135,  135,  135,  135,  135,  135,  135,
      135,   17,  135,   26,  135,   23,  135,  135,  110,  135,
      100,  102,  135,  135,   63,  135,   62,  135,   64,  135,
      135,  135,  135,   92,  135,  135,  135,  135,   20,   35,
      135,  135,  135,   55,  135,   74,  135,  135,   71,  135,
      135,  135,   79,  135,  135,  135,  135,   99,  101,  135,
      106,  135,   93,  135,  135,  135,  135,  135,   53,  135,
       56,  135,   67,  135,   76,  135,  135,   78,  135,  135,

      135,  135,  135,    1,  135,  135,   70,  135,  135,  135,
       85,  135,  135,   91,  135,   77,  135,   40,  135,  135,
      135,  135,  132,   43,  135
    } ;

static yyconst short int yy_accept[807] =
    {   0,
        1,    1,    1,    2,    3,    4,    5,    7,    9,   10,
       12,   14,   16,   18,   20,   22,   24,   26,   28,   30,
       32,   34,   36,   38,   40,   42,   44,   46,   48,   50,
       52,   54,   56,   58,   60,   62,   64,   66,   68,   70,
       72,   74,   76,   78,   80,   82,   84,   86,   88,   90,
       92,   93,   93,   94,   95,   96,   97,   98,   99,  100,
      101,  102,  103,  104,  105,  106,  106,  107,  108,  109,
      110,  111,  112,  113,  114,  115,  116,  117,  118,  119,
      120,  121,  122,  123,  124,  125,  126,  128,  129,  130,
      131,  132,  133,  134,  135,  136,  137,  138,  139,  140,

      141,  142,  143,  144,  145,  146,  147,  148,  149,  150,
      151,  152,  153,  154,  155,  156,  158,  159,  160,  161,
      162,  163,  164,  165,  166,  167,  168,  169,  170,  171,
      172,  173,  173,  174,  175,  175,  175,  176,  177,  178,
      179,  180,  181,  182,  183,  184,  185,  186,  187,  188,
      189,  190,  191,  192,  193,  194,  194,  195,  196,  197,
      198,  199,  200,  201,  202,  203,  204,  205,  206,  207,
      208,  209,  210,  211,  212,  213,  214,  215,  216,  217,
      218,  219,  220,  222,  223,  224,  226,  227,  228,  229,
      230,  231,  232,  233,  234,  235,  236,  237,  238,  239,

      240,  241,  242,  243,  244,  245,  246,  247,  248,  249,
      250,  251,  252,  253,  254,  255,  256,  257,  258,  259,
      260,  261,  261,  261,  262,  263,  264,  265,  266,  267,
      269,  270,  271,  272,  273,  274,  275,  276,  277,  278,
      279,  280,  281,  282,  282,  283,  284,  285,  286,  287,
      288,  289,  290,  291,  292,  293,  295,  296,  297,  298,
      299,  300,  301,  302,  303,  304,  305,  306,  308,  310,
      311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
      321,  322,  324,  325,  326,  327,  328,  330,  332,  333,
      334,  335,  336,  337,  339,  341,  343,  344,  345,  347,

      348,  349,  350,  352,  353,  354,  355,  356,  357,  358,
      359,  359,  360,  361,  362,  364,  365,  366,  367,  368,
      369,  370,  371,  372,  373,  374,  375,  376,  377,  378,
      379,  380,  382,  384,  385,  386,  387,  388,  389,  390,
      392,  394,  395,  396,  397,  398,  399,  400,  401,  402,
      403,  404,  405,  406,  407,  408,  410,  411,  412,  413,
      414,  415,  416,  417,  418,  419,  420,  421,  423,  424,
      425,  426,  427,  428,  429,  430,  431,  432,  433,  435,
      436,  437,  439,  440,  442,  443,  444,  445,  446,  447,
      448,  448,  449,  450,  451,  452,  453,  454,  455,  457,

      458,  459,  460,  461,  462,  463,  464,  465,  466,  467,
      468,  469,  470,  472,  473,  475,  476,  477,  478,  479,
      480,  481,  483,  484,  485,  486,  487,  488,  489,  490,
      491,  492,  493,  494,  495,  496,  498,  499,  501,  502,
      503,  504,  505,  506,  507,  508,  509,  510,  511,  513,
      514,  515,  517,  519,  520,  521,  522,  523,  525,  526,
      526,  527,  528,  529,  529,  530,  531,  532,  533,  534,
      535,  536,  537,  538,  539,  540,  541,  542,  543,  544,
      545,  546,  547,  548,  549,  550,  552,  553,  554,  555,
      557,  558,  560,  561,  562,  563,  564,  565,  566,  567,

      569,  570,  571,  572,  573,  574,  575,  576,  577,  579,
      581,  582,  583,  584,  585,  587,  588,  589,  590,  591,
      592,  594,  595,  596,  597,  598,  599,  601,  601,  601,
      602,  603,  604,  605,  606,  607,  608,  609,  609,  610,
      611,  612,  613,  614,  615,  616,  617,  618,  619,  621,
      623,  624,  625,  627,  628,  629,  630,  631,  632,  633,
      634,  635,  636,  638,  640,  641,  642,  643,  644,  645,
      646,  647,  648,  649,  650,  651,  652,  653,  654,  655,
      656,  658,  659,  660,  662,  664,  665,  666,  667,  668,
      669,  670,  671,  671,  671,  672,  673,  674,  675,  676,

      677,  679,  681,  681,  682,  683,  684,  685,  687,  688,
      689,  691,  692,  693,  694,  695,  697,  698,  700,  701,
      702,  703,  704,  705,  706,  707,  708,  710,  711,  712,
      713,  714,  715,  717,  719,  720,  721,  722,  723,  724,
      725,  726,  727,  729,  730,  732,  734,  736,  738,  739,
      740,  741,  741,  741,  742,  743,  745,  746,  747,  748,
      749,  750,  751,  752,  754,  755,  756,  757,  758,  759,
      760,  762,  763,  764,  765,  766,  767,  768,  769,  771,
      772,  774,  775,  776,  777,  778,  779,  780,  781,  782,
      783,  785,  786,  787,  788,  789,  791,  793,  794,  794,

      794,  795,  796,  797,  798,  799,  799,  801,  802,  803,
      804,  805,  807,  809,  810,  811,  812,  814,  815,  816,
      818,  819,  820,  821,  823,  825,  826,  827,  828,  829,
      830,  831,  832,  834,  836,  838,  839,  841,  842,  842,
      844,  845,  847,  849,  851,  851,  852,  853,  854,  856,
      857,  858,  859,  862,  863,  864,  866,  868,  869,  871,
      872,  873,  875,  876,  877,  878,  879,  881,  881,  883,
      885,  886,  887,  888,  889,  891,  893,  895,  897,  898,
      900,  901,  902,  902,  903,  904,  906,  907,  909,  910,
      911,  911,  913,  914,  916,  918,  920,  920,  921,  921,

      922,  922,  923,  924,  926,  926
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    4,    1,    1,    5,    6,
        6,    6,    7,    6,    7,    8,    6,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   10,    1,   11,
       12,   13,    1,    1,   14,   15,   16,   17,   18,   19,
       20,   20,   21,   20,   22,   20,   23,   24,   25,   26,
       20,   27,   28,   29,   20,   20,   20,   20,   30,   31,
        6,    1,    6,    1,   32,    1,   33,   34,   35,   36,

       37,   38,   39,   40,   41,   20,   42,   43,   44,   45,
       46,   47,   48,   49,   50,   51,   52,   53,   54,   55,
       56,   20,   57,    1,   58,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   20,    1,    1,    1,    1,    1,    1,
        1,   20,   20,   20,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20
    } ;

static yyconst int yy_meta[59] =
    {   0,
        1,    2,    3,    2,    1,    1,    1,    1,    2,    2,
        1,    1,    1,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    1,    4
    } ;

static yyconst short int yy_base[811] =
    {   0,
        0,    0,   56,   57,  262, 3875,   59,  114,   60, 3875,
      252,  251,   58,   56,  245,   68,   70,   72,   74,   89,
       99,   83,  101,  124,  148,   85,  150,  154,  159,  163,
      172,  176,  186,  197,  202,  207,  182,  212,  222,  227,
      236,  238,  250,  240,  253,  264,  196,    0, 3875, 3875,
       87,  279,  290, 3875,  292,  304,  306,  308,  310,  320,
      323,  329,  338,  344,  354,   76,   91, 3875,   89, 3875,
      350, 3875, 3875, 3875,  332,  364,  341,  380,  383,  386,
      396,  401,  405,  410,  414,  428,  430,  434,  443,  445,
      455,  457,  466,  468,  478,  480,  484,  494,  496,  499,

      505,  510,  516,  521,  525,  534,  530,  540,  543,  549,
      552,  555,  564,  566,  568,  570,  580,  585,  589,  594,
      610,  600,  615,  625,  628,  637,  639,  643,  648,  653,
      663,  191,  187,    0,  190,  196,  665,  667,  676,  680,
      685,  691,  695,  697,  707,  716,  719,  729,  731,  734,
      740,  744,  746, 3875,  454,   99,  755,  757,  759,  761,
      770,  774,  776,  793,  795,  798,  807,  809,  811,  822,
      826,  831,  828,  837,  853,  862,  865,  867,  871,  876,
      880,  882,  885,  898,  904,  908,  910,  913,  919,  928,
      930,  932,  934,  945,  949,  954,  959,  965,  968,  977,

      982,  991, 1000, 1004, 1006, 1009, 1015, 1019, 1021, 1024,
     1034, 1036, 1048, 1051, 1057, 1060, 1076, 1072, 1078, 1082,
     1087,  210,  169, 1091, 1097, 1101, 1111, 1113, 1123, 1126,
     1132, 1135, 1138, 1141, 1144, 1150, 1159, 1168, 1164, 1178,
     1181, 1183, 1194,  209,  207, 1196, 1205, 1209, 1211, 1225,
     1230, 1234, 1239, 1249, 1254, 1263, 1265, 1267, 1276, 1282,
     1285, 1296, 1294, 1291, 1309, 1314, 1319, 1300, 1323, 1336,
     1346, 1348, 1351, 1357, 1360, 1362, 1366, 1371, 1376, 1380,
     1389, 1386, 1392, 1395, 1407, 1409, 1412, 1423, 1425, 1427,
     1437, 1439, 1441, 1451, 1454, 1456, 1465, 1475, 1477, 1479,

     1481, 1490, 1492, 1494, 1496, 1505, 1511, 1514, 1520, 1517,
      171, 3875, 1523, 1532, 1535, 1537, 1551, 1553, 1556, 1565,
     1570, 1575, 1579, 1581, 1584, 1593, 1595, 1598, 1608, 1612,
     1621, 1617, 1626, 1630, 1632, 1635, 1652, 1655, 1657, 1666,
     1669, 1672, 1681, 1685, 1683, 1695, 1697, 1699, 1708, 1717,
     1720, 1723, 1732, 1734, 1736, 1745, 1748, 1754, 1757, 1759,
     1768, 1772, 1791, 1793, 1796, 1805, 1807, 1809, 1818, 1820,
     1822, 1824, 1837, 1839, 1848, 1854, 1858, 1863, 1872, 1875,
     1877, 1886, 1890, 1892, 1896, 1906, 1909, 1915, 1918, 1920,
      169, 1924, 1930, 1934, 1939, 1949, 1951, 1953, 1964, 1966,

     1968, 1977, 1986, 1991, 1995, 2000, 2006, 2010, 2015, 2019,
     2021, 2030, 2024, 2034, 2036, 2049, 2051, 2062, 2064, 2067,
     2073, 2076, 2078, 2088, 2091, 2100, 2102, 2106, 2115, 2117,
     2120, 2131, 2133, 2136, 2142, 2147, 2151, 2165, 2169, 2171,
     2180, 2183, 2186, 2189, 2195, 2204, 2201, 2207, 2213, 2216,
     2228, 2231, 2233, 2243, 2246, 2249, 2252, 2258, 2261, 2264,
     2270, 2273, 2284,  152, 2267, 2299, 2305, 2309, 2325, 2327,
     2329, 2331, 2341, 2343, 2345, 2354, 2356, 2358, 2369, 2373,
     2382, 2385, 2395, 2397, 2400, 2410, 2412, 2414, 2423, 2427,
     2432, 2436, 2441, 2447, 2452, 2457, 2461, 2470, 2472, 2475,

     2484, 2486, 2497, 2501, 2503, 2506, 2512, 2515, 2521, 2524,
     2526, 2530, 2539, 2541, 2544, 2556, 2558, 2560, 2562, 2573,
     2576, 2582, 2585, 2588, 2597, 2599, 2601,  156,  156, 2603,
     2612, 2614, 2617, 2623, 2627, 2632, 2643,  144, 2648, 2660,
     2654, 2663, 2665, 2669, 2674, 2680, 2689, 2691, 2694, 2700,
     2703, 2705, 2716, 2719, 2721, 2730, 2735, 2741, 2745, 2747,
     2757, 2759, 2761, 2770, 2781, 2783, 2785, 2796, 2802, 2805,
     2807, 2811, 2817, 2820, 2831, 2833, 2835, 2844, 2848, 2858,
     2860, 2869, 2871, 2873, 2882, 2884, 2888, 2893, 2898, 2902,
     2907, 2911,  130,  142, 2913, 2922, 2916, 2928, 2934, 2940,

     2943, 2949,  135, 2953, 2966, 2968, 2970, 2972, 2982, 2984,
     2986, 2995, 2997, 2999, 3001, 3010, 3019, 3022, 3024, 3033,
     3035, 3039, 3050, 3054, 3056, 3060, 3065, 3071, 3075, 3077,
     3086, 3091, 3096, 3101, 3106, 3119, 3121, 3123, 3132, 3134,
     3137, 3143, 3146, 3152, 3155, 3157, 3161, 3171, 3175, 3177,
     3186,  131,  121, 3191, 3189, 3195, 3200, 3204, 3206,  133,
     3209, 3215, 3219, 3230, 3234, 3236, 3239, 3250, 3254, 3259,
     3269, 3272, 3274, 3283, 3288, 3285, 3294, 3299, 3304, 3309,
     3313, 3326, 3330, 3335, 3341, 3345, 3347, 3350, 3356, 3360,
     3362, 3371, 3377, 3380, 3390, 3386, 3392, 3402,  114,  110,

     3405, 3407, 3416, 3418, 3422,  152, 3427, 3431, 3436, 3433,
     3442, 3447, 3458, 3460, 3462, 3471, 3474, 3483, 3485, 3489,
     3498, 3500, 3502, 3504, 3513, 3517, 3522, 3526, 3528, 3537,
     3532, 3542, 3546, 3551, 3555, 3564, 3570, 3875,  109, 3575,
     3579, 3581, 3584, 3590,   79, 3593, 3595, 3599, 3604, 3608,
     3610, 3619, 3621, 3623, 3625, 3634, 3636, 3640, 3645, 3649,
     3651, 3660, 3662, 3664, 3677, 3875, 3679,  107, 3681, 3690,
     3693, 3699, 3705, 3708, 3710, 3714, 3719, 3723, 3725, 3729,
     3734, 3738,   70, 3747, 3749, 3753, 3758, 3762, 3767, 3764,
       74, 3777, 3779, 3782, 3792, 3797,   55, 3803,   44, 3806,

       27, 3808, 3875, 3817, 3875, 3858, 3861, 3864, 3868, 3872
    } ;

static yyconst short int yy_def[811] =
    {   0,
      805,    1,  806,  806,  805,  805,  805,  807,  808,  805,
      805,  805,  805,  805,  805,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  809,  810,  805,  805,
      805,  805,  807,  805,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  808,  808,  805,  805,  805,
      805,  805,  805,  805,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,

      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  809,  809,  810,  805,  805,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  805,  805,  805,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,

      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  805,  805,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  805,  805,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,

      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      805,  805,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      805,  807,  807,  807,  807,  807,  807,  807,  807,  807,

      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  805,
      807,  807,  807,  805,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,

      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  805,  805,  807,
      807,  807,  807,  807,  807,  807,  807,  805,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  805,  805,  807,  807,  807,  807,  807,  807,

      807,  807,  805,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  805,  805,  807,  807,  807,  807,  807,  807,  805,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  805,  805,

      807,  807,  807,  807,  807,  805,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  805,  805,  807,
      807,  807,  807,  807,  805,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  805,  807,  805,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  805,  807,  807,  807,  807,  807,  807,  807,
      805,  807,  807,  807,  807,  807,  805,  807,  805,  807,

      805,  807,  805,  807,    0,  805,  805,  805,  805,  805
    } ;

static yyconst short int yy_nxt[3934] =
    {   0,
        6,    7,    7,    8,    9,   10,   11,   12,   13,    6,
       14,   10,   15,   16,   17,   18,   19,   20,   21,   19,
       19,   22,   23,   24,   25,   19,   26,   27,   28,   29,
       19,   19,   30,   31,   19,   19,   32,   33,   34,   19,
       35,   36,   37,   19,   38,   39,   40,   19,   41,   42,
       43,   44,   45,   46,   19,   19,   47,    6,   49,   49,
       51,   51,   67,  803,   68,   71,   69,   72,   73,   52,
       52,   52,   52,   52,   52,   52,   52,   54,   67,   54,
       68,   54,  801,   54,   52,   52,   52,   52,   51,   51,
       52,   52,   54,   67,   54,   68,   71,   69,   54,  799,

       52,   52,   52,   52,   77,  244,  797,  245,   54,  791,
       54,   78,   75,   50,   50,   52,   52,   79,   76,   85,
       80,   90,  783,   54,  768,   52,   52,   55,   56,   57,
       58,   59,   60,   54,  706,  706,   91,   81,   61,   62,
       63,   64,   65,   82,   83,  766,   86,   84,   87,   52,
       52,   52,   52,  706,  706,   52,   52,   54,  739,   54,
       52,   52,  738,   54,   52,   52,  700,  699,   54,   88,
       92,  660,   54,   52,   52,  745,   98,   52,   52,  653,
      652,   54,  603,   52,   52,   54,   93,   52,   52,   94,
       96,   54,  594,  593,   89,   54,  538,   99,   52,   52,

       95,  464,   97,   52,   52,  100,   54,  101,   52,   52,
      391,   54,  102,   52,   52,  245,   54,  245,  104,  312,
      105,   54,  113,   52,   52,  311,  107,  103,   52,   52,
      106,   54,  223,  109,  108,  222,   54,   52,   52,   52,
       52,   52,   52,  112,  133,   54,  110,   54,  133,   54,
      111,   52,   52,  133,   52,   52,   74,  114,   70,   54,
       69,  805,   54,  117,  805,   52,   52,  118,  115,  121,
      116,  805,  119,   54,  122,  805,  805,  805,  805,  805,
       52,   52,  125,  123,  128,  129,  126,  120,   54,  124,
      805,   52,   52,   52,   52,  805,  130,  805,  127,   54,

      805,   54,  135,  805,  131,   52,   52,   52,   52,   52,
       52,   52,   52,   54,  805,   54,  805,   54,  805,   54,
      805,   52,   52,  805,   52,   52,  137,  805,  136,   54,
       52,   52,   54,   52,   52,  805,  138,  805,   54,   52,
       52,   54,   52,   52,  141,   52,   52,   54,  805,  139,
       54,  140,  805,   54,  142,   52,   52,  154,  155,  805,
      805,  147,  143,   54,  805,   52,   52,  156,  144,  146,
      805,  145,  157,   54,  149,  805,  805,  148,  805,  805,
      150,   52,   52,  159,   52,   52,  156,   52,   52,   54,
      151,  805,   54,  805,  152,   54,  805,   52,   52,  805,

      158,  805,   52,   52,  805,   54,   52,   52,  805,  153,
       54,   52,   52,  805,   54,   52,   52,  805,  805,   54,
      805,  805,  162,   54,  805,  160,  805,  161,  163,   52,
       52,   52,   52,  805,  805,   52,   52,   54,  805,   54,
      805,  164,  166,   54,   52,   52,   52,   52,  805,  170,
      167,  805,   54,  165,   54,  805,   52,   52,   52,   52,
      805,  171,  155,  168,   54,  805,   54,   52,   52,   52,
       52,  156,  169,  805,  177,   54,  805,   54,  172,   52,
       52,   52,   52,  805,  173,   52,   52,   54,  805,   54,
      156,  174,  805,   54,  175,   52,   52,   52,   52,  176,

       52,   52,  178,   54,  805,   54,   52,   52,   54,  805,
      180,   52,   52,  179,   54,  805,  182,   52,   52,   54,
      805,  183,   52,   52,  805,   54,   52,   52,  181,  805,
       54,   52,   52,  805,   54,   52,   52,  185,  805,   54,
      186,   52,   52,   54,   52,   52,  184,  188,  805,   54,
       52,   52,   54,   52,   52,  805,   52,   52,   54,  805,
      187,   54,  805,  189,   54,   52,   52,   52,   52,   52,
       52,   52,   52,   54,  805,   54,  190,   54,  192,   54,
      191,   52,   52,  193,  805,  194,   52,   52,  805,   54,
       52,   52,  805,  195,   54,   52,   52,  201,   54,  196,

      197,   52,   52,   54,  203,  805,  805,  805,  199,   54,
      198,   52,   52,  200,  202,  805,   52,   52,  805,   54,
      805,  206,  805,  207,   54,  805,   52,   52,  204,   52,
       52,  805,  210,  205,   54,  805,  208,   54,   52,   52,
       52,   52,  805,  209,   52,   52,   54,  805,   54,   52,
       52,  805,   54,  805,   52,   52,  805,   54,  211,  212,
      805,  213,   54,  805,   52,   52,   52,   52,   52,   52,
      805,  216,   54,  805,   54,  805,   54,   52,   52,  217,
      214,   52,   52,  218,  805,   54,   52,   52,  805,   54,
      219,  215,   52,   52,   54,  805,   52,   52,   52,   52,

       54,  225,  805,  220,   54,  805,   54,  805,   52,   52,
      805,  226,  805,  221,  805,  224,   54,   52,   52,  229,
       52,   52,  805,  227,  228,   54,  230,  231,   54,  232,
       52,   52,   52,   52,  805,   52,   52,  805,   54,  805,
       54,   52,   52,   54,  805,   52,   52,   52,   52,   54,
      805,  233,  234,   54,  805,   54,   52,   52,   52,   52,
       52,   52,   52,   52,   54,  805,   54,  235,   54,  236,
       54,   52,   52,  238,  237,   52,   52,   52,   52,   54,
      239,  240,  805,   54,  805,   54,  805,  242,  241,  247,
      805,  805,  243,  248,   52,   52,   52,   52,  246,   52,

       52,  249,   54,  805,   54,  805,  251,   54,   52,   52,
       52,   52,   52,   52,  805,  805,   54,  805,   54,  805,
       54,  805,  250,   52,   52,  252,  254,   52,   52,   52,
       52,   54,   52,   52,  805,   54,  805,   54,   52,   52,
       54,  255,  253,  805,  805,  257,   54,  805,  261,  805,
      805,  258,  805,  256,   52,   52,  805,  263,  805,  262,
      805,  259,   54,   52,   52,  260,   52,   52,   52,   52,
      805,   54,   52,   52,   54,  805,   54,   52,   52,  805,
       54,   52,   52,   52,   52,   54,   52,   52,  805,   54,
      805,   54,  805,  266,   54,  267,  805,  805,  264,   52,

       52,  805,  268,  805,  265,   52,   52,   54,  805,   52,
       52,   52,   52,   54,   52,   52,  272,   54,  805,   54,
       52,   52,   54,  271,  269,  805,  270,  805,   54,   52,
       52,   52,   52,   52,   52,   52,   52,   54,  273,   54,
      805,   54,  805,   54,  805,  805,   52,   52,  805,  274,
       52,   52,  276,  275,   54,   52,   52,  805,   54,  277,
       52,   52,  805,   54,  805,  281,   52,   52,   54,   52,
       52,  278,  805,  805,   54,  279,  805,   54,   52,   52,
      283,  280,  805,   52,   52,  805,   54,  805,  282,  805,
      284,   54,   52,   52,  805,  285,  805,  805,  286,  805,

       54,   52,   52,  805,  287,   52,   52,   52,   52,   54,
       52,   52,  805,   54,  805,   54,   52,   52,   54,  805,
       52,   52,   52,   52,   54,   52,   52,  288,   54,  805,
       54,  805,  289,   54,  290,   52,   52,   52,   52,  805,
      805,  805,  293,   54,  805,   54,  805,  292,  291,   52,
       52,  294,   52,   52,  805,  296,  805,   54,   52,   52,
       54,   52,   52,  805,  297,  295,   54,  805,  805,   54,
      299,  805,  298,   52,   52,  300,  805,   52,   52,   52,
       52,   54,  805,   52,   52,   54,  805,   54,   52,   52,
      301,   54,   52,   52,  304,  805,   54,  302,   52,   52,

       54,  805,   52,   52,  305,  805,   54,  303,  306,  307,
       54,  805,   52,   52,   52,   52,  309,  805,  805,  805,
       54,  805,   54,  805,   52,   52,  310,   52,   52,  308,
      805,  313,   54,   52,   52,   54,   52,   52,  314,   52,
       52,   54,   52,   52,   54,   52,   52,   54,  317,  805,
       54,   52,   52,   54,  805,  805,  315,  316,  805,   54,
       52,   52,  318,  319,  805,   52,   52,  805,   54,   52,
       52,  805,  322,   54,  320,  805,  324,   54,  321,   52,
       52,  805,   52,   52,   52,   52,  805,   54,  805,  323,
       54,  805,   54,  326,  805,   52,   52,   52,   52,  805,

      325,  805,  805,   54,  327,   54,   52,   52,  805,  328,
       52,   52,   52,   52,   54,  329,  805,  805,   54,  332,
       54,  805,  805,  805,  331,  805,   52,   52,  334,  330,
      333,   52,   52,  805,   54,   52,   52,  805,  805,   54,
       52,   52,  805,   54,  805,  337,  335,  805,   54,  805,
       52,   52,  805,  805,  805,   52,   52,  805,   54,  805,
      336,  338,  342,   54,   52,   52,   52,   52,   52,   52,
      340,  805,   54,  805,   54,  805,   54,   52,   52,  805,
      339,  805,  805,   52,   52,   54,   52,   52,  805,  341,
      343,   54,   52,   52,   54,   52,   52,   52,   52,  805,

       54,   52,   52,   54,  805,   54,  805,  344,  346,   54,
       52,   52,  347,  350,  351,   52,   52,  345,   54,  805,
       52,   52,  805,   54,   52,   52,  805,  348,   54,  805,
      352,  805,   54,  805,  805,  805,  356,   52,   52,  349,
      805,  355,  353,  805,  805,   54,  805,   52,   52,   52,
       52,  354,   52,   52,  357,   54,  805,   54,   52,   52,
       54,   52,   52,   52,   52,  805,   54,   52,   52,   54,
      805,   54,   52,   52,  805,   54,  358,   52,   52,  805,
       54,   52,   52,  805,  360,   54,  359,   52,   52,   54,
       52,   52,  363,   52,   52,   54,   52,   52,   54,  805,

      805,   54,  364,  361,   54,  362,  805,  366,   52,   52,
       52,   52,  365,   52,   52,  805,   54,  805,   54,  805,
      367,   54,  805,  369,   52,   52,   52,   52,   52,   52,
      368,  805,   54,  371,   54,  805,   54,  805,   52,   52,
       52,   52,   52,   52,  370,  372,   54,  805,   54,  805,
       54,  805,   52,   52,  373,   52,   52,   52,   52,  375,
       54,  805,  805,   54,  805,   54,   52,   52,  805,  376,
      805,  377,  805,  374,   54,  378,   52,   52,   52,   52,
       52,   52,   52,   52,   54,  805,   54,  805,   54,  805,
       54,   52,   52,   52,   52,   52,   52,   52,   52,   54,

      805,   54,  805,   54,  805,   54,   52,   52,  805,  380,
      381,  379,   52,   52,   54,   52,   52,  382,   52,   52,
       54,   52,   52,   54,   52,   52,   54,  805,  805,   54,
      384,  805,   54,   52,   52,  383,   52,   52,   52,   52,
      805,   54,  805,  805,   54,  385,   54,  805,  390,  386,
      388,  805,   52,   52,   52,   52,  387,   52,   52,  389,
       54,  805,   54,  393,  805,   54,   52,   52,  805,  394,
      805,   52,   52,  805,   54,  392,   52,   52,  805,   54,
       52,   52,   52,   52,   54,   52,   52,  805,   54,  805,
       54,  395,  805,   54,   52,   52,   52,   52,  805,   52,

       52,  805,   54,  396,   54,  397,  399,   54,  805,   52,
       52,  401,  805,   52,   52,  805,  398,   54,   52,   52,
      403,   54,   52,   52,  402,  400,   54,   52,   52,  404,
       54,   52,   52,   52,   52,   54,   52,   52,  805,   54,
      805,   54,  805,  805,   54,  805,  805,  405,  408,  406,
      407,  805,  409,   52,   52,  805,   52,   52,   52,   52,
      805,   54,  805,  411,   54,  805,   54,   52,   52,  805,
       52,   52,  805,   52,   52,   54,  805,  412,   54,  805,
      410,   54,   52,   52,   52,   52,   52,   52,  413,  805,
       54,  805,   54,  415,   54,  805,   52,   52,   52,   52,

       52,   52,  805,  414,   54,  805,   54,  805,   54,   52,
       52,  805,  417,  805,  416,  805,  418,   54,   52,   52,
      805,   52,   52,  805,   52,   52,   54,  805,  419,   54,
      805,  421,   54,   52,   52,   52,   52,   52,   52,  420,
      805,   54,  805,   54,  805,   54,   52,   52,  423,   52,
       52,  805,  422,  805,   54,   52,   52,   54,   52,   52,
       52,   52,  805,   54,  805,  425,   54,  805,   54,   52,
       52,  424,  805,   52,   52,  426,  805,   54,  805,  805,
      427,   54,  805,  805,  428,  805,  429,  805,  430,  805,
      435,  431,   52,   52,   52,   52,  432,   52,   52,  805,

       54,  434,   54,  433,  436,   54,   52,   52,   52,   52,
       52,   52,  437,  805,   54,  805,   54,  805,   54,   52,
       52,   52,   52,   52,   52,   52,   52,   54,  805,   54,
      805,   54,  805,   54,  805,  805,  805,  438,   52,   52,
       52,   52,  439,  442,  805,  440,   54,  805,   54,   52,
       52,  805,  444,  441,  443,   52,   52,   54,  445,   52,
       52,  805,  805,   54,   52,   52,  805,   54,  805,  447,
      805,  448,   54,   52,   52,  446,   52,   52,   52,   52,
      805,   54,  805,  805,   54,  805,   54,   52,   52,  805,
      449,   52,   52,   52,   52,   54,  805,   52,   52,   54,

      805,   54,  451,  805,  450,   54,  805,   52,   52,  454,
       52,   52,  805,  452,  453,   54,  460,  460,   54,   52,
       52,   52,   52,  456,   54,   52,   52,   54,  805,   54,
      805,   52,   52,   54,  805,   52,   52,  805,  455,   54,
       52,   52,  457,   54,  458,  805,  461,  805,   54,  462,
       52,   52,   52,   52,   52,   52,  805,  459,   54,  805,
       54,  805,   54,  463,  465,   52,   52,   52,   52,   52,
       52,  805,  805,   54,  805,   54,  466,   54,   52,   52,
      805,  469,  467,  805,  805,  471,   54,   52,   52,  468,
      805,  470,   52,   52,  805,   54,   52,   52,  805,  805,

       54,   52,   52,  805,   54,  805,  472,   52,   52,   54,
      805,   52,   52,  474,  805,   54,   52,   52,  473,   54,
       52,   52,   52,   52,   54,   52,   52,  477,   54,  805,
       54,   52,   52,   54,  475,   52,   52,   52,   52,   54,
      476,  805,  805,   54,  805,   54,  805,  805,  478,  481,
       52,   52,   52,   52,  480,  805,  479,  805,   54,  482,
       54,  805,  484,   52,   52,   52,   52,  483,   52,   52,
      805,   54,  805,   54,   52,   52,   54,   52,   52,   52,
       52,  805,   54,  805,  485,   54,  805,   54,  487,   52,
       52,  486,   52,   52,  805,  488,  805,   54,  805,  805,

       54,   52,   52,   52,   52,  491,  489,   52,   52,   54,
      805,   54,  490,  805,  492,   54,   52,   52,   52,   52,
      805,   52,   52,  805,   54,  805,   54,  493,  494,   54,
      805,  496,   52,   52,   52,   52,  497,   52,   52,  495,
       54,  805,   54,   52,   52,   54,  805,  499,   52,   52,
      805,   54,   52,   52,  500,  498,   54,  805,  805,  505,
       54,  805,  805,  502,  805,  501,   52,   52,  504,  506,
       52,   52,   52,   52,   54,  805,  805,  805,   54,  507,
       54,   52,   52,  503,   52,   52,  805,   52,   52,   54,
       52,   52,   54,  805,  805,   54,   52,   52,   54,  805,

      805,  508,   52,   52,   54,   52,   52,  510,   52,   52,
       54,  805,  511,   54,   52,   52,   54,   52,   52,  509,
      805,  805,   54,  805,  805,   54,  805,  512,  513,   52,
       52,  514,   52,   52,   52,   52,  805,   54,  805,  805,
       54,  518,   54,  515,   52,   52,  516,   52,   52,  517,
       52,   52,   54,   52,   52,   54,  519,  805,   54,   52,
       52,   54,   52,   52,  520,  460,  460,   54,   52,   52,
       54,   52,   52,   54,   52,   52,   54,  805,  522,   54,
      805,  523,   54,  805,  526,   52,   52,  135,  805,  805,
      805,  805,  521,   54,  805,  805,  528,  529,  524,  525,

       52,   52,  530,  531,  527,  805,   52,   52,   54,  805,
       52,   52,  805,  136,   54,  805,  536,  539,   54,  532,
      533,  805,  534,  805,  537,  535,   52,   52,   52,   52,
       52,   52,   52,   52,   54,  805,   54,  805,   54,  540,
       54,  541,   52,   52,   52,   52,   52,   52,  805,  542,
       54,  805,   54,  805,   54,   52,   52,   52,   52,   52,
       52,  805,  805,   54,  805,   54,  805,   54,  805,  543,
       52,   52,  544,  805,   52,   52,  546,  805,   54,  545,
      805,  547,   54,   52,   52,  805,   52,   52,  805,  549,
      805,   54,  552,  548,   54,  805,   52,   52,   52,   52,

      551,   52,   52,  550,   54,  805,   54,  554,  805,   54,
      805,   52,   52,   52,   52,   52,   52,  805,  553,   54,
      805,   54,  805,   54,   52,   52,  805,  555,   52,   52,
      556,  559,   54,   52,   52,  805,   54,   52,   52,  805,
      557,   54,   52,   52,  805,   54,  805,  558,   52,   52,
       54,  805,  560,   52,   52,  562,   54,  805,   52,   52,
      805,   54,   52,   52,  805,  561,   54,  805,  563,  805,
       54,   52,   52,   52,   52,  805,   52,   52,  805,   54,
      805,   54,  805,  566,   54,   52,   52,   52,   52,  805,
      805,  564,  805,   54,  567,   54,  565,  568,   52,   52,

      805,  569,   52,   52,   52,   52,   54,   52,   52,  805,
       54,  805,   54,   52,   52,   54,   52,   52,  805,  571,
      570,   54,   52,   52,   54,   52,   52,   52,   52,  805,
       54,   52,   52,   54,  805,   54,  572,  573,  805,   54,
       52,   52,   52,   52,  805,   52,   52,  575,   54,  805,
       54,  574,  577,   54,  578,  805,  576,   52,   52,   52,
       52,   52,   52,   52,   52,   54,  805,   54,  805,   54,
      805,   54,  805,  805,   52,   52,  579,   52,   52,  805,
      580,  581,   54,   52,   52,   54,   52,   52,  583,   52,
       52,   54,  582,  584,   54,  805,  585,   54,   52,   52,

       52,   52,   52,   52,   52,   52,   54,  586,   54,  805,
       54,  805,   54,   52,   52,   52,   52,  587,   52,   52,
      805,   54,  805,   54,   52,   52,   54,  589,   52,   52,
      588,  805,   54,   52,   52,  805,   54,  805,  590,  805,
      595,   54,  591,  805,   52,   52,  597,  592,  596,   52,
       52,  805,   54,  805,  805,   52,   52,   54,  805,  600,
      805,   52,   52,   54,   52,   52,   52,   52,  598,   54,
       52,   52,   54,  599,   54,   52,   52,  805,   54,  805,
      805,   52,   52,   54,  805,  606,  601,  602,  604,   54,
       52,   52,   52,   52,  605,   52,   52,  805,   54,  805,

       54,   52,   52,   54,   52,   52,   52,   52,  607,   54,
      610,  805,   54,  609,   54,  608,  805,   52,   52,  805,
       52,   52,   52,   52,  611,   54,  805,  613,   54,  805,
       54,   52,   52,  805,  612,  805,   52,   52,  805,   54,
      805,  615,   52,   52,   54,  805,   52,   52,   52,   52,
       54,  805,  805,  614,   54,  616,   54,  805,   52,   52,
       52,   52,   52,   52,  805,  617,   54,  805,   54,  805,
       54,   52,   52,  805,  618,  619,  805,  620,  621,   54,
      805,  622,   52,   52,   52,   52,   52,   52,  805,  624,
       54,  805,   54,  623,   54,  805,  628,   52,   52,  805,

      625,  805,  626,   52,   52,   54,   52,   52,   52,   52,
      805,   54,   52,   52,   54,  805,   54,  805,   52,   52,
       54,   52,   52,  805,  805,  629,   54,  630,  805,   54,
      805,  627,   52,   52,   52,   52,   52,   52,  805,  631,
       54,  805,   54,  633,   54,   52,   52,  634,  805,   52,
       52,  635,  805,   54,  805,  632,  636,   54,  805,   52,
       52,   52,   52,  805,  805,  638,  637,   54,  805,   54,
       52,   52,   52,   52,   52,   52,  805,  639,   54,  805,
       54,  805,   54,   52,   52,   52,   52,  640,  641,   52,
       52,   54,  805,   54,   52,   52,  805,   54,  642,   52,

       52,  805,   54,   52,   52,  643,  805,   54,   52,   52,
      805,   54,   52,   52,   52,   52,   54,   52,   52,  644,
       54,  805,   54,   52,   52,   54,  805,  805,  645,   52,
       52,   54,  805,  805,  649,   52,   52,   54,  646,  805,
      648,   52,   52,   54,   52,   52,  805,  651,  647,   54,
       52,   52,   54,  650,   52,   52,  805,  805,   54,  655,
      657,  805,   54,  654,  656,  805,  658,   52,   52,   52,
       52,   52,   52,   52,   52,   54,  805,   54,  805,   54,
      805,   54,  659,   52,   52,   52,   52,   52,   52,  661,
      805,   54,  805,   54,  805,   54,   52,   52,   52,   52,

       52,   52,   52,   52,   54,  805,   54,  805,   54,  805,
       54,   52,   52,  665,  664,  666,  662,  805,  663,   54,
       52,   52,  805,   52,   52,   52,   52,  805,   54,  805,
      669,   54,  670,   54,   52,   52,   52,   52,  805,  667,
       52,   52,   54,  805,   54,  668,  805,  805,   54,  805,
      671,   52,   52,  805,  672,   52,   52,   52,   52,   54,
      805,   52,   52,   54,  674,   54,   52,   52,  673,   54,
      805,  675,   52,   52,   54,  805,   52,   52,   52,   52,
       54,  805,  805,  676,   54,  805,   54,   52,   52,  680,
      679,  677,   52,   52,  805,   54,  681,   52,   52,  805,

       54,  678,   52,   52,  805,   54,  805,   52,   52,  805,
       54,  805,  805,  682,  684,   54,  805,  683,  805,  686,
       52,   52,   52,   52,   52,   52,  685,  805,   54,  805,
       54,  805,   54,   52,   52,   52,   52,  687,   52,   52,
      805,   54,  805,   54,   52,   52,   54,   52,   52,  689,
      688,  805,   54,   52,   52,   54,   52,   52,   52,   52,
      805,   54,   52,   52,   54,  805,   54,  805,  691,  805,
       54,  690,   52,   52,  692,  694,   52,   52,   52,   52,
       54,  805,  805,  695,   54,  805,   54,   52,   52,  693,
       52,   52,   52,   52,  805,   54,   52,   52,   54,  805,

       54,   52,   52,  805,   54,   52,   52,   52,   52,   54,
       52,   52,  805,   54,  805,   54,   52,   52,   54,  805,
       52,   52,  805,  805,   54,  696,  697,  701,   54,  805,
      698,   52,   52,  805,  702,   52,   52,   52,   52,   54,
       52,   52,  805,   54,  703,   54,  805,  805,   54,  805,
      805,   52,   52,  805,  704,   52,   52,  705,  707,   54,
       52,   52,  805,   54,  709,  805,  708,  805,   54,  711,
       52,   52,  805,   52,   52,   52,   52,  805,   54,  805,
      710,   54,  805,   54,   52,   52,   52,   52,  712,   52,
       52,  805,   54,  805,   54,   52,   52,   54,  805,  713,

       52,   52,  714,   54,  805,   52,   52,  805,   54,  715,
       52,   52,  716,   54,   52,   52,  805,  805,   54,  805,
      720,  805,   54,  718,  717,  805,  719,   52,   52,  805,
      721,   52,   52,  805,  805,   54,   52,   52,  805,   54,
      805,  722,   52,   52,   54,  723,   52,   52,   52,   52,
       54,   52,   52,  805,   54,  805,   54,   52,   52,   54,
      805,   52,   52,   52,   52,   54,  725,  805,  724,   54,
      805,   54,   52,   52,  805,  726,  805,  805,   52,   52,
       54,   52,   52,  727,  729,  728,   54,   52,   52,   54,
      730,   52,   52,   52,   52,   54,  731,  805,  805,   54,

      805,   54,  805,   52,   52,  733,   52,   52,   52,   52,
      732,   54,  805,  734,   54,  805,   54,   52,   52,   52,
       52,  805,  735,   52,   52,   54,  736,   54,   52,   52,
      805,   54,   52,   52,   52,   52,   54,   52,   52,  805,
       54,  805,   54,   52,   52,   54,  805,  805,   52,   52,
      805,   54,  737,  740,  743,  741,   54,  805,  744,   52,
       52,   52,   52,   52,   52,  805,  742,   54,  805,   54,
      805,   54,   52,   52,  805,   52,   52,  805,  748,  746,
       54,  805,  747,   54,   52,   52,   52,   52,  805,  805,
       52,   52,   54,  805,   54,  805,  750,  749,   54,   52,

       52,   52,   52,   52,   52,   52,   52,   54,  805,   54,
      805,   54,  805,   54,   52,   52,  805,  751,   52,   52,
      753,  752,   54,   52,   52,  754,   54,   52,   52,   52,
       52,   54,  805,   52,   52,   54,  756,   54,   52,   52,
      805,   54,  755,   52,   52,  805,   54,   52,   52,  805,
      757,   54,   52,   52,  805,   54,   52,   52,  759,  758,
       54,  805,  805,  805,   54,   52,   52,  805,  761,  760,
      764,   52,   52,   54,  762,  763,   52,   52,  805,   54,
       52,   52,   52,   52,   54,   52,   52,  805,   54,  805,
       54,   52,   52,   54,   52,   52,   52,   52,  805,   54,

       52,   52,   54,  805,   54,   52,   52,  805,   54,   52,
       52,   52,   52,   54,  805,  767,  765,   54,  805,   54,
       52,   52,   52,   52,   52,   52,   52,   52,   54,  769,
       54,  805,   54,  805,   54,   52,   52,   52,   52,  771,
      805,   52,   52,   54,  770,   54,   52,   52,  805,   54,
       52,   52,   52,   52,   54,  805,  773,  772,   54,  774,
       54,   52,   52,   52,   52,   52,   52,  775,  805,   54,
      805,   54,  805,   54,  805,  776,  777,  805,   52,   52,
       52,   52,   52,   52,  805,  778,   54,  805,   54,  805,
       54,   52,   52,  779,   52,   52,  805,  805,  780,   54,

       52,   52,   54,  805,  781,  805,   52,   52,   54,   52,
       52,   52,   52,  782,   54,   52,   52,   54,  805,   54,
       52,   52,  805,   54,   52,   52,   52,   52,   54,  805,
       52,   52,   54,  805,   54,   52,   52,  784,   54,   52,
       52,  786,  805,   54,  785,  805,  805,   54,   52,   52,
       52,   52,  805,  787,   52,   52,   54,  805,   54,   52,
       52,  788,   54,   52,   52,   52,   52,   54,   52,   52,
      805,   54,  805,   54,  805,  805,   54,  789,   52,   52,
       52,   52,  790,   52,   52,  805,   54,  805,   54,  805,
      805,   54,  805,   52,   52,  805,  805,  792,   52,   52,

      793,   54,  794,  795,   52,   52,   54,   52,   52,   52,
       52,  805,   54,  805,  796,   54,  805,   54,   52,   52,
      805,  805,  805,  805,  805,  805,   54,  798,  805,  805,
      805,  805,  805,  805,  805,  805,  805,  800,  805,  805,
      805,  805,  802,  805,  805,  805,  805,  805,  805,  805,
      805,  805,  805,  805,  805,  805,  805,  804,   48,   48,
       48,   48,   53,   53,   66,   66,   66,   66,  132,  132,
      805,  132,  134,  134,    5,  805,  805,  805,  805,  805,
      805,  805,  805,  805,  805,  805,  805,  805,  805,  805,
      805,  805,  805,  805,  805,  805,  805,  805,  805,  805,

      805,  805,  805,  805,  805,  805,  805,  805,  805,  805,
      805,  805,  805,  805,  805,  805,  805,  805,  805,  805,
      805,  805,  805,  805,  805,  805,  805,  805,  805,  805,
      805,  805,  805
    } ;

static yyconst short int yy_chk[3934] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    4,
        7,    7,    9,  801,    9,   13,   13,   14,   14,   16,
       16,   17,   17,   18,   18,   19,   19,   16,   66,   17,
       66,   18,  799,   19,   22,   22,   26,   26,   51,   51,
       20,   20,   22,   67,   26,   67,   69,   69,   20,  797,

       21,   21,   23,   23,   18,  156,  791,  156,   21,  783,
       23,   18,   16,    3,    4,    8,    8,   18,   17,   22,
       18,   26,  768,    8,  745,   24,   24,    8,    8,    8,
        8,    8,    8,   24,  660,  660,   26,   20,    8,    8,
        8,    8,    8,   20,   21,  739,   23,   21,   24,   25,
       25,   27,   27,  706,  706,   28,   28,   25,  700,   27,
       29,   29,  699,   28,   30,   30,  653,  652,   29,   24,
       27,  603,   30,   31,   31,  706,   29,   32,   32,  594,
      593,   31,  538,   37,   37,   32,   27,   33,   33,   27,
       28,   37,  529,  528,   25,   33,  464,   30,   34,   34,

       27,  391,   28,   35,   35,   30,   34,   30,   36,   36,
      311,   35,   31,   38,   38,  245,   36,  244,   32,  223,
       32,   38,   37,   39,   39,  222,   33,   31,   40,   40,
       32,   39,  136,   34,   33,  135,   40,   41,   41,   42,
       42,   44,   44,   36,  133,   41,   35,   42,  132,   44,
       35,   43,   43,   47,   45,   45,   15,   38,   12,   43,
       11,    5,   45,   40,    0,   46,   46,   41,   39,   42,
       39,    0,   41,   46,   42,    0,    0,    0,    0,    0,
       52,   52,   43,   42,   44,   45,   43,   41,   52,   42,
        0,   53,   53,   55,   55,    0,   46,    0,   43,   53,

        0,   55,   52,    0,   46,   56,   56,   57,   57,   58,
       58,   59,   59,   56,    0,   57,    0,   58,    0,   59,
        0,   60,   60,    0,   61,   61,   55,    0,   52,   60,
       62,   62,   61,   75,   75,    0,   56,    0,   62,   63,
       63,   75,   77,   77,   58,   64,   64,   63,    0,   56,
       77,   57,    0,   64,   59,   65,   65,   71,   71,    0,
        0,   62,   59,   65,    0,   76,   76,   71,   60,   61,
        0,   60,   75,   76,   63,    0,    0,   62,    0,    0,
       64,   78,   78,   77,   79,   79,   71,   80,   80,   78,
       65,    0,   79,    0,   65,   80,    0,   81,   81,    0,

       76,    0,   82,   82,    0,   81,   83,   83,    0,   65,
       82,   84,   84,    0,   83,   85,   85,    0,    0,   84,
        0,    0,   80,   85,    0,   78,    0,   79,   81,   86,
       86,   87,   87,    0,    0,   88,   88,   86,    0,   87,
        0,   82,   84,   88,   89,   89,   90,   90,    0,   88,
       85,    0,   89,   83,   90,    0,   91,   91,   92,   92,
        0,   88,  155,   86,   91,    0,   92,   93,   93,   94,
       94,  155,   86,    0,   92,   93,    0,   94,   88,   95,
       95,   96,   96,    0,   88,   97,   97,   95,    0,   96,
      155,   89,    0,   97,   90,   98,   98,   99,   99,   91,

      100,  100,   93,   98,    0,   99,  101,  101,  100,    0,
       95,  102,  102,   94,  101,    0,   97,  103,  103,  102,
        0,   98,  104,  104,    0,  103,  105,  105,   96,    0,
      104,  107,  107,    0,  105,  106,  106,  100,    0,  107,
      101,  108,  108,  106,  109,  109,   99,  103,    0,  108,
      110,  110,  109,  111,  111,    0,  112,  112,  110,    0,
      102,  111,    0,  104,  112,  113,  113,  114,  114,  115,
      115,  116,  116,  113,    0,  114,  105,  115,  107,  116,
      106,  117,  117,  108,    0,  108,  118,  118,    0,  117,
      119,  119,    0,  109,  118,  120,  120,  114,  119,  110,

      111,  122,  122,  120,  115,    0,    0,    0,  113,  122,
      112,  121,  121,  113,  114,    0,  123,  123,    0,  121,
        0,  119,    0,  119,  123,    0,  124,  124,  117,  125,
      125,    0,  122,  118,  124,    0,  120,  125,  126,  126,
      127,  127,    0,  121,  128,  128,  126,    0,  127,  129,
      129,    0,  128,    0,  130,  130,    0,  129,  123,  124,
        0,  125,  130,    0,  131,  131,  137,  137,  138,  138,
        0,  127,  131,    0,  137,    0,  138,  139,  139,  127,
      126,  140,  140,  128,    0,  139,  141,  141,    0,  140,
      129,  126,  142,  142,  141,    0,  143,  143,  144,  144,

      142,  138,    0,  130,  143,    0,  144,    0,  145,  145,
        0,  139,    0,  131,    0,  137,  145,  146,  146,  141,
      147,  147,    0,  140,  140,  146,  142,  143,  147,  144,
      148,  148,  149,  149,    0,  150,  150,    0,  148,    0,
      149,  151,  151,  150,    0,  152,  152,  153,  153,  151,
        0,  145,  146,  152,    0,  153,  157,  157,  158,  158,
      159,  159,  160,  160,  157,    0,  158,  147,  159,  147,
      160,  161,  161,  149,  148,  162,  162,  163,  163,  161,
      149,  150,    0,  162,    0,  163,    0,  152,  151,  158,
        0,    0,  153,  159,  164,  164,  165,  165,  157,  166,

      166,  160,  164,    0,  165,    0,  162,  166,  167,  167,
      168,  168,  169,  169,    0,    0,  167,    0,  168,    0,
      169,    0,  161,  170,  170,  163,  165,  171,  171,  173,
      173,  170,  172,  172,    0,  171,    0,  173,  174,  174,
      172,  166,  164,    0,    0,  168,  174,    0,  172,    0,
        0,  169,    0,  167,  175,  175,    0,  174,    0,  173,
        0,  170,  175,  176,  176,  171,  177,  177,  178,  178,
        0,  176,  179,  179,  177,    0,  178,  180,  180,    0,
      179,  181,  181,  182,  182,  180,  183,  183,    0,  181,
        0,  182,    0,  176,  183,  177,    0,    0,  175,  184,

      184,    0,  178,    0,  175,  185,  185,  184,    0,  186,
      186,  187,  187,  185,  188,  188,  182,  186,    0,  187,
      189,  189,  188,  181,  179,    0,  180,    0,  189,  190,
      190,  191,  191,  192,  192,  193,  193,  190,  184,  191,
        0,  192,    0,  193,    0,    0,  194,  194,    0,  185,
      195,  195,  188,  187,  194,  196,  196,    0,  195,  189,
      197,  197,    0,  196,    0,  193,  198,  198,  197,  199,
      199,  190,    0,    0,  198,  191,    0,  199,  200,  200,
      195,  192,    0,  201,  201,    0,  200,    0,  194,    0,
      196,  201,  202,  202,    0,  197,    0,    0,  198,    0,

      202,  203,  203,    0,  199,  204,  204,  205,  205,  203,
      206,  206,    0,  204,    0,  205,  207,  207,  206,    0,
      208,  208,  209,  209,  207,  210,  210,  200,  208,    0,
      209,    0,  201,  210,  202,  211,  211,  212,  212,    0,
        0,    0,  205,  211,    0,  212,    0,  204,  203,  213,
      213,  206,  214,  214,    0,  208,    0,  213,  215,  215,
      214,  216,  216,    0,  209,  207,  215,    0,    0,  216,
      211,    0,  210,  218,  218,  212,    0,  217,  217,  219,
      219,  218,    0,  220,  220,  217,    0,  219,  221,  221,
      213,  220,  224,  224,  216,    0,  221,  214,  225,  225,

      224,    0,  226,  226,  216,    0,  225,  215,  217,  218,
      226,    0,  227,  227,  228,  228,  220,    0,    0,    0,
      227,    0,  228,    0,  229,  229,  221,  230,  230,  219,
        0,  224,  229,  231,  231,  230,  232,  232,  225,  233,
      233,  231,  234,  234,  232,  235,  235,  233,  228,    0,
      234,  236,  236,  235,    0,    0,  226,  227,    0,  236,
      237,  237,  228,  229,    0,  239,  239,    0,  237,  238,
      238,    0,  233,  239,  231,    0,  235,  238,  232,  240,
      240,    0,  241,  241,  242,  242,    0,  240,    0,  234,
      241,    0,  242,  237,    0,  243,  243,  246,  246,    0,

      236,    0,    0,  243,  238,  246,  247,  247,    0,  239,
      248,  248,  249,  249,  247,  239,    0,    0,  248,  242,
      249,    0,    0,    0,  241,    0,  250,  250,  246,  240,
      243,  251,  251,    0,  250,  252,  252,    0,    0,  251,
      253,  253,    0,  252,    0,  249,  247,    0,  253,    0,
      254,  254,    0,    0,    0,  255,  255,    0,  254,    0,
      248,  250,  254,  255,  256,  256,  257,  257,  258,  258,
      252,    0,  256,    0,  257,    0,  258,  259,  259,    0,
      251,    0,    0,  260,  260,  259,  261,  261,    0,  253,
      255,  260,  264,  264,  261,  263,  263,  262,  262,    0,

      264,  268,  268,  263,    0,  262,    0,  257,  259,  268,
      265,  265,  259,  262,  262,  266,  266,  258,  265,    0,
      267,  267,    0,  266,  269,  269,    0,  260,  267,    0,
      263,    0,  269,    0,    0,    0,  267,  270,  270,  261,
        0,  266,  264,    0,    0,  270,    0,  271,  271,  272,
      272,  265,  273,  273,  269,  271,    0,  272,  274,  274,
      273,  275,  275,  276,  276,    0,  274,  277,  277,  275,
        0,  276,  278,  278,    0,  277,  270,  279,  279,    0,
      278,  280,  280,    0,  272,  279,  271,  282,  282,  280,
      281,  281,  275,  283,  283,  282,  284,  284,  281,    0,

        0,  283,  276,  273,  284,  274,    0,  278,  285,  285,
      286,  286,  277,  287,  287,    0,  285,    0,  286,    0,
      279,  287,    0,  281,  288,  288,  289,  289,  290,  290,
      280,    0,  288,  284,  289,    0,  290,    0,  291,  291,
      292,  292,  293,  293,  283,  285,  291,    0,  292,    0,
      293,    0,  294,  294,  286,  295,  295,  296,  296,  290,
      294,    0,    0,  295,    0,  296,  297,  297,    0,  291,
        0,  292,    0,  289,  297,  293,  298,  298,  299,  299,
      300,  300,  301,  301,  298,    0,  299,    0,  300,    0,
      301,  302,  302,  303,  303,  304,  304,  305,  305,  302,

        0,  303,    0,  304,    0,  305,  306,  306,    0,  298,
      300,  297,  307,  307,  306,  308,  308,  301,  310,  310,
      307,  309,  309,  308,  313,  313,  310,    0,    0,  309,
      304,    0,  313,  314,  314,  302,  315,  315,  316,  316,
        0,  314,    0,    0,  315,  305,  316,    0,  310,  306,
      308,    0,  317,  317,  318,  318,  307,  319,  319,  309,
      317,    0,  318,  314,    0,  319,  320,  320,    0,  316,
        0,  321,  321,    0,  320,  313,  322,  322,    0,  321,
      323,  323,  324,  324,  322,  325,  325,    0,  323,    0,
      324,  317,    0,  325,  326,  326,  327,  327,    0,  328,

      328,    0,  326,  318,  327,  319,  321,  328,    0,  329,
      329,  323,    0,  330,  330,    0,  320,  329,  332,  332,
      325,  330,  331,  331,  324,  322,  332,  333,  333,  326,
      331,  334,  334,  335,  335,  333,  336,  336,    0,  334,
        0,  335,    0,    0,  336,    0,    0,  327,  330,  328,
      329,    0,  331,  337,  337,    0,  338,  338,  339,  339,
        0,  337,    0,  335,  338,    0,  339,  340,  340,    0,
      341,  341,    0,  342,  342,  340,    0,  336,  341,    0,
      334,  342,  343,  343,  345,  345,  344,  344,  337,    0,
      343,    0,  345,  339,  344,    0,  346,  346,  347,  347,

      348,  348,    0,  338,  346,    0,  347,    0,  348,  349,
      349,    0,  343,    0,  342,    0,  344,  349,  350,  350,
        0,  351,  351,    0,  352,  352,  350,    0,  345,  351,
        0,  347,  352,  353,  353,  354,  354,  355,  355,  346,
        0,  353,    0,  354,    0,  355,  356,  356,  349,  357,
      357,    0,  348,    0,  356,  358,  358,  357,  359,  359,
      360,  360,    0,  358,    0,  351,  359,    0,  360,  361,
      361,  350,    0,  362,  362,  352,    0,  361,    0,    0,
      353,  362,    0,    0,  354,    0,  355,    0,  357,    0,
      360,  357,  363,  363,  364,  364,  357,  365,  365,    0,

      363,  359,  364,  358,  361,  365,  366,  366,  367,  367,
      368,  368,  362,    0,  366,    0,  367,    0,  368,  369,
      369,  370,  370,  371,  371,  372,  372,  369,    0,  370,
        0,  371,    0,  372,    0,    0,    0,  363,  373,  373,
      374,  374,  364,  367,    0,  365,  373,    0,  374,  375,
      375,    0,  370,  366,  369,  376,  376,  375,  371,  377,
      377,    0,    0,  376,  378,  378,    0,  377,    0,  373,
        0,  374,  378,  379,  379,  372,  380,  380,  381,  381,
        0,  379,    0,    0,  380,    0,  381,  382,  382,    0,
      375,  383,  383,  384,  384,  382,    0,  385,  385,  383,

        0,  384,  377,    0,  376,  385,    0,  386,  386,  381,
      387,  387,    0,  378,  380,  386,  388,  388,  387,  389,
      389,  390,  390,  384,  388,  392,  392,  389,    0,  390,
        0,  393,  393,  392,    0,  394,  394,    0,  383,  393,
      395,  395,  385,  394,  386,    0,  388,    0,  395,  389,
      396,  396,  397,  397,  398,  398,    0,  387,  396,    0,
      397,    0,  398,  390,  392,  399,  399,  400,  400,  401,
      401,    0,    0,  399,    0,  400,  393,  401,  402,  402,
        0,  396,  394,    0,    0,  398,  402,  403,  403,  395,
        0,  397,  404,  404,    0,  403,  405,  405,    0,    0,

      404,  406,  406,    0,  405,    0,  400,  407,  407,  406,
        0,  408,  408,  402,    0,  407,  409,  409,  401,  408,
      410,  410,  411,  411,  409,  413,  413,  405,  410,    0,
      411,  412,  412,  413,  403,  414,  414,  415,  415,  412,
      404,    0,    0,  414,    0,  415,    0,    0,  406,  409,
      416,  416,  417,  417,  408,    0,  407,    0,  416,  410,
      417,    0,  412,  418,  418,  419,  419,  411,  420,  420,
        0,  418,    0,  419,  421,  421,  420,  422,  422,  423,
      423,    0,  421,    0,  414,  422,    0,  423,  417,  424,
      424,  416,  425,  425,    0,  417,    0,  424,    0,    0,

      425,  426,  426,  427,  427,  420,  418,  428,  428,  426,
        0,  427,  419,    0,  421,  428,  429,  429,  430,  430,
        0,  431,  431,    0,  429,    0,  430,  423,  424,  431,
        0,  426,  432,  432,  433,  433,  427,  434,  434,  425,
      432,    0,  433,  435,  435,  434,    0,  429,  436,  436,
        0,  435,  437,  437,  430,  428,  436,    0,    0,  435,
      437,    0,    0,  432,    0,  431,  438,  438,  434,  435,
      439,  439,  440,  440,  438,    0,    0,    0,  439,  435,
      440,  441,  441,  433,  442,  442,    0,  443,  443,  441,
      444,  444,  442,    0,    0,  443,  445,  445,  444,    0,

        0,  437,  447,  447,  445,  446,  446,  440,  448,  448,
      447,    0,  441,  446,  449,  449,  448,  450,  450,  439,
        0,    0,  449,    0,    0,  450,    0,  442,  443,  451,
      451,  444,  452,  452,  453,  453,    0,  451,    0,    0,
      452,  448,  453,  445,  454,  454,  446,  455,  455,  447,
      456,  456,  454,  457,  457,  455,  450,    0,  456,  458,
      458,  457,  459,  459,  451,  460,  460,  458,  465,  465,
      459,  461,  461,  460,  462,  462,  465,    0,  455,  461,
        0,  456,  462,    0,  457,  463,  463,  460,    0,    0,
        0,    0,  454,  463,    0,    0,  460,  460,  456,  456,

      466,  466,  461,  461,  459,    0,  467,  467,  466,    0,
      468,  468,    0,  460,  467,    0,  463,  465,  468,  462,
      462,    0,  462,    0,  463,  462,  469,  469,  470,  470,
      471,  471,  472,  472,  469,    0,  470,    0,  471,  466,
      472,  467,  473,  473,  474,  474,  475,  475,    0,  468,
      473,    0,  474,    0,  475,  476,  476,  477,  477,  478,
      478,    0,    0,  476,    0,  477,    0,  478,    0,  469,
      479,  479,  470,    0,  480,  480,  472,    0,  479,  471,
        0,  473,  480,  481,  481,    0,  482,  482,    0,  475,
        0,  481,  478,  474,  482,    0,  483,  483,  484,  484,

      477,  485,  485,  476,  483,    0,  484,  480,    0,  485,
        0,  486,  486,  487,  487,  488,  488,    0,  479,  486,
        0,  487,    0,  488,  489,  489,    0,  481,  490,  490,
      482,  485,  489,  491,  491,    0,  490,  492,  492,    0,
      483,  491,  493,  493,    0,  492,    0,  484,  494,  494,
      493,    0,  487,  495,  495,  489,  494,    0,  496,  496,
        0,  495,  497,  497,    0,  488,  496,    0,  491,    0,
      497,  498,  498,  499,  499,    0,  500,  500,    0,  498,
        0,  499,    0,  495,  500,  501,  501,  502,  502,    0,
        0,  493,    0,  501,  496,  502,  494,  497,  503,  503,

        0,  498,  504,  504,  505,  505,  503,  506,  506,    0,
      504,    0,  505,  507,  507,  506,  508,  508,    0,  501,
      499,  507,  509,  509,  508,  510,  510,  511,  511,    0,
      509,  512,  512,  510,    0,  511,  502,  503,    0,  512,
      513,  513,  514,  514,    0,  515,  515,  505,  513,    0,
      514,  504,  507,  515,  508,    0,  506,  516,  516,  517,
      517,  518,  518,  519,  519,  516,    0,  517,    0,  518,
        0,  519,    0,    0,  520,  520,  511,  521,  521,    0,
      512,  513,  520,  522,  522,  521,  523,  523,  516,  524,
      524,  522,  514,  517,  523,    0,  518,  524,  525,  525,

      526,  526,  527,  527,  530,  530,  525,  519,  526,    0,
      527,    0,  530,  531,  531,  532,  532,  520,  533,  533,
        0,  531,    0,  532,  534,  534,  533,  523,  535,  535,
      522,    0,  534,  536,  536,    0,  535,    0,  524,    0,
      530,  536,  525,    0,  537,  537,  532,  526,  531,  539,
      539,    0,  537,    0,    0,  541,  541,  539,    0,  535,
        0,  540,  540,  541,  542,  542,  543,  543,  533,  540,
      544,  544,  542,  534,  543,  545,  545,    0,  544,    0,
        0,  546,  546,  545,    0,  541,  536,  537,  539,  546,
      547,  547,  548,  548,  540,  549,  549,    0,  547,    0,

      548,  550,  550,  549,  551,  551,  552,  552,  542,  550,
      545,    0,  551,  544,  552,  543,    0,  553,  553,    0,
      554,  554,  555,  555,  546,  553,    0,  548,  554,    0,
      555,  556,  556,    0,  547,    0,  557,  557,    0,  556,
        0,  552,  558,  558,  557,    0,  559,  559,  560,  560,
      558,    0,    0,  551,  559,  554,  560,    0,  561,  561,
      562,  562,  563,  563,    0,  555,  561,    0,  562,    0,
      563,  564,  564,    0,  556,  557,    0,  558,  559,  564,
        0,  559,  565,  565,  566,  566,  567,  567,    0,  560,
      565,    0,  566,  559,  567,    0,  566,  568,  568,    0,

      561,    0,  562,  569,  569,  568,  570,  570,  571,  571,
        0,  569,  572,  572,  570,    0,  571,    0,  573,  573,
      572,  574,  574,    0,    0,  567,  573,  568,    0,  574,
        0,  565,  575,  575,  576,  576,  577,  577,    0,  569,
      575,    0,  576,  571,  577,  578,  578,  572,    0,  579,
      579,  573,    0,  578,    0,  570,  574,  579,    0,  580,
      580,  581,  581,    0,    0,  576,  575,  580,    0,  581,
      582,  582,  583,  583,  584,  584,    0,  577,  582,    0,
      583,    0,  584,  585,  585,  586,  586,  578,  579,  587,
      587,  585,    0,  586,  588,  588,    0,  587,  580,  589,

      589,    0,  588,  590,  590,  582,    0,  589,  591,  591,
        0,  590,  592,  592,  595,  595,  591,  597,  597,  583,
      592,    0,  595,  596,  596,  597,    0,    0,  586,  598,
      598,  596,    0,    0,  590,  599,  599,  598,  587,    0,
      589,  600,  600,  599,  601,  601,    0,  592,  588,  600,
      602,  602,  601,  591,  604,  604,    0,    0,  602,  596,
      598,    0,  604,  595,  597,    0,  599,  605,  605,  606,
      606,  607,  607,  608,  608,  605,    0,  606,    0,  607,
        0,  608,  600,  609,  609,  610,  610,  611,  611,  604,
        0,  609,    0,  610,    0,  611,  612,  612,  613,  613,

      614,  614,  615,  615,  612,    0,  613,    0,  614,    0,
      615,  616,  616,  609,  607,  610,  605,    0,  606,  616,
      617,  617,    0,  618,  618,  619,  619,    0,  617,    0,
      614,  618,  615,  619,  620,  620,  621,  621,    0,  612,
      622,  622,  620,    0,  621,  613,    0,    0,  622,    0,
      615,  623,  623,    0,  617,  624,  624,  625,  625,  623,
        0,  626,  626,  624,  620,  625,  627,  627,  619,  626,
        0,  621,  628,  628,  627,    0,  629,  629,  630,  630,
      628,    0,    0,  622,  629,    0,  630,  631,  631,  625,
      624,  622,  632,  632,    0,  631,  626,  633,  633,    0,

      632,  623,  634,  634,    0,  633,    0,  635,  635,    0,
      634,    0,    0,  628,  630,  635,    0,  629,    0,  632,
      636,  636,  637,  637,  638,  638,  631,    0,  636,    0,
      637,    0,  638,  639,  639,  640,  640,  635,  641,  641,
        0,  639,    0,  640,  642,  642,  641,  643,  643,  637,
      636,    0,  642,  644,  644,  643,  645,  645,  646,  646,
        0,  644,  647,  647,  645,    0,  646,    0,  639,    0,
      647,  638,  648,  648,  640,  642,  649,  649,  650,  650,
      648,    0,    0,  644,  649,    0,  650,  651,  651,  641,
      655,  655,  654,  654,    0,  651,  656,  656,  655,    0,

      654,  657,  657,    0,  656,  658,  658,  659,  659,  657,
      661,  661,    0,  658,    0,  659,  662,  662,  661,    0,
      663,  663,    0,    0,  662,  649,  650,  654,  663,    0,
      651,  664,  664,    0,  655,  665,  665,  666,  666,  664,
      667,  667,    0,  665,  657,  666,    0,    0,  667,    0,
        0,  668,  668,    0,  658,  669,  669,  659,  661,  668,
      670,  670,    0,  669,  663,    0,  662,    0,  670,  666,
      671,  671,    0,  672,  672,  673,  673,    0,  671,    0,
      665,  672,    0,  673,  674,  674,  676,  676,  667,  675,
      675,    0,  674,    0,  676,  677,  677,  675,    0,  668,

      678,  678,  669,  677,    0,  679,  679,    0,  678,  670,
      680,  680,  672,  679,  681,  681,    0,    0,  680,    0,
      676,    0,  681,  674,  673,    0,  675,  682,  682,    0,
      677,  683,  683,    0,    0,  682,  684,  684,    0,  683,
        0,  678,  685,  685,  684,  680,  686,  686,  687,  687,
      685,  688,  688,    0,  686,    0,  687,  689,  689,  688,
        0,  690,  690,  691,  691,  689,  683,    0,  682,  690,
        0,  691,  692,  692,    0,  684,    0,    0,  693,  693,
      692,  694,  694,  685,  687,  686,  693,  696,  696,  694,
      688,  695,  695,  697,  697,  696,  689,    0,    0,  695,

        0,  697,    0,  698,  698,  692,  701,  701,  702,  702,
      690,  698,    0,  693,  701,    0,  702,  703,  703,  704,
      704,    0,  694,  705,  705,  703,  695,  704,  707,  707,
        0,  705,  708,  708,  710,  710,  707,  709,  709,    0,
      708,    0,  710,  711,  711,  709,    0,    0,  712,  712,
        0,  711,  698,  701,  704,  702,  712,    0,  705,  713,
      713,  714,  714,  715,  715,    0,  703,  713,    0,  714,
        0,  715,  716,  716,    0,  717,  717,    0,  710,  708,
      716,    0,  709,  717,  718,  718,  719,  719,    0,    0,
      720,  720,  718,    0,  719,    0,  714,  711,  720,  721,

      721,  722,  722,  723,  723,  724,  724,  721,    0,  722,
        0,  723,    0,  724,  725,  725,    0,  715,  726,  726,
      718,  716,  725,  727,  727,  719,  726,  728,  728,  729,
      729,  727,    0,  731,  731,  728,  722,  729,  730,  730,
        0,  731,  721,  732,  732,    0,  730,  733,  733,    0,
      723,  732,  734,  734,    0,  733,  735,  735,  727,  726,
      734,    0,    0,    0,  735,  736,  736,    0,  729,  728,
      732,  737,  737,  736,  730,  731,  740,  740,    0,  737,
      741,  741,  742,  742,  740,  743,  743,    0,  741,    0,
      742,  744,  744,  743,  746,  746,  747,  747,    0,  744,

      748,  748,  746,    0,  747,  749,  749,    0,  748,  750,
      750,  751,  751,  749,    0,  741,  736,  750,    0,  751,
      752,  752,  753,  753,  754,  754,  755,  755,  752,  746,
      753,    0,  754,    0,  755,  756,  756,  757,  757,  748,
        0,  758,  758,  756,  747,  757,  759,  759,    0,  758,
      760,  760,  761,  761,  759,    0,  751,  750,  760,  752,
      761,  762,  762,  763,  763,  764,  764,  754,    0,  762,
        0,  763,    0,  764,    0,  755,  758,    0,  765,  765,
      767,  767,  769,  769,    0,  760,  765,    0,  767,    0,
      769,  770,  770,  761,  771,  771,    0,    0,  763,  770,

      772,  772,  771,    0,  764,    0,  773,  773,  772,  774,
      774,  775,  775,  765,  773,  776,  776,  774,    0,  775,
      777,  777,    0,  776,  778,  778,  779,  779,  777,    0,
      780,  780,  778,    0,  779,  781,  781,  771,  780,  782,
      782,  773,    0,  781,  772,    0,    0,  782,  784,  784,
      785,  785,    0,  774,  786,  786,  784,    0,  785,  787,
      787,  779,  786,  788,  788,  790,  790,  787,  789,  789,
        0,  788,    0,  790,    0,    0,  789,  781,  792,  792,
      793,  793,  782,  794,  794,    0,  792,    0,  793,    0,
        0,  794,    0,  795,  795,    0,    0,  784,  796,  796,

      785,  795,  787,  789,  798,  798,  796,  800,  800,  802,
      802,    0,  798,    0,  790,  800,    0,  802,  804,  804,
        0,    0,    0,    0,    0,    0,  804,  793,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  798,    0,    0,
        0,    0,  800,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  802,  806,  806,
      806,  806,  807,  807,  808,  808,  808,  808,  809,  809,
        0,  809,  810,  810,  805,  805,  805,  805,  805,  805,
      805,  805,  805,  805,  805,  805,  805,  805,  805,  805,
      805,  805,  805,  805,  805,  805,  805,  805,  805,  805,

      805,  805,  805,  805,  805,  805,  805,  805,  805,  805,
      805,  805,  805,  805,  805,  805,  805,  805,  805,  805,
      805,  805,  805,  805,  805,  805,  805,  805,  805,  805,
      805,  805,  805
    } ;

#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 ".\\parser.l"
#define INITIAL 0
#line 2 ".\\parser.l"
#include "pch.h"
#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

#include "rdogramma.h"
#include "rdoparser.h"

#define YY_INTERACTIVE

#define YY_USER_INIT {                      \
	rdoParse::currParser->lexer_loc_init(); \
}

#define YY_USER_ACTION {                      \
	rdoParse::currParser->lexer_loc_action(); \
}

#define comment 1

#line 1590 "rdolex.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 26 ".\\parser.l"


#line 1720 "rdolex.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 806 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3875 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 28 ".\\parser.l"
return(Resource_type);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 29 ".\\parser.l"
return(permanent);
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 30 ".\\parser.l"
return(Parameters);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 31 ".\\parser.l"
return(integer);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 32 ".\\parser.l"
return(real);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 33 ".\\parser.l"
return(End);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 34 ".\\parser.l"
return(temporary);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 35 ".\\parser.l"
return(such_as);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 36 ".\\parser.l"
return(dblpoint);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 38 ".\\parser.l"
return(Resources);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 39 ".\\parser.l"
return(trace_keyword);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 40 ".\\parser.l"
return(no_trace);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 42 ".\\parser.l"
return(Constant);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 43 ".\\parser.l"
return(Body);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 44 ".\\parser.l"
return(Function_keyword);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 45 ".\\parser.l"
return(Type_keyword);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 46 ".\\parser.l"
return(algorithmic);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 47 ".\\parser.l"
return(table_keyword);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 48 ".\\parser.l"
return(list_keyword);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 49 ".\\parser.l"
return(Calculate_if);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 50 ".\\parser.l"
return(Sequence);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 51 ".\\parser.l"
return(uniform);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 52 ".\\parser.l"
return(exponential);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 53 ".\\parser.l"
return(normal_keyword);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 54 ".\\parser.l"
return(by_hist);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 55 ".\\parser.l"
return(enumerative);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 57 ".\\parser.l"
return(Exist);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 58 ".\\parser.l"
return(Not_Exist);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 59 ".\\parser.l"
return(For_All);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 60 ".\\parser.l"
return(Not_For_All);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 61 ".\\parser.l"
return(neq);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 62 ".\\parser.l"
return(leq);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 63 ".\\parser.l"
return(geq);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 64 ".\\parser.l"
return(NoCheck);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 65 ".\\parser.l"
return(Calculate_if);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 66 ".\\parser.l"
return(or_keyword);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 67 ".\\parser.l"
return(and_keyword);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 70 ".\\parser.l"
return(Pattern);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 71 ".\\parser.l"
return(operation);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 72 ".\\parser.l"
return(irregular_event);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 73 ".\\parser.l"
return(rule_keyword);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 74 ".\\parser.l"
return(keyboard);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 75 ".\\parser.l"
return(Relevant_resources);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 76 ".\\parser.l"
return(Keep);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 77 ".\\parser.l"
return(Create_keyword);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 78 ".\\parser.l"
return(Erase);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 79 ".\\parser.l"
return(NonExist);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 80 ".\\parser.l"
return(NoChange);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 81 ".\\parser.l"
return(Time);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 82 ".\\parser.l"
return(Choice);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 83 ".\\parser.l"
return(from_keyword);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 84 ".\\parser.l"
return(first_keyword);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 85 ".\\parser.l"
return(Convert_begin);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 86 ".\\parser.l"
return(Convert_end);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 87 ".\\parser.l"
return(Convert_rule);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 88 ".\\parser.l"
return(Convert_event);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 89 ".\\parser.l"
return(with_max);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 90 ".\\parser.l"
return(with_min);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 91 ".\\parser.l"
return(Operations);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 92 ".\\parser.l"
return(Results);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 93 ".\\parser.l"
return(watch_par);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 94 ".\\parser.l"
return(watch_state);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 95 ".\\parser.l"
return(watch_quant);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 96 ".\\parser.l"
return(watch_value);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 97 ".\\parser.l"
return(get_value);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 99 ".\\parser.l"
return(Model_name);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 100 ".\\parser.l"
return(Resource_file);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 101 ".\\parser.l"
return(OprIev_file);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 102 ".\\parser.l"
return(Frame_file);	
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 103 ".\\parser.l"
return(Statistic_file);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 104 ".\\parser.l"
return(Results_file);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 105 ".\\parser.l"
return(Trace_file);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 106 ".\\parser.l"
return(Show_mode);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 107 ".\\parser.l"
return(Frame_number);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 108 ".\\parser.l"
return(Show_rate);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 109 ".\\parser.l"
return(Run_StartTime);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 110 ".\\parser.l"
return(Trace_StartTime);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 111 ".\\parser.l"
return(Trace_EndTime);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 112 ".\\parser.l"
return(Terminate_if);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 113 ".\\parser.l"
return(Break_point);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 114 ".\\parser.l"
return(Seed);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 115 ".\\parser.l"
return(NoShow);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 116 ".\\parser.l"
return(Monitor);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 117 ".\\parser.l"
return(Animation);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 120 ".\\parser.l"
return(Decision_point);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 121 ".\\parser.l"
return(search_keyword);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 122 ".\\parser.l"
return(trace_stat);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 123 ".\\parser.l"
return(trace_tops);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 124 ".\\parser.l"
return(trace_all);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 125 ".\\parser.l"
return(Condition_keyword);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 126 ".\\parser.l"
return(Term_condition);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 127 ".\\parser.l"
return(Evaluate_by);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 128 ".\\parser.l"
return(Compare_tops);
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 129 ".\\parser.l"
return(NO);
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 130 ".\\parser.l"
return(YES);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 131 ".\\parser.l"
return(Activities);
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 132 ".\\parser.l"
return(Process);
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 133 ".\\parser.l"
return(SIEZE);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 134 ".\\parser.l"
return(value_before);
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 135 ".\\parser.l"
return(value_after);
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 136 ".\\parser.l"
return(value_before);
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 137 ".\\parser.l"
return(value_after);
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 138 ".\\parser.l"
return(some);
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 140 ".\\parser.l"
return(Frame);
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 141 ".\\parser.l"
return(Show_if);
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 142 ".\\parser.l"
return(Back_picture);
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 143 ".\\parser.l"
return(Show);
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 144 ".\\parser.l"
return(frm_cell);
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 145 ".\\parser.l"
return(text);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 146 ".\\parser.l"
return(transparent);
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 147 ".\\parser.l"
return(bitmap);
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 148 ".\\parser.l"
return(s_bmp);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 149 ".\\parser.l"
return(rect_keyword);
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 150 ".\\parser.l"
return(r_rect);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 151 ".\\parser.l"
return(line);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 152 ".\\parser.l"
return(ellipse);
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 153 ".\\parser.l"
return(triang);
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 154 ".\\parser.l"
return(active);
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 156 ".\\parser.l"
{
						std::string n1(YYText());
						int len = n1.length();
						std::string *name = new std::string(n1, 1, len-2);
						rdoParse::currParser->addName(name);
						rdoParse::currParser->lexer_setvalue((int)name);
						return QUOTED_IDENTIF;
					}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 165 ".\\parser.l"
{
						std::string *name = new std::string(YYText());
						rdoParse::currParser->addName(name);
						rdoParse::currParser->lexer_setvalue((int)name);
						return QUOTED_IDENTIF_BAD;
					}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 172 ".\\parser.l"
BEGIN(comment);
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 174 ".\\parser.l"
/* eat anything that's not a '*' */
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 175 ".\\parser.l"
;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 176 ".\\parser.l"
BEGIN(INITIAL);
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 179 ".\\parser.l"
;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 180 ".\\parser.l"
;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 181 ".\\parser.l"
return(YYText()[YYLeng()-1]);
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 183 ".\\parser.l"
{
							std::string n1(YYText(), YYLeng()-2);
							rdoParse::currParser->lexer_setvalue(atoi(n1.c_str()));
							unput('.');
							unput('.');
							return INT_CONST;
						}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 191 ".\\parser.l"
{
							double *val = rdoParse::currParser->addDouble(new double(atof(YYText())));
							rdoParse::currParser->lexer_setvalue((int)val);
							return REAL_CONST;
						}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 197 ".\\parser.l"
{
					rdoParse::currParser->lexer_setvalue(atoi(YYText()));
					return INT_CONST;
				}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 202 ".\\parser.l"
{
					std::string n1(YYText());
					int pos = n1.find_first_of("\n\t :");
					std::string *name = new std::string(n1, 0, pos);
					rdoParse::currParser->addName(name);
					rdoParse::currParser->lexer_setvalue((int)name);
					return IDENTIF_set;
				}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 211 ".\\parser.l"
{
					std::string n1(YYText());
					int pos = n1.find_first_of("\n\t :");
					std::string *name = new std::string(n1, 0, pos);
					rdoParse::currParser->addName(name);
					rdoParse::currParser->lexer_setvalue((int)name);
					return IDENTIF_NoChange_NoChange;
				}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 220 ".\\parser.l"
{
					std::string n1(YYText());
					int pos = n1.find_first_of("\n\t :");
					std::string *name = new std::string(n1, 0, pos);
					rdoParse::currParser->addName(name);
					rdoParse::currParser->lexer_setvalue((int)name);
					return IDENTIF_NoChange;
				}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 229 ".\\parser.l"
{
					std::string n1(YYText());
					int pos = n1.find_first_of("\n\t :");
					std::string *name = new std::string(n1, 0, pos);
					rdoParse::currParser->addName(name);
					rdoParse::currParser->lexer_setvalue((int)name);
					return IDENTIF_COLON;
				}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 238 ".\\parser.l"
{
					std::string *name = new std::string(YYText());
					rdoParse::currParser->addName(name);
					rdoParse::currParser->lexer_setvalue((int)name);
					return IDENTIF;
				}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 245 ".\\parser.l"
ECHO;
	YY_BREAK
#line 2549 "rdolex.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(comment):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 806 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 806 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 805);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 245 ".\\parser.l"

