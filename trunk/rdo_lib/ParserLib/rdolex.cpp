#line 2 "rdolex.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
class istream;
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 139
#define YY_END_OF_BUFFER 140
static yyconst short int yy_acclist[965] =
    {   0,
      123,  124,  123,  124,  140,  139,  128,  139,  138,  139,
      139,  129,  139,  129,  139,  129,  139,  129,  139,  131,
      132,  139,  129,  139,  129,  139,  138,  139,  138,  139,
      138,  139,  138,  139,  138,  139,  138,  139,  138,  139,
      138,  139,  138,  139,  138,  139,  138,  139,  138,  139,
      138,  139,  138,  139,  138,  139,  138,  139,  138,  139,
      138,  139,  138,  139,  138,  139,  138,  139,  138,  139,
      138,  139,  138,  139,  138,  139,  138,  139,  138,  139,
      138,  139,  138,  139,  138,  139,  138,  139,  138,  139,
      122,  139,  123,  124,  139,  123,  127,  139,  124,  139,

      125,  139,  128,  138,  137,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  120,  131,  132,    9,
      126,  133,  132,  131,  132,  133,   32,   31,   33,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,   94,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,   36,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  123,
      124,  123,  124,  123,  127,  138,  138,  138,  138,  138,

      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  121,  133,  130,  132,  133,  132,  133,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,   95,  138,  138,  138,
       37,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,    6,  138,  138,  138,  138,  138,  138,

      138,  138,  138,  138,  138,  138,  138,  138,  132,  132,
      132,  133,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,   44,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,   81,  138,  108,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,   51,  138,  138,  138,  138,  138,  116,  138,
       19,  138,  138,  138,  138,  138,  138,    5,  138,  114,
      138,   41,  138,  138,  138,  104,  138,  138,  138,  138,
      110,  138,  138,  138,  138,  138,  138,  138,  138,  134,
      138,  138,   14,  138,  138,  138,  138,  138,  138,  138,

      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
       49,  138,   16,  138,  132,  133,  132,  138,  138,  138,
      138,  138,  138,   46,  138,   27,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,   98,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,   52,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  113,  138,  138,
      138,   18,  138,  138,   11,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  105,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,

      138,  138,  138,  138,   50,  138,  138,   45,  138,  138,
      138,  138,  138,  138,  138,  138,   82,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  119,  138,  138,  112,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,   24,  138,  138,  138,
      115,  138,   86,  138,  138,  138,  138,  138,  118,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,   29,  138,  138,  138,  138,
      138,   83,  138,  138,   34,  138,  138,  138,  138,  138,

      138,  138,  138,  106,  138,  138,  138,  138,  138,  138,
      138,  138,  138,   25,  138,  117,  138,  138,  138,  138,
      138,    4,  138,  138,  138,  138,  138,  138,    8,  138,
      138,  138,  138,  138,  138,   22,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,   38,  138,   97,  138,  138,
      138,   60,  138,  138,  138,  138,  138,  138,  138,  138,
      138,   99,  138,  138,   48,  138,   47,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  109,  138,  138,  138,   42,  138,

       12,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,   57,  138,   58,  138,  138,
      138,  138,  138,   13,  138,  138,  138,   15,  138,  138,
      138,  138,  138,   21,  138,  138,   84,  138,  138,  138,
      138,  138,  138,  138,  138,  138,   28,  138,  138,  138,
      138,  138,  138,   73,  138,   75,  138,  138,  138,  138,
      138,  138,  138,  138,  138,   65,  138,  138,   39,  138,
        2,  138,    7,  138,   89,  138,  138,  138,  138,  138,
      138,   61,  138,  138,  138,  138,  136,  138,  138,  138,
       90,  138,  138,  138,  138,  138,  138,  138,   10,  138,

      138,  138,  138,  138,  138,  138,  138,   69,  138,  138,
       66,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,   72,  138,  138,  138,  138,  138,   87,  138,   88,
      138,  138,  138,  138,  138,  138,  138,   96,  138,  138,
      138,  138,  138,   59,  138,    3,  138,  138,  138,  138,
       80,  138,  138,  138,   54,  138,  138,  138,  138,   30,
      138,   68,  138,  138,  138,  138,  138,  138,  138,  138,
       17,  138,   26,  138,   23,  138,  138,  111,  138,  101,
      103,  138,  138,   63,  138,   62,  138,   64,  138,  138,
      138,  138,   92,  138,  138,  138,  138,   20,   35,  138,

      138,  138,   55,  138,   74,  138,  138,   71,  138,  138,
      138,   79,  138,  138,  138,  138,  100,  102,  138,  107,
      138,   93,  138,  138,  138,  138,  138,   53,  138,   56,
      138,   67,  138,   76,  138,  138,   78,  138,  138,  138,
      138,  138,    1,  138,  138,   70,  138,  138,  138,   85,
      138,  138,   91,  138,   77,  138,   40,  138,  138,  138,
      138,  135,   43,  138
    } ;

static yyconst short int yy_accept[834] =
    {   0,
        1,    1,    1,    3,    5,    6,    7,    9,   11,   12,
       14,   16,   18,   20,   23,   25,   27,   29,   31,   33,
       35,   37,   39,   41,   43,   45,   47,   49,   51,   53,
       55,   57,   59,   61,   63,   65,   67,   69,   71,   73,
       75,   77,   79,   81,   83,   85,   87,   89,   91,   93,
       96,   99,  101,  103,  104,  104,  105,  106,  107,  108,
      109,  110,  111,  112,  113,  114,  115,  116,  117,  117,
      117,  118,  120,  121,  122,  123,  123,  124,  126,  127,
      128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
      138,  139,  140,  141,  142,  143,  145,  146,  147,  148,

      149,  150,  151,  152,  153,  154,  155,  156,  157,  158,
      159,  160,  161,  162,  163,  164,  165,  166,  167,  168,
      169,  170,  171,  172,  173,  175,  176,  177,  178,  179,
      180,  181,  182,  183,  184,  185,  186,  187,  188,  189,
      190,  192,  193,  194,  196,  196,  196,  197,  198,  199,
      200,  201,  202,  203,  204,  205,  206,  207,  208,  209,
      210,  211,  212,  213,  214,  215,  215,  216,  217,  218,
      218,  220,  221,  222,  223,  224,  225,  226,  227,  228,
      229,  230,  231,  232,  233,  234,  235,  236,  237,  238,
      239,  240,  241,  242,  243,  244,  245,  246,  247,  249,

      250,  251,  253,  254,  255,  256,  257,  258,  259,  260,
      261,  262,  263,  264,  265,  266,  267,  268,  269,  270,
      271,  272,  273,  274,  275,  276,  277,  278,  279,  280,
      281,  282,  283,  284,  285,  286,  287,  288,  288,  288,
      289,  290,  291,  292,  293,  294,  296,  297,  298,  299,
      300,  301,  302,  303,  304,  305,  306,  307,  308,  309,
      310,  311,  313,  314,  315,  316,  317,  318,  319,  320,
      321,  322,  323,  324,  326,  327,  328,  329,  330,  331,
      332,  333,  334,  335,  336,  337,  339,  341,  342,  343,
      344,  345,  346,  347,  348,  349,  350,  351,  352,  353,

      355,  356,  357,  358,  359,  361,  363,  364,  365,  366,
      367,  368,  370,  372,  374,  375,  376,  378,  379,  380,
      381,  383,  384,  385,  386,  387,  388,  389,  390,  390,
      391,  392,  393,  395,  396,  397,  398,  399,  400,  401,
      402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
      413,  415,  416,  417,  418,  419,  420,  421,  422,  423,
      424,  426,  428,  429,  430,  431,  432,  433,  434,  435,
      436,  437,  438,  439,  440,  441,  442,  443,  445,  446,
      447,  448,  449,  450,  451,  452,  453,  454,  455,  456,
      458,  459,  460,  461,  462,  463,  464,  465,  466,  467,

      468,  470,  471,  472,  474,  475,  477,  478,  479,  480,
      481,  482,  483,  483,  484,  485,  486,  487,  488,  489,
      490,  492,  493,  494,  495,  496,  497,  498,  499,  500,
      501,  502,  502,  502,  503,  504,  505,  507,  508,  510,
      511,  512,  513,  514,  515,  516,  517,  519,  520,  521,
      522,  523,  524,  525,  526,  527,  528,  529,  530,  531,
      532,  534,  535,  537,  538,  539,  540,  541,  542,  543,
      544,  545,  546,  547,  549,  550,  551,  553,  555,  556,
      557,  558,  559,  561,  562,  562,  563,  564,  565,  565,
      566,  567,  568,  569,  570,  571,  572,  573,  574,  575,

      576,  577,  578,  579,  580,  581,  582,  583,  584,  585,
      586,  588,  589,  590,  591,  592,  594,  595,  597,  598,
      599,  600,  601,  602,  603,  604,  606,  607,  608,  609,
      610,  611,  612,  613,  614,  616,  618,  619,  620,  621,
      622,  624,  625,  626,  627,  628,  629,  631,  632,  633,
      634,  635,  636,  638,  638,  638,  639,  640,  641,  642,
      643,  644,  645,  646,  646,  647,  648,  649,  650,  651,
      652,  653,  654,  655,  656,  658,  660,  661,  662,  664,
      665,  666,  667,  668,  669,  670,  671,  672,  674,  675,
      677,  679,  680,  681,  682,  683,  684,  685,  686,  687,

      688,  689,  690,  691,  692,  693,  694,  695,  697,  698,
      699,  701,  703,  704,  705,  706,  707,  708,  709,  710,
      710,  710,  711,  712,  713,  714,  715,  716,  718,  720,
      720,  721,  722,  723,  724,  726,  727,  728,  730,  731,
      732,  733,  734,  736,  737,  739,  740,  741,  742,  743,
      744,  745,  746,  747,  749,  750,  751,  752,  753,  754,
      756,  758,  759,  760,  761,  762,  763,  764,  765,  766,
      768,  769,  771,  773,  775,  777,  778,  779,  780,  780,
      780,  781,  782,  784,  785,  786,  787,  788,  789,  790,
      791,  793,  794,  795,  796,  797,  798,  799,  801,  802,

      803,  804,  805,  806,  807,  808,  810,  811,  813,  814,
      815,  816,  817,  818,  819,  820,  821,  822,  824,  825,
      826,  827,  828,  830,  832,  833,  833,  833,  834,  835,
      836,  837,  838,  838,  840,  841,  842,  843,  844,  846,
      848,  849,  850,  851,  853,  854,  855,  857,  858,  859,
      860,  862,  864,  865,  866,  867,  868,  869,  870,  871,
      873,  875,  877,  878,  880,  881,  881,  883,  884,  886,
      888,  890,  890,  891,  892,  893,  895,  896,  897,  898,
      901,  902,  903,  905,  907,  908,  910,  911,  912,  914,
      915,  916,  917,  918,  920,  920,  922,  924,  925,  926,

      927,  928,  930,  932,  934,  936,  937,  939,  940,  941,
      941,  942,  943,  945,  946,  948,  949,  950,  950,  952,
      953,  955,  957,  959,  959,  960,  960,  961,  961,  962,
      963,  965,  965
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    5,    1,    1,    6,    7,
        7,    7,    8,    7,    8,    9,   10,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   12,    1,   13,
       14,   15,    1,    1,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   23,   25,   23,   26,   27,   28,   29,
       23,   30,   31,   32,   23,   23,   23,   23,   33,   34,
        7,    1,    7,    1,   35,    1,   36,   37,   38,   39,

       40,   41,   42,   43,   44,   23,   45,   46,   47,   48,
       49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
       59,   23,   60,    1,   61,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   23,    1,    1,    1,    1,    1,    1,
        1,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23
    } ;

static yyconst int yy_meta[62] =
    {   0,
        1,    2,    3,    3,    4,    1,    1,    5,    6,    1,
        4,    2,    1,    1,    1,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    1,
        7
    } ;

static yyconst short int yy_base[842] =
    {   0,
        0,    0,   59,   61,  289, 5301,   69,  121,   63, 5301,
      277,  275,  269,   66,   64,  250,   78,   91,  132,   85,
       96,  107,  143,  158,  162,  174,  185,  188,  201,  205,
      212,  227,  234,  246,  257,  250,  264,  268,  279,  283,
      294,  315,  318,  322,  336,  333,  339,  357, 5301,   98,
       80,    0, 5301,  110,  362,  380, 5301,  383,  394,  400,
      405,  416,  421,  432,  435,  438,  449,  453,  112,  124,
     5301,  291, 5301, 5301,    0,  171,  359,  459,  121, 5301,
     5301, 5301,  482,  488,  499,  502,  505,  517,  520,  531,
      534,  537,  556,  559,  562,  575,  578,  590,  601,  604,

      615,  618,  621,  632,  643,  647,  659,  662,  673,  684,
      677,  689,  695,  700,  706,  717,  723,  730,  734,  741,
      745,  748,  759,  762,  773,  777,  788,  795,  806,  810,
      813,  824,  839,  842,  853,  857,  860,  864,  871,  878,
      190,    0,    0,   88,  214,  216,  882,  885,  903,  910,
      914,  917,  931,  935,  942,  947,  958,  962,  973,  976,
      979,  990,  993,  166,    0,  211, 5301,  507,    0,  341,
      266,  997, 1004, 1011, 1018, 1030, 1043, 1048, 1054, 1061,
     1065, 1068, 1072, 1079, 1090, 1096, 1101, 1112, 1123, 1126,
     1139, 1143, 1150, 1157, 1161, 1168, 1164, 1179, 1183, 1195,

     1198, 1201, 1212, 1217, 1223, 1228, 1234, 1239, 1246, 1250,
     1253, 1266, 1270, 1282, 1287, 1299, 1305, 1310, 1321, 1327,
     1332, 1338, 1343, 1358, 1363, 1374, 1377, 1388, 1391, 1402,
     1409, 1416, 1420, 1431, 1436, 1443, 1447,  233,  193, 1458,
     1463, 1474, 1480, 1485, 1491, 1497, 1502, 1508, 1513, 1519,
     1524, 1537, 1540, 1554, 1560, 1565, 1571, 1577, 1583,  620,
      402,  231, 1594, 1598, 1601, 1622, 1625, 1629, 1636, 1642,
     1647, 1665, 1668, 1682, 1685, 1688, 1699, 1704, 1710, 1716,
     1721, 1742, 1745, 1748, 1760, 1763, 1774, 1780, 1786, 1791,
     1798, 1803, 1809, 1814, 1825, 1830, 1836, 1847, 1859, 1862,

     1865, 1876, 1883, 1879, 1890, 1896, 1901, 1907, 1912, 1927,
     1930, 1933, 1947, 1952, 1958, 1963, 1969, 1974, 1980, 1985,
     1991, 2002, 2009, 2013, 2020, 2024, 2027, 2041,  197, 5301,
     2044, 2047, 2063, 2069, 2075, 2081, 2086, 2092, 2104, 2099,
     2110, 2121, 2124, 2138, 2153, 2157, 2168, 2171, 2182, 2185,
     2188,   56,  299,  223, 2201, 2204, 2216, 2219, 2222, 2233,
     2238, 2244, 2249, 2263, 2266, 2277, 2281, 2284, 2288, 2299,
     2302, 2305, 2316, 2319, 2331, 2335, 2338, 2349, 2355, 2366,
     2369, 2383, 2394, 2401, 2408, 2412, 2419, 2423, 2426, 2437,
     2440, 2451, 2444, 2457, 2474, 2479, 2486, 2490, 2493, 2497,

     2504, 2515, 2518, 2521, 2533, 2536, 2553, 2557, 2560, 2571,
     2574, 2577,  197, 2588, 2592, 2611, 2614, 2617, 2631, 2634,
     2637, 2648, 2652, 2655, 2669, 2674, 2681, 2685, 2696, 2699,
     2710,  383,  207, 2716, 2721, 2727, 2732, 2739, 2750, 2753,
     2764, 2770, 2775, 2782, 2786, 2804, 2807, 2818, 2823, 2829,
     2834, 2840, 2851, 2854, 2858, 2870, 2873, 2884, 2889, 2903,
     2908, 2914, 2925, 2928, 2939, 2944, 2950, 2955, 2961, 2972,
     2983, 2987, 2990, 3001, 3006, 3013, 3018, 3029, 3032, 3043,
     3054, 3057, 3060, 3071, 3074, 3085, 3092, 3111,  164, 3122,
     3126, 3129, 3147, 3150, 3154, 3161, 3175, 3178, 3181, 3192,

     3197, 3204, 3208, 3215, 3226, 3229, 3241, 3245, 3257, 3263,
     3268, 3279, 3283, 3297, 3300, 3303, 3316, 3322, 3327, 3338,
     3341, 3345, 3356, 3359, 3362, 3375, 3380, 3386, 3397, 3400,
     3403, 3414, 3418, 3421, 3425, 3432, 3443, 3446, 3457, 3463,
     3468, 3474, 3480, 3486, 3492, 3503, 3509, 3520, 3525, 3531,
     3542, 3536, 3553,  169,  166, 3556, 3571, 3574, 3577, 3590,
     3597, 3601, 3604,  159, 3616, 3619, 3623, 3634, 3637, 3651,
     3662, 3665, 3668, 3682, 3685, 3702, 3706, 3717, 3721, 3724,
     3728, 3735, 3740, 3746, 3751, 3763, 3766, 3769, 3790, 3793,
     3796, 3808, 3812, 3815, 3819, 3830, 3836, 3841, 3848, 3853,

     3864, 3870, 3875, 3881, 3893, 3898, 3904, 3910, 3916, 3921,
     3927, 3932, 3943, 3947, 3950, 3962, 3966, 3973, 3977,  142,
      154, 3980, 3984, 3991, 3995, 4002, 4008, 4024, 4037,  145,
     4043, 4048, 4054, 4059, 4065, 4070, 4076, 4082, 4087, 4094,
     4110, 4113, 4116, 4128, 4135, 4139, 4150, 4153, 4156, 4167,
     4170, 4174, 4186, 4193, 4197, 4204, 4211, 4215, 4226, 4229,
     4232, 4243, 4258, 4262, 4265, 4269, 4280, 4283, 4286, 4298,
     4301, 4304, 4316, 4323, 4328, 4339, 4342, 4346,  143,  124,
     4357, 4353, 4360, 4364, 4371, 4375,  223, 4378, 4396, 4401,
     4407, 4412, 4424, 4430, 4435, 4441, 4452, 4455, 4466, 4469,

     4472, 4483, 4487, 4499, 4505, 4510, 4516, 4528, 4531, 4534,
     4545, 4550, 4556, 4561, 4567, 4578, 4581, 4595, 4601, 4606,
     4612, 4617, 4624, 4628, 4639,  119,  115, 4650, 4657, 4661,
     4664, 4668,  456, 4675, 4679, 4682, 4686, 4693, 4708, 4714,
     4721, 4725, 4736, 4739, 4742, 4753, 4756, 4760, 4767, 4773,
     4784, 4789, 4800, 4807, 4811, 4818, 4814, 4825, 4829, 4832,
     4836, 4847, 4861, 4864, 5301,  118, 4867, 4878, 4881, 4884,
     4895,  108, 4898, 4901, 4912, 4917, 4923, 4928, 4939, 4943,
     4946, 4957, 4960, 4963, 4977, 4983, 4988, 4994, 5000, 5006,
     5011, 5017, 5301, 5022,  113, 5029, 5033, 5040, 5046, 5057,

     5060, 5063, 5074, 5077, 5080, 5096, 5099, 5102, 5113,   78,
     5116, 5119, 5130, 5135, 5141, 5148, 5152,   81, 5155, 5169,
     5173, 5187, 5190,   68, 5193,   63, 5205,   64, 5208, 5301,
     5211, 5301, 5261, 5267, 5271, 5275, 5281, 5287, 5292,   81,
     5295
    } ;

static yyconst short int yy_def[842] =
    {   0,
      832,    1,  833,  833,  832,  832,  832,  834,  835,  832,
      832,  832,  832,  836,  832,  832,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  832,  837,
      838,  839,  832,  832,  832,  834,  832,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  835,  835,
      832,  836,  832,  832,  840,  836,  836,  836,  841,  832,
      832,  832,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,

      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      837,  838,  839,  838,  832,  832,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  835,  840,  836,  832,  836,  840,  836,
      841,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,

      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  832,  832,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  836,
      836,  840,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,

      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  832,  832,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  832,  840,  832,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,

      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  832,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  832,  832,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  832,  834,  834,  834,  832,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,

      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  832,  832,  834,  834,  834,  834,  834,
      834,  834,  834,  832,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,

      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  832,
      832,  834,  834,  834,  834,  834,  834,  834,  834,  832,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  832,  832,
      834,  834,  834,  834,  834,  834,  832,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,

      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  832,  832,  834,  834,  834,
      834,  834,  832,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  832,  832,  834,  834,  834,  834,
      834,  832,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  832,  834,  832,  834,  834,  834,  834,  834,

      834,  834,  834,  834,  834,  834,  834,  834,  834,  832,
      834,  834,  834,  834,  834,  834,  834,  832,  834,  834,
      834,  834,  834,  832,  834,  832,  834,  832,  834,  832,
      834,    0,  832,  832,  832,  832,  832,  832,  832,  832,
      832
    } ;

static yyconst short int yy_nxt[5363] =
    {   0,
        6,    7,    7,    7,    8,    9,   10,   11,   12,   13,
       14,    6,   15,   10,   16,   17,   18,   19,   20,   21,
       22,   23,   20,   20,   24,   25,   26,   27,   20,   28,
       29,   30,   31,   20,   20,   32,   33,   20,   20,   34,
       35,   36,   20,   37,   38,   39,   20,   40,   41,   42,
       20,   43,   44,   45,   46,   47,   48,   20,   20,   49,
       10,   51,   51,   51,   51,   70,  352,   52,   71,   52,
       54,   54,   54,   76,   77,  432,   78,   80,   81,   55,
       55,   55,  144,  144,  165,   79,   55,   55,   55,   57,
      144,  144,   55,   55,   55,  432,   57,   55,   55,   55,

      142,  142,   57,  830,  828,   79,  143,   57,   55,   55,
       55,   54,   54,   54,   70,  826,  824,   71,   57,   53,
      818,   53,   55,   55,   55,   83,   70,  164,  170,   71,
      810,  171,   57,   55,   55,   55,   58,   59,   60,   61,
       62,   63,   84,   57,   55,   55,   55,   89,   64,   65,
       66,   67,   68,   90,   57,   91,  795,  793,   92,   55,
       55,   55,   93,   55,   55,   55,  766,   85,   70,   57,
      765,   71,  727,   57,   86,   55,   55,   55,  832,  832,
       87,  166,  726,   88,  687,   57,   55,   55,   55,   55,
       55,   55,  142,  142,  680,  679,   57,   94,  143,   57,

      630,   96,   55,   55,   55,  621,   55,   55,   55,  620,
       95,  564,   57,   55,   55,   55,   57,  354,  832,  832,
      101,  832,   97,   57,  733,  733,  733,   99,   55,   55,
       55,  107,  489,  354,   98,   55,   55,   55,   57,  413,
      102,  262,  100,  103,  105,   57,  330,   55,   55,   55,
      329,   55,   55,   55,  104,  239,  106,   57,   55,   55,
       55,   57,  238,   82,  108,   55,   55,   55,   57,   55,
       55,   55,  109,  832,  110,   57,  262,  111,   74,   57,
       55,   55,   55,   73,   55,   55,   55,   72,  832,  118,
       57,  113,  112,  114,   57,   55,   55,   55,   76,   77,

      116,   78,  832,  115,  832,   57,  433,  121,  117,  262,
       79,  119,  832,  832,  832,  120,   55,   55,   55,   55,
       55,   55,  122,   55,   55,   55,   57,  832,  832,   57,
       79,  123,  832,   57,   55,   55,   55,   55,   55,   55,
       55,   55,   55,  124,   57,  125,  832,   57,  832,  832,
       57,  261,  127,  832,  126,  832,  130,  128,   55,   55,
       55,  131,  832,   55,   55,   55,   76,  167,   57,  168,
      132,  134,  129,   57,  138,  135,  133,  832,   79,  832,
      137,   55,   55,   55,   55,   55,   55,  136,  145,  832,
      433,   57,  139,  354,   57,   55,   55,   55,   79,  832,

      140,   55,   55,   55,  832,   57,   55,   55,   55,  832,
      832,   57,  354,  832,  146,  832,   57,   55,   55,   55,
      147,  832,   55,   55,   55,  832,  832,   57,  832,  148,
      832,  832,   57,   55,   55,   55,   55,   55,   55,   55,
       55,   55,  149,   57,  151,  832,   57,  832,  150,   57,
       55,   55,   55,  832,   55,   55,   55,  733,  733,  733,
       57,  832,  832,  152,   57,  832,   76,   77,  832,   78,
      157,  153,  154,  832,  832,  155,  832,  159,   79,  832,
      832,  156,  772,   55,   55,   55,  158,  832,  160,   55,
       55,   55,  161,   57,  832,  832,  162,  832,   79,   57,

       55,   55,   55,   55,   55,   55,   55,   55,   55,  832,
       57,  163,  832,   57,   76,  832,   57,  260,   55,   55,
       55,   55,   55,   55,  832,  172,   79,  173,   57,  832,
      832,   57,   55,   55,   55,   55,   55,   55,   55,   55,
       55,  832,   57,  832,  174,   57,   79,  832,   57,  832,
      175,  832,  176,  832,  832,  178,  177,   55,   55,   55,
       55,   55,   55,   55,   55,   55,  832,   57,  832,  832,
       57,  832,  181,   57,  179,  832,   55,   55,   55,   55,
       55,   55,  182,  832,  832,  180,   57,  832,  832,   57,
      832,   55,   55,   55,  832,  186,  832,  832,  183,  832,

      184,   57,   55,   55,   55,   55,   55,   55,  187,  185,
      832,  832,   57,  832,  832,   57,   55,   55,   55,   55,
       55,   55,   55,   55,   55,  188,   57,  832,  832,   57,
      352,  189,   57,   55,   55,   55,  832,  832,  193,  353,
      832,  190,  832,   57,   55,   55,   55,  832,   55,   55,
       55,  192,  832,  191,   57,  832,  832,  194,   57,  353,
       55,   55,   55,   55,   55,   55,  832,  196,  832,  195,
       57,  832,  832,   57,   55,   55,   55,  832,   55,   55,
       55,  832,  198,  832,   57,   55,   55,   55,   57,  199,
       55,   55,   55,  832,  197,   57,   55,   55,   55,  832,

       57,   55,   55,   55,  832,  832,   57,   55,   55,   55,
      832,   57,  832,  832,  201,  200,  832,   57,   55,   55,
       55,  832,  202,  204,   55,   55,   55,  832,   57,  832,
      203,   55,   55,   55,   57,   55,   55,   55,  832,  832,
      205,   57,   55,   55,   55,   57,   55,   55,   55,   55,
       55,   55,   57,  832,  206,  207,   57,  832,  832,   57,
       55,   55,   55,   55,   55,   55,  832,  832,  208,  209,
       57,  210,  832,   57,   55,   55,   55,  832,   55,   55,
       55,  832,  832,  211,   57,  832,  832,  212,   57,   55,
       55,   55,  213,  217,  832,  215,   55,   55,   55,   57,

      216,  219,  832,  214,  832,  832,   57,   55,   55,   55,
      218,   55,   55,   55,   55,   55,   55,   57,  832,  832,
      832,   57,  832,  832,   57,   55,   55,   55,  220,  832,
      222,  832,  223,  832,  832,   57,  832,  832,  832,  221,
       55,   55,   55,   55,   55,   55,  225,  832,  226,  832,
       57,  224,  832,   57,   55,   55,   55,  832,   55,   55,
       55,   55,   55,   55,   57,   55,   55,   55,   57,  832,
      227,   57,   55,   55,   55,   57,  228,  832,  229,   55,
       55,   55,   57,   55,   55,   55,   55,   55,   55,   57,
      832,  832,  232,   57,  832,  832,   57,  832,  832,  230,

      233,  832,  832,  234,   55,   55,   55,  832,  832,  235,
      231,   55,   55,   55,   57,   55,   55,   55,   55,   55,
       55,   57,  241,  832,  236,   57,  832,  832,   57,  832,
      832,  237,   55,   55,   55,  240,   55,   55,   55,  832,
      832,  242,   57,   55,   55,   55,   57,  832,   55,   55,
       55,  245,  832,   57,  832,  246,  243,  244,   57,   55,
       55,   55,  832,   55,   55,   55,  247,  832,  832,   57,
      248,  832,  832,   57,   55,   55,   55,   55,   55,   55,
       55,   55,   55,  832,   57,  832,  250,   57,  832,  249,
       57,   55,   55,   55,   55,   55,   55,  832,   55,   55,

       55,   57,  832,  832,   57,   55,   55,   55,   57,  251,
      253,  252,   55,   55,   55,   57,  832,  832,  254,   55,
       55,   55,   57,  832,  832,  255,  256,  832,  832,   57,
      257,   55,   55,   55,  832,  832,  258,  832,  832,  264,
      832,   57,  259,  263,   55,   55,   55,  832,  265,   55,
       55,   55,  832,  832,   57,   55,   55,   55,  832,   57,
      832,  266,   55,   55,   55,   57,   55,   55,   55,   55,
       55,   55,   57,   55,   55,   55,   57,  832,  268,   57,
       55,   55,   55,   57,  832,  267,  832,  273,  832,  832,
       57,   55,   55,   55,  832,  271,  832,   55,   55,   55,

      269,   57,   55,   55,   55,  832,  270,   57,  832,  832,
      832,  272,   57,   55,   55,   55,  832,  832,  275,  832,
      832,  274,  832,   57,   55,   55,   55,   55,   55,   55,
      832,  279,  832,  276,   57,  832,  832,   57,  277,  832,
       55,   55,   55,  278,   55,   55,   55,  832,  832,  281,
       57,   55,   55,   55,   57,  832,  832,  280,   55,   55,
       55,   57,   55,   55,   55,   55,   55,   55,   57,   55,
       55,   55,   57,  832,  832,   57,  832,  284,  832,   57,
       55,   55,   55,  285,   55,   55,   55,  282,  832,  832,
       57,  832,  832,  283,   57,  286,   55,   55,   55,   55,

       55,   55,   55,   55,   55,  832,   57,  832,  832,   57,
      289,  832,   57,   55,   55,   55,  290,  287,   55,   55,
       55,  288,  832,   57,   55,   55,   55,  832,   57,   55,
       55,   55,  832,  832,   57,   55,   55,   55,  291,   57,
       55,   55,   55,  832,  832,   57,  292,   55,   55,   55,
       57,   55,   55,   55,   55,   55,   55,   57,  293,  294,
      832,   57,  832,  832,   57,  832,  295,   55,   55,   55,
      832,   55,   55,   55,  296,  832,  832,   57,  832,  832,
      299,   57,  297,   55,   55,   55,  832,  301,   55,   55,
       55,  298,  832,   57,  832,  832,  300,  832,   57,  832,

       55,   55,   55,  832,  832,  302,   55,   55,   55,  303,
       57,   55,   55,   55,  832,  832,   57,  832,  304,  832,
      832,   57,   55,   55,   55,  832,  305,  832,   55,   55,
       55,  832,   57,   55,   55,   55,  832,  832,   57,   55,
       55,   55,  832,   57,   55,   55,   55,  832,  832,   57,
      832,  832,  306,  832,   57,  832,  308,  832,  307,   55,
       55,   55,  832,  832,   55,   55,   55,  832,  832,   57,
      832,  311,  309,  310,   57,   55,   55,   55,   55,   55,
       55,  832,  832,  312,  832,   57,  832,  832,   57,   55,
       55,   55,   55,   55,   55,  832,  313,  314,  832,   57,

      832,  832,   57,   55,   55,   55,  832,  832,  832,  315,
       55,   55,   55,   57,  832,  832,  317,   55,   55,   55,
       57,   55,   55,   55,  832,  316,  832,   57,  832,  832,
      318,   57,   55,   55,   55,  832,  319,   55,   55,   55,
      832,  832,   57,  832,   55,   55,   55,   57,   55,   55,
       55,  320,  832,  322,   57,  324,  832,  832,   57,   55,
       55,   55,  321,  323,   55,   55,   55,  832,  832,   57,
      832,  325,  832,  832,   57,   55,   55,   55,  832,  832,
      327,   55,   55,   55,  832,   57,   55,   55,   55,  328,
      326,   57,   55,   55,   55,  832,   57,  832,   55,   55,

       55,  331,   57,   55,   55,   55,  832,  332,   57,   55,
       55,   55,  832,   57,   55,   55,   55,  832,  832,   57,
       55,   55,   55,  335,   57,   55,   55,   55,  832,  334,
       57,  832,  333,  832,  337,   57,  832,  336,   55,   55,
       55,   55,   55,   55,  832,  832,  832,  338,   57,  832,
      340,   57,  832,  832,  339,   55,   55,   55,  832,  342,
      832,   55,   55,   55,  832,   57,   55,   55,   55,  832,
      341,   57,   55,   55,   55,  832,   57,  344,   55,   55,
       55,  832,   57,  832,   55,   55,   55,  832,   57,  832,
      343,  832,  832,  345,   57,   55,   55,   55,  832,   55,

       55,   55,   55,   55,   55,   57,  832,  832,  346,   57,
      832,  832,   57,  832,  347,  832,  350,  349,  832,  348,
      832,  832,  351,   55,   55,   55,   55,   55,   55,  355,
       55,   55,   55,   57,  832,  832,   57,   55,   55,   55,
       57,  832,  356,   55,   55,   55,  832,   57,   55,   55,
       55,  832,  832,   57,  832,  357,  832,  832,   57,  358,
      832,  832,  363,  832,  359,  832,   55,   55,   55,   55,
       55,   55,  832,  832,  832,  361,   57,  832,  832,   57,
      832,  832,  360,   55,   55,   55,   55,   55,   55,   55,
       55,   55,  832,   57,  832,  362,   57,  365,  832,   57,

       55,   55,   55,  832,  364,   55,   55,   55,  832,  832,
       57,   55,   55,   55,  832,   57,  832,   55,   55,   55,
      832,   57,   55,   55,   55,  832,  832,   57,  832,  832,
      366,  832,   57,  832,  368,  372,  373,  832,  369,  832,
      832,  367,  832,   55,   55,   55,   55,   55,   55,   55,
       55,   55,  370,   57,  832,  832,   57,  832,  832,   57,
      374,   55,   55,   55,   55,   55,   55,  371,  832,  832,
      832,   57,  832,  832,   57,   55,   55,   55,  377,  378,
      832,   55,   55,   55,  832,   57,  832,   55,   55,   55,
      376,   57,   55,   55,   55,  832,  375,   57,  832,   55,

       55,   55,   57,  832,   55,   55,   55,  832,  379,   57,
       55,   55,   55,  832,   57,   55,   55,   55,  832,  832,
       57,  832,  832,  380,  832,   57,   55,   55,   55,  381,
      382,   55,   55,   55,  832,  832,   57,   55,   55,   55,
      832,   57,  832,  832,  385,  832,  832,   57,   55,   55,
       55,  832,  832,  383,  384,  832,  832,  386,   57,  832,
       55,   55,   55,   55,   55,   55,   55,   55,   55,  388,
       57,  832,  832,   57,  387,  832,   57,   55,   55,   55,
       55,   55,   55,  389,   55,   55,   55,   57,  832,  832,
       57,   55,   55,   55,   57,  832,  391,   55,   55,   55,

      390,   57,   55,   55,   55,  832,  832,   57,   55,   55,
       55,  832,   57,   55,   55,   55,  832,  393,   57,  832,
      392,  832,  832,   57,  394,  832,  832,  395,   55,   55,
       55,   55,   55,   55,   55,   55,   55,  832,   57,  832,
      832,   57,  397,  832,   57,  832,  832,  398,   55,   55,
       55,  832,  396,   55,   55,   55,  832,  832,   57,   55,
       55,   55,  399,   57,   55,   55,   55,  400,  832,   57,
       55,   55,   55,  832,   57,   55,   55,   55,  832,  832,
       57,   55,   55,   55,  832,   57,   55,   55,   55,  832,
      832,   57,   55,   55,   55,  832,   57,  832,  832,  832,

      402,  832,   57,   55,   55,   55,  832,  401,  403,  832,
       55,   55,   55,   57,   55,   55,   55,  832,  832,  404,
       57,   55,   55,   55,   57,   55,   55,   55,   55,   55,
       55,   57,  832,  405,  832,   57,  832,  832,   57,  832,
      832,  406,   55,   55,   55,   55,   55,   55,   55,   55,
       55,  832,   57,  832,  832,   57,  832,  832,   57,  832,
      408,  407,  832,  410,   55,   55,   55,  832,  409,  411,
       55,   55,   55,  832,   57,  412,   55,   55,   55,  832,
       57,  415,   55,   55,   55,  832,   57,   55,   55,   55,
      832,  832,   57,   55,   55,   55,  832,   57,  832,  414,

       55,   55,   55,   57,  416,   55,   55,   55,  832,  832,
       57,   55,   55,   55,  832,   57,  832,  832,  417,  832,
      832,   57,   55,   55,   55,   55,   55,   55,  832,  832,
      832,  832,   57,  832,  418,   57,  832,  832,  419,   55,
       55,   55,  832,  421,  832,  423,  420,  832,  832,   57,
      832,  832,  422,  832,   55,   55,   55,  832,   55,   55,
       55,  832,  832,  425,   57,  832,  832,  424,   57,   55,
       55,   55,   55,   55,   55,  832,  832,  426,  832,   57,
      832,  832,   57,   55,   55,   55,   55,   55,   55,   55,
       55,   55,  832,   57,  832,  832,   57,  832,  832,   57,

      832,  832,   55,   55,   55,   55,   55,   55,  427,  832,
      430,  428,   57,  429,  832,   57,  431,   55,   55,   55,
       55,   55,   55,   55,   55,   55,  832,   57,  832,  832,
       57,  832,  832,   57,   55,   55,   55,  832,  435,   55,
       55,   55,  832,  832,   57,   55,   55,   55,  832,   57,
       55,   55,   55,  832,  434,   57,  832,  832,  437,  832,
       57,  436,  832,  832,   55,   55,   55,   55,   55,   55,
      832,  832,  439,  438,   57,  832,  832,   57,   55,   55,
       55,  442,   55,   55,   55,   55,   55,   55,   57,   55,
       55,   55,   57,  832,  440,   57,  832,  441,  832,   57,

       55,   55,   55,   55,   55,   55,   55,   55,   55,  832,
       57,  443,  832,   57,  832,  832,   57,   55,   55,   55,
       55,   55,   55,  832,  832,  446,  832,   57,  832,  444,
       57,  445,   55,   55,   55,  832,   55,   55,   55,   55,
       55,   55,   57,  832,  832,  448,   57,  832,  832,   57,
       55,   55,   55,  832,  832,  447,   55,   55,   55,  832,
       57,  832,  449,  832,  450,  832,   57,   55,   55,   55,
       55,   55,   55,  832,  451,  832,  832,   57,  832,  832,
       57,  832,  452,  832,   55,   55,   55,  832,  453,  832,
      832,  454,  832,  832,   57,   55,   55,   55,  455,  832,

      832,  456,   55,   55,   55,   57,  457,  832,  832,   55,
       55,   55,   57,   55,   55,   55,  459,  460,  458,   57,
       55,   55,   55,   57,   55,   55,   55,   55,   55,   55,
       57,  832,  832,  461,   57,  832,  832,   57,   55,   55,
       55,   55,   55,   55,  462,   55,   55,   55,   57,  832,
      832,   57,   55,   55,   55,   57,  832,  463,   55,   55,
       55,  832,   57,  832,  464,  467,  832,  832,   57,  832,
      832,  465,  832,  832,  466,   55,   55,   55,  832,  468,
       55,   55,   55,  470,  832,   57,  469,   55,   55,   55,
       57,   55,   55,   55,   55,   55,   55,   57,   55,   55,

       55,   57,  832,  832,   57,   55,   55,   55,   57,  472,
      832,  471,  832,  832,  473,   57,   55,   55,   55,   55,
       55,   55,   55,   55,   55,  832,   57,  832,  832,   57,
      832,  474,   57,  832,   55,   55,   55,   55,   55,   55,
      476,  832,  832,  475,   57,  832,  832,   57,  832,  832,
      477,  832,  832,  479,   55,   55,   55,  478,   55,   55,
       55,   55,   55,   55,   57,  832,  832,  832,   57,  832,
      481,   57,  485,  485,  485,   55,   55,   55,   55,   55,
       55,  832,   57,  832,  480,   57,  832,  832,   57,   55,
       55,   55,  832,   55,   55,   55,  832,  832,  483,   57,

      832,  832,  482,   57,  832,  486,  832,  832,  487,  832,
      832,  484,   55,   55,   55,   55,   55,   55,   55,   55,
       55,  832,   57,  488,  832,   57,  832,  832,   57,  832,
      832,  490,   55,   55,   55,   55,   55,   55,   55,   55,
       55,  491,   57,  832,  832,   57,  832,  832,   57,   55,
       55,   55,  494,   55,   55,   55,   55,   55,   55,   57,
      832,  832,  492,   57,  832,  832,   57,  493,  832,  496,
       55,   55,   55,  832,  495,   55,   55,   55,  832,  832,
       57,  832,   55,   55,   55,   57,   55,   55,   55,  832,
      832,  497,   57,  832,  499,  832,   57,   55,   55,   55,

       55,   55,   55,  832,  832,  498,  832,   57,  832,  832,
       57,   55,   55,   55,  832,  832,  502,   55,   55,   55,
      500,   57,   55,   55,   55,  832,  501,   57,   55,   55,
       55,  832,   57,   55,   55,   55,  503,  832,   57,  832,
       55,   55,   55,   57,  832,  832,  505,  506,  832,  504,
       57,   55,   55,   55,   55,   55,   55,  832,  832,  507,
      832,   57,  509,  832,   57,   55,   55,   55,  832,  832,
      508,   55,   55,   55,  832,   57,   55,   55,   55,  832,
      832,   57,  832,   55,   55,   55,   57,   55,   55,   55,
      832,  832,  510,   57,  832,  832,  832,   57,  511,  832,

      832,  514,  832,  832,  512,   55,   55,   55,   55,   55,
       55,  513,  832,  832,  832,   57,  832,  832,   57,   55,
       55,   55,  515,  832,   55,   55,   55,  517,  832,   57,
       55,   55,   55,  516,   57,   55,   55,   55,  832,  832,
       57,   55,   55,   55,  832,   57,  832,  832,  518,  832,
      832,   57,   55,   55,   55,   55,   55,   55,  832,   55,
       55,   55,   57,  832,  832,   57,  520,  832,  522,   57,
      519,   55,   55,   55,   55,   55,   55,  523,  832,  832,
      521,   57,  832,  832,   57,   55,   55,   55,  832,  525,
       55,   55,   55,  832,  832,   57,  832,  832,  526,  832,

       57,  832,  832,  524,   55,   55,   55,  832,  528,   55,
       55,   55,  832,  832,   57,   55,   55,   55,  527,   57,
      832,  832,  531,  832,  530,   57,   55,   55,   55,   55,
       55,   55,  832,  532,  832,  832,   57,  529,  832,   57,
       55,   55,   55,  533,  832,   55,   55,   55,  832,  832,
       57,   55,   55,   55,  832,   57,   55,   55,   55,  832,
      832,   57,   55,   55,   55,  832,   57,  534,  832,  832,
      832,  832,   57,   55,   55,   55,  832,  832,  536,  537,
      832,  535,  832,   57,   55,   55,   55,  832,   55,   55,
       55,   55,   55,   55,   57,  832,  832,  538,   57,  832,

      539,   57,   55,   55,   55,  832,  540,   55,   55,   55,
      832,  832,   57,  832,   55,   55,   55,   57,  832,   55,
       55,   55,  832,  541,   57,  832,  832,  544,  542,   57,
       55,   55,   55,   55,   55,   55,  832,  832,  543,  832,
       57,  832,  832,   57,   55,   55,   55,  832,  832,  545,
      832,  832,  546,  832,   57,   55,   55,   55,   55,   55,
       55,   55,   55,   55,  832,   57,  832,  832,   57,  832,
      832,   57,   55,   55,   55,  485,  485,  485,  548,  832,
      832,  832,   57,  832,  547,   57,   55,   55,   55,  549,
      832,  832,  552,   55,   55,   55,   57,  832,  832,  832,

      145,  832,  832,   57,  832,  832,  550,  551,  832,  554,
      555,  832,   55,   55,   55,  832,  832,  553,  832,  832,
      556,  557,   57,   55,   55,   55,  146,   55,   55,   55,
       55,   55,   55,   57,  832,  832,  832,   57,  832,  832,
       57,  558,  559,  832,  560,  832,  562,  561,   55,   55,
       55,   55,   55,   55,  563,   55,   55,   55,   57,  832,
      832,   57,   55,   55,   55,   57,  832,  832,  567,  566,
      832,  832,   57,  832,  832,  565,   55,   55,   55,   55,
       55,   55,   55,   55,   55,  832,   57,  832,  832,   57,
      568,  832,   57,   55,   55,   55,  832,  569,   55,   55,

       55,  832,  570,   57,  832,   55,   55,   55,   57,   55,
       55,   55,  832,  832,  571,   57,   55,   55,   55,   57,
      832,  573,  832,  572,  832,  832,   57,   55,   55,   55,
       55,   55,   55,  832,  574,  832,  832,   57,  832,  575,
       57,  832,   55,   55,   55,  578,   55,   55,   55,  576,
      832,  577,   57,  832,  832,  832,   57,  832,   55,   55,
       55,  832,  832,  580,   55,   55,   55,  579,   57,   55,
       55,   55,  832,  832,   57,  832,  832,  581,  832,   57,
       55,   55,   55,  832,   55,   55,   55,  832,  832,  582,
       57,  832,  832,  583,   57,  832,  832,  585,   55,   55,

       55,   55,   55,   55,   55,   55,   55,  832,   57,  832,
      584,   57,  832,  832,   57,  832,  588,   55,   55,   55,
      832,  832,  586,   55,   55,   55,  832,   57,   55,   55,
       55,  832,  832,   57,  832,  589,  832,  587,   57,   55,
       55,   55,   55,   55,   55,  832,   55,   55,   55,   57,
      832,  832,   57,  832,  832,  590,   57,   55,   55,   55,
       55,   55,   55,   55,   55,   55,  832,   57,  832,  832,
       57,  832,  832,   57,  832,  593,   55,   55,   55,  832,
      591,   55,   55,   55,  832,  594,   57,   55,   55,   55,
      592,   57,  832,  596,  832,  595,  832,   57,   55,   55,

       55,   55,   55,   55,   55,   55,   55,  832,   57,  832,
      832,   57,  832,  597,   57,   55,   55,   55,  598,   55,
       55,   55,   55,   55,   55,   57,   55,   55,   55,   57,
      832,  832,   57,   55,   55,   55,   57,  832,  832,  599,
      600,  832,  832,   57,   55,   55,   55,   55,   55,   55,
      602,  832,  832,  601,   57,  832,  832,   57,   55,   55,
       55,  604,  832,  605,   55,   55,   55,  603,   57,   55,
       55,   55,  832,  832,   57,   55,   55,   55,  832,   57,
      832,   55,   55,   55,  832,   57,  832,   55,   55,   55,
      832,   57,  832,   55,   55,   55,  606,   57,  832,  607,

      832,  832,  608,   57,   55,   55,   55,  832,  832,  610,
       55,   55,   55,  832,   57,  832,  832,  609,  611,  832,
       57,   55,   55,   55,  832,  612,   55,   55,   55,  832,
      832,   57,   55,   55,   55,  832,   57,   55,   55,   55,
      613,  832,   57,   55,   55,   55,  832,   57,  832,  832,
      614,  832,  832,   57,   55,   55,   55,   55,   55,   55,
      832,  832,  832,  832,   57,  832,  832,   57,  832,  832,
      616,  615,   55,   55,   55,   55,   55,   55,   55,   55,
       55,  832,   57,  832,  617,   57,  832,  619,   57,  832,
      618,   55,   55,   55,  832,  832,  622,  832,   55,   55,

       55,   57,   55,   55,   55,   55,   55,   55,   57,  624,
      623,  832,   57,  832,  832,   57,  832,   55,   55,   55,
       55,   55,   55,  832,   55,   55,   55,   57,  832,  832,
       57,  625,  627,  832,   57,   55,   55,   55,   55,   55,
       55,  832,  832,  626,  832,   57,  832,  832,   57,  832,
      832,  629,   55,   55,   55,  832,  632,  633,  628,  631,
      832,  832,   57,   55,   55,   55,   55,   55,   55,   55,
       55,   55,  832,   57,  832,  832,   57,  832,  832,   57,
      832,  832,  634,   55,   55,   55,   55,   55,   55,  832,
      635,  832,  832,   57,  832,  832,   57,  832,  636,  832,

      832,  637,  832,   55,   55,   55,  832,   55,   55,   55,
      832,  832,  638,   57,  832,  832,  639,   57,   55,   55,
       55,  640,   55,   55,   55,   55,   55,   55,   57,   55,
       55,   55,   57,  832,  832,   57,   55,   55,   55,   57,
      832,   55,   55,   55,  832,  832,   57,   55,   55,   55,
      832,   57,   55,   55,   55,  832,  642,   57,  832,  641,
      832,  832,   57,  643,   55,   55,   55,   55,   55,   55,
       55,   55,   55,  832,   57,  644,  832,   57,  832,  832,
       57,  832,  645,  646,  832,  647,  832,  648,  832,  832,
      649,   55,   55,   55,   55,   55,   55,   55,   55,   55,

      832,   57,  650,  832,   57,  832,  832,   57,  651,   55,
       55,   55,  652,   55,   55,   55,   55,   55,   55,   57,
       55,   55,   55,   57,  832,  832,   57,  655,  832,  832,
       57,   55,   55,   55,  832,  832,  653,   55,   55,   55,
      832,   57,   55,   55,   55,  832,  832,   57,  832,   55,
       55,   55,   57,  657,   55,   55,   55,  832,  656,   57,
      832,  654,  832,  832,   57,   55,   55,   55,  832,  832,
      658,   55,   55,   55,  832,   57,   55,   55,   55,  832,
      660,   57,   55,   55,   55,  832,   57,  661,  832,  659,
      662,  832,   57,  832,   55,   55,   55,  832,  832,   55,

       55,   55,  832,  663,   57,   55,   55,   55,  664,   57,
      665,   55,   55,   55,  832,   57,  832,   55,   55,   55,
      832,   57,   55,   55,   55,  832,  666,   57,   55,   55,
       55,  832,   57,   55,   55,   55,  832,  832,   57,  667,
      832,  668,  832,   57,   55,   55,   55,  669,   55,   55,
       55,   55,   55,   55,   57,  670,  832,  832,   57,  832,
      832,   57,  832,   55,   55,   55,  832,   55,   55,   55,
      832,  832,  671,   57,   55,   55,   55,   57,   55,   55,
       55,   55,   55,   55,   57,   55,   55,   55,   57,  832,
      672,   57,   55,   55,   55,   57,   55,   55,   55,  832,

      673,  676,   57,   55,   55,   55,   57,  675,  674,   55,
       55,   55,  832,   57,  832,  832,  678,  832,  832,   57,
      832,  832,  677,  832,  682,   55,   55,   55,  832,  832,
      684,  832,  832,  681,  832,   57,  832,  685,   55,   55,
       55,  832,  683,  832,   55,   55,   55,  832,   57,   55,
       55,   55,  832,  686,   57,   55,   55,   55,  832,   57,
       55,   55,   55,  832,  832,   57,   55,   55,   55,  832,
       57,   55,   55,   55,  832,  832,   57,   55,   55,   55,
      832,   57,  688,   55,   55,   55,  832,   57,   55,   55,
       55,  832,  832,   57,  832,   55,   55,   55,   57,  832,

      832,  689,  832,  832,  692,   57,  691,  690,  832,  832,
      693,   55,   55,   55,   55,   55,   55,   55,   55,   55,
      832,   57,  832,  832,   57,  832,  832,   57,  832,   55,
       55,   55,  832,  832,  694,  832,   55,   55,   55,   57,
       55,   55,   55,  832,  696,  695,   57,  697,  832,  832,
       57,   55,   55,   55,   55,   55,   55,   55,   55,   55,
      832,   57,  832,  832,   57,  698,  699,   57,   55,   55,
       55,   55,   55,   55,  832,   55,   55,   55,   57,  832,
      832,   57,  832,  832,  701,   57,  700,   55,   55,   55,
      832,  832,  702,  832,   55,   55,   55,   57,   55,   55,

       55,  832,  832,  703,   57,   55,   55,   55,   57,  706,
      707,  704,   55,   55,   55,   57,   55,   55,   55,  832,
      832,  705,   57,  832,  832,  708,   57,   55,   55,   55,
       55,   55,   55,   55,   55,   55,  832,   57,  832,  832,
       57,  832,  709,   57,   55,   55,   55,  832,  832,  710,
      832,  711,  832,  832,   57,  832,  832,  713,  712,   55,
       55,   55,  832,   55,   55,   55,   55,   55,   55,   57,
       55,   55,   55,   57,  832,  832,   57,  714,  832,  832,
       57,   55,   55,   55,   55,   55,   55,   55,   55,   55,
      832,   57,  715,  716,   57,  832,  832,   57,  832,   55,

       55,   55,   55,   55,   55,   55,   55,   55,  718,   57,
      832,  832,   57,  832,  832,   57,  717,   55,   55,   55,
      832,  721,  832,  719,   55,   55,   55,   57,  832,   55,
       55,   55,  832,  832,   57,  722,  832,  832,  720,   57,
       55,   55,   55,   55,   55,   55,  832,   55,   55,   55,
       57,  832,  832,   57,   55,   55,   55,   57,   55,   55,
       55,   55,   55,   55,   57,   55,   55,   55,   57,  832,
      832,   57,   55,   55,   55,   57,   55,   55,   55,   55,
       55,   55,   57,  832,  832,  832,   57,  832,  832,   57,
      832,  832,  723,  725,  724,  832,  728,   55,   55,   55,

      832,  729,   55,   55,   55,  832,  832,   57,   55,   55,
       55,  730,   57,   55,   55,   55,  832,  832,   57,  832,
      832,  832,  832,   57,  731,   55,   55,   55,  832,  732,
      734,   55,   55,   55,  832,   57,   55,   55,   55,  832,
      832,   57,   55,   55,   55,  832,   57,  832,  832,  736,
      735,  832,   57,   55,   55,   55,   55,   55,   55,  832,
      738,  737,  832,   57,  832,  832,   57,   55,   55,   55,
       55,   55,   55,   55,   55,   55,  832,   57,  832,  832,
       57,  832,  739,   57,   55,   55,   55,  740,   55,   55,
       55,  832,  741,  832,   57,  832,  832,  832,   57,  832,

       55,   55,   55,  832,  832,  742,   55,   55,   55,  743,
       57,   55,   55,   55,  832,  745,   57,   55,   55,   55,
      832,   57,  744,  832,  746,  747,  832,   57,  832,   55,
       55,   55,   55,   55,   55,   55,   55,   55,  748,   57,
      832,  832,   57,  832,  832,   57,   55,   55,   55,  832,
      749,   55,   55,   55,  832,  750,   57,   55,   55,   55,
      832,   57,   55,   55,   55,  832,  832,   57,   55,   55,
       55,  832,   57,  752,  832,  832,  751,  832,   57,   55,
       55,   55,   55,   55,   55,  832,  832,  832,  753,   57,
      832,  832,   57,  832,  832,  754,   55,   55,   55,  755,

      832,  756,   55,   55,   55,  832,   57,   55,   55,   55,
      757,  832,   57,   55,   55,   55,  832,   57,   55,   55,
       55,  758,  832,   57,  832,   55,   55,   55,   57,   55,
       55,   55,  832,  832,  759,   57,  832,  832,  760,   57,
       55,   55,   55,  832,  832,  761,  832,  832,  832,  832,
       57,   55,   55,   55,  832,  832,  763,  762,   55,   55,
       55,   57,   55,   55,   55,   55,   55,   55,   57,   55,
       55,   55,   57,  832,  832,   57,   55,   55,   55,   57,
       55,   55,   55,   55,   55,   55,   57,   55,   55,   55,
       57,  832,  764,   57,   55,   55,   55,   57,  832,  832,

      832,  767,  832,  770,   57,  832,  832,  771,  768,   55,
       55,   55,  832,  832,  769,   55,   55,   55,  832,   57,
      832,  832,   55,   55,   55,   57,   55,   55,   55,  832,
      773,  774,   57,  832,  775,  832,   57,   55,   55,   55,
       55,   55,   55,   55,   55,   55,  832,   57,  832,  832,
       57,  776,  832,   57,   55,   55,   55,   55,   55,   55,
      777,   55,   55,   55,   57,  832,  832,   57,   55,   55,
       55,   57,  832,  832,   55,   55,   55,  832,   57,  832,
      832,  832,  780,  778,   57,   55,   55,   55,  832,  779,
       55,   55,   55,  832,  832,   57,  781,  832,  832,  832,

       57,   55,   55,   55,  832,  832,  783,  782,   55,   55,
       55,   57,   55,   55,   55,   55,   55,   55,   57,   55,
       55,   55,   57,  832,  784,   57,   55,   55,   55,   57,
       55,   55,   55,   55,   55,   55,   57,   55,   55,   55,
       57,  832,  832,   57,  832,  785,  786,   57,   55,   55,
       55,  832,  832,  832,  789,  832,  832,  787,   57,  832,
      791,  788,   55,   55,   55,   55,   55,   55,   55,   55,
       55,  790,   57,  832,  832,   57,  832,  832,   57,   55,
       55,   55,   55,   55,   55,   55,   55,   55,  832,   57,
      832,  832,   57,  832,  832,   57,   55,   55,   55,   55,

       55,   55,   55,   55,   55,  832,   57,  832,  832,   57,
      832,  832,   57,   55,   55,   55,  792,  794,   55,   55,
       55,  832,  832,   57,   55,   55,   55,  832,   57,   55,
       55,   55,  832,  832,   57,  832,  832,  796,  832,   57,
       55,   55,   55,  832,   55,   55,   55,   55,   55,   55,
       57,  832,  832,  797,   57,  798,  832,   57,   55,   55,
       55,   55,   55,   55,   55,   55,   55,  832,   57,  832,
      832,   57,  832,  832,   57,  799,  832,  800,   55,   55,
       55,  832,  801,  832,   55,   55,   55,  832,   57,   55,
       55,   55,  832,  802,   57,   55,   55,   55,  832,   57,

      832,   55,   55,   55,  832,   57,  832,   55,   55,   55,
      803,   57,   55,   55,   55,  832,  804,   57,   55,   55,
       55,  832,   57,   55,   55,   55,  832,  805,   57,  832,
       55,   55,   55,   57,   55,   55,   55,  832,  832,  806,
       57,   55,   55,   55,   57,  807,  832,   55,   55,   55,
      832,   57,  832,  832,  808,  832,  809,   57,   55,   55,
       55,   55,   55,   55,   55,   55,   55,  832,   57,  832,
      832,   57,  832,  832,   57,   55,   55,   55,   55,   55,
       55,   55,   55,   55,  832,   57,  832,  811,   57,  832,
      832,   57,  832,  832,  812,  832,  813,   55,   55,   55,

       55,   55,   55,   55,   55,   55,  832,   57,  814,  832,
       57,  832,  832,   57,   55,   55,   55,   55,   55,   55,
       55,   55,   55,  832,   57,  832,  832,   57,  832,  832,
       57,   55,   55,   55,  832,  815,   55,   55,   55,  832,
      832,   57,   55,   55,   55,  832,   57,  832,  816,   55,
       55,   55,   57,   55,   55,   55,   55,   55,   55,   57,
      817,  832,  832,   57,  832,  832,   57,  832,  832,  819,
       55,   55,   55,  820,   55,   55,   55,  832,  832,  832,
       57,  832,  821,  832,   57,  832,  832,  822,   55,   55,
       55,   55,   55,   55,   55,   55,   55,  832,   57,  832,

      832,   57,  832,  832,   57,  823,   55,   55,   55,   55,
       55,   55,   55,   55,   55,  832,   57,  832,  832,   57,
      825,  832,   57,  832,  832,  832,  832,  832,  832,  832,
      827,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  829,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      831,   50,   50,   50,   50,   50,   50,   50,   56,   56,
       56,   69,   69,   69,   69,   69,   69,   69,   75,   75,
       75,  141,  141,  141,  141,  141,  141,  142,  142,  142,
      142,  142,  143,  143,  832,  143,  143,  143,  169,  169,

        5,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832
    } ;

static yyconst short int yy_chk[5363] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    3,    4,    4,    9,  352,    3,    9,    4,
        7,    7,    7,   14,   14,  352,   14,   15,   15,   17,
       17,   17,   51,   51,  840,   14,   20,   20,   20,   17,
      144,  144,   18,   18,   18,  352,   20,   21,   21,   21,

       50,   50,   18,  828,  826,   14,   50,   21,   22,   22,
       22,   54,   54,   54,   69,  824,  818,   69,   22,    3,
      810,    4,    8,    8,    8,   17,   70,   70,   79,   70,
      795,   79,    8,   19,   19,   19,    8,    8,    8,    8,
        8,    8,   18,   19,   23,   23,   23,   21,    8,    8,
        8,    8,    8,   21,   23,   22,  772,  766,   22,   24,
       24,   24,   23,   25,   25,   25,  727,   19,  164,   24,
      726,  164,  680,   25,   19,   26,   26,   26,   76,   76,
       19,   76,  679,   19,  630,   26,   27,   27,   27,   28,
       28,   28,  141,  141,  621,  620,   27,   24,  141,   28,

      564,   26,   29,   29,   29,  555,   30,   30,   30,  554,
       25,  489,   29,   31,   31,   31,   30,  433,  166,  166,
       29,  166,   26,   31,  687,  687,  687,   28,   32,   32,
       32,   31,  413,  354,   27,   33,   33,   33,   32,  329,
       29,  262,   28,   29,   30,   33,  239,   34,   34,   34,
      238,   36,   36,   36,   29,  146,   30,   34,   35,   35,
       35,   36,  145,   16,   32,   37,   37,   37,   35,   38,
       38,   38,   32,  171,   32,   37,  171,   33,   13,   38,
       39,   39,   39,   12,   40,   40,   40,   11,    5,   36,
       39,   34,   33,   34,   40,   41,   41,   41,   72,   72,

       35,   72,    0,   34,    0,   41,  353,   38,   35,  353,
       72,   37,    0,    0,    0,   37,   42,   42,   42,   43,
       43,   43,   39,   44,   44,   44,   42,    0,    0,   43,
       72,   40,    0,   44,   46,   46,   46,   45,   45,   45,
       47,   47,   47,   41,   46,   41,    0,   45,  170,  170,
       47,  170,   43,    0,   42,    0,   44,   43,   48,   48,
       48,   44,    0,   55,   55,   55,   77,   77,   48,   77,
       44,   45,   43,   55,   47,   45,   44,    0,   77,    0,
       46,   56,   56,   56,   58,   58,   58,   45,   55,    0,
      432,   56,   48,  432,   58,   59,   59,   59,   77,    0,

       48,   60,   60,   60,    0,   59,   61,   61,   61,  261,
      261,   60,  261,    0,   55,    0,   61,   62,   62,   62,
       58,    0,   63,   63,   63,    0,    0,   62,    0,   59,
        0,    0,   63,   64,   64,   64,   65,   65,   65,   66,
       66,   66,   59,   64,   61,    0,   65,    0,   60,   66,
       67,   67,   67,    0,   68,   68,   68,  733,  733,  733,
       67,    0,    0,   62,   68,    0,   78,   78,    0,   78,
       65,   62,   63,    0,    0,   63,    0,   66,   78,    0,
        0,   64,  733,   83,   83,   83,   65,    0,   67,   84,
       84,   84,   68,   83,    0,    0,   68,    0,   78,   84,

       85,   85,   85,   86,   86,   86,   87,   87,   87,    0,
       85,   68,    0,   86,  168,  168,   87,  168,   88,   88,
       88,   89,   89,   89,    0,   83,  168,   84,   88,    0,
        0,   89,   90,   90,   90,   91,   91,   91,   92,   92,
       92,    0,   90,    0,   85,   91,  168,    0,   92,    0,
       86,    0,   87,    0,    0,   89,   88,   93,   93,   93,
       94,   94,   94,   95,   95,   95,    0,   93,    0,    0,
       94,    0,   92,   95,   90,    0,   96,   96,   96,   97,
       97,   97,   93,    0,    0,   91,   96,    0,    0,   97,
        0,   98,   98,   98,    0,   97,    0,    0,   94,    0,

       95,   98,   99,   99,   99,  100,  100,  100,   97,   95,
        0,    0,   99,    0,    0,  100,  101,  101,  101,  102,
      102,  102,  103,  103,  103,   97,  101,  260,  260,  102,
      260,   97,  103,  104,  104,  104,    0,    0,  101,  260,
        0,   98,    0,  104,  105,  105,  105,    0,  106,  106,
      106,  100,    0,   99,  105,    0,    0,  102,  106,  260,
      107,  107,  107,  108,  108,  108,    0,  104,    0,  103,
      107,    0,    0,  108,  109,  109,  109,    0,  111,  111,
      111,    0,  106,    0,  109,  110,  110,  110,  111,  107,
      112,  112,  112,    0,  105,  110,  113,  113,  113,    0,

      112,  114,  114,  114,    0,    0,  113,  115,  115,  115,
        0,  114,    0,    0,  109,  108,    0,  115,  116,  116,
      116,    0,  110,  112,  117,  117,  117,    0,  116,    0,
      111,  118,  118,  118,  117,  119,  119,  119,    0,    0,
      113,  118,  120,  120,  120,  119,  121,  121,  121,  122,
      122,  122,  120,    0,  114,  115,  121,    0,    0,  122,
      123,  123,  123,  124,  124,  124,    0,    0,  116,  117,
      123,  117,    0,  124,  125,  125,  125,    0,  126,  126,
      126,    0,    0,  118,  125,    0,    0,  119,  126,  127,
      127,  127,  120,  123,    0,  122,  128,  128,  128,  127,

      122,  124,    0,  121,    0,    0,  128,  129,  129,  129,
      123,  130,  130,  130,  131,  131,  131,  129,    0,    0,
        0,  130,    0,    0,  131,  132,  132,  132,  126,    0,
      128,    0,  128,    0,    0,  132,    0,    0,    0,  127,
      133,  133,  133,  134,  134,  134,  130,    0,  131,    0,
      133,  129,    0,  134,  135,  135,  135,    0,  136,  136,
      136,  137,  137,  137,  135,  138,  138,  138,  136,    0,
      132,  137,  139,  139,  139,  138,  133,    0,  134,  140,
      140,  140,  139,  147,  147,  147,  148,  148,  148,  140,
        0,    0,  136,  147,    0,    0,  148,    0,    0,  135,

      136,    0,    0,  137,  149,  149,  149,    0,    0,  138,
      135,  150,  150,  150,  149,  151,  151,  151,  152,  152,
      152,  150,  148,    0,  139,  151,    0,    0,  152,    0,
        0,  140,  153,  153,  153,  147,  154,  154,  154,    0,
        0,  149,  153,  155,  155,  155,  154,    0,  156,  156,
      156,  151,    0,  155,    0,  152,  150,  150,  156,  157,
      157,  157,    0,  158,  158,  158,  153,    0,    0,  157,
      154,    0,    0,  158,  159,  159,  159,  160,  160,  160,
      161,  161,  161,    0,  159,    0,  156,  160,    0,  155,
      161,  162,  162,  162,  163,  163,  163,    0,  172,  172,

      172,  162,    0,    0,  163,  173,  173,  173,  172,  157,
      158,  157,  174,  174,  174,  173,    0,    0,  159,  175,
      175,  175,  174,    0,    0,  159,  160,    0,    0,  175,
      161,  176,  176,  176,    0,    0,  162,    0,    0,  173,
        0,  176,  163,  172,  177,  177,  177,    0,  174,  178,
      178,  178,    0,    0,  177,  179,  179,  179,    0,  178,
        0,  175,  180,  180,  180,  179,  181,  181,  181,  182,
      182,  182,  180,  183,  183,  183,  181,    0,  177,  182,
      184,  184,  184,  183,    0,  176,    0,  182,    0,    0,
      184,  185,  185,  185,    0,  180,    0,  186,  186,  186,

      178,  185,  187,  187,  187,    0,  179,  186,    0,    0,
        0,  181,  187,  188,  188,  188,    0,    0,  184,    0,
        0,  183,    0,  188,  189,  189,  189,  190,  190,  190,
        0,  188,    0,  185,  189,    0,    0,  190,  186,    0,
      191,  191,  191,  187,  192,  192,  192,    0,    0,  190,
      191,  193,  193,  193,  192,    0,    0,  189,  194,  194,
      194,  193,  195,  195,  195,  197,  197,  197,  194,  196,
      196,  196,  195,    0,    0,  197,    0,  192,    0,  196,
      198,  198,  198,  193,  199,  199,  199,  191,    0,    0,
      198,    0,    0,  191,  199,  194,  200,  200,  200,  201,

      201,  201,  202,  202,  202,    0,  200,    0,    0,  201,
      197,    0,  202,  203,  203,  203,  198,  195,  204,  204,
      204,  196,    0,  203,  205,  205,  205,    0,  204,  206,
      206,  206,    0,    0,  205,  207,  207,  207,  200,  206,
      208,  208,  208,    0,    0,  207,  201,  209,  209,  209,
      208,  210,  210,  210,  211,  211,  211,  209,  203,  204,
        0,  210,    0,    0,  211,    0,  205,  212,  212,  212,
        0,  213,  213,  213,  206,    0,    0,  212,    0,    0,
      209,  213,  207,  214,  214,  214,    0,  211,  215,  215,
      215,  208,    0,  214,    0,    0,  210,    0,  215,    0,

      216,  216,  216,    0,    0,  212,  217,  217,  217,  213,
      216,  218,  218,  218,    0,    0,  217,    0,  214,    0,
        0,  218,  219,  219,  219,    0,  215,    0,  220,  220,
      220,    0,  219,  221,  221,  221,    0,    0,  220,  222,
      222,  222,    0,  221,  223,  223,  223,    0,    0,  222,
        0,    0,  216,    0,  223,    0,  218,    0,  217,  224,
      224,  224,    0,    0,  225,  225,  225,    0,    0,  224,
        0,  221,  219,  220,  225,  226,  226,  226,  227,  227,
      227,    0,    0,  222,    0,  226,    0,    0,  227,  228,
      228,  228,  229,  229,  229,    0,  223,  224,    0,  228,

        0,    0,  229,  230,  230,  230,    0,    0,    0,  225,
      231,  231,  231,  230,    0,    0,  227,  232,  232,  232,
      231,  233,  233,  233,    0,  226,    0,  232,    0,    0,
      228,  233,  234,  234,  234,    0,  229,  235,  235,  235,
        0,    0,  234,    0,  236,  236,  236,  235,  237,  237,
      237,  230,    0,  232,  236,  233,    0,    0,  237,  240,
      240,  240,  231,  232,  241,  241,  241,    0,    0,  240,
        0,  234,    0,    0,  241,  242,  242,  242,    0,    0,
      236,  243,  243,  243,    0,  242,  244,  244,  244,  237,
      235,  243,  245,  245,  245,    0,  244,    0,  246,  246,

      246,  240,  245,  247,  247,  247,    0,  241,  246,  248,
      248,  248,    0,  247,  249,  249,  249,    0,    0,  248,
      250,  250,  250,  244,  249,  251,  251,  251,    0,  243,
      250,    0,  242,    0,  245,  251,    0,  244,  252,  252,
      252,  253,  253,  253,    0,    0,    0,  247,  252,    0,
      249,  253,    0,    0,  248,  254,  254,  254,    0,  251,
        0,  255,  255,  255,    0,  254,  256,  256,  256,    0,
      250,  255,  257,  257,  257,    0,  256,  253,  258,  258,
      258,    0,  257,    0,  259,  259,  259,    0,  258,    0,
      252,    0,    0,  254,  259,  263,  263,  263,    0,  264,

      264,  264,  265,  265,  265,  263,    0,    0,  255,  264,
        0,    0,  265,    0,  255,    0,  258,  257,    0,  256,
        0,    0,  259,  266,  266,  266,  267,  267,  267,  263,
      268,  268,  268,  266,    0,    0,  267,  269,  269,  269,
      268,    0,  264,  270,  270,  270,    0,  269,  271,  271,
      271,    0,    0,  270,    0,  265,    0,    0,  271,  266,
        0,    0,  271,    0,  267,    0,  272,  272,  272,  273,
      273,  273,    0,    0,    0,  269,  272,    0,    0,  273,
        0,    0,  268,  274,  274,  274,  275,  275,  275,  276,
      276,  276,    0,  274,    0,  270,  275,  273,    0,  276,

      277,  277,  277,    0,  272,  278,  278,  278,    0,    0,
      277,  279,  279,  279,    0,  278,    0,  280,  280,  280,
        0,  279,  281,  281,  281,    0,    0,  280,    0,    0,
      275,    0,  281,    0,  277,  280,  280,    0,  277,    0,
        0,  276,    0,  282,  282,  282,  283,  283,  283,  284,
      284,  284,  278,  282,    0,    0,  283,    0,    0,  284,
      281,  285,  285,  285,  286,  286,  286,  279,    0,    0,
        0,  285,    0,    0,  286,  287,  287,  287,  284,  285,
        0,  288,  288,  288,    0,  287,    0,  289,  289,  289,
      283,  288,  290,  290,  290,    0,  282,  289,    0,  291,

      291,  291,  290,    0,  292,  292,  292,    0,  287,  291,
      293,  293,  293,    0,  292,  294,  294,  294,    0,    0,
      293,    0,    0,  288,    0,  294,  295,  295,  295,  289,
      290,  296,  296,  296,    0,    0,  295,  297,  297,  297,
        0,  296,    0,    0,  293,    0,    0,  297,  298,  298,
      298,    0,    0,  291,  292,    0,    0,  294,  298,    0,
      299,  299,  299,  300,  300,  300,  301,  301,  301,  296,
      299,    0,    0,  300,  295,    0,  301,  302,  302,  302,
      304,  304,  304,  297,  303,  303,  303,  302,    0,    0,
      304,  305,  305,  305,  303,    0,  299,  306,  306,  306,

      298,  305,  307,  307,  307,    0,    0,  306,  308,  308,
      308,    0,  307,  309,  309,  309,    0,  302,  308,    0,
      301,    0,    0,  309,  303,    0,    0,  304,  310,  310,
      310,  311,  311,  311,  312,  312,  312,    0,  310,    0,
        0,  311,  308,    0,  312,    0,    0,  309,  313,  313,
      313,    0,  307,  314,  314,  314,    0,    0,  313,  315,
      315,  315,  310,  314,  316,  316,  316,  311,    0,  315,
      317,  317,  317,    0,  316,  318,  318,  318,    0,    0,
      317,  319,  319,  319,    0,  318,  320,  320,  320,    0,
        0,  319,  321,  321,  321,    0,  320,    0,    0,    0,

      316,    0,  321,  322,  322,  322,    0,  315,  318,    0,
      323,  323,  323,  322,  324,  324,  324,    0,    0,  319,
      323,  325,  325,  325,  324,  326,  326,  326,  327,  327,
      327,  325,    0,  320,    0,  326,    0,    0,  327,    0,
        0,  322,  328,  328,  328,  331,  331,  331,  332,  332,
      332,    0,  328,    0,    0,  331,    0,    0,  332,    0,
      324,  323,    0,  326,  333,  333,  333,    0,  325,  327,
      334,  334,  334,    0,  333,  328,  335,  335,  335,    0,
      334,  332,  336,  336,  336,    0,  335,  337,  337,  337,
        0,    0,  336,  338,  338,  338,    0,  337,    0,  331,

      340,  340,  340,  338,  334,  339,  339,  339,    0,    0,
      340,  341,  341,  341,    0,  339,    0,    0,  335,    0,
        0,  341,  342,  342,  342,  343,  343,  343,    0,    0,
        0,    0,  342,    0,  336,  343,    0,    0,  337,  344,
      344,  344,    0,  339,    0,  341,  338,    0,    0,  344,
        0,    0,  340,    0,  345,  345,  345,    0,  346,  346,
      346,    0,    0,  343,  345,    0,    0,  342,  346,  347,
      347,  347,  348,  348,  348,    0,    0,  344,    0,  347,
        0,    0,  348,  349,  349,  349,  350,  350,  350,  351,
      351,  351,    0,  349,    0,    0,  350,    0,    0,  351,

        0,    0,  355,  355,  355,  356,  356,  356,  345,    0,
      348,  346,  355,  347,    0,  356,  349,  357,  357,  357,
      358,  358,  358,  359,  359,  359,    0,  357,    0,    0,
      358,    0,    0,  359,  360,  360,  360,    0,  356,  361,
      361,  361,    0,    0,  360,  362,  362,  362,    0,  361,
      363,  363,  363,    0,  355,  362,    0,    0,  358,    0,
      363,  357,    0,    0,  364,  364,  364,  365,  365,  365,
        0,    0,  360,  359,  364,    0,    0,  365,  366,  366,
      366,  365,  367,  367,  367,  368,  368,  368,  366,  369,
      369,  369,  367,    0,  363,  368,    0,  364,    0,  369,

      370,  370,  370,  371,  371,  371,  372,  372,  372,    0,
      370,  366,    0,  371,    0,    0,  372,  373,  373,  373,
      374,  374,  374,    0,    0,  369,    0,  373,    0,  367,
      374,  368,  375,  375,  375,    0,  376,  376,  376,  377,
      377,  377,  375,    0,    0,  371,  376,    0,    0,  377,
      378,  378,  378,    0,    0,  370,  379,  379,  379,    0,
      378,    0,  372,    0,  373,    0,  379,  380,  380,  380,
      381,  381,  381,    0,  374,    0,    0,  380,    0,    0,
      381,    0,  375,    0,  382,  382,  382,    0,  376,    0,
        0,  377,    0,    0,  382,  383,  383,  383,  379,    0,

        0,  379,  384,  384,  384,  383,  379,    0,    0,  385,
      385,  385,  384,  386,  386,  386,  381,  382,  380,  385,
      387,  387,  387,  386,  388,  388,  388,  389,  389,  389,
      387,    0,    0,  383,  388,    0,    0,  389,  390,  390,
      390,  391,  391,  391,  384,  393,  393,  393,  390,    0,
        0,  391,  392,  392,  392,  393,    0,  385,  394,  394,
      394,    0,  392,    0,  386,  389,    0,    0,  394,    0,
        0,  387,    0,    0,  388,  395,  395,  395,    0,  391,
      396,  396,  396,  393,    0,  395,  392,  397,  397,  397,
      396,  398,  398,  398,  399,  399,  399,  397,  400,  400,

      400,  398,    0,    0,  399,  401,  401,  401,  400,  395,
        0,  394,    0,    0,  396,  401,  402,  402,  402,  403,
      403,  403,  404,  404,  404,    0,  402,    0,    0,  403,
        0,  397,  404,    0,  405,  405,  405,  406,  406,  406,
      399,    0,    0,  398,  405,    0,    0,  406,    0,    0,
      400,    0,    0,  403,  407,  407,  407,  402,  408,  408,
      408,  409,  409,  409,  407,    0,    0,    0,  408,    0,
      406,  409,  410,  410,  410,  411,  411,  411,  412,  412,
      412,    0,  410,    0,  405,  411,    0,    0,  412,  414,
      414,  414,    0,  415,  415,  415,    0,    0,  408,  414,

        0,    0,  407,  415,    0,  410,    0,    0,  411,    0,
        0,  409,  416,  416,  416,  417,  417,  417,  418,  418,
      418,    0,  416,  412,    0,  417,    0,    0,  418,    0,
        0,  414,  419,  419,  419,  420,  420,  420,  421,  421,
      421,  415,  419,    0,    0,  420,    0,    0,  421,  422,
      422,  422,  418,  423,  423,  423,  424,  424,  424,  422,
        0,    0,  416,  423,    0,    0,  424,  417,    0,  420,
      425,  425,  425,    0,  419,  426,  426,  426,    0,    0,
      425,    0,  427,  427,  427,  426,  428,  428,  428,    0,
        0,  422,  427,    0,  424,    0,  428,  429,  429,  429,

      430,  430,  430,    0,    0,  423,    0,  429,    0,    0,
      430,  431,  431,  431,    0,    0,  427,  434,  434,  434,
      425,  431,  435,  435,  435,    0,  426,  434,  436,  436,
      436,    0,  435,  437,  437,  437,  428,    0,  436,    0,
      438,  438,  438,  437,    0,    0,  430,  431,    0,  429,
      438,  439,  439,  439,  440,  440,  440,    0,    0,  434,
        0,  439,  436,    0,  440,  441,  441,  441,    0,    0,
      435,  442,  442,  442,    0,  441,  443,  443,  443,    0,
        0,  442,    0,  444,  444,  444,  443,  445,  445,  445,
        0,    0,  438,  444,    0,    0,    0,  445,  440,    0,

        0,  442,    0,    0,  441,  446,  446,  446,  447,  447,
      447,  441,    0,    0,    0,  446,    0,    0,  447,  448,
      448,  448,  443,    0,  449,  449,  449,  445,    0,  448,
      450,  450,  450,  444,  449,  451,  451,  451,    0,    0,
      450,  452,  452,  452,    0,  451,    0,    0,  446,    0,
        0,  452,  453,  453,  453,  454,  454,  454,    0,  455,
      455,  455,  453,    0,    0,  454,  449,    0,  451,  455,
      448,  456,  456,  456,  457,  457,  457,  452,    0,    0,
      450,  456,    0,    0,  457,  458,  458,  458,    0,  454,
      459,  459,  459,    0,    0,  458,    0,    0,  455,    0,

      459,    0,    0,  453,  460,  460,  460,    0,  457,  461,
      461,  461,    0,    0,  460,  462,  462,  462,  456,  461,
        0,    0,  460,    0,  459,  462,  463,  463,  463,  464,
      464,  464,    0,  460,    0,    0,  463,  458,    0,  464,
      465,  465,  465,  460,    0,  466,  466,  466,    0,    0,
      465,  467,  467,  467,    0,  466,  468,  468,  468,    0,
        0,  467,  469,  469,  469,    0,  468,  462,    0,    0,
        0,    0,  469,  470,  470,  470,    0,    0,  465,  466,
        0,  464,    0,  470,  471,  471,  471,    0,  472,  472,
      472,  473,  473,  473,  471,    0,    0,  467,  472,    0,

      468,  473,  474,  474,  474,    0,  469,  475,  475,  475,
        0,    0,  474,    0,  476,  476,  476,  475,    0,  477,
      477,  477,    0,  470,  476,    0,    0,  473,  471,  477,
      478,  478,  478,  479,  479,  479,    0,    0,  472,    0,
      478,    0,    0,  479,  480,  480,  480,    0,    0,  475,
        0,    0,  476,    0,  480,  481,  481,  481,  482,  482,
      482,  483,  483,  483,    0,  481,    0,    0,  482,    0,
        0,  483,  484,  484,  484,  485,  485,  485,  480,    0,
        0,    0,  484,    0,  479,  485,  486,  486,  486,  481,
        0,    0,  482,  487,  487,  487,  486,    0,    0,    0,

      485,    0,    0,  487,    0,    0,  481,  481,    0,  485,
      485,    0,  488,  488,  488,    0,    0,  484,    0,    0,
      486,  486,  488,  490,  490,  490,  485,  491,  491,  491,
      492,  492,  492,  490,    0,    0,    0,  491,    0,    0,
      492,  487,  487,    0,  487,    0,  488,  487,  493,  493,
      493,  494,  494,  494,  488,  495,  495,  495,  493,    0,
        0,  494,  496,  496,  496,  495,    0,    0,  492,  491,
        0,    0,  496,    0,    0,  490,  497,  497,  497,  498,
      498,  498,  499,  499,  499,    0,  497,    0,    0,  498,
      493,    0,  499,  500,  500,  500,    0,  494,  501,  501,

      501,    0,  495,  500,    0,  502,  502,  502,  501,  503,
      503,  503,    0,    0,  496,  502,  504,  504,  504,  503,
        0,  498,    0,  497,    0,    0,  504,  505,  505,  505,
      506,  506,  506,    0,  499,    0,    0,  505,    0,  500,
      506,    0,  507,  507,  507,  503,  508,  508,  508,  501,
        0,  502,  507,    0,    0,    0,  508,    0,  509,  509,
      509,    0,    0,  505,  510,  510,  510,  504,  509,  511,
      511,  511,    0,    0,  510,    0,    0,  506,    0,  511,
      512,  512,  512,    0,  513,  513,  513,    0,    0,  507,
      512,    0,    0,  508,  513,    0,    0,  510,  514,  514,

      514,  515,  515,  515,  516,  516,  516,    0,  514,    0,
      509,  515,    0,    0,  516,    0,  514,  517,  517,  517,
        0,    0,  512,  518,  518,  518,    0,  517,  519,  519,
      519,    0,    0,  518,    0,  515,    0,  513,  519,  520,
      520,  520,  521,  521,  521,    0,  522,  522,  522,  520,
        0,    0,  521,    0,    0,  517,  522,  523,  523,  523,
      524,  524,  524,  525,  525,  525,    0,  523,    0,    0,
      524,    0,    0,  525,    0,  521,  526,  526,  526,    0,
      519,  527,  527,  527,    0,  522,  526,  528,  528,  528,
      520,  527,    0,  524,    0,  523,    0,  528,  529,  529,

      529,  530,  530,  530,  531,  531,  531,    0,  529,    0,
        0,  530,    0,  525,  531,  532,  532,  532,  527,  533,
      533,  533,  534,  534,  534,  532,  535,  535,  535,  533,
        0,    0,  534,  536,  536,  536,  535,    0,    0,  528,
      529,    0,    0,  536,  537,  537,  537,  538,  538,  538,
      531,    0,    0,  530,  537,    0,    0,  538,  539,  539,
      539,  533,    0,  534,  540,  540,  540,  532,  539,  541,
      541,  541,    0,    0,  540,  542,  542,  542,    0,  541,
        0,  543,  543,  543,    0,  542,    0,  544,  544,  544,
        0,  543,    0,  545,  545,  545,  537,  544,    0,  538,

        0,    0,  539,  545,  546,  546,  546,    0,    0,  542,
      547,  547,  547,    0,  546,    0,    0,  540,  543,    0,
      547,  548,  548,  548,    0,  544,  549,  549,  549,    0,
        0,  548,  550,  550,  550,    0,  549,  552,  552,  552,
      545,    0,  550,  551,  551,  551,    0,  552,    0,    0,
      546,    0,    0,  551,  553,  553,  553,  556,  556,  556,
        0,    0,    0,    0,  553,    0,    0,  556,    0,    0,
      549,  548,  557,  557,  557,  558,  558,  558,  559,  559,
      559,    0,  557,    0,  550,  558,    0,  552,  559,    0,
      551,  560,  560,  560,    0,    0,  556,    0,  561,  561,

      561,  560,  562,  562,  562,  563,  563,  563,  561,  558,
      557,    0,  562,    0,    0,  563,    0,  565,  565,  565,
      566,  566,  566,    0,  567,  567,  567,  565,    0,    0,
      566,  559,  561,    0,  567,  568,  568,  568,  569,  569,
      569,    0,    0,  560,    0,  568,    0,    0,  569,    0,
        0,  563,  570,  570,  570,    0,  566,  567,  562,  565,
        0,    0,  570,  571,  571,  571,  572,  572,  572,  573,
      573,  573,    0,  571,    0,    0,  572,    0,    0,  573,
        0,    0,  568,  574,  574,  574,  575,  575,  575,    0,
      569,    0,    0,  574,    0,    0,  575,    0,  570,    0,

        0,  571,    0,  576,  576,  576,    0,  577,  577,  577,
        0,    0,  572,  576,    0,    0,  573,  577,  578,  578,
      578,  574,  579,  579,  579,  580,  580,  580,  578,  581,
      581,  581,  579,    0,    0,  580,  582,  582,  582,  581,
        0,  583,  583,  583,    0,    0,  582,  584,  584,  584,
        0,  583,  585,  585,  585,    0,  578,  584,    0,  577,
        0,    0,  585,  580,  586,  586,  586,  587,  587,  587,
      588,  588,  588,    0,  586,  581,    0,  587,    0,    0,
      588,    0,  582,  583,    0,  584,    0,  585,    0,    0,
      585,  589,  589,  589,  590,  590,  590,  591,  591,  591,

        0,  589,  585,    0,  590,    0,    0,  591,  586,  592,
      592,  592,  587,  593,  593,  593,  594,  594,  594,  592,
      595,  595,  595,  593,    0,    0,  594,  593,    0,    0,
      595,  596,  596,  596,    0,    0,  589,  597,  597,  597,
        0,  596,  598,  598,  598,    0,    0,  597,    0,  599,
      599,  599,  598,  595,  600,  600,  600,    0,  594,  599,
        0,  592,    0,    0,  600,  601,  601,  601,    0,    0,
      596,  602,  602,  602,    0,  601,  603,  603,  603,    0,
      598,  602,  604,  604,  604,    0,  603,  599,    0,  597,
      600,    0,  604,    0,  605,  605,  605,    0,    0,  606,

      606,  606,    0,  601,  605,  607,  607,  607,  602,  606,
      603,  608,  608,  608,    0,  607,    0,  609,  609,  609,
        0,  608,  610,  610,  610,    0,  604,  609,  611,  611,
      611,    0,  610,  612,  612,  612,    0,    0,  611,  605,
        0,  606,    0,  612,  613,  613,  613,  607,  614,  614,
      614,  615,  615,  615,  613,  609,    0,    0,  614,    0,
        0,  615,    0,  616,  616,  616,    0,  617,  617,  617,
        0,    0,  610,  616,  618,  618,  618,  617,  619,  619,
      619,  622,  622,  622,  618,  623,  623,  623,  619,    0,
      613,  622,  624,  624,  624,  623,  625,  625,  625,    0,

      614,  617,  624,  626,  626,  626,  625,  616,  615,  627,
      627,  627,    0,  626,    0,    0,  619,    0,    0,  627,
        0,    0,  618,    0,  623,  628,  628,  628,    0,    0,
      625,    0,    0,  622,    0,  628,    0,  626,  629,  629,
      629,    0,  624,    0,  631,  631,  631,    0,  629,  632,
      632,  632,    0,  627,  631,  633,  633,  633,    0,  632,
      634,  634,  634,    0,    0,  633,  635,  635,  635,    0,
      634,  636,  636,  636,    0,    0,  635,  637,  637,  637,
        0,  636,  631,  638,  638,  638,    0,  637,  639,  639,
      639,    0,    0,  638,    0,  640,  640,  640,  639,    0,

        0,  632,    0,    0,  636,  640,  634,  633,    0,    0,
      637,  641,  641,  641,  642,  642,  642,  643,  643,  643,
        0,  641,    0,    0,  642,    0,    0,  643,    0,  644,
      644,  644,    0,    0,  639,    0,  645,  645,  645,  644,
      646,  646,  646,    0,  641,  640,  645,  642,    0,    0,
      646,  647,  647,  647,  648,  648,  648,  649,  649,  649,
        0,  647,    0,    0,  648,  642,  644,  649,  650,  650,
      650,  651,  651,  651,    0,  652,  652,  652,  650,    0,
        0,  651,    0,    0,  647,  652,  646,  653,  653,  653,
        0,    0,  648,    0,  654,  654,  654,  653,  655,  655,

      655,    0,    0,  649,  654,  656,  656,  656,  655,  651,
      652,  649,  657,  657,  657,  656,  658,  658,  658,    0,
        0,  650,  657,    0,    0,  653,  658,  659,  659,  659,
      660,  660,  660,  661,  661,  661,    0,  659,    0,    0,
      660,    0,  655,  661,  662,  662,  662,    0,    0,  656,
        0,  657,    0,    0,  662,    0,    0,  659,  658,  663,
      663,  663,    0,  664,  664,  664,  665,  665,  665,  663,
      666,  666,  666,  664,    0,    0,  665,  662,    0,    0,
      666,  667,  667,  667,  668,  668,  668,  669,  669,  669,
        0,  667,  663,  664,  668,    0,    0,  669,    0,  670,

      670,  670,  671,  671,  671,  672,  672,  672,  666,  670,
        0,    0,  671,    0,    0,  672,  665,  673,  673,  673,
        0,  669,    0,  667,  674,  674,  674,  673,    0,  675,
      675,  675,    0,    0,  674,  671,    0,    0,  668,  675,
      676,  676,  676,  677,  677,  677,    0,  678,  678,  678,
      676,    0,    0,  677,  682,  682,  682,  678,  681,  681,
      681,  683,  683,  683,  682,  684,  684,  684,  681,    0,
        0,  683,  685,  685,  685,  684,  686,  686,  686,  688,
      688,  688,  685,    0,    0,    0,  686,    0,    0,  688,
        0,    0,  676,  678,  677,    0,  681,  689,  689,  689,

        0,  682,  690,  690,  690,    0,    0,  689,  691,  691,
      691,  684,  690,  692,  692,  692,    0,    0,  691,    0,
        0,    0,    0,  692,  685,  693,  693,  693,    0,  686,
      688,  694,  694,  694,    0,  693,  695,  695,  695,    0,
        0,  694,  696,  696,  696,    0,  695,    0,    0,  690,
      689,    0,  696,  697,  697,  697,  698,  698,  698,    0,
      693,  692,    0,  697,    0,    0,  698,  699,  699,  699,
      700,  700,  700,  701,  701,  701,    0,  699,    0,    0,
      700,    0,  694,  701,  702,  702,  702,  695,  703,  703,
      703,    0,  696,    0,  702,    0,    0,    0,  703,    0,

      704,  704,  704,    0,    0,  697,  705,  705,  705,  699,
      704,  706,  706,  706,    0,  701,  705,  707,  707,  707,
        0,  706,  700,    0,  702,  703,    0,  707,    0,  708,
      708,  708,  709,  709,  709,  710,  710,  710,  704,  708,
        0,    0,  709,    0,    0,  710,  711,  711,  711,    0,
      705,  712,  712,  712,    0,  707,  711,  713,  713,  713,
        0,  712,  714,  714,  714,    0,    0,  713,  715,  715,
      715,    0,  714,  710,    0,    0,  709,    0,  715,  716,
      716,  716,  717,  717,  717,    0,    0,    0,  711,  716,
        0,    0,  717,    0,    0,  712,  718,  718,  718,  713,

        0,  714,  719,  719,  719,    0,  718,  720,  720,  720,
      715,    0,  719,  721,  721,  721,    0,  720,  722,  722,
      722,  716,    0,  721,    0,  723,  723,  723,  722,  724,
      724,  724,    0,    0,  717,  723,    0,    0,  719,  724,
      725,  725,  725,    0,    0,  720,    0,    0,    0,    0,
      725,  728,  728,  728,    0,    0,  722,  721,  729,  729,
      729,  728,  730,  730,  730,  731,  731,  731,  729,  732,
      732,  732,  730,    0,    0,  731,  734,  734,  734,  732,
      735,  735,  735,  736,  736,  736,  734,  737,  737,  737,
      735,    0,  725,  736,  738,  738,  738,  737,    0,    0,

        0,  728,    0,  731,  738,    0,    0,  732,  729,  739,
      739,  739,    0,    0,  730,  740,  740,  740,    0,  739,
        0,    0,  741,  741,  741,  740,  742,  742,  742,    0,
      735,  736,  741,    0,  737,    0,  742,  743,  743,  743,
      744,  744,  744,  745,  745,  745,    0,  743,    0,    0,
      744,  738,    0,  745,  746,  746,  746,  747,  747,  747,
      741,  748,  748,  748,  746,    0,    0,  747,  749,  749,
      749,  748,    0,    0,  750,  750,  750,    0,  749,    0,
        0,    0,  745,  742,  750,  751,  751,  751,    0,  743,
      752,  752,  752,    0,    0,  751,  746,    0,    0,    0,

      752,  753,  753,  753,    0,    0,  749,  748,  754,  754,
      754,  753,  755,  755,  755,  757,  757,  757,  754,  756,
      756,  756,  755,    0,  750,  757,  758,  758,  758,  756,
      759,  759,  759,  760,  760,  760,  758,  761,  761,  761,
      759,    0,    0,  760,    0,  753,  754,  761,  762,  762,
      762,    0,    0,    0,  757,    0,    0,  755,  762,    0,
      759,  756,  763,  763,  763,  764,  764,  764,  767,  767,
      767,  758,  763,    0,    0,  764,    0,    0,  767,  768,
      768,  768,  769,  769,  769,  770,  770,  770,    0,  768,
        0,    0,  769,    0,    0,  770,  771,  771,  771,  773,

      773,  773,  774,  774,  774,    0,  771,    0,    0,  773,
        0,    0,  774,  775,  775,  775,  763,  768,  776,  776,
      776,    0,    0,  775,  777,  777,  777,    0,  776,  778,
      778,  778,    0,    0,  777,    0,    0,  773,    0,  778,
      779,  779,  779,    0,  780,  780,  780,  781,  781,  781,
      779,    0,    0,  774,  780,  775,    0,  781,  782,  782,
      782,  783,  783,  783,  784,  784,  784,    0,  782,    0,
        0,  783,    0,    0,  784,  777,    0,  778,  785,  785,
      785,    0,  779,    0,  786,  786,  786,    0,  785,  787,
      787,  787,    0,  781,  786,  788,  788,  788,    0,  787,

        0,  789,  789,  789,    0,  788,    0,  790,  790,  790,
      782,  789,  791,  791,  791,    0,  785,  790,  792,  792,
      792,    0,  791,  794,  794,  794,    0,  787,  792,    0,
      796,  796,  796,  794,  797,  797,  797,    0,    0,  788,
      796,  798,  798,  798,  797,  790,    0,  799,  799,  799,
        0,  798,    0,    0,  791,    0,  792,  799,  800,  800,
      800,  801,  801,  801,  802,  802,  802,    0,  800,    0,
        0,  801,    0,    0,  802,  803,  803,  803,  804,  804,
      804,  805,  805,  805,    0,  803,    0,  798,  804,    0,
        0,  805,    0,    0,  799,    0,  800,  806,  806,  806,

      807,  807,  807,  808,  808,  808,    0,  806,  801,    0,
      807,    0,    0,  808,  809,  809,  809,  811,  811,  811,
      812,  812,  812,    0,  809,    0,    0,  811,    0,    0,
      812,  813,  813,  813,    0,  806,  814,  814,  814,    0,
        0,  813,  815,  815,  815,    0,  814,    0,  808,  816,
      816,  816,  815,  817,  817,  817,  819,  819,  819,  816,
      809,    0,    0,  817,    0,    0,  819,    0,    0,  811,
      820,  820,  820,  812,  821,  821,  821,    0,    0,    0,
      820,    0,  814,    0,  821,    0,    0,  816,  822,  822,
      822,  823,  823,  823,  825,  825,  825,    0,  822,    0,

        0,  823,    0,    0,  825,  817,  827,  827,  827,  829,
      829,  829,  831,  831,  831,    0,  827,    0,    0,  829,
      820,    0,  831,    0,    0,    0,    0,    0,    0,    0,
      825,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  827,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      829,  833,  833,  833,  833,  833,  833,  833,  834,  834,
      834,  835,  835,  835,  835,  835,  835,  835,  836,  836,
      836,  837,  837,  837,  837,  837,  837,  838,  838,  838,
      838,  838,  839,  839,    0,  839,  839,  839,  841,  841,

      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832
    } ;

#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 ".\\parser.l"
#define INITIAL 0
#line 2 ".\\parser.l"
#include "pch.h"
#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

#include "rdogramma.h"
#include "rdoparser.h"

#define YY_INTERACTIVE

#define YY_USER_INIT {                      \
	rdoParse::currParser->lexer_loc_init(); \
}

#define YY_USER_ACTION {                      \
	rdoParse::currParser->lexer_loc_action(); \
}

#define comment 1

#line 1920 "rdolex.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 26 ".\\parser.l"


#line 2050 "rdolex.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 833 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5301 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 28 ".\\parser.l"
return(Resource_type);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 29 ".\\parser.l"
return(permanent);
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 30 ".\\parser.l"
return(Parameters);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 31 ".\\parser.l"
return(integer);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 32 ".\\parser.l"
return(real);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 33 ".\\parser.l"
return(End);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 34 ".\\parser.l"
return(temporary);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 35 ".\\parser.l"
return(such_as);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 36 ".\\parser.l"
return(dblpoint);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 38 ".\\parser.l"
return(Resources);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 39 ".\\parser.l"
return(trace_keyword);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 40 ".\\parser.l"
return(no_trace);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 42 ".\\parser.l"
return(Constant);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 43 ".\\parser.l"
return(Body);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 44 ".\\parser.l"
return(Function_keyword);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 45 ".\\parser.l"
return(Type_keyword);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 46 ".\\parser.l"
return(algorithmic);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 47 ".\\parser.l"
return(table_keyword);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 48 ".\\parser.l"
return(list_keyword);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 49 ".\\parser.l"
return(Calculate_if);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 50 ".\\parser.l"
return(Sequence);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 51 ".\\parser.l"
return(uniform);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 52 ".\\parser.l"
return(exponential);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 53 ".\\parser.l"
return(normal_keyword);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 54 ".\\parser.l"
return(by_hist);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 55 ".\\parser.l"
return(enumerative);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 57 ".\\parser.l"
return(Exist);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 58 ".\\parser.l"
return(Not_Exist);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 59 ".\\parser.l"
return(For_All);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 60 ".\\parser.l"
return(Not_For_All);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 61 ".\\parser.l"
return(neq);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 62 ".\\parser.l"
return(leq);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 63 ".\\parser.l"
return(geq);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 64 ".\\parser.l"
return(NoCheck);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 65 ".\\parser.l"
return(Calculate_if);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 66 ".\\parser.l"
return(or_keyword);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 67 ".\\parser.l"
return(and_keyword);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 70 ".\\parser.l"
return(Pattern);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 71 ".\\parser.l"
return(operation);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 72 ".\\parser.l"
return(irregular_event);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 73 ".\\parser.l"
return(rule_keyword);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 74 ".\\parser.l"
return(keyboard);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 75 ".\\parser.l"
return(Relevant_resources);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 76 ".\\parser.l"
return(Keep);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 77 ".\\parser.l"
return(Create_keyword);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 78 ".\\parser.l"
return(Erase);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 79 ".\\parser.l"
return(NonExist);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 80 ".\\parser.l"
return(NoChange);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 81 ".\\parser.l"
return(Time);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 82 ".\\parser.l"
return(Choice);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 83 ".\\parser.l"
return(from_keyword);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 84 ".\\parser.l"
return(first_keyword);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 85 ".\\parser.l"
return(Convert_begin);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 86 ".\\parser.l"
return(Convert_end);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 87 ".\\parser.l"
return(Convert_rule);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 88 ".\\parser.l"
return(Convert_event);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 89 ".\\parser.l"
return(with_max);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 90 ".\\parser.l"
return(with_min);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 91 ".\\parser.l"
return(Operations);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 92 ".\\parser.l"
return(Results);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 93 ".\\parser.l"
return(watch_par);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 94 ".\\parser.l"
return(watch_state);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 95 ".\\parser.l"
return(watch_quant);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 96 ".\\parser.l"
return(watch_value);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 97 ".\\parser.l"
return(get_value);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 99 ".\\parser.l"
return(Model_name);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 100 ".\\parser.l"
return(Resource_file);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 101 ".\\parser.l"
return(OprIev_file);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 102 ".\\parser.l"
return(Frame_file);	
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 103 ".\\parser.l"
return(Statistic_file);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 104 ".\\parser.l"
return(Results_file);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 105 ".\\parser.l"
return(Trace_file);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 106 ".\\parser.l"
return(Show_mode);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 107 ".\\parser.l"
return(Frame_number);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 108 ".\\parser.l"
return(Show_rate);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 109 ".\\parser.l"
return(Run_StartTime);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 110 ".\\parser.l"
return(Trace_StartTime);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 111 ".\\parser.l"
return(Trace_EndTime);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 112 ".\\parser.l"
return(Terminate_if);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 113 ".\\parser.l"
return(Break_point);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 114 ".\\parser.l"
return(Seed);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 115 ".\\parser.l"
return(NoShow);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 116 ".\\parser.l"
return(Monitor);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 117 ".\\parser.l"
return(Animation);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 120 ".\\parser.l"
return(Decision_point);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 121 ".\\parser.l"
return(search_keyword);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 122 ".\\parser.l"
return(trace_stat);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 123 ".\\parser.l"
return(trace_tops);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 124 ".\\parser.l"
return(trace_all);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 125 ".\\parser.l"
return(Condition_keyword);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 126 ".\\parser.l"
return(Term_condition);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 127 ".\\parser.l"
return(Evaluate_by);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 128 ".\\parser.l"
return(Compare_tops);
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 129 ".\\parser.l"
return(NO);
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 130 ".\\parser.l"
return(YES);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 131 ".\\parser.l"
return(Activities);
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 132 ".\\parser.l"
return(Process);
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 133 ".\\parser.l"
return(SEIZE);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 134 ".\\parser.l"
return(GENERATE);
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 135 ".\\parser.l"
return(value_before);
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 136 ".\\parser.l"
return(value_after);
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 137 ".\\parser.l"
return(value_before);
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 138 ".\\parser.l"
return(value_after);
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 139 ".\\parser.l"
return(some);
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 141 ".\\parser.l"
return(Frame);
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 142 ".\\parser.l"
return(Show_if);
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 143 ".\\parser.l"
return(Back_picture);
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 144 ".\\parser.l"
return(Show);
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 145 ".\\parser.l"
return(frm_cell);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 146 ".\\parser.l"
return(text);
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 147 ".\\parser.l"
return(transparent);
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 148 ".\\parser.l"
return(bitmap);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 149 ".\\parser.l"
return(s_bmp);
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 150 ".\\parser.l"
return(rect_keyword);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 151 ".\\parser.l"
return(r_rect);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 152 ".\\parser.l"
return(line);
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 153 ".\\parser.l"
return(ellipse);
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 154 ".\\parser.l"
return(triang);
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 155 ".\\parser.l"
return(active);
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 157 ".\\parser.l"
{
						std::string n1(YYText());
						int len = n1.length();
						std::string *name = new std::string(n1, 1, len-2);
						rdoParse::currParser->addName(name);
						rdoParse::currParser->lexer_setvalue((int)name);
						return QUOTED_IDENTIF;
					}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 166 ".\\parser.l"
{
						std::string *name = new std::string(YYText());
						rdoParse::currParser->addName(name);
						rdoParse::currParser->lexer_setvalue((int)name);
						return QUOTED_IDENTIF_BAD;
					}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 173 ".\\parser.l"
BEGIN(comment);
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 174 ".\\parser.l"
;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 175 ".\\parser.l"
;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 176 ".\\parser.l"
BEGIN(INITIAL);
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 178 ".\\parser.l"
BEGIN(comment);
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 179 ".\\parser.l"
BEGIN(INITIAL);
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 181 ".\\parser.l"
;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 182 ".\\parser.l"
return(YYText()[YYLeng()-1]);
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 184 ".\\parser.l"
{
						std::string n1(YYText(), YYLeng()-2);
						rdoParse::currParser->lexer_setvalue(atoi(n1.c_str()));
						unput('.');
						unput('.');
						rdoParse::currParser->lexer_loc_delta_pos( -2 );
						return INT_CONST;
					}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 193 ".\\parser.l"
{
						rdoParse::currParser->lexer_setvalue(atoi(YYText()));
						return INT_CONST;
					}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 198 ".\\parser.l"
{
						double *val = rdoParse::currParser->addDouble(new double(atof(YYText())));
						rdoParse::currParser->lexer_setvalue((int)val);
						return REAL_CONST;
					}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 204 ".\\parser.l"
{
						std::string *name = new std::string(YYText());
						rdoParse::currParser->addName(name);
						rdoParse::currParser->lexer_setvalue((int)name);
						return IDENTIF_BAD;
					}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 211 ".\\parser.l"
{
					std::string n1(YYText());
					std::string::size_type pos = n1.find_first_of("\r\n\t :");
					std::string *name = new std::string(n1, 0, pos);
					rdoParse::currParser->addName(name);
					rdoParse::currParser->lexer_setvalue((int)name);
					return IDENTIF_set;
				}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 220 ".\\parser.l"
{
					std::string n1(YYText());
					std::string::size_type pos = n1.find_first_of("\r\n\t :");
					std::string *name = new std::string(n1, 0, pos);
					rdoParse::currParser->addName(name);
					rdoParse::currParser->lexer_setvalue((int)name);
					return IDENTIF_NoChange_NoChange;
				}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 229 ".\\parser.l"
{
					std::string n1(YYText());
					std::string::size_type pos = n1.find_first_of("\r\n\t :");
					std::string *name = new std::string(n1, 0, pos);
					rdoParse::currParser->addName(name);
					rdoParse::currParser->lexer_setvalue((int)name);
					return IDENTIF_NoChange;
				}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 238 ".\\parser.l"
{
					std::string n1(YYText());
					std::string::size_type pos = n1.find_first_of("\r\n\t :");
					std::string *name = new std::string(n1, 0, pos);
					rdoParse::currParser->addName(name);
					rdoParse::currParser->lexer_setvalue((int)name);
					return IDENTIF_COLON;
				}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 247 ".\\parser.l"
{
					std::string *name = new std::string(YYText());
					rdoParse::currParser->addName(name);
					rdoParse::currParser->lexer_setvalue((int)name);
					return IDENTIF;
				}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 254 ".\\parser.l"
ECHO;
	YY_BREAK
#line 2900 "rdolex.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(comment):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 833 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 833 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 832);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 254 ".\\parser.l"

