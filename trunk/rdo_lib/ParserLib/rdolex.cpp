#line 2 "rdolex.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
class istream;
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 133
#define YY_END_OF_BUFFER 134
static yyconst short int yy_acclist[913] =
    {   0,
      119,  119,  134,  133,  123,  133,  132,  133,  133,  124,
      133,  124,  133,  124,  133,  127,  133,  124,  133,  124,
      133,  132,  133,  132,  133,  132,  133,  132,  133,  132,
      133,  132,  133,  132,  133,  132,  133,  132,  133,  132,
      133,  132,  133,  132,  133,  132,  133,  132,  133,  132,
      133,  132,  133,  132,  133,  132,  133,  132,  133,  132,
      133,  132,  133,  132,  133,  132,  133,  132,  133,  132,
      133,  132,  133,  132,  133,  132,  133,  132,  133,  132,
      133,  132,  133,  118,  133,  119,  133,  120,  133,  121,
      133,  123,  132,  131,  132,  132,  132,  132,  132,  132,

      132,  132,  132,  132,  132,  117,  127,    9,  126,   32,
       31,   33,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,   94,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,   36,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      122,  119,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  125,  126,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,

      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,   95,  132,  132,  132,   37,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,    6,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  126,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,   44,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,   81,

      132,  105,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,   51,  132,  132,  132,  132,
      132,  113,  132,   19,  132,  132,  132,  132,  132,  132,
        5,  132,  111,  132,   41,  132,  132,  132,  101,  132,
      132,  132,  132,  107,  132,  132,  132,  132,  132,  132,
      132,  132,  128,  132,  132,   14,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,   49,  132,   16,  132,  132,  132,  132,  132,
      132,  132,   46,  132,   27,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,

      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,   52,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  110,  132,  132,  132,   18,  132,  132,
       11,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  102,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,   50,
      132,  132,   45,  132,  132,  132,  132,  132,  132,  132,
       82,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  116,  132,  132,  109,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,

       24,  132,  132,  132,  112,  132,   86,  132,  132,  132,
      132,  132,  115,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,   29,  132,
      132,  132,  132,   83,  132,  132,   34,  132,  132,  132,
      132,  132,  132,  132,  132,  103,  132,  132,  132,  132,
      132,  132,  132,  132,  132,   25,  132,  114,  132,  132,
      132,  132,  132,    4,  132,  132,  132,  132,  132,  132,
        8,  132,  132,  132,  132,  132,  132,   22,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,

      132,  132,  132,  132,  132,  132,  132,   38,  132,  132,
      132,   60,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,   48,  132,   47,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  106,  132,  132,  132,   42,  132,   12,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,   57,  132,   58,  132,  132,  132,  132,
      132,   13,  132,  132,  132,   15,  132,  132,  132,  132,
      132,   21,  132,  132,   84,  132,  132,  132,  132,  132,
      132,  132,  132,  132,   28,  132,  132,  132,  132,  132,

      132,   73,  132,   75,  132,  132,  132,  132,  132,  132,
      132,  132,  132,   65,  132,  132,   39,  132,    2,  132,
        7,  132,   89,  132,  132,  132,  132,  132,  132,   61,
      132,  132,  132,  132,  130,  132,  132,  132,   90,  132,
      132,  132,  132,  132,  132,  132,   10,  132,  132,  132,
      132,  132,  132,  132,  132,   69,  132,  132,   66,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,   72,
      132,  132,  132,  132,  132,   87,  132,   88,  132,  132,
      132,  132,  132,  132,  132,   96,  132,  132,  132,  132,
      132,   59,  132,    3,  132,  132,  132,  132,   80,  132,

      132,  132,   54,  132,  132,  132,  132,   30,  132,   68,
      132,  132,  132,  132,  132,  132,  132,  132,   17,  132,
       26,  132,   23,  132,  132,  108,  132,   98,  100,  132,
      132,   63,  132,   62,  132,   64,  132,  132,  132,  132,
       92,  132,  132,  132,  132,   20,   35,  132,  132,  132,
       55,  132,   74,  132,  132,   71,  132,  132,  132,   79,
      132,  132,  132,  132,   97,   99,  132,  104,  132,   93,
      132,  132,  132,  132,  132,   53,  132,   56,  132,   67,
      132,   76,  132,  132,   78,  132,  132,  132,  132,  132,
        1,  132,  132,   70,  132,  132,  132,   85,  132,  132,

       91,  132,   77,  132,   40,  132,  132,  132,  132,  129,
       43,  132
    } ;

static yyconst short int yy_accept[796] =
    {   0,
        1,    1,    1,    2,    3,    4,    5,    7,    9,   10,
       12,   14,   16,   18,   20,   22,   24,   26,   28,   30,
       32,   34,   36,   38,   40,   42,   44,   46,   48,   50,
       52,   54,   56,   58,   60,   62,   64,   66,   68,   70,
       72,   74,   76,   78,   80,   82,   84,   86,   88,   90,
       92,   93,   93,   94,   95,   96,   97,   98,   99,  100,
      101,  102,  103,  104,  105,  106,  106,  107,  108,  109,
      110,  111,  112,  113,  114,  115,  116,  117,  118,  119,
      120,  121,  122,  123,  124,  125,  127,  128,  129,  130,
      131,  132,  133,  134,  135,  136,  137,  138,  139,  140,

      141,  142,  143,  144,  145,  146,  147,  148,  149,  150,
      151,  152,  153,  154,  156,  157,  158,  159,  160,  161,
      162,  163,  164,  165,  166,  167,  168,  169,  170,  171,
      171,  172,  173,  173,  173,  174,  175,  176,  177,  178,
      179,  180,  181,  182,  183,  184,  185,  186,  187,  188,
      189,  190,  191,  191,  192,  193,  194,  195,  196,  197,
      198,  199,  200,  201,  202,  203,  204,  205,  206,  207,
      208,  209,  210,  211,  212,  213,  214,  215,  216,  218,
      219,  220,  222,  223,  224,  225,  226,  227,  228,  229,
      230,  231,  232,  233,  234,  235,  236,  237,  238,  239,

      240,  241,  242,  243,  244,  245,  246,  247,  248,  249,
      250,  251,  252,  253,  254,  255,  256,  257,  257,  257,
      258,  259,  260,  261,  262,  263,  265,  266,  267,  268,
      269,  270,  271,  272,  273,  274,  275,  276,  277,  277,
      278,  279,  280,  281,  282,  283,  284,  285,  286,  287,
      288,  290,  291,  292,  293,  294,  295,  296,  297,  298,
      299,  300,  302,  304,  305,  306,  307,  308,  309,  310,
      311,  312,  313,  314,  315,  316,  318,  319,  320,  321,
      322,  324,  326,  327,  328,  329,  330,  331,  333,  335,
      337,  338,  339,  341,  342,  343,  344,  346,  347,  348,

      349,  350,  351,  352,  353,  353,  354,  355,  356,  358,
      359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
      369,  370,  371,  372,  373,  375,  377,  378,  379,  380,
      381,  382,  383,  385,  387,  388,  389,  390,  391,  392,
      393,  394,  395,  396,  397,  398,  399,  400,  401,  402,
      403,  404,  405,  406,  407,  408,  409,  410,  411,  412,
      414,  415,  416,  417,  418,  419,  420,  421,  422,  423,
      424,  426,  427,  428,  430,  431,  433,  434,  435,  436,
      437,  438,  439,  439,  440,  441,  442,  443,  444,  445,
      446,  448,  449,  450,  451,  452,  453,  454,  455,  456,

      457,  458,  459,  460,  462,  463,  465,  466,  467,  468,
      469,  470,  471,  473,  474,  475,  476,  477,  478,  479,
      480,  481,  482,  483,  484,  485,  486,  488,  489,  491,
      492,  493,  494,  495,  496,  497,  498,  499,  500,  501,
      503,  504,  505,  507,  509,  510,  511,  512,  513,  515,
      516,  516,  517,  518,  519,  519,  520,  521,  522,  523,
      524,  525,  526,  527,  528,  529,  530,  531,  532,  533,
      534,  535,  536,  537,  538,  539,  541,  542,  543,  544,
      546,  547,  549,  550,  551,  552,  553,  554,  555,  556,
      558,  559,  560,  561,  562,  563,  564,  565,  566,  568,

      570,  571,  572,  573,  574,  576,  577,  578,  579,  580,
      581,  583,  584,  585,  586,  587,  588,  590,  590,  590,
      591,  592,  593,  594,  595,  596,  597,  598,  598,  599,
      600,  601,  602,  603,  604,  605,  606,  607,  608,  610,
      611,  612,  614,  615,  616,  617,  618,  619,  620,  621,
      622,  623,  625,  627,  628,  629,  630,  631,  632,  633,
      634,  635,  636,  637,  638,  639,  640,  641,  642,  643,
      645,  646,  647,  649,  651,  652,  653,  654,  655,  656,
      657,  658,  658,  658,  659,  660,  661,  662,  663,  664,
      666,  668,  668,  669,  670,  671,  672,  674,  675,  676,

      678,  679,  680,  681,  682,  684,  685,  687,  688,  689,
      690,  691,  692,  693,  694,  695,  697,  698,  699,  700,
      701,  702,  704,  706,  707,  708,  709,  710,  711,  712,
      713,  714,  716,  717,  719,  721,  723,  725,  726,  727,
      728,  728,  728,  729,  730,  732,  733,  734,  735,  736,
      737,  738,  739,  741,  742,  743,  744,  745,  746,  747,
      749,  750,  751,  752,  753,  754,  755,  756,  758,  759,
      761,  762,  763,  764,  765,  766,  767,  768,  769,  770,
      772,  773,  774,  775,  776,  778,  780,  781,  781,  781,
      782,  783,  784,  785,  786,  786,  788,  789,  790,  791,

      792,  794,  796,  797,  798,  799,  801,  802,  803,  805,
      806,  807,  808,  810,  812,  813,  814,  815,  816,  817,
      818,  819,  821,  823,  825,  826,  828,  829,  829,  831,
      832,  834,  836,  838,  838,  839,  840,  841,  843,  844,
      845,  846,  849,  850,  851,  853,  855,  856,  858,  859,
      860,  862,  863,  864,  865,  866,  868,  868,  870,  872,
      873,  874,  875,  876,  878,  880,  882,  884,  885,  887,
      888,  889,  889,  890,  891,  893,  894,  896,  897,  898,
      898,  900,  901,  903,  905,  907,  907,  908,  908,  909,
      909,  910,  911,  913,  913

    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    4,    1,    1,    5,    6,
        6,    6,    7,    6,    7,    8,    6,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   10,    1,   11,
       12,   13,    1,    1,   14,   15,   16,   17,   18,   19,
       20,   20,   21,   20,   22,   20,   23,   24,   25,   26,
       20,   27,   28,   29,   20,   20,   20,   20,   30,   20,
        6,    1,    6,    1,   31,    1,   32,   33,   34,   35,

       36,   37,   38,   39,   40,   20,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   20,   56,    1,   57,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   20,    1,    1,    1,    1,    1,    1,
        1,   20,   20,   20,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20
    } ;

static yyconst int yy_meta[58] =
    {   0,
        1,    2,    3,    2,    1,    1,    1,    1,    2,    2,
        1,    1,    1,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    1,    4
    } ;

static yyconst short int yy_base[800] =
    {   0,
        0,    0,   55,   56,  281, 3837,   58,  112,  273, 3837,
      266,  262,   54,   52,  242,   64,   68,  115,   66,   88,
      100,   70,   79,  141,  147,   83,  159,   85,  162,  168,
      165,  171,  174,  180,  186,  197,  201,  216,  221,  226,
      235,  237,  247,  241,  262,  274,  191,    0, 3837, 3837,
       81,  250,   94, 3837,  253,  287,  290,  300,  302,  305,
      314,  318,  323,  327,  337,  241,  237,   91, 3837,  333,
     3837, 3837, 3837,  342,  355,  364,  368,  373,  378,  383,
      387,  392,  397,  401,  406,  416,  418,  421,  433,  442,
      445,  451,  455,  457,  461,  470,  473,  475,  487,  489,

      498,  492,  501,  504,  507,  516,  518,  522,  528,  533,
      538,  543,  554,  560,  563,  575,  590,  592,  594,  596,
      605,  607,  610,  616,  628,  634,  630,  643,  647,  175,
      170,    0,  176,  170,  652,  661,  663,  673,  675,  677,
      679,  689,  698,  703,  712,  716,  721,  725,  727,  730,
     3837,  199,   68,  741,  743,  745,  747,  761,  764,  775,
      778,  780,  789,  791,  795,  800,  804,  806,  815,  818,
      820,  832,  836,  845,  848,  850,  854,  859,  863,  868,
      872,  882,  884,  886,  888,  900,  902,  904,  913,  916,
      919,  928,  930,  932,  946,  952,  958,  967,  969,  971,

      973,  982,  984,  986,  988,  997, 1001, 1003, 1013, 1016,
     1018, 1030, 1033, 1036, 1046, 1048, 1050,  185,  147, 1067,
     1069, 1073, 1078, 1082, 1092, 1088, 1098, 1101, 1103, 1112,
     1116, 1131, 1133, 1143, 1147, 1149, 1153, 1163,  185,  183,
     1165, 1168, 1174, 1177, 1180, 1183, 1193, 1198, 1203, 1216,
     1212, 1218, 1221, 1232, 1234, 1236, 1247, 1251, 1253, 1267,
     1270, 1272, 1281, 1283, 1286, 1292, 1297, 1303, 1308, 1312,
     1314, 1317, 1327, 1329, 1331, 1333, 1344, 1353, 1356, 1359,
     1365, 1370, 1374, 1379, 1383, 1385, 1395, 1397, 1399, 1410,
     1416, 1421, 1425, 1430, 1434, 1436, 1439, 1448, 1450, 1454,

     1463, 1465, 1475, 1469,  152, 3837, 1480, 1484, 1486, 1501,
     1503, 1507, 1516, 1518, 1520, 1532, 1534, 1536, 1538, 1548,
     1550, 1552, 1561, 1565, 1570, 1574, 1583, 1585, 1588, 1600,
     1602, 1604, 1615, 1617, 1619, 1621, 1632, 1635, 1641, 1644,
     1646, 1655, 1657, 1667, 1669, 1671, 1673, 1684, 1687, 1690,
     1699, 1705, 1714, 1723, 1703, 1735, 1738, 1744, 1749, 1754,
     1758, 1763, 1767, 1769, 1772, 1778, 1787, 1796, 1798, 1809,
     1811, 1813, 1815, 1824, 1828, 1830, 1833, 1846, 1848, 1852,
     1861, 1863,  155, 1865, 1867, 1878, 1883, 1887, 1892, 1897,
     1901, 1906, 1912, 1915, 1918, 1921, 1932, 1934, 1937, 1953,

     1955, 1957, 1966, 1968, 1972, 1983, 1986, 1989, 1998, 2002,
     2007, 2011, 2013, 2017, 2022, 2027, 2033, 2036, 2038, 2051,
     2053, 2055, 2057, 2066, 2069, 2075, 2071, 2089, 2092, 2094,
     2104, 2115, 2117, 2120, 2126, 2131, 2135, 2140, 2146, 2149,
     2155, 2161, 2164, 2173, 2179, 2182, 2184, 2188, 2197, 2199,
     2203, 2208, 2219, 2221,  141, 2235, 2241, 2244, 2246, 2257,
     2260, 2272, 2274, 2285, 2287, 2289, 2300, 2304, 2306, 2318,
     2321, 2324, 2333, 2337, 2339, 2343, 2348, 2354, 2357, 2369,
     2371, 2373, 2382, 2388, 2391, 2393, 2406, 2408, 2410, 2421,
     2424, 2426, 2438, 2441, 2443, 2447, 2452, 2461, 2458, 2463,

     2467, 2472, 2478, 2483, 2492, 2496, 2501, 2505, 2511, 2516,
     2521, 2527, 2530, 2536, 2540, 2542, 2545,  142,  123, 2551,
     2555, 2560, 2564, 2566, 2577, 2579, 2591,  120, 2594, 2596,
     2600, 2609, 2611, 2615, 2626, 2635, 2637, 2639, 2641, 2650,
     2653, 2655, 2666, 2664, 2668, 2670, 2681, 2683, 2685, 2694,
     2696, 2711, 2720, 2722, 2726, 2731, 2742, 2740, 2744, 2746,
     2755, 2758, 2760, 2764, 2773, 2776, 2778, 2787, 2798, 2800,
     2804, 2809, 2813, 2822, 2826, 2831, 2840, 2842, 2844, 2846,
     2857,  106,  118, 2859, 2861, 2863, 2872, 2875, 2877, 2886,
     2898,  110, 2900, 2903, 2912, 2914, 2918, 2923, 2928, 2932,

     2937, 2941, 2946, 2961, 2958, 2963, 2972, 2976, 2981, 2985,
     2991, 2994, 2997, 3003, 3006, 3012, 3015, 3021, 3024, 3027,
     3036, 3038, 3048, 3050, 3052, 3066, 3068, 3070, 3072, 3082,
     3086, 3084, 3088, 3097, 3099, 3101, 3111, 3120, 3122, 3125,
       99,   87, 3136, 3134, 3138, 3140, 3149, 3151,  150, 3154,
     3163, 3165, 3175, 3178, 3180, 3184, 3190, 3194, 3205, 3209,
     3218, 3215, 3220, 3224, 3233, 3235, 3238, 3244, 3247, 3249,
     3264, 3267, 3276, 3279, 3282, 3288, 3291, 3294, 3285, 3297,
     3307, 3309, 3326, 3330, 3336, 3340, 3345,   75,   72, 3349,
     3351, 3354, 3360, 3369,  256, 3371, 3373, 3382, 3384, 3388,

     3398, 3400, 3404, 3409, 3413, 3415, 3424, 3428, 3434, 3439,
     3443, 3445, 3448, 3457, 3463, 3467, 3472, 3478, 3482, 3484,
     3487, 3496, 3498, 3507, 3510, 3519, 3837,   75, 3521, 3523,
     3532, 3534, 3536,   64, 3538, 3547, 3550, 3553, 3562, 3566,
     3568, 3577, 3579, 3581, 3583, 3592, 3596, 3607, 3611, 3616,
     3625, 3627, 3631, 3636, 3837, 3640,   91, 3642, 3646, 3651,
     3657, 3663, 3666, 3672, 3675, 3677, 3681, 3686, 3690, 3695,
     3704,   66, 3706, 3710, 3715, 3721, 3724, 3726, 3730,   69,
     3739, 3741, 3743, 3756, 3761,   50, 3765,   54, 3767,   43,
     3771, 3837, 3776, 3837, 3820, 3823, 3826, 3830, 3834

    } ;

static yyconst short int yy_def[800] =
    {   0,
      794,    1,  795,  795,  794,  794,  794,  796,  797,  794,
      794,  794,  794,  794,  794,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  798,  799,  794,  794,
      794,  794,  796,  794,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  797,  797,  794,  794,  794,
      794,  794,  794,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,

      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  798,
      798,  799,  794,  794,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      794,  794,  794,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,

      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  794,  794,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  794,  794,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,

      796,  796,  796,  796,  794,  794,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  794,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,

      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      794,  796,  796,  796,  794,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,

      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  794,  794,  796,
      796,  796,  796,  796,  796,  796,  796,  794,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  794,  794,  796,  796,  796,  796,  796,  796,  796,
      796,  794,  796,  796,  796,  796,  796,  796,  796,  796,

      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      794,  794,  796,  796,  796,  796,  796,  796,  794,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  794,  794,  796,
      796,  796,  796,  796,  794,  796,  796,  796,  796,  796,

      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  794,  794,  796,  796,
      796,  796,  796,  794,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  794,  796,  794,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  794,  796,  796,  796,  796,  796,  796,  796,  794,
      796,  796,  796,  796,  796,  794,  796,  794,  796,  794,
      796,  794,  796,    0,  794,  794,  794,  794,  794

    } ;

static yyconst short int yy_nxt[3895] =
    {   0,
        6,    7,    7,    8,    9,   10,   11,   12,   13,    6,
       14,   10,   15,   16,   17,   18,   19,   20,   21,   19,
       19,   22,   23,   24,   25,   19,   26,   27,   28,   29,
       19,   30,   31,   19,   19,   32,   33,   34,   19,   35,
       36,   37,   19,   38,   39,   40,   19,   41,   42,   43,
       44,   45,   46,   19,   19,   47,    6,   49,   49,   51,
       51,   70,   68,   71,   72,   52,   52,   52,   52,   52,
       52,   52,   52,   54,  239,   54,  240,   54,  792,   54,
       52,   52,   51,   51,   52,   52,   52,   52,   54,   52,
       52,  790,   54,  788,   54,   52,   52,   54,   70,   68,

      786,   52,   52,   54,  780,   84,  772,   74,  757,   54,
      755,   50,   50,   52,   52,   75,   52,   52,   89,  728,
       94,   54,  727,   85,   54,   55,   56,   57,   58,   59,
       60,  689,   95,   90,  688,   80,   61,   62,   63,   64,
       65,   81,   52,   52,   82,  649,   76,   83,   52,   52,
       54,  695,  695,   77,  642,  641,   54,  592,  583,   78,
       52,   52,   79,   52,   52,   86,   52,   52,   54,   52,
       52,   54,   52,   52,   54,   52,   52,   54,  582,   96,
       54,   52,   52,   54,  528,   87,  455,   52,   52,   54,
      383,  240,   88,  240,   91,   54,  306,   92,   52,   52,

      305,   97,   52,   52,  100,  219,   54,  152,   93,   98,
       54,   99,  102,  105,  103,  107,  153,   52,   52,  101,
      218,  106,   52,   52,  104,   54,  131,   52,   52,  108,
       54,  131,  110,  109,  153,   54,   52,   52,   52,   52,
      111,   67,   52,   52,   54,   67,   54,  131,   52,   52,
       54,   52,   52,   73,   52,   52,   54,  695,  695,   54,
      112,  115,   54,   52,   52,  116,  113,  119,  114,   69,
      117,   54,  120,  133,   68,   52,   52,   67,  123,  734,
      794,  121,  124,   54,  126,  118,  135,  122,   52,   52,
      794,   52,   52,  127,  125,  794,   54,  794,  134,   54,

      794,   52,   52,   52,   52,  128,   52,   52,  794,   54,
      794,   54,  794,  129,   54,   52,   52,  794,  136,   52,
       52,  794,  794,   54,   52,   52,  794,   54,   52,   52,
      794,  137,   54,  794,  138,  139,   54,  794,   52,   52,
      151,  152,  794,   52,   52,  140,   54,  794,  794,  145,
      153,   54,  142,  141,  794,  143,   52,   52,  146,  144,
      794,  794,  147,  794,   54,   52,   52,  794,  153,   52,
       52,  794,  148,   54,   52,   52,  149,   54,  794,   52,
       52,  154,   54,  794,   52,   52,  794,   54,   52,   52,
      155,  150,   54,   52,   52,  794,   54,  794,   52,   52,

      794,   54,   52,   52,  794,  156,   54,   52,   52,  794,
       54,  794,  157,  159,  160,   54,  158,   52,   52,   52,
       52,  794,   52,   52,  794,   54,  161,   54,  163,  794,
       54,  794,  794,  167,   52,   52,  164,  794,  794,  162,
      165,  794,   54,   52,   52,  168,   52,   52,  794,  166,
      794,   54,   52,   52,   54,  794,   52,   52,   52,   52,
       54,  169,   52,   52,   54,  794,   54,  170,  171,  794,
       54,   52,   52,  794,   52,   52,   52,   52,  794,   54,
      174,  172,   54,  794,   54,  173,  176,  794,   52,   52,
       52,   52,  178,   52,   52,  175,   54,  179,   54,   52,

       52,   54,   52,   52,  177,   52,   52,   54,   52,   52,
       54,  794,  181,   54,  794,  794,   54,   52,   52,   52,
       52,  182,  180,   52,   52,   54,  794,   54,  184,   52,
       52,   54,  794,  185,   52,   52,  794,   54,  183,   52,
       52,  794,   54,  794,   52,   52,  794,   54,  794,  187,
      794,  186,   54,  794,  188,   52,   52,  794,  189,  794,
      190,   52,   52,   54,   52,   52,  794,  191,  794,   54,
      794,  192,   54,  197,  794,  193,   52,   52,  794,  794,
      794,  195,  794,  794,   54,  794,  196,  194,  794,  199,
      198,   52,   52,   52,   52,   52,   52,   52,   52,   54,

      794,   54,  794,   54,  794,   54,   52,   52,   52,   52,
      200,   52,   52,  794,   54,  794,   54,   52,   52,   54,
      794,  202,  201,  203,  794,   54,  205,  206,  794,   52,
       52,   52,   52,  204,  794,   52,   52,   54,  794,   54,
      208,  794,  209,   54,   52,   52,  794,  207,   52,   52,
      794,  794,   54,   52,   52,  794,   54,  794,  210,  212,
      794,   54,   52,   52,   52,   52,  794,  213,  794,  211,
       54,  215,   54,  214,   52,   52,   52,   52,   52,   52,
       52,   52,   54,  794,   54,  794,   54,  794,   54,  794,
       52,   52,  216,  794,  221,  794,  217,  222,   54,   52,

       52,  220,  794,  794,   52,   52,  794,   54,  225,  794,
      227,  226,   54,   52,   52,  223,  224,   52,   52,  794,
      228,   54,   52,   52,  794,   54,   52,   52,   52,   52,
       54,   52,   52,  794,   54,  794,   54,  794,  230,   54,
      794,  229,   52,   52,   52,   52,   52,   52,   52,   52,
       54,  794,   54,  794,   54,  794,   54,  233,  794,  231,
      794,  232,   52,   52,  234,   52,   52,  235,  794,  237,
       54,  794,  236,   54,  242,  238,   52,   52,  243,   52,
       52,   52,   52,  241,   54,  794,  244,   54,  794,   54,
       52,   52,   52,   52,  794,  246,   52,   52,   54,  794,

       54,   52,   52,  794,   54,   52,   52,   52,   52,   54,
      249,  794,  245,   54,  794,   54,   52,   52,  794,   52,
       52,   52,   52,  247,   54,  794,  248,   54,  794,   54,
      252,  250,  256,   52,   52,  794,  251,   52,   52,  253,
      258,   54,  254,  794,  255,   54,   52,   52,  257,   52,
       52,   52,   52,  794,   54,   52,   52,   54,  794,   54,
       52,   52,  794,   54,   52,   52,  261,  794,   54,   52,
       52,  794,   54,   52,   52,  794,  259,   54,  794,  262,
      794,   54,  260,   52,   52,   52,   52,   52,   52,   52,
       52,   54,  266,   54,  794,   54,  265,   54,  794,  264,

      263,   52,   52,   52,   52,   52,   52,  267,  794,   54,
      794,   54,  794,   54,   52,   52,  268,   52,   52,  794,
       52,   52,   54,  794,  270,   54,  269,  271,   54,   52,
       52,   52,   52,   52,   52,  794,  794,   54,  794,   54,
      794,   54,  272,  275,  794,  794,  273,   52,   52,  277,
      794,  794,  274,   52,   52,   54,  794,  794,  276,   52,
       52,   54,  794,  278,  280,  279,  794,   54,   52,   52,
       52,   52,   52,   52,   52,   52,   54,  794,   54,  794,
       54,  281,   54,   52,   52,   52,   52,   52,   52,   52,
       52,   54,  794,   54,  794,   54,  794,   54,   52,   52,

      794,  282,   52,   52,   52,   52,   54,  283,  287,  284,
       54,  794,   54,  286,   52,   52,  285,   52,   52,   52,
       52,  290,   54,  288,  794,   54,  794,   54,  794,  794,
      291,   52,   52,  289,   52,   52,  293,   52,   52,   54,
      794,  294,   54,  794,  292,   54,  794,   52,   52,   52,
       52,   52,   52,  794,  295,   54,  794,   54,  794,   54,
      794,  296,  794,  298,  300,  794,  794,  297,   52,   52,
       52,   52,  301,  299,   52,   52,   54,  794,   54,   52,
       52,  303,   54,   52,   52,  794,  794,   54,  304,   52,
       52,   54,  794,   52,   52,  794,  302,   54,  794,   52,

       52,   54,   52,   52,   52,   52,  307,   54,  794,  308,
       54,  794,   54,   52,   52,  794,  311,   52,   52,  794,
      794,   54,  794,  310,  794,   54,  794,  309,  794,  794,
      312,  313,   52,   52,   52,   52,  316,  794,  794,  314,
       54,  794,   54,  315,   52,   52,  794,  318,   52,   52,
       52,   52,   54,  794,   52,   52,   54,  794,   54,  317,
      794,  794,   54,  794,   52,   52,   52,   52,  320,   52,
       52,  794,   54,  794,   54,   52,   52,   54,   52,   52,
      319,   52,   52,   54,   52,   52,   54,  321,  325,   54,
      794,  324,   54,  322,   52,   52,  327,  323,  326,   52,

       52,  794,   54,  794,   52,   52,  794,   54,  328,  794,
      330,  794,   54,   52,   52,  331,  335,   52,   52,   52,
       52,   54,   52,   52,  329,   54,  794,   54,  333,  794,
       54,  794,  332,   52,   52,   52,   52,   52,   52,  794,
      794,   54,  794,   54,  794,   54,  794,  334,   52,   52,
      794,  336,   52,   52,   52,   52,   54,  794,  794,  337,
       54,  794,   54,  339,  343,  344,  794,  340,   52,   52,
      338,   52,   52,   52,   52,  794,   54,  794,  341,   54,
      794,   54,   52,   52,   52,   52,  345,   52,   52,  342,
       54,  794,   54,   52,   52,   54,  794,  348,   52,   52,

      794,   54,  794,  346,   52,   52,   54,  794,  347,   52,
       52,  349,   54,   52,   52,   52,   52,   54,   52,   52,
      794,   54,  350,   54,  794,  351,   54,  352,   52,   52,
       52,   52,   52,   52,   52,   52,   54,  794,   54,  355,
       54,  794,   54,  794,  794,   52,   52,  794,  353,  794,
      354,  356,  358,   54,   52,   52,  794,   52,   52,  357,
       52,   52,   54,  794,  361,   54,   52,   52,   54,  794,
      359,   52,   52,  794,   54,   52,   52,  794,  360,   54,
       52,   52,  794,   54,   52,   52,   52,   52,   54,  794,
      363,  794,   54,  364,   54,  362,   52,   52,   52,   52,

       52,   52,  794,  365,   54,  794,   54,  794,   54,  794,
      367,   52,   52,  794,  368,  794,  369,   52,   52,   54,
      794,  366,   52,   52,  794,   54,   52,   52,  370,  794,
       54,   52,   52,  794,   54,   52,   52,   52,   52,   54,
       52,   52,  794,   54,  794,   54,  794,  794,   54,   52,
       52,   52,   52,  794,  372,   52,   52,   54,  794,   54,
      373,  371,  794,   54,   52,   52,   52,   52,  794,  374,
       52,   52,   54,  794,   54,  794,   52,   52,   54,  794,
      375,   52,   52,  376,   54,   52,   52,   52,   52,   54,
      794,  794,  794,   54,  794,   54,  794,  378,  377,  382,

      380,  794,   52,   52,   52,   52,  794,  379,   52,   52,
       54,  794,   54,  381,  385,  794,   54,   52,   52,   52,
       52,   52,   52,  794,  794,   54,  794,   54,  794,   54,
      794,  384,  386,   52,   52,   52,   52,   52,   52,   52,
       52,   54,  387,   54,  794,   54,  794,   54,  794,   52,
       52,   52,   52,   52,   52,  391,  388,   54,  794,   54,
      794,   54,   52,   52,  389,  393,   52,   52,  390,  794,
       54,   52,   52,  395,   54,   52,   52,  794,  394,   54,
      794,  392,  794,   54,   52,   52,   52,   52,  794,   52,
       52,  794,   54,  398,   54,  400,  399,   54,  794,  396,

      397,   52,   52,   52,   52,   52,   52,  794,  794,   54,
      794,   54,  794,   54,  794,  402,   52,   52,   52,   52,
       52,   52,   52,   52,   54,  794,   54,  794,   54,  403,
       54,  794,  401,   52,   52,  404,   52,   52,  794,  406,
      794,   54,   52,   52,   54,   52,   52,   52,   52,  405,
       54,  408,  794,   54,  794,   54,   52,   52,   52,   52,
      407,  794,  409,  794,   54,  794,   54,  794,   52,   52,
       52,   52,   52,   52,   52,   52,   54,  412,   54,  410,
       54,  794,   54,  794,  411,   52,   52,  794,   52,   52,
      794,   52,   52,   54,  414,  794,   54,  794,  413,   54,

       52,   52,  794,  794,   52,   52,   52,   52,   54,  794,
      415,  416,   54,  794,   54,   52,   52,  794,  418,  794,
      417,  794,  419,   54,   52,   52,  421,  794,  794,  422,
      794,  794,   54,  420,  423,  426,   52,   52,  424,   52,
       52,  794,  425,  794,   54,   52,   52,   54,  429,  427,
       52,   52,  794,   54,  794,   52,   52,  794,   54,   52,
       52,  794,  428,   54,   52,   52,  794,   54,   52,   52,
       52,   52,   54,   52,   52,  794,   54,  794,   54,   52,
       52,   54,  794,  430,  433,  794,  431,   54,   52,   52,
      794,  432,  794,  434,  435,  794,   54,   52,   52,   52,

       52,  794,  436,  438,  794,   54,  794,   54,  794,  439,
       52,   52,   52,   52,   52,   52,   52,   52,   54,  437,
       54,  794,   54,  794,   54,   52,   52,  794,  440,   52,
       52,   52,   52,   54,   52,   52,  794,   54,  794,   54,
      794,  442,   54,  794,  794,  441,  445,   52,   52,   52,
       52,  444,  794,  451,  451,   54,  794,   54,  443,  794,
      447,   54,   52,   52,   52,   52,   52,   52,   52,   52,
       54,  794,   54,  794,   54,  446,   54,  794,  448,   52,
       52,  794,  452,  449,   52,   52,  794,   54,   52,   52,
      794,  453,   54,   52,   52,  450,   54,  794,   52,   52,

      794,   54,   52,   52,  456,  454,   54,   52,   52,  794,
       54,  794,  457,   52,   52,   54,   52,   52,  460,   52,
       52,   54,   52,   52,   54,  458,  794,   54,  462,  794,
       54,  461,  459,   52,   52,   52,   52,  794,   52,   52,
      794,   54,  794,   54,  794,  463,   54,  794,  794,  794,
      465,  794,  467,  794,   52,   52,   52,   52,   52,   52,
      794,  464,   54,  794,   54,  466,   54,   52,   52,   52,
       52,  794,  794,   52,   52,   54,  794,   54,  794,  468,
      470,   54,  794,  469,   52,   52,  471,   52,   52,  794,
       52,   52,   54,  794,  472,   54,  794,  474,   54,   52,

       52,  794,  473,   52,   52,  794,  794,   54,   52,   52,
      794,   54,   52,   52,   52,   52,   54,  794,   52,   52,
       54,  475,   54,   52,   52,  477,   54,  476,   52,   52,
      794,   54,  478,  794,   52,   52,   54,   52,   52,   52,
       52,  479,   54,  794,  481,   54,  794,   54,  794,  480,
      794,  482,   52,   52,   52,   52,   52,   52,   52,   52,
       54,  484,   54,  486,   54,  483,   54,   52,   52,  487,
       52,   52,   52,   52,  485,   54,   52,   52,   54,  794,
       54,  794,  489,  794,   54,  794,  488,  794,  492,  490,
       52,   52,  495,   52,   52,   52,   52,  794,   54,  491,

      494,   54,  496,   54,  794,   52,   52,  794,  794,  794,
      794,  497,  794,   54,  794,  493,   52,   52,   52,   52,
      794,   52,   52,  794,   54,  794,   54,   52,   52,   54,
      794,  794,   52,   52,  794,   54,   52,   52,  498,  500,
       54,   52,   52,  499,   54,  794,  501,   52,   52,   54,
       52,   52,  794,  794,  794,   54,   52,   52,   54,  794,
      502,  503,   52,   52,   54,   52,   52,  504,  794,  794,
       54,  794,  794,   54,   52,   52,  506,  794,  505,  508,
       52,   52,   54,   52,   52,   52,   52,  507,   54,   52,
       52,   54,  794,   54,  509,  794,  510,   54,   52,   52,

       52,   52,  794,  794,  451,  451,   54,  794,   54,   52,
       52,  794,   54,  512,  794,  513,  794,   54,  794,  516,
       52,   52,   52,   52,  794,  794,  133,  511,   54,  794,
       54,  794,  514,  515,  518,  519,   52,   52,  794,  520,
      521,  517,   52,   52,   54,   52,   52,   52,   52,  794,
       54,  134,  526,   54,  794,   54,  794,  794,   52,   52,
      527,   52,   52,  794,  522,  523,   54,  524,  794,   54,
      525,  794,  794,   52,   52,   52,   52,  794,  794,  531,
      530,   54,  794,   54,  529,  532,   52,   52,   52,   52,
       52,   52,  794,  794,   54,  794,   54,  794,   54,  794,

      533,   52,   52,  794,  534,   52,   52,   52,   52,   54,
      794,  794,  794,   54,  794,   54,  794,  794,  536,   52,
       52,  535,   52,   52,  537,   52,   52,   54,  794,  794,
       54,  794,  539,   54,   52,   52,  538,  541,   52,   52,
       52,   52,   54,  540,   52,   52,   54,  794,   54,   52,
       52,  543,   54,  794,  542,   52,   52,   54,   52,   52,
      794,  794,  794,   54,  794,  544,   54,  794,  545,  548,
       52,   52,   52,   52,   52,   52,  794,  546,   54,  794,
       54,  794,   54,   52,   52,  794,  547,  549,  551,   52,
       52,   54,   52,   52,   52,   52,  794,   54,  794,  794,

       54,  794,   54,  794,  550,  794,  552,   52,   52,   52,
       52,   52,   52,  794,  794,   54,  794,   54,  794,   54,
      794,  555,   52,   52,  794,   52,   52,   52,   52,  556,
       54,  553,  794,   54,  794,   54,  554,  794,  558,   52,
       52,  557,   52,   52,   52,   52,  794,   54,   52,   52,
       54,  794,   54,   52,   52,  794,   54,  559,  560,   52,
       52,   54,   52,   52,   52,   52,  794,   54,   52,   52,
       54,  794,   54,   52,   52,  561,   54,  562,  794,   52,
       52,   54,  794,  794,   52,   52,  564,   54,  794,  794,
      563,  566,   54,   52,   52,  794,  565,   52,   52,  567,

      794,   54,   52,   52,  794,   54,   52,   52,  794,  794,
       54,  794,   52,   52,   54,  794,  568,   52,   52,  570,
       54,  569,   52,   52,  794,   54,  794,  572,   52,   52,
       54,   52,   52,  571,  794,  573,   54,   52,   52,   54,
      574,   52,   52,   52,   52,   54,   52,   52,  794,   54,
      794,   54,   52,   52,   54,  575,   52,   52,  794,  576,
       54,   52,   52,  794,   54,   52,   52,   52,   52,   54,
      794,  578,  794,   54,  577,   54,  794,  794,   52,   52,
       52,   52,  794,  794,  580,  579,   54,  584,   54,  581,
      585,  586,   52,   52,  794,   52,   52,   52,   52,  794,

       54,   52,   52,   54,  794,   54,  794,  794,  589,   54,
       52,   52,   52,   52,  587,  588,   52,   52,   54,  794,
       54,  794,  794,  794,   54,  794,  794,   52,   52,  594,
      595,  794,  590,  593,  591,   54,   52,   52,   52,   52,
       52,   52,   52,   52,   54,  794,   54,  794,   54,  794,
       54,   52,   52,  596,   52,   52,   52,   52,  598,   54,
      597,  599,   54,  794,   54,   52,   52,   52,   52,   52,
       52,   52,   52,   54,  602,   54,  794,   54,  600,   54,
      794,  601,   52,   52,   52,   52,   52,   52,  604,  794,
       54,  794,   54,  794,   54,   52,   52,   52,   52,  603,

      794,  605,  794,   54,  794,   54,  794,  606,  794,  608,
      794,  607,   52,   52,  794,  610,  609,  794,  611,  794,
       54,   52,   52,   52,   52,  794,  613,   52,   52,   54,
      612,   54,   52,   52,  794,   54,  614,  794,  615,  617,
       54,   52,   52,   52,   52,   52,   52,   52,   52,   54,
      794,   54,  794,   54,  794,   54,   52,   52,  794,   52,
       52,   52,   52,  794,   54,   52,   52,   54,  794,   54,
      618,  616,  619,   54,   52,   52,  620,   52,   52,   52,
       52,  622,   54,  794,  794,   54,  794,   54,   52,   52,
      623,  624,  794,  621,  794,  625,   54,  794,  626,   52,

       52,   52,   52,  794,  627,   52,   52,   54,  794,   54,
       52,   52,  794,   54,   52,   52,  794,  628,   54,  794,
      629,  794,   54,   52,   52,  794,  630,   52,   52,  794,
      794,   54,   52,   52,  794,   54,  794,  631,  794,  632,
       54,   52,   52,   52,   52,   52,   52,   52,   52,   54,
      794,   54,  794,   54,  794,   54,  633,  794,   52,   52,
       52,   52,   52,   52,   52,   52,   54,  794,   54,  634,
       54,  794,   54,   52,   52,  638,   52,   52,   52,   52,
      635,   54,  794,  637,   54,  794,   54,   52,   52,  794,
      794,  639,  640,  794,  636,   54,  794,  644,  794,   52,

       52,   52,   52,  646,   52,   52,  647,   54,  643,   54,
      645,  794,   54,   52,   52,   52,   52,  794,  648,   52,
       52,   54,  794,   54,   52,   52,  794,   54,  794,   52,
       52,  794,   54,   52,   52,  650,  794,   54,   52,   52,
      794,   54,   52,   52,  794,  794,   54,   52,   52,  794,
       54,  794,  651,  654,  794,   54,  794,  653,  655,   52,
       52,  652,   52,   52,   52,   52,  794,   54,  794,  794,
       54,  794,   54,   52,   52,  794,  658,   52,   52,  794,
      656,   54,   52,   52,  794,   54,   52,   52,  657,  794,
       54,  659,   52,   52,   54,   52,   52,  661,   52,   52,

       54,  794,  794,   54,   52,   52,   54,   52,   52,  660,
      794,  663,   54,   52,   52,   54,   52,   52,  794,  662,
      664,   54,   52,   52,   54,   52,   52,  794,   52,   52,
       54,  794,  668,   54,  665,  669,   54,   52,   52,   52,
       52,  670,  666,  794,  667,   54,  794,   54,  794,   52,
       52,   52,   52,   52,   52,  794,  671,   54,  794,   54,
      673,   54,  672,  794,  675,  794,  674,   52,   52,   52,
       52,   52,   52,   52,   52,   54,  794,   54,  794,   54,
      676,   54,  677,   52,   52,   52,   52,   52,   52,   52,
       52,   54,  794,   54,  678,   54,  794,   54,   52,   52,

       52,   52,   52,   52,  794,  680,   54,  794,   54,  794,
       54,  681,   52,   52,  794,  679,  794,  683,  684,  794,
       54,   52,   52,   52,   52,  794,   52,   52,  794,   54,
      794,   54,  794,  682,   54,   52,   52,   52,   52,   52,
       52,   52,   52,   54,  794,   54,  794,   54,  794,   54,
       52,   52,   52,   52,  794,   52,   52,  794,   54,  794,
       54,  794,  794,   54,   52,   52,   52,   52,  687,  685,
      686,  690,   54,  794,   54,  794,   52,   52,  691,   52,
       52,   52,   52,  692,   54,   52,   52,   54,  794,   54,
      794,   52,   52,   54,  794,   52,   52,  794,  693,   54,

      794,  694,  696,   54,  794,  794,   52,   52,  794,  698,
       52,   52,  700,  697,   54,  794,   52,   52,   54,   52,
       52,   52,   52,  699,   54,   52,   52,   54,  794,   54,
      794,  794,  701,   54,   52,   52,   52,   52,  702,   52,
       52,  703,   54,  794,   54,   52,   52,   54,   52,   52,
       52,   52,  794,   54,  704,  794,   54,  705,   54,  707,
      794,  708,  794,  794,  706,   52,   52,  709,   52,   52,
      710,  794,  794,   54,  794,  794,   54,   52,   52,  711,
       52,   52,  712,   52,   52,   54,   52,   52,   54,   52,
       52,   54,   52,   52,   54,   52,   52,   54,   52,   52,

       54,  794,  714,   54,  794,  713,   54,  794,   52,   52,
       52,   52,  794,  794,  794,  715,   54,  794,   54,  794,
      716,  717,  794,  794,  718,  794,  794,   52,   52,  794,
      719,   52,   52,  720,  721,   54,  794,   52,   52,   54,
      722,   52,   52,  794,  723,   54,   52,   52,  794,   54,
       52,   52,   52,   52,   54,   52,   52,  794,   54,  794,
       54,   52,   52,   54,  794,  725,  794,  724,  794,   54,
       52,   52,   52,   52,   52,   52,  794,  794,   54,  794,
       54,  794,   54,   52,   52,   52,   52,  794,  794,   52,
       52,   54,  794,   54,  726,  732,  729,   54,  730,   52,

       52,   52,   52,  731,  733,   52,   52,   54,  794,   54,
       52,   52,  794,   54,   52,   52,   52,   52,   54,  794,
      735,  794,   54,  794,   54,   52,   52,  736,  737,   52,
       52,  794,  794,   54,  794,   52,   52,   54,  794,  739,
       52,   52,  738,   54,   52,   52,   52,   52,   54,   52,
       52,  794,   54,  794,   54,  794,  794,   54,   52,   52,
      742,  794,  741,  740,   52,   52,   54,  743,   52,   52,
      794,  794,   54,   52,   52,  794,   54,  794,  745,   52,
       52,   54,  744,   52,   52,   52,   52,   54,   52,   52,
      794,   54,  746,   54,  794,  794,   54,   52,   52,   52,

       52,  794,  748,  794,  747,   54,  794,   54,   52,   52,
      794,   52,   52,  794,  749,  753,   54,  750,  751,   54,
       52,   52,   52,   52,   52,   52,  752,  794,   54,  794,
       54,  794,   54,   52,   52,   52,   52,   52,   52,   52,
       52,   54,  794,   54,  794,   54,  794,   54,   52,   52,
      794,   52,   52,  794,   52,   52,   54,  794,  756,   54,
      794,  754,   54,   52,   52,  794,  794,   52,   52,   52,
       52,   54,  794,  758,  794,   54,  794,   54,   52,   52,
       52,   52,   52,   52,   52,   52,   54,  794,   54,  760,
       54,  794,   54,   52,   52,  759,  794,   52,   52,  794,

      794,   54,  794,  794,  794,   54,  794,  763,   52,   52,
      761,  762,   52,   52,  794,  794,   54,   52,   52,  794,
       54,  794,  764,  794,  794,   54,   52,   52,   52,   52,
      765,  766,   52,   52,   54,  794,   54,   52,   52,  794,
       54,   52,   52,   52,   52,   54,  767,   52,   52,   54,
      794,   54,   52,   52,  794,   54,  794,  768,   52,   52,
       54,  794,  769,  794,   52,   52,   54,   52,   52,  794,
      770,  771,   54,   52,   52,   54,   52,   52,   52,   52,
      794,   54,   52,   52,   54,  794,   54,   52,   52,  794,
       54,   52,   52,  794,  773,   54,   52,   52,  775,   54,

      794,  774,  794,  794,   54,   52,   52,   52,   52,  794,
      776,   52,   52,   54,  794,   54,   52,   52,  794,   54,
      794,  777,   52,   52,   54,   52,   52,   52,   52,  794,
       54,   52,   52,   54,  794,   54,  794,  778,  794,   54,
       52,   52,   52,   52,   52,   52,  794,  779,   54,  794,
       54,  794,   54,  794,  794,  781,  794,   52,   52,  794,
      782,  784,   52,   52,  783,   54,   52,   52,   52,   52,
       54,  794,   52,   52,   54,  794,   54,   52,   52,  785,
       54,  794,  794,  794,  794,   54,  794,  794,  787,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  789,  794,

      794,  794,  791,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  793,
       48,   48,   48,   48,   53,   53,   66,   66,  794,   66,
      130,  130,  794,  130,  132,  132,    5,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794

    } ;

static yyconst short int yy_chk[3895] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    4,    7,
        7,   13,   13,   14,   14,   16,   16,   19,   19,   17,
       17,   22,   22,   16,  153,   19,  153,   17,  790,   22,
       23,   23,   51,   51,   26,   26,   28,   28,   23,   20,
       20,  788,   26,  786,   28,   53,   53,   20,   68,   68,

      780,   21,   21,   53,  772,   22,  757,   16,  734,   21,
      728,    3,    4,    8,    8,   17,   18,   18,   26,  689,
       28,    8,  688,   23,   18,    8,    8,    8,    8,    8,
        8,  642,   28,   26,  641,   20,    8,    8,    8,    8,
        8,   20,   24,   24,   21,  592,   18,   21,   25,   25,
       24,  649,  649,   18,  583,  582,   25,  528,  519,   18,
       27,   27,   18,   29,   29,   24,   31,   31,   27,   30,
       30,   29,   32,   32,   31,   33,   33,   30,  518,   29,
       32,   34,   34,   33,  455,   24,  383,   35,   35,   34,
      305,  240,   25,  239,   27,   35,  219,   27,   36,   36,

      218,   30,   37,   37,   31,  134,   36,  152,   27,   30,
       37,   30,   32,   33,   32,   34,  152,   38,   38,   31,
      133,   33,   39,   39,   32,   38,  131,   40,   40,   35,
       39,  130,   36,   35,  152,   40,   41,   41,   42,   42,
       37,   67,   44,   44,   41,   66,   42,   47,   43,   43,
       44,   52,   52,   15,   55,   55,   43,  695,  695,   52,
       38,   40,   55,   45,   45,   41,   39,   42,   39,   12,
       41,   45,   42,   52,   11,   46,   46,    9,   43,  695,
        5,   42,   43,   46,   44,   41,   55,   42,   56,   56,
        0,   57,   57,   45,   43,    0,   56,    0,   52,   57,

        0,   58,   58,   59,   59,   46,   60,   60,    0,   58,
        0,   59,    0,   46,   60,   61,   61,    0,   56,   62,
       62,    0,    0,   61,   63,   63,    0,   62,   64,   64,
        0,   56,   63,    0,   57,   58,   64,    0,   65,   65,
       70,   70,    0,   74,   74,   59,   65,    0,    0,   62,
       70,   74,   60,   59,    0,   60,   75,   75,   63,   61,
        0,    0,   64,    0,   75,   76,   76,    0,   70,   77,
       77,    0,   65,   76,   78,   78,   65,   77,    0,   79,
       79,   74,   78,    0,   80,   80,    0,   79,   81,   81,
       75,   65,   80,   82,   82,    0,   81,    0,   83,   83,

        0,   82,   84,   84,    0,   76,   83,   85,   85,    0,
       84,    0,   77,   79,   80,   85,   78,   86,   86,   87,
       87,    0,   88,   88,    0,   86,   81,   87,   83,    0,
       88,    0,    0,   87,   89,   89,   84,    0,    0,   82,
       85,    0,   89,   90,   90,   87,   91,   91,    0,   85,
        0,   90,   92,   92,   91,    0,   93,   93,   94,   94,
       92,   87,   95,   95,   93,    0,   94,   87,   88,    0,
       95,   96,   96,    0,   97,   97,   98,   98,    0,   96,
       91,   89,   97,    0,   98,   90,   93,    0,   99,   99,
      100,  100,   95,  102,  102,   92,   99,   96,  100,  101,

      101,  102,  103,  103,   94,  104,  104,  101,  105,  105,
      103,    0,   98,  104,    0,    0,  105,  106,  106,  107,
      107,   99,   97,  108,  108,  106,    0,  107,  101,  109,
      109,  108,    0,  102,  110,  110,    0,  109,  100,  111,
      111,    0,  110,    0,  112,  112,    0,  111,    0,  104,
        0,  103,  112,    0,  105,  113,  113,    0,  106,    0,
      106,  114,  114,  113,  115,  115,    0,  107,    0,  114,
        0,  108,  115,  112,    0,  109,  116,  116,    0,    0,
        0,  111,    0,    0,  116,    0,  111,  110,    0,  113,
      112,  117,  117,  118,  118,  119,  119,  120,  120,  117,

        0,  118,    0,  119,    0,  120,  121,  121,  122,  122,
      115,  123,  123,    0,  121,    0,  122,  124,  124,  123,
        0,  117,  116,  117,    0,  124,  119,  120,    0,  125,
      125,  127,  127,  118,    0,  126,  126,  125,    0,  127,
      122,    0,  123,  126,  128,  128,    0,  121,  129,  129,
        0,    0,  128,  135,  135,    0,  129,    0,  124,  125,
        0,  135,  136,  136,  137,  137,    0,  125,    0,  124,
      136,  127,  137,  126,  138,  138,  139,  139,  140,  140,
      141,  141,  138,    0,  139,    0,  140,    0,  141,    0,
      142,  142,  128,    0,  136,    0,  129,  137,  142,  143,

      143,  135,    0,    0,  144,  144,    0,  143,  139,    0,
      141,  140,  144,  145,  145,  138,  138,  146,  146,    0,
      142,  145,  147,  147,    0,  146,  148,  148,  149,  149,
      147,  150,  150,    0,  148,    0,  149,    0,  144,  150,
        0,  143,  154,  154,  155,  155,  156,  156,  157,  157,
      154,    0,  155,    0,  156,    0,  157,  146,    0,  145,
        0,  145,  158,  158,  146,  159,  159,  147,    0,  149,
      158,    0,  148,  159,  155,  150,  160,  160,  156,  161,
      161,  162,  162,  154,  160,    0,  157,  161,    0,  162,
      163,  163,  164,  164,    0,  159,  165,  165,  163,    0,

      164,  166,  166,    0,  165,  167,  167,  168,  168,  166,
      162,    0,  158,  167,    0,  168,  169,  169,    0,  170,
      170,  171,  171,  160,  169,    0,  161,  170,    0,  171,
      165,  163,  169,  172,  172,    0,  164,  173,  173,  166,
      171,  172,  167,    0,  168,  173,  174,  174,  170,  175,
      175,  176,  176,    0,  174,  177,  177,  175,    0,  176,
      178,  178,    0,  177,  179,  179,  173,    0,  178,  180,
      180,    0,  179,  181,  181,    0,  172,  180,    0,  174,
        0,  181,  172,  182,  182,  183,  183,  184,  184,  185,
      185,  182,  178,  183,    0,  184,  177,  185,    0,  176,

      175,  186,  186,  187,  187,  188,  188,  180,    0,  186,
        0,  187,    0,  188,  189,  189,  181,  190,  190,    0,
      191,  191,  189,    0,  184,  190,  183,  185,  191,  192,
      192,  193,  193,  194,  194,    0,    0,  192,    0,  193,
        0,  194,  186,  189,    0,    0,  187,  195,  195,  191,
        0,    0,  188,  196,  196,  195,    0,    0,  190,  197,
      197,  196,    0,  192,  194,  193,    0,  197,  198,  198,
      199,  199,  200,  200,  201,  201,  198,    0,  199,    0,
      200,  195,  201,  202,  202,  203,  203,  204,  204,  205,
      205,  202,    0,  203,    0,  204,    0,  205,  206,  206,

        0,  196,  207,  207,  208,  208,  206,  197,  201,  198,
      207,    0,  208,  200,  209,  209,  199,  210,  210,  211,
      211,  204,  209,  202,    0,  210,    0,  211,    0,    0,
      205,  212,  212,  203,  213,  213,  207,  214,  214,  212,
        0,  208,  213,    0,  206,  214,    0,  215,  215,  216,
      216,  217,  217,    0,  209,  215,    0,  216,    0,  217,
        0,  210,    0,  212,  213,    0,    0,  211,  220,  220,
      221,  221,  214,  212,  222,  222,  220,    0,  221,  223,
      223,  216,  222,  224,  224,    0,    0,  223,  217,  226,
      226,  224,    0,  225,  225,    0,  215,  226,    0,  227,

      227,  225,  228,  228,  229,  229,  220,  227,    0,  221,
      228,    0,  229,  230,  230,    0,  224,  231,  231,    0,
        0,  230,    0,  223,    0,  231,    0,  222,    0,    0,
      224,  225,  232,  232,  233,  233,  229,    0,    0,  227,
      232,    0,  233,  228,  234,  234,    0,  231,  235,  235,
      236,  236,  234,    0,  237,  237,  235,    0,  236,  230,
        0,    0,  237,    0,  238,  238,  241,  241,  233,  242,
      242,    0,  238,    0,  241,  243,  243,  242,  244,  244,
      232,  245,  245,  243,  246,  246,  244,  234,  237,  245,
        0,  236,  246,  234,  247,  247,  241,  235,  238,  248,

      248,    0,  247,    0,  249,  249,    0,  248,  242,    0,
      244,    0,  249,  251,  251,  245,  249,  250,  250,  252,
      252,  251,  253,  253,  243,  250,    0,  252,  247,    0,
      253,    0,  246,  254,  254,  255,  255,  256,  256,    0,
        0,  254,    0,  255,    0,  256,    0,  248,  257,  257,
        0,  250,  258,  258,  259,  259,  257,    0,    0,  252,
      258,    0,  259,  254,  257,  257,    0,  254,  260,  260,
      253,  261,  261,  262,  262,    0,  260,    0,  255,  261,
        0,  262,  263,  263,  264,  264,  258,  265,  265,  256,
      263,    0,  264,  266,  266,  265,    0,  261,  267,  267,

        0,  266,    0,  259,  268,  268,  267,    0,  260,  269,
      269,  263,  268,  270,  270,  271,  271,  269,  272,  272,
        0,  270,  264,  271,    0,  265,  272,  266,  273,  273,
      274,  274,  275,  275,  276,  276,  273,    0,  274,  269,
      275,    0,  276,    0,    0,  277,  277,    0,  267,    0,
      268,  270,  272,  277,  278,  278,    0,  279,  279,  271,
      280,  280,  278,    0,  275,  279,  281,  281,  280,    0,
      273,  282,  282,    0,  281,  283,  283,    0,  274,  282,
      284,  284,    0,  283,  285,  285,  286,  286,  284,    0,
      278,    0,  285,  279,  286,  277,  287,  287,  288,  288,

      289,  289,    0,  280,  287,    0,  288,    0,  289,    0,
      284,  290,  290,    0,  285,    0,  286,  291,  291,  290,
        0,  283,  292,  292,    0,  291,  293,  293,  287,    0,
      292,  294,  294,    0,  293,  295,  295,  296,  296,  294,
      297,  297,    0,  295,    0,  296,    0,    0,  297,  298,
      298,  299,  299,    0,  292,  300,  300,  298,    0,  299,
      294,  291,    0,  300,  301,  301,  302,  302,    0,  295,
      304,  304,  301,    0,  302,    0,  303,  303,  304,    0,
      296,  307,  307,  298,  303,  308,  308,  309,  309,  307,
        0,    0,    0,  308,    0,  309,    0,  300,  299,  304,

      302,    0,  310,  310,  311,  311,    0,  301,  312,  312,
      310,    0,  311,  303,  308,    0,  312,  313,  313,  314,
      314,  315,  315,    0,    0,  313,    0,  314,    0,  315,
        0,  307,  310,  316,  316,  317,  317,  318,  318,  319,
      319,  316,  311,  317,    0,  318,    0,  319,    0,  320,
      320,  321,  321,  322,  322,  315,  312,  320,    0,  321,
        0,  322,  323,  323,  313,  317,  324,  324,  314,    0,
      323,  325,  325,  319,  324,  326,  326,    0,  318,  325,
        0,  316,    0,  326,  327,  327,  328,  328,    0,  329,
      329,    0,  327,  322,  328,  324,  323,  329,    0,  320,

      321,  330,  330,  331,  331,  332,  332,    0,    0,  330,
        0,  331,    0,  332,    0,  328,  333,  333,  334,  334,
      335,  335,  336,  336,  333,    0,  334,    0,  335,  329,
      336,    0,  327,  337,  337,  330,  338,  338,    0,  332,
        0,  337,  339,  339,  338,  340,  340,  341,  341,  331,
      339,  336,    0,  340,    0,  341,  342,  342,  343,  343,
      335,    0,  337,    0,  342,    0,  343,    0,  344,  344,
      345,  345,  346,  346,  347,  347,  344,  340,  345,  338,
      346,    0,  347,    0,  339,  348,  348,    0,  349,  349,
        0,  350,  350,  348,  342,    0,  349,    0,  341,  350,

      351,  351,    0,    0,  355,  355,  352,  352,  351,    0,
      343,  344,  355,    0,  352,  353,  353,    0,  346,    0,
      345,    0,  347,  353,  354,  354,  349,    0,    0,  349,
        0,    0,  354,  348,  349,  352,  356,  356,  350,  357,
      357,    0,  351,    0,  356,  358,  358,  357,  355,  353,
      359,  359,    0,  358,    0,  360,  360,    0,  359,  361,
      361,    0,  354,  360,  362,  362,    0,  361,  363,  363,
      364,  364,  362,  365,  365,    0,  363,    0,  364,  366,
      366,  365,    0,  356,  359,    0,  357,  366,  367,  367,
        0,  358,    0,  361,  362,    0,  367,  368,  368,  369,

      369,    0,  363,  365,    0,  368,    0,  369,    0,  366,
      370,  370,  371,  371,  372,  372,  373,  373,  370,  364,
      371,    0,  372,    0,  373,  374,  374,    0,  367,  375,
      375,  376,  376,  374,  377,  377,    0,  375,    0,  376,
        0,  369,  377,    0,    0,  368,  373,  378,  378,  379,
      379,  372,    0,  380,  380,  378,    0,  379,  370,    0,
      376,  380,  381,  381,  382,  382,  384,  384,  385,  385,
      381,    0,  382,    0,  384,  375,  385,    0,  377,  386,
      386,    0,  380,  378,  387,  387,    0,  386,  388,  388,
        0,  381,  387,  389,  389,  379,  388,    0,  390,  390,

        0,  389,  391,  391,  384,  382,  390,  392,  392,    0,
      391,    0,  385,  393,  393,  392,  394,  394,  388,  395,
      395,  393,  396,  396,  394,  386,    0,  395,  390,    0,
      396,  389,  387,  397,  397,  398,  398,    0,  399,  399,
        0,  397,    0,  398,    0,  392,  399,    0,    0,    0,
      394,    0,  396,    0,  400,  400,  401,  401,  402,  402,
        0,  393,  400,    0,  401,  395,  402,  403,  403,  404,
      404,    0,    0,  405,  405,  403,    0,  404,    0,  397,
      399,  405,    0,  398,  406,  406,  400,  407,  407,    0,
      408,  408,  406,    0,  401,  407,    0,  403,  408,  409,

      409,    0,  402,  410,  410,    0,    0,  409,  411,  411,
        0,  410,  412,  412,  413,  413,  411,    0,  414,  414,
      412,  405,  413,  415,  415,  408,  414,  407,  416,  416,
        0,  415,  408,    0,  417,  417,  416,  418,  418,  419,
      419,  409,  417,    0,  411,  418,    0,  419,    0,  410,
        0,  412,  420,  420,  421,  421,  422,  422,  423,  423,
      420,  415,  421,  417,  422,  414,  423,  424,  424,  418,
      425,  425,  427,  427,  416,  424,  426,  426,  425,    0,
      427,    0,  420,    0,  426,    0,  419,    0,  423,  421,
      428,  428,  426,  429,  429,  430,  430,    0,  428,  422,

      425,  429,  426,  430,    0,  431,  431,    0,    0,    0,
        0,  426,    0,  431,    0,  424,  432,  432,  433,  433,
        0,  434,  434,    0,  432,    0,  433,  435,  435,  434,
        0,    0,  436,  436,    0,  435,  437,  437,  428,  431,
      436,  438,  438,  430,  437,    0,  432,  439,  439,  438,
      440,  440,    0,    0,    0,  439,  441,  441,  440,    0,
      433,  434,  442,  442,  441,  443,  443,  435,    0,    0,
      442,    0,    0,  443,  444,  444,  437,    0,  436,  439,
      445,  445,  444,  446,  446,  447,  447,  438,  445,  448,
      448,  446,    0,  447,  441,    0,  442,  448,  449,  449,

      450,  450,    0,    0,  451,  451,  449,    0,  450,  452,
      452,    0,  451,  446,    0,  447,    0,  452,    0,  448,
      453,  453,  454,  454,    0,    0,  451,  445,  453,    0,
      454,    0,  447,  447,  451,  451,  456,  456,    0,  452,
      452,  450,  457,  457,  456,  458,  458,  459,  459,    0,
      457,  451,  454,  458,    0,  459,    0,    0,  460,  460,
      454,  461,  461,    0,  453,  453,  460,  453,    0,  461,
      453,    0,    0,  462,  462,  463,  463,    0,    0,  458,
      457,  462,    0,  463,  456,  459,  464,  464,  465,  465,
      466,  466,    0,    0,  464,    0,  465,    0,  466,    0,

      460,  467,  467,    0,  461,  468,  468,  469,  469,  467,
        0,    0,    0,  468,    0,  469,    0,    0,  463,  470,
      470,  462,  471,  471,  464,  472,  472,  470,    0,    0,
      471,    0,  466,  472,  473,  473,  465,  468,  474,  474,
      475,  475,  473,  467,  476,  476,  474,    0,  475,  477,
      477,  470,  476,    0,  469,  478,  478,  477,  479,  479,
        0,    0,    0,  478,    0,  471,  479,    0,  472,  475,
      480,  480,  481,  481,  482,  482,    0,  473,  480,    0,
      481,    0,  482,  483,  483,    0,  474,  477,  479,  484,
      484,  483,  485,  485,  486,  486,    0,  484,    0,    0,

      485,    0,  486,    0,  478,    0,  481,  487,  487,  488,
      488,  489,  489,    0,    0,  487,    0,  488,    0,  489,
        0,  485,  490,  490,    0,  491,  491,  492,  492,  486,
      490,  483,    0,  491,    0,  492,  484,    0,  488,  493,
      493,  487,  494,  494,  495,  495,    0,  493,  496,  496,
      494,    0,  495,  497,  497,    0,  496,  489,  491,  499,
      499,  497,  498,  498,  500,  500,    0,  499,  501,  501,
      498,    0,  500,  502,  502,  492,  501,  493,    0,  503,
      503,  502,    0,    0,  504,  504,  495,  503,    0,    0,
      494,  497,  504,  505,  505,    0,  496,  506,  506,  498,

        0,  505,  507,  507,    0,  506,  508,  508,    0,    0,
      507,    0,  509,  509,  508,    0,  501,  510,  510,  503,
      509,  502,  511,  511,    0,  510,    0,  506,  512,  512,
      511,  513,  513,  504,    0,  507,  512,  514,  514,  513,
      508,  515,  515,  516,  516,  514,  517,  517,    0,  515,
        0,  516,  520,  520,  517,  509,  521,  521,    0,  510,
      520,  522,  522,    0,  521,  523,  523,  524,  524,  522,
        0,  513,    0,  523,  512,  524,    0,    0,  525,  525,
      526,  526,    0,    0,  515,  514,  525,  520,  526,  516,
      521,  522,  527,  527,    0,  529,  529,  530,  530,    0,

      527,  531,  531,  529,    0,  530,    0,    0,  525,  531,
      532,  532,  533,  533,  523,  524,  534,  534,  532,    0,
      533,    0,    0,    0,  534,    0,    0,  535,  535,  530,
      531,    0,  526,  529,  527,  535,  536,  536,  537,  537,
      538,  538,  539,  539,  536,    0,  537,    0,  538,    0,
      539,  540,  540,  532,  541,  541,  542,  542,  534,  540,
      533,  535,  541,    0,  542,  544,  544,  543,  543,  545,
      545,  546,  546,  544,  538,  543,    0,  545,  536,  546,
        0,  537,  547,  547,  548,  548,  549,  549,  541,    0,
      547,    0,  548,    0,  549,  550,  550,  551,  551,  540,

        0,  543,    0,  550,    0,  551,    0,  544,    0,  546,
        0,  545,  552,  552,    0,  548,  547,    0,  548,    0,
      552,  553,  553,  554,  554,    0,  549,  555,  555,  553,
      548,  554,  556,  556,    0,  555,  550,    0,  551,  555,
      556,  558,  558,  557,  557,  559,  559,  560,  560,  558,
        0,  557,    0,  559,    0,  560,  561,  561,    0,  562,
      562,  563,  563,    0,  561,  564,  564,  562,    0,  563,
      556,  554,  557,  564,  565,  565,  558,  566,  566,  567,
      567,  560,  565,    0,    0,  566,    0,  567,  568,  568,
      561,  562,    0,  559,    0,  563,  568,    0,  564,  569,

      569,  570,  570,    0,  565,  571,  571,  569,    0,  570,
      572,  572,    0,  571,  573,  573,    0,  566,  572,    0,
      567,    0,  573,  574,  574,    0,  568,  575,  575,    0,
        0,  574,  576,  576,    0,  575,    0,  569,    0,  571,
      576,  577,  577,  578,  578,  579,  579,  580,  580,  577,
        0,  578,    0,  579,    0,  580,  572,    0,  581,  581,
      584,  584,  585,  585,  586,  586,  581,    0,  584,  575,
      585,    0,  586,  587,  587,  579,  588,  588,  589,  589,
      576,  587,    0,  578,  588,    0,  589,  590,  590,    0,
        0,  580,  581,    0,  577,  590,    0,  585,    0,  591,

      591,  593,  593,  587,  594,  594,  588,  591,  584,  593,
      586,    0,  594,  595,  595,  596,  596,    0,  589,  597,
      597,  595,    0,  596,  598,  598,    0,  597,    0,  599,
      599,    0,  598,  600,  600,  593,    0,  599,  601,  601,
        0,  600,  602,  602,    0,    0,  601,  603,  603,    0,
      602,    0,  594,  598,    0,  603,    0,  596,  599,  605,
      605,  595,  604,  604,  606,  606,    0,  605,    0,    0,
      604,    0,  606,  607,  607,    0,  603,  608,  608,    0,
      601,  607,  609,  609,    0,  608,  610,  610,  602,    0,
      609,  604,  611,  611,  610,  612,  612,  606,  613,  613,

      611,    0,    0,  612,  614,  614,  613,  615,  615,  604,
        0,  609,  614,  616,  616,  615,  617,  617,    0,  608,
      610,  616,  618,  618,  617,  619,  619,    0,  620,  620,
      618,    0,  613,  619,  611,  614,  620,  621,  621,  622,
      622,  615,  611,    0,  612,  621,    0,  622,    0,  623,
      623,  624,  624,  625,  625,    0,  617,  623,    0,  624,
      619,  625,  618,    0,  621,    0,  620,  626,  626,  627,
      627,  628,  628,  629,  629,  626,    0,  627,    0,  628,
      624,  629,  625,  630,  630,  632,  632,  631,  631,  633,
      633,  630,    0,  632,  626,  631,    0,  633,  634,  634,

      635,  635,  636,  636,    0,  628,  634,    0,  635,    0,
      636,  629,  637,  637,    0,  627,    0,  631,  633,    0,
      637,  638,  638,  639,  639,    0,  640,  640,    0,  638,
        0,  639,    0,  630,  640,  644,  644,  643,  643,  645,
      645,  646,  646,  644,    0,  643,    0,  645,    0,  646,
      647,  647,  648,  648,    0,  650,  650,    0,  647,    0,
      648,    0,    0,  650,  651,  651,  652,  652,  640,  638,
      639,  643,  651,    0,  652,    0,  653,  653,  644,  654,
      654,  655,  655,  646,  653,  656,  656,  654,    0,  655,
        0,  657,  657,  656,    0,  658,  658,    0,  647,  657,

        0,  648,  650,  658,    0,    0,  659,  659,    0,  652,
      660,  660,  655,  651,  659,    0,  662,  662,  660,  661,
      661,  663,  663,  654,  662,  664,  664,  661,    0,  663,
        0,    0,  656,  664,  665,  665,  666,  666,  657,  667,
      667,  658,  665,    0,  666,  668,  668,  667,  669,  669,
      670,  670,    0,  668,  659,    0,  669,  661,  670,  663,
        0,  664,    0,    0,  662,  671,  671,  665,  672,  672,
      666,    0,    0,  671,    0,    0,  672,  673,  673,  667,
      674,  674,  669,  675,  675,  673,  679,  679,  674,  676,
      676,  675,  677,  677,  679,  678,  678,  676,  680,  680,

      677,    0,  672,  678,    0,  671,  680,    0,  681,  681,
      682,  682,    0,    0,    0,  673,  681,    0,  682,    0,
      674,  675,    0,    0,  676,    0,    0,  683,  683,    0,
      677,  684,  684,  678,  679,  683,    0,  685,  685,  684,
      681,  686,  686,    0,  682,  685,  687,  687,    0,  686,
      690,  690,  691,  691,  687,  692,  692,    0,  690,    0,
      691,  693,  693,  692,    0,  684,    0,  683,    0,  693,
      694,  694,  696,  696,  697,  697,    0,    0,  694,    0,
      696,    0,  697,  698,  698,  699,  699,    0,    0,  700,
      700,  698,    0,  699,  687,  693,  690,  700,  691,  701,

      701,  702,  702,  692,  694,  703,  703,  701,    0,  702,
      704,  704,    0,  703,  705,  705,  706,  706,  704,    0,
      697,    0,  705,    0,  706,  707,  707,  698,  699,  708,
      708,    0,    0,  707,    0,  709,  709,  708,    0,  703,
      710,  710,  700,  709,  711,  711,  712,  712,  710,  713,
      713,    0,  711,    0,  712,    0,    0,  713,  714,  714,
      707,    0,  705,  704,  715,  715,  714,  708,  716,  716,
        0,    0,  715,  717,  717,    0,  716,    0,  711,  718,
      718,  717,  710,  719,  719,  720,  720,  718,  721,  721,
        0,  719,  712,  720,    0,    0,  721,  722,  722,  723,

      723,    0,  716,    0,  715,  722,    0,  723,  724,  724,
        0,  725,  725,    0,  717,  721,  724,  718,  719,  725,
      726,  726,  729,  729,  730,  730,  720,    0,  726,    0,
      729,    0,  730,  731,  731,  732,  732,  733,  733,  735,
      735,  731,    0,  732,    0,  733,    0,  735,  736,  736,
        0,  737,  737,    0,  738,  738,  736,    0,  730,  737,
        0,  725,  738,  739,  739,    0,    0,  740,  740,  741,
      741,  739,    0,  735,    0,  740,    0,  741,  742,  742,
      743,  743,  744,  744,  745,  745,  742,    0,  743,  737,
      744,    0,  745,  746,  746,  736,    0,  747,  747,    0,

        0,  746,    0,    0,    0,  747,    0,  741,  748,  748,
      739,  740,  749,  749,    0,    0,  748,  750,  750,    0,
      749,    0,  743,    0,    0,  750,  751,  751,  752,  752,
      744,  747,  753,  753,  751,    0,  752,  754,  754,    0,
      753,  756,  756,  758,  758,  754,  749,  759,  759,  756,
        0,  758,  760,  760,    0,  759,    0,  750,  761,  761,
      760,    0,  752,    0,  762,  762,  761,  763,  763,    0,
      753,  754,  762,  764,  764,  763,  765,  765,  766,  766,
        0,  764,  767,  767,  765,    0,  766,  768,  768,    0,
      767,  769,  769,    0,  760,  768,  770,  770,  762,  769,

        0,  761,    0,    0,  770,  771,  771,  773,  773,    0,
      763,  774,  774,  771,    0,  773,  775,  775,    0,  774,
        0,  768,  776,  776,  775,  777,  777,  778,  778,    0,
      776,  779,  779,  777,    0,  778,    0,  770,    0,  779,
      781,  781,  782,  782,  783,  783,    0,  771,  781,    0,
      782,    0,  783,    0,    0,  773,    0,  784,  784,    0,
      774,  778,  785,  785,  776,  784,  787,  787,  789,  789,
      785,    0,  791,  791,  787,    0,  789,  793,  793,  779,
      791,    0,    0,    0,    0,  793,    0,    0,  782,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  787,    0,

        0,    0,  789,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  791,
      795,  795,  795,  795,  796,  796,  797,  797,    0,  797,
      798,  798,    0,  798,  799,  799,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794

    } ;

#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 ".\\parser.l"
#define INITIAL 0
#line 2 ".\\parser.l"
#include "pch.h"
#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

#include "rdogramrtp.hpp"
namespace rdoParse {
void setYylval(int val);
void addDouble(double *val);
void addName(std::string *name);
}

#define comment 1

#line 1572 "rdolex.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 19 ".\\parser.l"


#line 1702 "rdolex.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 795 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3837 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 21 ".\\parser.l"
return(Resource_type);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 22 ".\\parser.l"
return(permanent);
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 23 ".\\parser.l"
return(Parameters);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 24 ".\\parser.l"
return(integer);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 25 ".\\parser.l"
return(real);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 26 ".\\parser.l"
return(End);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 27 ".\\parser.l"
return(temporary);                     
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 28 ".\\parser.l"
return(such_as);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 29 ".\\parser.l"
return(dblpoint);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 31 ".\\parser.l"
return(Resources);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 32 ".\\parser.l"
return(trace_keyword);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 33 ".\\parser.l"
return(no_trace);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 35 ".\\parser.l"
return(Constant);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 36 ".\\parser.l"
return(Body);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 37 ".\\parser.l"
return(Function_keyword);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 38 ".\\parser.l"
return(Type_keyword);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 39 ".\\parser.l"
return(algorithmic);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 40 ".\\parser.l"
return(table_keyword);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 41 ".\\parser.l"
return(list_keyword);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 42 ".\\parser.l"
return(Calculate_if);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 43 ".\\parser.l"
return(Sequence);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 44 ".\\parser.l"
return(uniform);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 45 ".\\parser.l"
return(exponential);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 46 ".\\parser.l"
return(normal_keyword);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 47 ".\\parser.l"
return(by_hist);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 48 ".\\parser.l"
return(enumerative);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 50 ".\\parser.l"
return(Exist);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 51 ".\\parser.l"
return(Not_Exist);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 52 ".\\parser.l"
return(For_All);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 53 ".\\parser.l"
return(Not_For_All);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 54 ".\\parser.l"
return(neq);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 55 ".\\parser.l"
return(leq);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 56 ".\\parser.l"
return(geq);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 57 ".\\parser.l"
return(NoCheck);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 58 ".\\parser.l"
return(Calculate_if);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 59 ".\\parser.l"
return(or_keyword);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 60 ".\\parser.l"
return(and_keyword);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 63 ".\\parser.l"
return(Pattern);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 64 ".\\parser.l"
return(operation);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 65 ".\\parser.l"
return(irregular_event);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 66 ".\\parser.l"
return(rule_keyword);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 67 ".\\parser.l"
return(keyboard);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 68 ".\\parser.l"
return(Relevant_resources);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 69 ".\\parser.l"
return(Keep);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 70 ".\\parser.l"
return(Create_keyword);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 71 ".\\parser.l"
return(Erase);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 72 ".\\parser.l"
return(NonExist);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 73 ".\\parser.l"
return(NoChange);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 74 ".\\parser.l"
return(Time);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 75 ".\\parser.l"
return(Choice);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 76 ".\\parser.l"
return(from_keyword);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 77 ".\\parser.l"
return(first_keyword);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 78 ".\\parser.l"
return(Convert_begin);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 79 ".\\parser.l"
return(Convert_end);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 80 ".\\parser.l"
return(Convert_rule);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 81 ".\\parser.l"
return(Convert_event);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 82 ".\\parser.l"
return(with_max);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 83 ".\\parser.l"
return(with_min);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 84 ".\\parser.l"
return(Operations);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 85 ".\\parser.l"
return(Results);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 86 ".\\parser.l"
return(watch_par);	   
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 87 ".\\parser.l"
return(watch_state);	   
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 88 ".\\parser.l"
return(watch_quant);	   
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 89 ".\\parser.l"
return(watch_value);	   
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 90 ".\\parser.l"
return(get_value);	   
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 92 ".\\parser.l"
return(Model_name);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 93 ".\\parser.l"
return(Resource_file);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 94 ".\\parser.l"
return(OprIev_file);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 95 ".\\parser.l"
return(Frame_file);	
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 96 ".\\parser.l"
return(Statistic_file);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 97 ".\\parser.l"
return(Results_file);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 98 ".\\parser.l"
return(Trace_file);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 99 ".\\parser.l"
return(Show_mode);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 100 ".\\parser.l"
return(Frame_number);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 101 ".\\parser.l"
return(Show_rate);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 102 ".\\parser.l"
return(Run_StartTime);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 103 ".\\parser.l"
return(Trace_StartTime);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 104 ".\\parser.l"
return(Trace_EndTime);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 105 ".\\parser.l"
return(Terminate_if);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 106 ".\\parser.l"
return(Break_point);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 107 ".\\parser.l"
return(Seed);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 108 ".\\parser.l"
return(NoShow);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 109 ".\\parser.l"
return(Monitor);	
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 110 ".\\parser.l"
return(Animation);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 113 ".\\parser.l"
return(Decision_point);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 114 ".\\parser.l"
return(search_keyword);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 115 ".\\parser.l"
return(trace_stat);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 116 ".\\parser.l"
return(trace_tops);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 117 ".\\parser.l"
return(trace_all);		     
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 118 ".\\parser.l"
return(Condition_keyword);		     
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 119 ".\\parser.l"
return(Term_condition);      
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 120 ".\\parser.l"
return(Evaluate_by);	        
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 121 ".\\parser.l"
return(Compare_tops);	     
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 122 ".\\parser.l"
return(NO);				        
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 123 ".\\parser.l"
return(YES);				     
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 124 ".\\parser.l"
return(Activities);		     
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 125 ".\\parser.l"
return(value_before);	     
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 126 ".\\parser.l"
return(value_after);	        
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 127 ".\\parser.l"
return(value_before);	     
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 128 ".\\parser.l"
return(value_after);	        
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 129 ".\\parser.l"
return(some);				     
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 133 ".\\parser.l"
return(Frame);
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 134 ".\\parser.l"
return(Show_if);
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 135 ".\\parser.l"
return(Back_picture);
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 136 ".\\parser.l"
return(Show);
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 137 ".\\parser.l"
return(frm_cell);
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 138 ".\\parser.l"
return(text);
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 139 ".\\parser.l"
return(transparent);
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 140 ".\\parser.l"
return(bitmap);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 141 ".\\parser.l"
return(s_bmp);
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 142 ".\\parser.l"
return(rect_keyword);
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 143 ".\\parser.l"
return(r_rect);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 144 ".\\parser.l"
return(line);
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 145 ".\\parser.l"
return(ellipse);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 146 ".\\parser.l"
return(triang);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 147 ".\\parser.l"
return(active);
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 149 ".\\parser.l"
{
							std::string n1(YYText());
							int len = n1.length();
                     std::string *name = new std::string(n1, 1, len-2);
                     rdoParse::addName(name);
	                  rdoParse::setYylval((int)name);
                     return QUOTED_IDENTIF;
                  }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 158 ".\\parser.l"
BEGIN(comment);
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 160 ".\\parser.l"
/* eat anything that's not a '*' */
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 161 ".\\parser.l"
;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 162 ".\\parser.l"
BEGIN(INITIAL);
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 165 ".\\parser.l"
;	
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 166 ".\\parser.l"
;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 167 ".\\parser.l"
return(YYText()[YYLeng()-1]);
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 169 ".\\parser.l"
{
						std::string n1(YYText(), YYLeng()-2);
                  rdoParse::setYylval(atoi(n1.c_str()));
						unput('.');
						unput('.');
                  return INT_CONST;
					}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 177 ".\\parser.l"
{
                  double *val = new double(atof(YYText()));
                  rdoParse::addDouble(val);
                  rdoParse::setYylval((int)val);
                  return REAL_CONST;
               }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 184 ".\\parser.l"
{
                  rdoParse::setYylval(atoi(YYText()));
                  return INT_CONST;
               }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 189 ".\\parser.l"
{       
							std::string n1(YYText());
							int pos = n1.find_first_of("\n\t :");
                     std::string *name = new std::string(n1, 0, pos);
                     rdoParse::addName(name);
	                  rdoParse::setYylval((int)name);
                     return IDENTIF_set;
                  }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 198 ".\\parser.l"
{       
							std::string n1(YYText());
							int pos = n1.find_first_of("\n\t :");
                     std::string *name = new std::string(n1, 0, pos);
                     rdoParse::addName(name);
	                  rdoParse::setYylval((int)name);
                     return IDENTIF_NoChange_NoChange;
                  }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 207 ".\\parser.l"
{       
							std::string n1(YYText());
							int pos = n1.find_first_of("\n\t :");
                     std::string *name = new std::string(n1, 0, pos);
                     rdoParse::addName(name);
	                  rdoParse::setYylval((int)name);
                     return IDENTIF_NoChange;
                  }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 216 ".\\parser.l"
{       
							std::string n1(YYText());
							int pos = n1.find_first_of("\n\t :");
                     std::string *name = new std::string(n1, 0, pos);
                     rdoParse::addName(name);
	                  rdoParse::setYylval((int)name);
                     return IDENTIF_COLON;
                  }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 225 ".\\parser.l"
{       
                     std::string *name = new std::string(YYText());
                     rdoParse::addName(name);
	                  rdoParse::setYylval((int)name);
                     return IDENTIF;
                  }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 233 ".\\parser.l"
ECHO;
	YY_BREAK
#line 2512 "rdolex.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(comment):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 795 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 795 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 794);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 233 ".\\parser.l"

   