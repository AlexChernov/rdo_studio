#line 2 "rdolex.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
class istream;
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 137
#define YY_END_OF_BUFFER 138
static yyconst short int yy_acclist[928] =
    {   0,
      122,  122,  138,  137,  127,  137,  136,  137,  137,  128,
      137,  128,  137,  128,  137,  131,  137,  128,  137,  128,
      137,  136,  137,  136,  137,  136,  137,  136,  137,  136,
      137,  136,  137,  136,  137,  136,  137,  136,  137,  136,
      137,  136,  137,  136,  137,  136,  137,  136,  137,  136,
      137,  136,  137,  136,  137,  136,  137,  136,  137,  136,
      137,  136,  137,  136,  137,  136,  137,  136,  137,  136,
      137,  136,  137,  136,  137,  136,  137,  136,  137,  136,
      137,  136,  137,  121,  137,  122,  137,  123,  137,  124,
      137,  125,  137,  127,  136,  135,  136,  136,  136,  136,

      136,  136,  136,  136,  136,  136,  136,  119,  131,    9,
      130,   32,   31,   33,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,   94,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,   36,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  126,  122,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  120,  129,  130,  136,  136,  136,  136,  136,

      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,   95,  136,  136,  136,   37,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,    6,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  130,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,   44,  136,  136,  136,  136,  136,

      136,  136,  136,  136,  136,  136,  136,   81,  136,  107,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,   51,  136,  136,  136,  136,  136,  115,
      136,   19,  136,  136,  136,  136,  136,  136,    5,  136,
      113,  136,   41,  136,  136,  136,  103,  136,  136,  136,
      136,  109,  136,  136,  136,  136,  136,  136,  136,  136,
      132,  136,  136,   14,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,   49,  136,   16,  136,  136,  136,  136,  136,  136,
      136,   46,  136,   27,  136,  136,  136,  136,  136,  136,

      136,  136,  136,  136,  136,  136,  136,  136,  136,   98,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,   52,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  112,  136,  136,  136,   18,  136,
      136,   11,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  104,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,   50,  136,  136,   45,  136,  136,  136,  136,  136,
      136,  136,   82,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  118,  136,  136,

      111,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,   24,  136,  136,  136,  114,  136,   86,  136,
      136,  136,  136,  136,  117,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,   29,  136,  136,  136,  136,   83,  136,  136,   34,
      136,  136,  136,  136,  136,  136,  136,  136,  105,  136,
      136,  136,  136,  136,  136,  136,  136,  136,   25,  136,
      116,  136,  136,  136,  136,  136,    4,  136,  136,  136,
      136,  136,  136,    8,  136,  136,  136,  136,  136,  136,

       22,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
       38,  136,   97,  136,  136,  136,   60,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,   48,  136,   47,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  108,  136,  136,
      136,   42,  136,   12,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,   57,  136,
       58,  136,  136,  136,  136,  136,   13,  136,  136,  136,
       15,  136,  136,  136,  136,  136,   21,  136,  136,   84,

      136,  136,  136,  136,  136,  136,  136,  136,  136,   28,
      136,  136,  136,  136,  136,  136,   73,  136,   75,  136,
      136,  136,  136,  136,  136,  136,  136,  136,   65,  136,
      136,   39,  136,    2,  136,    7,  136,   89,  136,  136,
      136,  136,  136,  136,   61,  136,  136,  136,  136,  134,
      136,  136,  136,   90,  136,  136,  136,  136,  136,  136,
      136,   10,  136,  136,  136,  136,  136,  136,  136,  136,
       69,  136,  136,   66,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,   72,  136,  136,  136,  136,  136,
       87,  136,   88,  136,  136,  136,  136,  136,  136,  136,

       96,  136,  136,  136,  136,  136,   59,  136,    3,  136,
      136,  136,  136,   80,  136,  136,  136,   54,  136,  136,
      136,  136,   30,  136,   68,  136,  136,  136,  136,  136,
      136,  136,  136,   17,  136,   26,  136,   23,  136,  136,
      110,  136,  100,  102,  136,  136,   63,  136,   62,  136,
       64,  136,  136,  136,  136,   92,  136,  136,  136,  136,
       20,   35,  136,  136,  136,   55,  136,   74,  136,  136,
       71,  136,  136,  136,   79,  136,  136,  136,  136,   99,
      101,  136,  106,  136,   93,  136,  136,  136,  136,  136,
       53,  136,   56,  136,   67,  136,   76,  136,  136,   78,

      136,  136,  136,  136,  136,    1,  136,  136,   70,  136,
      136,  136,   85,  136,  136,   91,  136,   77,  136,   40,
      136,  136,  136,  136,  133,   43,  136
    } ;

static yyconst short int yy_accept[809] =
    {   0,
        1,    1,    1,    2,    3,    4,    5,    7,    9,   10,
       12,   14,   16,   18,   20,   22,   24,   26,   28,   30,
       32,   34,   36,   38,   40,   42,   44,   46,   48,   50,
       52,   54,   56,   58,   60,   62,   64,   66,   68,   70,
       72,   74,   76,   78,   80,   82,   84,   86,   88,   90,
       92,   94,   95,   95,   96,   97,   98,   99,  100,  101,
      102,  103,  104,  105,  106,  107,  108,  108,  108,  109,
      110,  111,  112,  113,  114,  115,  116,  117,  118,  119,
      120,  121,  122,  123,  124,  125,  126,  127,  129,  130,
      131,  132,  133,  134,  135,  136,  137,  138,  139,  140,

      141,  142,  143,  144,  145,  146,  147,  148,  149,  150,
      151,  152,  153,  154,  155,  156,  157,  159,  160,  161,
      162,  163,  164,  165,  166,  167,  168,  169,  170,  171,
      172,  173,  174,  174,  175,  176,  176,  176,  177,  178,
      179,  180,  181,  182,  183,  184,  185,  186,  187,  188,
      189,  190,  191,  192,  193,  194,  195,  196,  196,  197,
      198,  199,  200,  201,  202,  203,  204,  205,  206,  207,
      208,  209,  210,  211,  212,  213,  214,  215,  216,  217,
      218,  219,  220,  221,  222,  224,  225,  226,  228,  229,
      230,  231,  232,  233,  234,  235,  236,  237,  238,  239,

      240,  241,  242,  243,  244,  245,  246,  247,  248,  249,
      250,  251,  252,  253,  254,  255,  256,  257,  258,  259,
      260,  261,  262,  263,  263,  263,  264,  265,  266,  267,
      268,  269,  271,  272,  273,  274,  275,  276,  277,  278,
      279,  280,  281,  282,  283,  284,  284,  285,  286,  287,
      288,  289,  290,  291,  292,  293,  294,  295,  297,  298,
      299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
      310,  312,  313,  314,  315,  316,  317,  318,  319,  320,
      321,  322,  323,  324,  326,  327,  328,  329,  330,  332,
      334,  335,  336,  337,  338,  339,  341,  343,  345,  346,

      347,  349,  350,  351,  352,  354,  355,  356,  357,  358,
      359,  360,  361,  361,  362,  363,  364,  366,  367,  368,
      369,  370,  371,  372,  373,  374,  375,  376,  377,  378,
      379,  380,  381,  382,  384,  386,  387,  388,  389,  390,
      391,  392,  394,  396,  397,  398,  399,  400,  401,  402,
      403,  404,  405,  406,  407,  408,  409,  410,  412,  413,
      414,  415,  416,  417,  418,  419,  420,  421,  422,  423,
      425,  426,  427,  428,  429,  430,  431,  432,  433,  434,
      435,  437,  438,  439,  441,  442,  444,  445,  446,  447,
      448,  449,  450,  450,  451,  452,  453,  454,  455,  456,

      457,  459,  460,  461,  462,  463,  464,  465,  466,  467,
      468,  469,  470,  471,  472,  474,  475,  477,  478,  479,
      480,  481,  482,  483,  485,  486,  487,  488,  489,  490,
      491,  492,  493,  494,  495,  496,  497,  498,  500,  501,
      503,  504,  505,  506,  507,  508,  509,  510,  511,  512,
      513,  515,  516,  517,  519,  521,  522,  523,  524,  525,
      527,  528,  528,  529,  530,  531,  531,  532,  533,  534,
      535,  536,  537,  538,  539,  540,  541,  542,  543,  544,
      545,  546,  547,  548,  549,  550,  551,  552,  554,  555,
      556,  557,  559,  560,  562,  563,  564,  565,  566,  567,

      568,  569,  571,  572,  573,  574,  575,  576,  577,  578,
      579,  581,  583,  584,  585,  586,  587,  589,  590,  591,
      592,  593,  594,  596,  597,  598,  599,  600,  601,  603,
      603,  603,  604,  605,  606,  607,  608,  609,  610,  611,
      611,  612,  613,  614,  615,  616,  617,  618,  619,  620,
      621,  623,  625,  626,  627,  629,  630,  631,  632,  633,
      634,  635,  636,  637,  638,  640,  642,  643,  644,  645,
      646,  647,  648,  649,  650,  651,  652,  653,  654,  655,
      656,  657,  658,  660,  661,  662,  664,  666,  667,  668,
      669,  670,  671,  672,  673,  673,  673,  674,  675,  676,

      677,  678,  679,  681,  683,  683,  684,  685,  686,  687,
      689,  690,  691,  693,  694,  695,  696,  697,  699,  700,
      702,  703,  704,  705,  706,  707,  708,  709,  710,  712,
      713,  714,  715,  716,  717,  719,  721,  722,  723,  724,
      725,  726,  727,  728,  729,  731,  732,  734,  736,  738,
      740,  741,  742,  743,  743,  743,  744,  745,  747,  748,
      749,  750,  751,  752,  753,  754,  756,  757,  758,  759,
      760,  761,  762,  764,  765,  766,  767,  768,  769,  770,
      771,  773,  774,  776,  777,  778,  779,  780,  781,  782,
      783,  784,  785,  787,  788,  789,  790,  791,  793,  795,

      796,  796,  796,  797,  798,  799,  800,  801,  801,  803,
      804,  805,  806,  807,  809,  811,  812,  813,  814,  816,
      817,  818,  820,  821,  822,  823,  825,  827,  828,  829,
      830,  831,  832,  833,  834,  836,  838,  840,  841,  843,
      844,  844,  846,  847,  849,  851,  853,  853,  854,  855,
      856,  858,  859,  860,  861,  864,  865,  866,  868,  870,
      871,  873,  874,  875,  877,  878,  879,  880,  881,  883,
      883,  885,  887,  888,  889,  890,  891,  893,  895,  897,
      899,  900,  902,  903,  904,  904,  905,  906,  908,  909,
      911,  912,  913,  913,  915,  916,  918,  920,  922,  922,

      923,  923,  924,  924,  925,  926,  928,  928
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    5,    1,    1,    6,    7,
        7,    7,    8,    7,    8,    9,    7,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   11,    1,   12,
       13,   14,    1,    1,   15,   16,   17,   18,   19,   20,
       21,   21,   22,   21,   23,   21,   24,   25,   26,   27,
       21,   28,   29,   30,   21,   21,   21,   21,   31,   32,
        7,    1,    7,    1,   33,    1,   34,   35,   36,   37,

       38,   39,   40,   41,   42,   21,   43,   44,   45,   46,
       47,   48,   49,   50,   51,   52,   53,   54,   55,   56,
       57,   21,   58,    1,   59,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   21,    1,    1,    1,    1,    1,    1,
        1,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21
    } ;

static yyconst int yy_meta[60] =
    {   0,
        1,    2,    3,    4,    2,    1,    1,    1,    1,    2,
        2,    1,    1,    1,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    1,    5
    } ;

static yyconst short int yy_base[813] =
    {   0,
        0,    0,   57,   59,  240, 5215,   62,  117,   64, 5215,
      228,  227,   59,   58,  221,   71,   74,  127,   77,   92,
      102,   87,  151,  154,  167,  179,  183,  189,  193,  205,
      226,  241,  244,  254,  258,  268,   97,  271,  287,  298,
      308,  311,  321,  327,  349,  363,  174,    0, 5215, 5215,
     5215,  107,  366,  376, 5215,  382,  392,  396,  408,  411,
      421,  425,  438,  448,  451,  464,   80,  160, 5215,   83,
     5215,  141, 5215, 5215, 5215,  474,  479,  489,  492,  507,
      511,  521,  524,  527,  539,  543,  554,  557,  567,  572,
      583,  586,  599,  603,  613,  624,  627,  640,  643,  646,

      659,  664,  676,  679,  682,  692,  702,  705,  716,  719,
      729,  732,  735,  745,  755,  749,  765,  775,  791,  795,
      805,  808,  811,  824,  835,  848,  851,  861,  864,  874,
      877,  887,  172,  167,    0,  178,  185,  890,  908,  911,
      921,  924,  934,  947,  950,  953,  966,  971,  983,  987,
      998, 1003, 1009, 1013,   81, 5215,  165,  104, 1023, 1033,
     1037, 1047, 1053, 1067, 1072, 1077, 1082, 1088, 1092, 1106,
     1109, 1123, 1127, 1139, 1143, 1158, 1163, 1168, 1179, 1182,
     1185, 1195, 1201, 1218, 1221, 1224, 1234, 1239, 1249, 1254,
     1259, 1265, 1269, 1275, 1280, 1285, 1295, 1300, 1316, 1320,

     1330, 1333, 1345, 1348, 1358, 1361, 1371, 1375, 1385, 1388,
     1399, 1409, 1412, 1425, 1428, 1431, 1443, 1453, 1449, 1459,
     1465, 1471, 1482,  205,  162, 1498, 1501, 1511, 1517, 1522,
     1527, 1532, 1543, 1546, 1549, 1559, 1572, 1575, 1578, 1590,
     1593, 1596, 1608, 1613, 1618,  203,  201, 1628, 1631, 1634,
     1655, 1661, 1665, 1675, 1678, 1681, 1691, 1701, 1704, 1707,
     1717, 1720, 1723, 1733, 1736, 1739, 1754, 1758, 1769, 1773,
     1779, 1791, 1797, 1802, 1807, 1812, 1817, 1823, 1827, 1833,
     1839, 1843, 1853, 1856, 1866, 1870, 1876, 1880, 1890, 1894,
     1900, 1904, 1910, 1915, 1920, 1926, 1930, 1943, 1949, 1955,

     1959, 1965, 1969, 1975, 1979, 1985, 1990, 2000, 2006, 2010,
     2016, 2022,  169, 5215, 2026, 2032, 2036, 2047, 2057, 2060,
     2071, 2074, 2085, 2089, 2099, 2102, 2105, 2115, 2126, 2146,
     2152, 2156, 2162, 2166, 2172, 2182, 2186, 2198, 2201, 2204,
     2214, 2218, 2224, 2229, 2234, 2244, 2247, 2257, 2260, 2272,
     2276, 2282, 2286, 2296, 2302, 2306, 2312, 2317, 2328, 2332,
     2338, 2342, 2352, 2357, 2363, 2377, 2383, 2389, 2393, 2399,
     2403, 2413, 2416, 2419, 2433, 2446, 2449, 2459, 2462, 2472,
     2475, 2485, 2488, 2498, 2501, 2512, 2516, 2526, 2529, 2532,
     2544, 2550,  172, 2556, 2567, 2570, 2580, 2583, 2586, 2597,

     2600, 2603, 2619, 2622, 2632, 2635, 2638, 2648, 2651, 2654,
     2665, 2676, 2681, 2686, 2691, 2702, 2705, 2708, 2719, 2722,
     2732, 2735, 2738, 2753, 2758, 2768, 2774, 2784, 2787, 2790,
     2800, 2803, 2816, 2826, 2829, 2841, 2845, 2851, 2855, 2865,
     2868, 2883, 2888, 2893, 2898, 2908, 2912, 2922, 2925, 2942,
     2945, 2956, 2961, 2966, 2977, 2980, 2983, 2993, 2998, 3003,
     3008, 3022, 3026, 3032, 3037,  159, 3047, 3061, 3064, 3074,
     3085, 3089, 3102, 3106, 3116, 3119, 3122, 3135, 3138, 3141,
     3153, 3158, 3163, 3176, 3179, 3189, 3194, 3204, 3209, 3214,
     3226, 3229, 3232, 3242, 3245, 3255, 3260, 3270, 3273, 3283,

     3287, 3297, 3301, 3311, 3315, 3321, 3325, 3331, 3337, 3341,
     3347, 3351, 3357, 3363, 3373, 3383, 3386, 3389, 3400, 3403,
     3416, 3422, 3427, 3440, 3443, 3446, 3456, 3462, 3467,  160,
      151, 3472, 3477, 3482, 3493, 3497, 3503, 3515, 3518,  148,
     3521, 3531, 3536, 3541, 3551, 3554, 3557, 3570, 3573, 3576,
     3587, 3590, 3602, 3606, 3619, 3622, 3625, 3635, 3638, 3648,
     3653, 3663, 3659, 3673, 3690, 3694, 3706, 3709, 3712, 3723,
     3726, 3729, 3739, 3742, 3757, 3760, 3771, 3781, 3784, 3798,
     3802, 3808, 3814, 3818, 3828, 3831, 3834, 3844, 3849, 3855,
     3859, 3865, 3869, 3880,  124,  134, 3883, 3893, 3903, 3917,

     3920, 3923, 3934, 3937,  134, 3953, 3957, 3967, 3970, 3973,
     3984, 3990, 3994, 4000, 4004, 4010, 4022, 4025, 4028, 4038,
     4048, 4058, 4064, 4068, 4074, 4078, 4084, 4094, 4097, 4107,
     4122, 4126, 4132, 4137, 4142, 4152, 4157, 4167, 4173, 4177,
     4183, 4193, 4203, 4206, 4209, 4220, 4226, 4230, 4240, 4243,
     4256, 4259, 4269,  129,  112, 4273, 4279, 4283, 4289, 4293,
     4303,  216, 4314, 4317, 4320, 4330, 4335, 4340, 4346, 4350,
     4360, 4370, 4374, 4384, 4387, 4400, 4403, 4413, 4416, 4426,
     4429, 4442, 4445, 4455, 4458, 4461, 4471, 4474, 4484, 4487,
     4490, 4502, 4506, 4516, 4522, 4532, 4535, 4538, 4553, 4559,

       91,   90, 4563, 4575, 4578, 4581, 4591,  274, 4594, 4597,
     4612, 4624, 4629, 4634, 4639, 4650, 4653, 4663, 4666, 4678,
     4681, 4691, 4694, 4697, 4709, 4722, 4725, 4728, 4739, 4742,
     4752, 4758, 4762, 4772, 4777, 4782, 4787, 4797, 4801, 5215,
       89, 4807, 4811, 4817, 4821, 4827,   79, 4831, 4837, 4841,
     4851, 4854, 4864, 4868, 4874, 4878, 4888, 4891, 4904, 4914,
     4917, 4927, 4930, 4933, 4943, 4946, 4956, 5215, 4959,  106,
     4969, 4973, 4987, 4993, 4997, 5003, 5007, 5013, 5017, 5023,
     5027, 5040, 5043, 5053,   81, 5056, 5059, 5069, 5072, 5075,
     5087, 5090,   81, 5093, 5103, 5113, 5117, 5127,   61, 5130,

       62, 5133,   59, 5143, 5215, 5146, 5215, 5194, 5198, 5202,
     5207, 5212
    } ;

static yyconst short int yy_def[813] =
    {   0,
      807,    1,  808,  808,  807,  807,  807,  809,  810,  807,
      807,  807,  807,  807,  807,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  811,  812,  807,  807,
      807,  807,  807,  809,  807,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  810,  810,  807,  807,
      807,  807,  807,  807,  807,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,

      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  811,  811,  812,  807,  807,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  810,  807,  807,  807,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,

      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  807,  807,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  807,  807,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,

      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  807,  807,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  807,  809,  809,  809,  809,  809,  809,  809,

      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  807,  809,  809,  809,  807,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,

      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  807,
      807,  809,  809,  809,  809,  809,  809,  809,  809,  807,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  807,  807,  809,  809,  809,  809,

      809,  809,  809,  809,  807,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  807,  807,  809,  809,  809,  809,  809,
      809,  807,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,

      807,  807,  809,  809,  809,  809,  809,  807,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  807,
      807,  809,  809,  809,  809,  809,  807,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  807,  809,  807,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  807,  809,  809,  809,  809,  809,
      809,  809,  807,  809,  809,  809,  809,  809,  807,  809,

      807,  809,  807,  809,  807,  809,    0,  807,  807,  807,
      807,  807
    } ;

static yyconst short int yy_nxt[5275] =
    {   0,
        6,    7,    7,    7,    8,    9,   10,   11,   12,   13,
        6,   14,   10,   15,   16,   17,   18,   19,   20,   21,
       19,   19,   22,   23,   24,   25,   19,   26,   27,   28,
       29,   19,   19,   30,   31,   19,   19,   32,   33,   34,
       19,   35,   36,   37,   19,   38,   39,   40,   19,   41,
       42,   43,   44,   45,   46,   19,   19,   47,    6,   49,
       50,   49,   50,   52,   52,   52,   68,   72,   70,   69,
       73,   74,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   55,   68,   68,   55,   69,   69,   55,   53,   53,
       53,   72,   70,   53,   53,   53,  805,   55,   53,   53,

       53,  803,   55,   53,   53,   53,  801,   55,   52,   52,
       52,  246,   55,  247,  799,   51,   76,   51,   53,   53,
       53,  793,  785,   77,   86,  770,  768,   55,   53,   53,
       53,   56,   57,   58,   59,   60,   61,   55,  114,  741,
      740,   82,   62,   63,   64,   65,   66,   83,   84,  156,
      157,   85,   53,   53,   53,   53,   53,   53,  702,  158,
       78,   55,   68,  155,   55,   69,  701,   79,   53,   53,
       53,  662,  655,   80,  157,  654,   81,   55,  158,   88,
       53,   53,   53,  158,   53,   53,   53,  605,  596,   55,
       53,   53,   53,   55,   53,   53,   53,   87,  595,   55,

       89,   93,  158,   55,  540,  466,   53,   53,   53,  393,
      247,   99,  247,  314,   90,   55,   91,  708,  708,  708,
       94,  313,  225,   95,  224,  134,   97,   53,   53,   53,
      134,   92,  134,   75,   96,   71,   55,   70,   98,  807,
      100,  807,   53,   53,   53,   53,   53,   53,  101,  807,
      102,   55,  807,  807,   55,   53,   53,   53,  807,   53,
       53,   53,  807,  807,   55,  807,  807,  103,   55,   53,
       53,   53,   53,   53,   53,  708,  708,  708,   55,  807,
      807,   55,  104,  807,  105,  108,  106,  807,   53,   53,
       53,  110,  807,  109,  807,  807,  107,   55,  747,   53,

       53,   53,  807,  111,  807,  113,  807,  112,   55,   53,
       53,   53,   53,   53,   53,  807,  807,  115,   55,  807,
      807,   55,   53,   53,   53,  807,  807,  807,   53,   53,
       53,   55,  807,  807,  116,  118,  117,   55,  807,  807,
      119,  807,  807,  122,  807,  120,  807,  807,  123,  807,
       53,   53,   53,  807,  126,  807,  807,  124,  127,   55,
      121,  807,  807,  125,   53,   53,   53,   53,   53,   53,
      128,  807,  129,   55,  807,  807,   55,   53,   53,   53,
      807,  807,  130,   53,   53,   53,   55,  807,  807,  807,
      136,  807,   55,   53,   53,   53,  131,   53,   53,   53,

      807,  807,   55,  807,  132,  807,   55,  807,  807,   53,
       53,   53,   53,   53,   53,  807,  137,  138,   55,  807,
      807,   55,   53,   53,   53,  139,   53,   53,   53,  807,
      807,   55,  807,  807,  807,   55,  807,  807,  140,   53,
       53,   53,  141,  807,  807,  142,  807,  807,   55,   53,
       53,   53,   53,   53,   53,  807,  143,  807,   55,  807,
      807,   55,  807,  807,  144,   53,   53,   53,  807,  807,
      145,  148,  147,  146,   55,   53,   53,   53,  807,  807,
       53,   53,   53,  807,   55,  150,  807,  149,  151,   55,
       53,   53,   53,   53,   53,   53,  807,  807,  807,   55,

      807,  152,   55,  807,  807,  153,  807,  807,   53,   53,
       53,  807,   53,   53,   53,  159,  160,   55,  807,  807,
      154,   55,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   55,  161,  807,   55,  807,  807,   55,  162,  807,
       53,   53,   53,  807,   53,   53,   53,  807,  164,   55,
      807,  807,  163,   55,  165,   53,   53,   53,   53,   53,
       53,  807,  807,  807,   55,  166,  807,   55,   53,   53,
       53,  807,  168,   53,   53,   53,  167,   55,  807,  807,
      169,  807,   55,  172,   53,   53,   53,   53,   53,   53,
      170,  807,  807,   55,  807,  173,   55,  807,  807,  171,

       53,   53,   53,  807,   53,   53,   53,  807,  807,   55,
      807,  807,  174,   55,   53,   53,   53,  807,  175,  807,
      179,  176,  807,   55,  807,   53,   53,   53,   53,   53,
       53,  178,  807,  177,   55,  807,  807,   55,  807,  807,
      180,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       55,  807,  807,   55,  807,  807,   55,  182,  807,  181,
       53,   53,   53,  807,  807,   53,   53,   53,  807,   55,
      807,  185,  807,  184,   55,  807,  183,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   55,  807,  807,   55,
      807,  807,   55,   53,   53,   53,  807,  186,  187,  807,

      188,  807,   55,   53,   53,   53,   53,   53,   53,  807,
      807,  190,   55,  807,  807,   55,  807,   53,   53,   53,
       53,   53,   53,  807,  807,  191,   55,  189,  807,   55,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   55,
      807,  807,   55,  807,  192,   55,   53,   53,   53,  193,
       53,   53,   53,  807,  194,   55,   53,   53,   53,   55,
      195,  807,  196,  807,  807,   55,   53,   53,   53,  807,
      197,  807,  807,  807,  807,   55,   53,   53,   53,  807,
      198,  199,  807,  807,  807,   55,  205,  203,  807,  807,
      201,  200,   53,   53,   53,  202,   53,   53,   53,  807,

      807,   55,  807,  807,  204,   55,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   55,  807,  807,   55,  807,
      807,   55,  807,  807,  206,   53,   53,   53,  208,  807,
      209,  807,  807,  807,   55,  807,   53,   53,   53,  807,
      207,  807,  211,  807,  212,   55,  807,  807,  210,   53,
       53,   53,   53,   53,   53,  807,  807,  807,   55,  807,
      807,   55,   53,   53,   53,   53,   53,   53,  213,  807,
      214,   55,  807,  807,   55,   53,   53,   53,   53,   53,
       53,  807,  215,  807,   55,  807,  807,   55,   53,   53,
       53,   53,   53,   53,  218,  216,  807,   55,  807,  807,

       55,  807,  219,  807,  807,  220,  217,  807,  807,   53,
       53,   53,   53,   53,   53,  807,  807,  221,   55,  807,
      807,   55,   53,   53,   53,   53,   53,   53,  222,  807,
      807,   55,  807,  807,   55,   53,   53,   53,  223,  807,
      807,  226,  807,  227,   55,  807,  807,  228,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   55,  807,  231,
       55,  807,  807,   55,  807,  229,  230,   53,   53,   53,
      232,  807,   53,   53,   53,  807,   55,  807,  807,  807,
      233,   55,  807,  234,   53,   53,   53,  807,   53,   53,
       53,  807,  807,   55,  807,  807,  807,   55,  235,   53,

       53,   53,  807,  236,   53,   53,   53,  807,   55,  807,
       53,   53,   53,   55,   53,   53,   53,  807,  807,   55,
      237,  807,  238,   55,   53,   53,   53,  807,  807,  239,
      240,  807,  807,   55,   53,   53,   53,  241,   53,   53,
       53,  807,  807,   55,  807,  807,  242,   55,   53,   53,
       53,  807,  243,  244,   53,   53,   53,   55,  807,  807,
      245,  807,  807,   55,  807,  807,  249,  248,   53,   53,
       53,  807,  250,   53,   53,   53,  807,   55,   53,   53,
       53,  807,   55,   53,   53,   53,  807,   55,  251,   53,
       53,   53,   55,   53,   53,   53,  807,  807,   55,  807,

      253,  807,   55,  807,  807,  807,  252,   53,   53,   53,
       53,   53,   53,  807,  256,  807,   55,  807,  807,   55,
      807,  807,  254,  807,   53,   53,   53,  255,   53,   53,
       53,  807,  257,   55,  807,  807,  807,   55,  807,  258,
       53,   53,   53,  259,   53,   53,   53,  807,  807,   55,
      260,  807,  807,   55,  807,  807,  807,  263,  807,   53,
       53,   53,  807,  261,   53,   53,   53,  262,   55,   53,
       53,   53,  807,   55,  807,  264,  807,  807,   55,  265,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   55,
      807,  807,   55,  807,  807,   55,   53,   53,   53,  807,

      268,  807,   53,   53,   53,   55,  807,  807,  807,  266,
      269,   55,  807,  807,  807,  267,  807,  807,  270,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   55,  807,
      807,   55,  807,  807,   55,   53,   53,   53,  807,  271,
       53,   53,   53,  807,   55,  273,  272,  807,  807,   55,
       53,   53,   53,  274,  807,   53,   53,   53,  807,   55,
       53,   53,   53,  807,   55,  275,   53,   53,   53,   55,
       53,   53,   53,  807,  807,   55,   53,   53,   53,   55,
      276,   53,   53,   53,  807,   55,   53,   53,   53,  807,
       55,  807,  807,  277,  278,   55,   53,   53,   53,  807,

      279,   53,   53,   53,  807,   55,  807,  807,  807,  280,
       55,  807,  283,  807,  807,  281,  807,   53,   53,   53,
      807,   53,   53,   53,  807,  282,   55,  285,  807,  284,
       55,   53,   53,   53,   53,   53,   53,  286,  807,  807,
       55,  807,  807,   55,  807,  807,   53,   53,   53,   53,
       53,   53,  807,  287,  288,   55,  807,  807,   55,   53,
       53,   53,   53,   53,   53,  807,  807,  289,   55,  807,
      807,   55,   53,   53,   53,  807,   53,   53,   53,  807,
      807,   55,  807,  807,  290,   55,   53,   53,   53,   53,
       53,   53,  292,  807,  807,   55,  291,  807,   55,  807,

       53,   53,   53,  807,  807,  294,  807,  293,  295,   55,
       53,   53,   53,   53,   53,   53,  807,  807,  296,   55,
      807,  807,   55,  807,  807,  298,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   55,  297,  807,   55,  807,
      807,   55,  807,  299,   53,   53,   53,  807,  807,  301,
       53,   53,   53,   55,   53,   53,   53,  807,  300,   55,
       53,   53,   53,   55,  807,  302,   53,   53,   53,   55,
      807,  303,   53,   53,   53,   55,  807,  807,  304,  807,
      807,   55,  308,   53,   53,   53,  807,  807,  306,  807,
      807,  807,   55,  807,  305,  807,  807,  309,  307,   53,

       53,   53,   53,   53,   53,  807,  311,  807,   55,  807,
      807,   55,   53,   53,   53,  807,  807,  310,   53,   53,
       53,   55,  312,   53,   53,   53,  807,   55,   53,   53,
       53,  807,   55,   53,   53,   53,  807,   55,  807,  315,
      807,  807,   55,  316,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   55,  807,  807,   55,  807,  319,   55,
       53,   53,   53,  807,  318,  807,  807,  317,  321,   55,
      807,  807,  320,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   55,  807,  324,   55,  322,  807,   55,  807,
      323,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       55,  807,  807,   55,  807,  326,   55,  807,  325,   53,
       53,   53,  807,  328,   53,   53,   53,  807,   55,   53,
       53,   53,  807,   55,  807,  807,  327,  329,   55,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   55,  330,
      807,   55,  807,  807,   55,  331,  807,  807,  332,  807,
      334,  807,  333,  807,  807,  335,   53,   53,   53,  807,
      807,  336,   53,   53,   53,   55,   53,   53,   53,  807,
      807,   55,  807,  337,  807,   55,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   55,  338,  807,   55,  807,
      339,   55,   53,   53,   53,  344,  807,  807,  340,  807,

      807,   55,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   55,  342,  807,   55,  807,  341,   55,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   55,  345,  343,
       55,  807,  807,   55,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   55,  807,  807,   55,  346,  807,   55,
      348,  352,  353,  807,  349,   53,   53,   53,  347,   53,
       53,   53,  807,  807,   55,  807,  350,  807,   55,  807,
       53,   53,   53,  354,   53,   53,   53,  807,  351,   55,
       53,   53,   53,   55,  807,  807,  357,  358,  807,   55,
      807,  355,   53,   53,   53,  807,  807,  356,   53,   53,

       53,   55,  807,   53,   53,   53,  807,   55,   53,   53,
       53,  359,   55,   53,   53,   53,  807,   55,   53,   53,
       53,  807,   55,  807,   53,   53,   53,   55,   53,   53,
       53,  807,  360,   55,   53,   53,   53,   55,  361,  362,
       53,   53,   53,   55,   53,   53,   53,  807,  807,   55,
      365,  807,  807,   55,   53,   53,   53,   53,   53,   53,
      363,  364,  807,   55,  366,  807,   55,   53,   53,   53,
      368,   53,   53,   53,  367,  807,   55,   53,   53,   53,
       55,   53,   53,   53,  369,  807,   55,  807,  371,  807,
       55,   53,   53,   53,  370,   53,   53,   53,  807,  807,

       55,   53,   53,   53,   55,   53,   53,   53,  807,  373,
       55,   53,   53,   53,   55,  374,   53,   53,   53,  372,
       55,   53,   53,   53,  807,   55,  375,   53,   53,   53,
       55,   53,   53,   53,  807,  807,   55,  377,  807,  807,
       55,  807,  807,  378,   53,   53,   53,  807,  379,  376,
       53,   53,   53,   55,  807,  380,   53,   53,   53,   55,
       53,   53,   53,  807,  807,   55,   53,   53,   53,   55,
       53,   53,   53,  807,  807,   55,   53,   53,   53,   55,
       53,   53,   53,  807,  807,   55,   53,   53,   53,   55,
      382,   53,   53,   53,  807,   55,  381,  383,  807,  807,

       55,   53,   53,   53,  807,  807,  384,   53,   53,   53,
       55,   53,   53,   53,  807,  807,   55,   53,   53,   53,
       55,  385,  386,   53,   53,   53,   55,   53,   53,   53,
      807,  807,   55,   53,   53,   53,   55,   53,   53,   53,
      387,  807,   55,  807,  807,  388,   55,  390,   53,   53,
       53,  807,  389,  807,  392,  807,  391,   55,   53,   53,
       53,   53,   53,   53,  395,  807,  807,   55,  807,  807,
       55,  807,   53,   53,   53,   53,   53,   53,  807,  394,
      396,   55,  807,  807,   55,  807,   53,   53,   53,  807,
       53,   53,   53,  807,  807,   55,  807,  807,  397,   55,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   55,
      807,  398,   55,  807,  807,   55,   53,   53,   53,  807,
      807,  399,  401,  807,  807,   55,  400,   53,   53,   53,
      807,  807,  403,  807,  807,  807,   55,  807,  807,  807,
      402,  807,  405,  807,  807,  807,  404,   53,   53,   53,
      807,  807,  406,   53,   53,   53,   55,   53,   53,   53,
      807,  807,   55,   53,   53,   53,   55,   53,   53,   53,
      807,  807,   55,   53,   53,   53,   55,  807,  807,  407,
      807,  807,   55,   53,   53,   53,  807,   53,   53,   53,
      807,  807,   55,  410,  411,  409,   55,  807,  408,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   55,  807,
      807,   55,  807,  807,   55,   53,   53,   53,  413,   53,
       53,   53,  807,  807,   55,   53,   53,   53,   55,  807,
       53,   53,   53,  412,   55,   53,   53,   53,  415,   55,
      807,  414,  807,  807,   55,   53,   53,   53,   53,   53,
       53,  417,  807,  416,   55,  807,  807,   55,   53,   53,
       53,   53,   53,   53,  807,  807,  419,   55,  807,  807,
       55,  807,  418,   53,   53,   53,  420,   53,   53,   53,
      807,  807,   55,   53,   53,   53,   55,   53,   53,   53,
      807,  807,   55,  421,  807,  423,   55,   53,   53,   53,

      807,  807,  422,   53,   53,   53,   55,   53,   53,   53,
      807,  807,   55,   53,   53,   53,   55,  425,   53,   53,
       53,  807,   55,  807,  807,  807,  424,   55,  807,   53,
       53,   53,  427,   53,   53,   53,  807,  426,   55,   53,
       53,   53,   55,   53,   53,   53,  807,  807,   55,  428,
      807,  429,   55,   53,   53,   53,  807,  430,   53,   53,
       53,  807,   55,  431,   53,   53,   53,   55,  807,  432,
      807,  807,  433,   55,  437,  807,  807,  434,   53,   53,
       53,  807,  435,  436,   53,   53,   53,   55,  807,  438,
       53,   53,   53,   55,   53,   53,   53,  807,  439,   55,

       53,   53,   53,   55,   53,   53,   53,  807,  807,   55,
      440,  807,  807,   55,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   55,  807,  807,   55,  441,  807,   55,
      444,  807,  807,  442,   53,   53,   53,  807,  443,  807,
      445,  807,  807,   55,  807,  807,  446,   53,   53,   53,
       53,   53,   53,  447,  807,  807,   55,  807,  807,   55,
       53,   53,   53,   53,   53,   53,  449,  807,  807,   55,
      807,  448,   55,   53,   53,   53,   53,   53,   53,  450,
      807,  807,   55,  807,  807,   55,   53,   53,   53,   53,
       53,   53,  451,  807,  807,   55,  807,  807,   55,   53,

       53,   53,   53,   53,   53,  807,  807,  453,   55,  807,
      452,   55,  807,   53,   53,   53,  807,   53,   53,   53,
      807,  456,   55,  454,  807,  455,   55,   53,   53,   53,
       53,   53,   53,  462,  462,  462,   55,  807,  807,   55,
      807,  807,   55,  807,  458,   53,   53,   53,  807,  807,
      457,   53,   53,   53,   55,  807,  807,   53,   53,   53,
       55,  807,  807,  459,  463,  460,   55,  807,   53,   53,
       53,   53,   53,   53,  807,  807,  464,   55,  461,  807,
       55,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       55,  807,  807,   55,  465,  807,   55,  467,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   55,  807,  807,
       55,  807,  807,   55,  468,  807,  471,  807,  807,  469,
       53,   53,   53,   53,   53,   53,  807,  472,  807,   55,
      473,  470,   55,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   55,  807,  474,   55,  807,  807,   55,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   55,  476,
      807,   55,  807,  807,   55,  807,   53,   53,   53,  807,
      475,  479,  807,  807,  807,   55,  807,   53,   53,   53,
      807,  477,   53,   53,   53,  478,   55,   53,   53,   53,
      807,   55,   53,   53,   53,  807,   55,  480,  807,  482,

      483,   55,  481,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   55,  807,  807,   55,  807,  484,   55,  486,
       53,   53,   53,   53,   53,   53,  807,  807,  485,   55,
      807,  807,   55,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   55,  807,  807,   55,  807,  807,   55,  807,
      807,  488,  807,  487,   53,   53,   53,  489,  807,   53,
       53,   53,  807,   55,  490,  807,  807,  491,   55,   53,
       53,   53,  807,  807,  493,   53,   53,   53,   55,  807,
      494,  492,  807,  807,   55,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   55,  807,  807,   55,  807,  807,

       55,   53,   53,   53,   53,   53,   53,  807,  495,  496,
       55,  807,  807,   55,  807,  807,  498,   53,   53,   53,
      807,  807,  499,  497,  807,  807,   55,   53,   53,   53,
       53,   53,   53,  501,  807,  807,   55,  807,  807,   55,
      500,  502,   53,   53,   53,  807,   53,   53,   53,  807,
      807,   55,   53,   53,   53,   55,   53,   53,   53,  504,
      807,   55,  503,  507,  807,   55,   53,   53,   53,   53,
       53,   53,  807,  508,  506,   55,  807,  807,   55,  807,
      505,  807,  807,  509,   53,   53,   53,  807,  807,   53,
       53,   53,  807,   55,   53,   53,   53,  807,   55,   53,

       53,   53,  807,   55,  807,  807,  510,  807,   55,   53,
       53,   53,  807,   53,   53,   53,  807,  807,   55,  511,
      512,  513,   55,   53,   53,   53,   53,   53,   53,  807,
      807,  807,   55,  807,  807,   55,  807,  807,  514,  807,
      807,  515,  807,   53,   53,   53,   53,   53,   53,  807,
      807,  516,   55,  807,  807,   55,  807,   53,   53,   53,
      807,  517,   53,   53,   53,  518,   55,   53,   53,   53,
      807,   55,  807,  807,  519,  807,   55,  520,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   55,  807,  807,
       55,  807,  807,   55,   53,   53,   53,  521,  522,   53,

       53,   53,  807,   55,   53,   53,   53,  807,   55,   53,
       53,   53,  807,   55,  807,  807,  524,  807,   55,  807,
      807,  807,  807,  462,  462,  462,  525,   53,   53,   53,
      523,  528,   55,   53,   53,   53,   55,  807,   53,   53,
       53,  807,   55,  526,  527,  807,  136,   55,   53,   53,
       53,  807,  529,  807,  807,  530,  531,   55,  807,  532,
      533,  807,   53,   53,   53,   53,   53,   53,  807,  807,
      538,   55,  137,  807,   55,   53,   53,   53,  539,  534,
      535,  807,  536,  807,   55,  537,   53,   53,   53,  807,
       53,   53,   53,  807,  807,   55,  807,  807,  541,   55,

      807,  543,  542,   53,   53,   53,  807,   53,   53,   53,
      807,  807,   55,  807,  807,  544,   55,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   55,  807,  807,   55,
      545,  807,   55,  807,  807,  546,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   55,  807,  807,   55,  807,
      807,   55,  548,  547,   53,   53,   53,  549,  807,   53,
       53,   53,  807,   55,   53,   53,   53,  551,   55,  807,
      550,  807,  807,   55,  807,  807,  554,   53,   53,   53,
       53,   53,   53,  553,  807,  552,   55,  807,  807,   55,
       53,   53,   53,  556,  807,   53,   53,   53,  807,   55,

      807,  807,  807,  555,   55,   53,   53,   53,  807,  557,
       53,   53,   53,  807,   55,   53,   53,   53,  807,   55,
      807,  807,  558,  807,   55,  559,  561,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   55,  807,  807,   55,
      560,  807,   55,   53,   53,   53,   53,   53,   53,  807,
      562,  807,   55,  807,  807,   55,   53,   53,   53,  564,
      807,   53,   53,   53,  807,   55,  563,  807,  807,  565,
       55,   53,   53,   53,   53,   53,   53,  807,  807,  807,
       55,  807,  807,   55,   53,   53,   53,  807,   53,   53,
       53,  807,  568,   55,  807,  807,  566,   55,   53,   53,

       53,  807,   53,   53,   53,  567,  807,   55,  569,  807,
      570,   55,   53,   53,   53,  571,   53,   53,   53,  807,
      807,   55,   53,   53,   53,   55,   53,   53,   53,  807,
      807,   55,   53,   53,   53,   55,  572,  573,   53,   53,
       53,   55,   53,   53,   53,  807,  807,   55,   53,   53,
       53,   55,   53,   53,   53,  807,  575,   55,   53,   53,
       53,   55,  574,  807,   53,   53,   53,   55,  807,  807,
      577,  807,  576,   55,   53,   53,   53,  807,  579,  807,
      807,  580,  578,   55,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   55,  807,  807,   55,  807,  807,   55,

      807,   53,   53,   53,   53,   53,   53,  807,  581,  807,
       55,  807,  807,   55,  582,  807,  583,   53,   53,   53,
      807,  807,  585,   53,   53,   53,   55,  807,   53,   53,
       53,  807,   55,  807,  807,  584,  586,   55,  807,  807,
      587,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       55,  807,  807,   55,  807,  807,   55,   53,   53,   53,
      807,  807,  588,   53,   53,   53,   55,  589,   53,   53,
       53,  807,   55,   53,   53,   53,  807,   55,   53,   53,
       53,  807,   55,   53,   53,   53,  591,   55,  807,  590,
      807,  807,   55,  807,   53,   53,   53,  592,   53,   53,

       53,  807,  593,   55,   53,   53,   53,   55,  807,  807,
      597,  594,  807,   55,  598,  599,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   55,  807,  807,   55,  807,
      807,   55,   53,   53,   53,  807,  602,   53,   53,   53,
      807,   55,   53,   53,   53,  600,   55,  807,  601,  807,
      807,   55,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   55,  606,  604,   55,  807,  607,   55,  608,  807,
      603,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       55,  807,  807,   55,  807,  807,   55,  609,   53,   53,
       53,   53,   53,   53,  612,  807,  807,   55,  807,  611,

       55,  807,  610,   53,   53,   53,  807,   53,   53,   53,
      807,  807,   55,  615,  807,  613,   55,  807,  807,  614,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   55,
      807,  807,   55,  807,  807,   55,   53,   53,   53,   53,
       53,   53,  807,  617,  807,   55,  807,  807,   55,   53,
       53,   53,  807,  616,   53,   53,   53,  807,   55,  618,
       53,   53,   53,   55,   53,   53,   53,  807,  807,   55,
      619,  807,  807,   55,   53,   53,   53,  807,  807,  621,
      620,  807,  807,   55,  807,  622,  807,  623,  807,  807,
      624,   53,   53,   53,  807,   53,   53,   53,  807,  807,

       55,  807,  625,  627,   55,  807,  626,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   55,  628,  807,   55,
      807,  807,   55,  630,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   55,  807,  807,   55,  807,  807,   55,
       53,   53,   53,   53,   53,   53,  807,  807,  807,   55,
      807,  807,   55,  631,  807,  632,  807,  629,   53,   53,
       53,   53,   53,   53,  633,  807,  807,   55,  807,  807,
       55,  807,   53,   53,   53,  807,  635,  807,  807,  636,
      634,   55,   53,   53,   53,   53,   53,   53,  807,  807,
      807,   55,  637,  807,   55,  807,  807,  638,  807,   53,

       53,   53,  807,   53,   53,   53,  807,  639,   55,   53,
       53,   53,   55,  807,  640,   53,   53,   53,   55,   53,
       53,   53,  807,  807,   55,  807,  807,  641,   55,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   55,  807,
      807,   55,  642,  643,   55,   53,   53,   53,  807,  644,
       53,   53,   53,  807,   55,  645,   53,   53,   53,   55,
       53,   53,   53,  807,  807,   55,   53,   53,   53,   55,
       53,   53,   53,  807,  807,   55,  807,  646,  807,   55,
      807,   53,   53,   53,   53,   53,   53,  807,  807,  647,
       55,  807,  807,   55,   53,   53,   53,  807,  651,  807,

      648,  807,  650,   55,   53,   53,   53,  807,  807,  807,
      807,  649,  807,   55,  807,  807,  652,  653,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   55,  807,  807,
       55,  657,  807,   55,  656,   53,   53,   53,   53,   53,
       53,  807,  807,  807,   55,  807,  807,   55,  807,  807,
      659,  807,  658,  660,   53,   53,   53,  807,   53,   53,
       53,  807,  807,   55,  807,  807,  661,   55,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   55,  807,  807,
       55,  807,  807,   55,  807,   53,   53,   53,  807,  807,
      663,   53,   53,   53,   55,   53,   53,   53,  807,  807,

       55,   53,   53,   53,   55,   53,   53,   53,  664,  807,
       55,   53,   53,   53,   55,  666,  667,  807,  665,  807,
       55,  807,  668,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   55,  807,  807,   55,  807,  807,   55,   53,
       53,   53,  671,  807,  807,  669,  807,  807,   55,   53,
       53,   53,  807,  670,  672,  807,  807,  807,   55,   53,
       53,   53,  807,  807,  674,   53,   53,   53,   55,   53,
       53,   53,  673,  807,   55,   53,   53,   53,   55,   53,
       53,   53,  807,  807,   55,   53,   53,   53,   55,  807,
      676,  807,  807,  675,   55,   53,   53,   53,   53,   53,

       53,  677,  807,  807,   55,  807,  807,   55,   53,   53,
       53,  807,  807,  678,  807,  681,  807,   55,  682,  807,
      807,  679,  807,   53,   53,   53,  680,   53,   53,   53,
      807,  683,   55,   53,   53,   53,   55,  807,   53,   53,
       53,  807,   55,   53,   53,   53,  807,   55,  807,  807,
      684,  807,   55,   53,   53,   53,  807,  807,   53,   53,
       53,  807,   55,  807,  686,  685,  688,   55,   53,   53,
       53,  807,  807,  687,   53,   53,   53,   55,   53,   53,
       53,  807,  807,   55,   53,   53,   53,   55,  807,  689,
      807,  807,  807,   55,   53,   53,   53,  807,  807,  690,

      807,  807,  691,   55,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   55,  807,  807,   55,  807,  807,   55,
      693,   53,   53,   53,  807,  807,  692,   53,   53,   53,
       55,   53,   53,   53,  694,  807,   55,  807,  807,  696,
       55,   53,   53,   53,   53,   53,   53,  807,  807,  807,
       55,  807,  697,   55,  807,  807,  695,   53,   53,   53,
       53,   53,   53,  807,  807,  807,   55,  807,  807,   55,
       53,   53,   53,  807,   53,   53,   53,  807,  807,   55,
       53,   53,   53,   55,   53,   53,   53,  807,  807,   55,
       53,   53,   53,   55,   53,   53,   53,  807,  807,   55,

      807,  807,  807,   55,   53,   53,   53,  698,  807,  699,
      703,  807,  807,   55,  700,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   55,  704,  807,   55,  807,  807,
       55,   53,   53,   53,  705,  807,   53,   53,   53,  807,
       55,   53,   53,   53,  706,   55,  807,   53,   53,   53,
       55,   53,   53,   53,  807,  707,   55,  807,  807,  807,
       55,   53,   53,   53,  709,  807,  711,  807,  807,  710,
       55,   53,   53,   53,  713,   53,   53,   53,  807,  807,
       55,  807,  712,  807,   55,   53,   53,   53,   53,   53,
       53,  807,  807,  807,   55,  807,  714,   55,  807,  807,

      715,   53,   53,   53,   53,   53,   53,  807,  807,  716,
       55,  807,  807,   55,   53,   53,   53,   53,   53,   53,
      807,  717,  807,   55,  807,  718,   55,   53,   53,   53,
       53,   53,   53,  807,  807,  807,   55,  807,  719,   55,
      807,  720,  721,   53,   53,   53,   53,   53,   53,  722,
      807,  807,   55,  723,  807,   55,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   55,  807,  807,   55,  724,
      807,   55,   53,   53,   53,   53,   53,   53,  807,  725,
      807,   55,  807,  807,   55,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   55,  727,  807,   55,  726,  807,

       55,  807,  728,   53,   53,   53,  807,   53,   53,   53,
      807,  807,   55,  807,  729,  730,   55,   53,   53,   53,
      807,  807,  731,   53,   53,   53,   55,  807,  732,  807,
      807,  733,   55,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   55,  807,  807,   55,  807,  807,   55,  807,
      807,  735,  807,  734,   53,   53,   53,  807,  807,  736,
       53,   53,   53,   55,   53,   53,   53,  807,  807,   55,
      807,  807,  738,   55,  807,  737,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   55,  807,  807,   55,  807,
      807,   55,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   55,  807,  807,   55,  807,  807,   55,  807,  807,
      739,  807,  742,   53,   53,   53,  807,  807,  745,  807,
      807,  807,   55,  807,  743,   53,   53,   53,  746,  744,
       53,   53,   53,  807,   55,   53,   53,   53,  807,   55,
       53,   53,   53,  807,   55,  807,  748,  807,  807,   55,
      807,   53,   53,   53,   53,   53,   53,  807,  807,  749,
       55,  807,  807,   55,   53,   53,   53,   53,   53,   53,
      750,  807,  807,   55,  807,  807,   55,  807,  807,   53,
       53,   53,   53,   53,   53,  751,  807,  752,   55,  807,
      807,   55,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   55,  807,  807,   55,  807,  807,   55,  807,  753,
       53,   53,   53,  807,  754,  807,  755,  807,  807,   55,
      807,  807,  756,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   55,  807,  758,   55,  807,  807,   55,  757,
       53,   53,   53,   53,   53,   53,  807,  807,  807,   55,
      807,  807,   55,   53,   53,   53,  807,  807,  759,   53,
       53,   53,   55,   53,   53,   53,  807,  807,   55,  807,
      807,  760,   55,   53,   53,   53,  761,  807,   53,   53,
       53,  807,   55,   53,   53,   53,  762,   55,   53,   53,
       53,  807,   55,  763,  807,  807,  764,   55,   53,   53,

       53,  766,   53,   53,   53,  807,  765,   55,   53,   53,
       53,   55,   53,   53,   53,  807,  807,   55,   53,   53,
       53,   55,   53,   53,   53,  807,  807,   55,   53,   53,
       53,   55,   53,   53,   53,  807,  807,   55,   53,   53,
       53,   55,   53,   53,   53,  807,  807,   55,  769,  807,
      767,   55,   53,   53,   53,   53,   53,   53,  807,  807,
      807,   55,  807,  807,   55,   53,   53,   53,  771,   53,
       53,   53,  807,  807,   55,   53,   53,   53,   55,   53,
       53,   53,  773,  807,   55,  807,  807,  772,   55,   53,
       53,   53,   53,   53,   53,  807,  807,  807,   55,  807,

      807,   55,  807,  807,  774,   53,   53,   53,  807,  776,
      807,  775,  807,  807,   55,   53,   53,   53,   53,   53,
       53,  807,  807,  777,   55,  807,  807,   55,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   55,  807,  778,
       55,  807,  807,   55,   53,   53,   53,   53,   53,   53,
      807,  779,  807,   55,  807,  807,   55,   53,   53,   53,
       53,   53,   53,  807,  780,  807,   55,  807,  807,   55,
       53,   53,   53,  781,   53,   53,   53,  807,  807,   55,
      782,  807,  807,   55,  807,  807,  807,  783,   53,   53,
       53,  807,  807,  784,   53,   53,   53,   55,   53,   53,

       53,  807,  807,   55,   53,   53,   53,   55,   53,   53,
       53,  807,  807,   55,   53,   53,   53,   55,   53,   53,
       53,  807,  807,   55,   53,   53,   53,   55,   53,   53,
       53,  807,  786,   55,  788,  807,  807,   55,  807,  787,
      807,   53,   53,   53,   53,   53,   53,  807,  807,  789,
       55,  807,  807,   55,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   55,  790,  807,   55,  807,  807,   55,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   55,
      807,  807,   55,  807,  807,   55,  807,  791,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   55,  792,  807,

       55,  807,  807,   55,   53,   53,   53,  794,  807,  807,
      807,  795,  807,   55,   53,   53,   53,  796,   53,   53,
       53,  807,  807,   55,  797,  807,  807,   55,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   55,  807,  807,
       55,  798,  807,   55,   53,   53,   53,   53,   53,   53,
      807,  807,  800,   55,  807,  807,   55,  807,  807,  807,
      807,  807,  807,  807,  807,  802,  807,  807,  807,  807,
      804,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  806,   48,   48,   48,   48,   48,   54,

       54,   54,   67,   67,   67,   67,   67,  133,  133,  807,
      133,  133,  135,  135,    5,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807
    } ;

static yyconst short int yy_chk[5275] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        3,    4,    4,    7,    7,    7,    9,   13,   13,    9,
       14,   14,   16,   16,   16,   17,   17,   17,   19,   19,
       19,   16,   67,  155,   17,   67,  155,   19,   22,   22,
       22,   70,   70,   20,   20,   20,  803,   22,   37,   37,

       37,  801,   20,   21,   21,   21,  799,   37,   52,   52,
       52,  158,   21,  158,  793,    3,   16,    4,    8,    8,
        8,  785,  770,   17,   22,  747,  741,    8,   18,   18,
       18,    8,    8,    8,    8,    8,    8,   18,   37,  702,
      701,   20,    8,    8,    8,    8,    8,   20,   21,   72,
       72,   21,   23,   23,   23,   24,   24,   24,  655,   72,
       18,   23,   68,   68,   24,   68,  654,   18,   25,   25,
       25,  605,  596,   18,  157,  595,   18,   25,   72,   24,
       26,   26,   26,  157,   27,   27,   27,  540,  531,   26,
       28,   28,   28,   27,   29,   29,   29,   23,  530,   28,

       24,   27,  157,   29,  466,  393,   30,   30,   30,  313,
      247,   29,  246,  225,   25,   30,   26,  662,  662,  662,
       27,  224,  137,   27,  136,  134,   28,   31,   31,   31,
      133,   26,   47,   15,   27,   12,   31,   11,   28,    5,
       30,    0,   32,   32,   32,   33,   33,   33,   30,    0,
       30,   32,    0,    0,   33,   34,   34,   34,    0,   35,
       35,   35,    0,    0,   34,    0,    0,   31,   35,   36,
       36,   36,   38,   38,   38,  708,  708,  708,   36,    0,
        0,   38,   31,    0,   32,   33,   32,    0,   39,   39,
       39,   34,    0,   33,    0,    0,   32,   39,  708,   40,

       40,   40,    0,   35,    0,   36,    0,   35,   40,   41,
       41,   41,   42,   42,   42,    0,    0,   38,   41,    0,
        0,   42,   43,   43,   43,    0,    0,    0,   44,   44,
       44,   43,    0,    0,   39,   40,   39,   44,    0,    0,
       41,    0,    0,   42,    0,   41,    0,    0,   42,    0,
       45,   45,   45,    0,   43,    0,    0,   42,   43,   45,
       41,    0,    0,   42,   46,   46,   46,   53,   53,   53,
       43,    0,   44,   46,    0,    0,   53,   54,   54,   54,
        0,    0,   45,   56,   56,   56,   54,    0,    0,    0,
       53,    0,   56,   57,   57,   57,   46,   58,   58,   58,

        0,    0,   57,    0,   46,    0,   58,    0,    0,   59,
       59,   59,   60,   60,   60,    0,   53,   56,   59,    0,
        0,   60,   61,   61,   61,   57,   62,   62,   62,    0,
        0,   61,    0,    0,    0,   62,    0,    0,   57,   63,
       63,   63,   58,    0,    0,   59,    0,    0,   63,   64,
       64,   64,   65,   65,   65,    0,   60,    0,   64,    0,
        0,   65,    0,    0,   60,   66,   66,   66,    0,    0,
       61,   63,   62,   61,   66,   76,   76,   76,    0,    0,
       77,   77,   77,    0,   76,   64,    0,   63,   65,   77,
       78,   78,   78,   79,   79,   79,    0,    0,    0,   78,

        0,   66,   79,    0,    0,   66,    0,    0,   80,   80,
       80,    0,   81,   81,   81,   76,   77,   80,    0,    0,
       66,   81,   82,   82,   82,   83,   83,   83,   84,   84,
       84,   82,   78,    0,   83,    0,    0,   84,   79,    0,
       85,   85,   85,    0,   86,   86,   86,    0,   81,   85,
        0,    0,   80,   86,   82,   87,   87,   87,   88,   88,
       88,    0,    0,    0,   87,   83,    0,   88,   89,   89,
       89,    0,   85,   90,   90,   90,   84,   89,    0,    0,
       86,    0,   90,   89,   91,   91,   91,   92,   92,   92,
       87,    0,    0,   91,    0,   89,   92,    0,    0,   87,

       93,   93,   93,    0,   94,   94,   94,    0,    0,   93,
        0,    0,   89,   94,   95,   95,   95,    0,   89,    0,
       93,   90,    0,   95,    0,   96,   96,   96,   97,   97,
       97,   92,    0,   91,   96,    0,    0,   97,    0,    0,
       94,   98,   98,   98,   99,   99,   99,  100,  100,  100,
       98,    0,    0,   99,    0,    0,  100,   96,    0,   95,
      101,  101,  101,    0,    0,  102,  102,  102,    0,  101,
        0,   99,    0,   98,  102,    0,   97,  103,  103,  103,
      104,  104,  104,  105,  105,  105,  103,    0,    0,  104,
        0,    0,  105,  106,  106,  106,    0,  100,  101,    0,

      102,    0,  106,  107,  107,  107,  108,  108,  108,    0,
        0,  104,  107,    0,    0,  108,    0,  109,  109,  109,
      110,  110,  110,    0,    0,  105,  109,  103,    0,  110,
      111,  111,  111,  112,  112,  112,  113,  113,  113,  111,
        0,    0,  112,    0,  106,  113,  114,  114,  114,  107,
      116,  116,  116,    0,  108,  114,  115,  115,  115,  116,
      109,    0,  109,    0,    0,  115,  117,  117,  117,    0,
      110,    0,    0,    0,    0,  117,  118,  118,  118,    0,
      111,  112,    0,    0,    0,  118,  116,  115,    0,    0,
      114,  113,  119,  119,  119,  114,  120,  120,  120,    0,

        0,  119,    0,    0,  115,  120,  121,  121,  121,  122,
      122,  122,  123,  123,  123,  121,    0,    0,  122,    0,
        0,  123,    0,    0,  118,  124,  124,  124,  120,    0,
      120,    0,    0,    0,  124,    0,  125,  125,  125,    0,
      119,    0,  122,    0,  123,  125,    0,    0,  121,  126,
      126,  126,  127,  127,  127,    0,    0,    0,  126,    0,
        0,  127,  128,  128,  128,  129,  129,  129,  124,    0,
      125,  128,    0,    0,  129,  130,  130,  130,  131,  131,
      131,    0,  126,    0,  130,    0,    0,  131,  132,  132,
      132,  138,  138,  138,  128,  127,    0,  132,    0,    0,

      138,    0,  128,    0,    0,  129,  127,    0,    0,  139,
      139,  139,  140,  140,  140,    0,    0,  130,  139,    0,
        0,  140,  141,  141,  141,  142,  142,  142,  131,    0,
        0,  141,    0,    0,  142,  143,  143,  143,  132,    0,
        0,  138,    0,  139,  143,    0,    0,  140,  144,  144,
      144,  145,  145,  145,  146,  146,  146,  144,    0,  142,
      145,    0,    0,  146,    0,  141,  141,  147,  147,  147,
      143,    0,  148,  148,  148,    0,  147,    0,    0,    0,
      144,  148,    0,  145,  149,  149,  149,    0,  150,  150,
      150,    0,    0,  149,    0,    0,    0,  150,  146,  151,

      151,  151,    0,  147,  152,  152,  152,    0,  151,    0,
      153,  153,  153,  152,  154,  154,  154,    0,    0,  153,
      148,    0,  148,  154,  159,  159,  159,    0,    0,  149,
      150,    0,    0,  159,  160,  160,  160,  150,  161,  161,
      161,    0,    0,  160,    0,    0,  151,  161,  162,  162,
      162,    0,  152,  153,  163,  163,  163,  162,    0,    0,
      154,    0,    0,  163,    0,    0,  160,  159,  164,  164,
      164,    0,  161,  165,  165,  165,    0,  164,  166,  166,
      166,    0,  165,  167,  167,  167,    0,  166,  162,  168,
      168,  168,  167,  169,  169,  169,    0,    0,  168,    0,

      164,    0,  169,    0,    0,    0,  163,  170,  170,  170,
      171,  171,  171,    0,  167,    0,  170,    0,    0,  171,
        0,    0,  165,    0,  172,  172,  172,  166,  173,  173,
      173,    0,  168,  172,    0,    0,    0,  173,    0,  169,
      174,  174,  174,  170,  175,  175,  175,    0,    0,  174,
      171,    0,    0,  175,    0,    0,    0,  174,    0,  176,
      176,  176,    0,  172,  177,  177,  177,  173,  176,  178,
      178,  178,    0,  177,    0,  175,    0,    0,  178,  176,
      179,  179,  179,  180,  180,  180,  181,  181,  181,  179,
        0,    0,  180,    0,    0,  181,  182,  182,  182,    0,

      178,    0,  183,  183,  183,  182,    0,    0,    0,  177,
      179,  183,    0,    0,    0,  177,    0,    0,  180,  184,
      184,  184,  185,  185,  185,  186,  186,  186,  184,    0,
        0,  185,    0,    0,  186,  187,  187,  187,    0,  181,
      188,  188,  188,    0,  187,  183,  182,    0,    0,  188,
      189,  189,  189,  184,    0,  190,  190,  190,    0,  189,
      191,  191,  191,    0,  190,  186,  192,  192,  192,  191,
      193,  193,  193,    0,    0,  192,  194,  194,  194,  193,
      187,  195,  195,  195,    0,  194,  196,  196,  196,    0,
      195,    0,    0,  189,  190,  196,  197,  197,  197,    0,

      191,  198,  198,  198,    0,  197,    0,    0,    0,  192,
      198,    0,  195,    0,    0,  193,    0,  199,  199,  199,
        0,  200,  200,  200,    0,  194,  199,  197,    0,  196,
      200,  201,  201,  201,  202,  202,  202,  198,    0,    0,
      201,    0,    0,  202,    0,    0,  203,  203,  203,  204,
      204,  204,    0,  199,  200,  203,    0,    0,  204,  205,
      205,  205,  206,  206,  206,    0,    0,  201,  205,    0,
        0,  206,  207,  207,  207,    0,  208,  208,  208,    0,
        0,  207,    0,    0,  202,  208,  209,  209,  209,  210,
      210,  210,  204,    0,    0,  209,  203,    0,  210,    0,

      211,  211,  211,    0,    0,  206,    0,  205,  207,  211,
      212,  212,  212,  213,  213,  213,    0,    0,  208,  212,
        0,    0,  213,    0,    0,  210,  214,  214,  214,  215,
      215,  215,  216,  216,  216,  214,  209,    0,  215,    0,
        0,  216,    0,  211,  217,  217,  217,    0,    0,  213,
      219,  219,  219,  217,  218,  218,  218,    0,  212,  219,
      220,  220,  220,  218,    0,  214,  221,  221,  221,  220,
        0,  215,  222,  222,  222,  221,    0,    0,  216,    0,
        0,  222,  219,  223,  223,  223,    0,    0,  218,    0,
        0,    0,  223,    0,  217,    0,    0,  220,  218,  226,

      226,  226,  227,  227,  227,    0,  222,    0,  226,    0,
        0,  227,  228,  228,  228,    0,    0,  221,  229,  229,
      229,  228,  223,  230,  230,  230,    0,  229,  231,  231,
      231,    0,  230,  232,  232,  232,    0,  231,    0,  226,
        0,    0,  232,  227,  233,  233,  233,  234,  234,  234,
      235,  235,  235,  233,    0,    0,  234,    0,  230,  235,
      236,  236,  236,    0,  229,    0,    0,  228,  231,  236,
        0,    0,  230,  237,  237,  237,  238,  238,  238,  239,
      239,  239,  237,    0,  235,  238,  233,    0,  239,    0,
      234,  240,  240,  240,  241,  241,  241,  242,  242,  242,

      240,    0,    0,  241,    0,  237,  242,    0,  236,  243,
      243,  243,    0,  239,  244,  244,  244,    0,  243,  245,
      245,  245,    0,  244,    0,    0,  238,  240,  245,  248,
      248,  248,  249,  249,  249,  250,  250,  250,  248,  241,
        0,  249,    0,    0,  250,  241,    0,    0,  242,    0,
      244,    0,  243,    0,    0,  245,  251,  251,  251,    0,
        0,  248,  252,  252,  252,  251,  253,  253,  253,    0,
        0,  252,    0,  249,    0,  253,  254,  254,  254,  255,
      255,  255,  256,  256,  256,  254,  250,    0,  255,    0,
      251,  256,  257,  257,  257,  256,    0,    0,  252,    0,

        0,  257,  258,  258,  258,  259,  259,  259,  260,  260,
      260,  258,  254,    0,  259,    0,  253,  260,  261,  261,
      261,  262,  262,  262,  263,  263,  263,  261,  257,  255,
      262,    0,    0,  263,  264,  264,  264,  265,  265,  265,
      266,  266,  266,  264,    0,    0,  265,  259,    0,  266,
      261,  264,  264,    0,  261,  267,  267,  267,  260,  268,
      268,  268,    0,    0,  267,    0,  262,    0,  268,    0,
      269,  269,  269,  265,  270,  270,  270,    0,  263,  269,
      271,  271,  271,  270,    0,    0,  268,  269,    0,  271,
        0,  266,  272,  272,  272,    0,    0,  267,  273,  273,

      273,  272,    0,  274,  274,  274,    0,  273,  275,  275,
      275,  271,  274,  276,  276,  276,    0,  275,  277,  277,
      277,    0,  276,    0,  278,  278,  278,  277,  279,  279,
      279,    0,  272,  278,  280,  280,  280,  279,  273,  274,
      281,  281,  281,  280,  282,  282,  282,    0,    0,  281,
      277,    0,    0,  282,  283,  283,  283,  284,  284,  284,
      275,  276,    0,  283,  278,    0,  284,  285,  285,  285,
      280,  286,  286,  286,  279,    0,  285,  287,  287,  287,
      286,  288,  288,  288,  281,    0,  287,    0,  283,    0,
      288,  289,  289,  289,  282,  290,  290,  290,    0,    0,

      289,  291,  291,  291,  290,  292,  292,  292,    0,  286,
      291,  293,  293,  293,  292,  287,  294,  294,  294,  285,
      293,  295,  295,  295,    0,  294,  288,  296,  296,  296,
      295,  297,  297,  297,    0,    0,  296,  292,    0,    0,
      297,    0,    0,  293,  298,  298,  298,    0,  294,  291,
      299,  299,  299,  298,    0,  295,  300,  300,  300,  299,
      301,  301,  301,    0,    0,  300,  302,  302,  302,  301,
      303,  303,  303,    0,    0,  302,  304,  304,  304,  303,
      305,  305,  305,    0,    0,  304,  306,  306,  306,  305,
      300,  307,  307,  307,    0,  306,  299,  302,    0,    0,

      307,  308,  308,  308,    0,    0,  303,  309,  309,  309,
      308,  310,  310,  310,    0,    0,  309,  311,  311,  311,
      310,  304,  306,  312,  312,  312,  311,  315,  315,  315,
        0,    0,  312,  316,  316,  316,  315,  317,  317,  317,
      307,    0,  316,    0,    0,  308,  317,  310,  318,  318,
      318,    0,  309,    0,  312,    0,  311,  318,  319,  319,
      319,  320,  320,  320,  316,    0,    0,  319,    0,    0,
      320,    0,  321,  321,  321,  322,  322,  322,    0,  315,
      318,  321,    0,    0,  322,    0,  323,  323,  323,    0,
      324,  324,  324,    0,    0,  323,    0,    0,  319,  324,

      325,  325,  325,  326,  326,  326,  327,  327,  327,  325,
        0,  320,  326,    0,    0,  327,  328,  328,  328,    0,
        0,  321,  323,    0,    0,  328,  322,  329,  329,  329,
        0,    0,  325,    0,    0,    0,  329,    0,    0,    0,
      324,    0,  327,    0,    0,    0,  326,  330,  330,  330,
        0,    0,  328,  331,  331,  331,  330,  332,  332,  332,
        0,    0,  331,  333,  333,  333,  332,  334,  334,  334,
        0,    0,  333,  335,  335,  335,  334,    0,    0,  329,
        0,    0,  335,  336,  336,  336,    0,  337,  337,  337,
        0,    0,  336,  332,  333,  331,  337,    0,  330,  338,

      338,  338,  339,  339,  339,  340,  340,  340,  338,    0,
        0,  339,    0,    0,  340,  341,  341,  341,  337,  342,
      342,  342,    0,    0,  341,  343,  343,  343,  342,    0,
      344,  344,  344,  336,  343,  345,  345,  345,  339,  344,
        0,  338,    0,    0,  345,  346,  346,  346,  347,  347,
      347,  341,    0,  340,  346,    0,    0,  347,  348,  348,
      348,  349,  349,  349,    0,    0,  345,  348,    0,    0,
      349,    0,  344,  350,  350,  350,  346,  351,  351,  351,
        0,    0,  350,  352,  352,  352,  351,  353,  353,  353,
        0,    0,  352,  347,    0,  349,  353,  354,  354,  354,

        0,    0,  348,  355,  355,  355,  354,  356,  356,  356,
        0,    0,  355,  357,  357,  357,  356,  351,  358,  358,
      358,    0,  357,    0,    0,    0,  350,  358,    0,  359,
      359,  359,  353,  360,  360,  360,    0,  352,  359,  361,
      361,  361,  360,  362,  362,  362,    0,    0,  361,  354,
        0,  355,  362,  363,  363,  363,    0,  356,  364,  364,
      364,    0,  363,  357,  365,  365,  365,  364,    0,  359,
        0,    0,  359,  365,  362,    0,    0,  359,  366,  366,
      366,    0,  360,  361,  367,  367,  367,  366,    0,  363,
      368,  368,  368,  367,  369,  369,  369,    0,  364,  368,

      370,  370,  370,  369,  371,  371,  371,    0,    0,  370,
      365,    0,    0,  371,  372,  372,  372,  373,  373,  373,
      374,  374,  374,  372,    0,    0,  373,  366,    0,  374,
      369,    0,    0,  367,  375,  375,  375,    0,  368,    0,
      371,    0,    0,  375,    0,    0,  372,  376,  376,  376,
      377,  377,  377,  373,    0,    0,  376,    0,    0,  377,
      378,  378,  378,  379,  379,  379,  375,    0,    0,  378,
        0,  374,  379,  380,  380,  380,  381,  381,  381,  376,
        0,    0,  380,    0,    0,  381,  382,  382,  382,  383,
      383,  383,  377,    0,    0,  382,    0,    0,  383,  384,

      384,  384,  385,  385,  385,    0,    0,  379,  384,    0,
      378,  385,    0,  386,  386,  386,    0,  387,  387,  387,
        0,  383,  386,  380,    0,  382,  387,  388,  388,  388,
      389,  389,  389,  390,  390,  390,  388,    0,    0,  389,
        0,    0,  390,    0,  386,  391,  391,  391,    0,    0,
      385,  392,  392,  392,  391,    0,    0,  394,  394,  394,
      392,    0,    0,  387,  390,  388,  394,    0,  395,  395,
      395,  396,  396,  396,    0,    0,  391,  395,  389,    0,
      396,  397,  397,  397,  398,  398,  398,  399,  399,  399,
      397,    0,    0,  398,  392,    0,  399,  394,  400,  400,

      400,  401,  401,  401,  402,  402,  402,  400,    0,    0,
      401,    0,    0,  402,  395,    0,  398,    0,    0,  396,
      403,  403,  403,  404,  404,  404,    0,  399,    0,  403,
      400,  397,  404,  405,  405,  405,  406,  406,  406,  407,
      407,  407,  405,    0,  402,  406,    0,    0,  407,  408,
      408,  408,  409,  409,  409,  410,  410,  410,  408,  404,
        0,  409,    0,    0,  410,    0,  411,  411,  411,    0,
      403,  407,    0,    0,    0,  411,    0,  412,  412,  412,
        0,  405,  413,  413,  413,  406,  412,  414,  414,  414,
        0,  413,  415,  415,  415,    0,  414,  408,    0,  410,

      411,  415,  409,  416,  416,  416,  417,  417,  417,  418,
      418,  418,  416,    0,    0,  417,    0,  412,  418,  414,
      419,  419,  419,  420,  420,  420,    0,    0,  413,  419,
        0,    0,  420,  421,  421,  421,  422,  422,  422,  423,
      423,  423,  421,    0,    0,  422,    0,    0,  423,    0,
        0,  418,    0,  416,  424,  424,  424,  419,    0,  425,
      425,  425,    0,  424,  419,    0,    0,  420,  425,  426,
      426,  426,    0,    0,  422,  427,  427,  427,  426,    0,
      423,  421,    0,    0,  427,  428,  428,  428,  429,  429,
      429,  430,  430,  430,  428,    0,    0,  429,    0,    0,

      430,  431,  431,  431,  432,  432,  432,    0,  425,  426,
      431,    0,    0,  432,    0,    0,  428,  433,  433,  433,
        0,    0,  429,  427,    0,    0,  433,  434,  434,  434,
      435,  435,  435,  431,    0,    0,  434,    0,    0,  435,
      430,  432,  436,  436,  436,    0,  437,  437,  437,    0,
        0,  436,  438,  438,  438,  437,  439,  439,  439,  434,
        0,  438,  433,  437,    0,  439,  440,  440,  440,  441,
      441,  441,    0,  437,  436,  440,    0,    0,  441,    0,
      435,    0,    0,  437,  442,  442,  442,    0,    0,  443,
      443,  443,    0,  442,  444,  444,  444,    0,  443,  445,

      445,  445,    0,  444,    0,    0,  439,    0,  445,  446,
      446,  446,    0,  447,  447,  447,    0,    0,  446,  441,
      442,  443,  447,  448,  448,  448,  449,  449,  449,    0,
        0,    0,  448,    0,    0,  449,    0,    0,  444,    0,
        0,  445,    0,  450,  450,  450,  451,  451,  451,    0,
        0,  446,  450,    0,    0,  451,    0,  452,  452,  452,
        0,  447,  453,  453,  453,  448,  452,  454,  454,  454,
        0,  453,    0,    0,  449,    0,  454,  450,  455,  455,
      455,  456,  456,  456,  457,  457,  457,  455,    0,    0,
      456,    0,    0,  457,  458,  458,  458,  452,  453,  459,

      459,  459,    0,  458,  460,  460,  460,    0,  459,  461,
      461,  461,    0,  460,    0,    0,  457,    0,  461,    0,
        0,    0,    0,  462,  462,  462,  458,  463,  463,  463,
      456,  459,  462,  464,  464,  464,  463,    0,  465,  465,
      465,    0,  464,  458,  458,    0,  462,  465,  467,  467,
      467,    0,  461,    0,    0,  462,  462,  467,    0,  463,
      463,    0,  468,  468,  468,  469,  469,  469,    0,    0,
      465,  468,  462,    0,  469,  470,  470,  470,  465,  464,
      464,    0,  464,    0,  470,  464,  471,  471,  471,    0,
      472,  472,  472,    0,    0,  471,    0,    0,  467,  472,

        0,  469,  468,  473,  473,  473,    0,  474,  474,  474,
        0,    0,  473,    0,    0,  470,  474,  475,  475,  475,
      476,  476,  476,  477,  477,  477,  475,    0,    0,  476,
      471,    0,  477,    0,    0,  472,  478,  478,  478,  479,
      479,  479,  480,  480,  480,  478,    0,    0,  479,    0,
        0,  480,  474,  473,  481,  481,  481,  475,    0,  482,
      482,  482,    0,  481,  483,  483,  483,  477,  482,    0,
      476,    0,    0,  483,    0,    0,  480,  484,  484,  484,
      485,  485,  485,  479,    0,  478,  484,    0,    0,  485,
      486,  486,  486,  482,    0,  487,  487,  487,    0,  486,

        0,    0,    0,  481,  487,  488,  488,  488,    0,  483,
      489,  489,  489,    0,  488,  490,  490,  490,    0,  489,
        0,    0,  484,    0,  490,  485,  487,  491,  491,  491,
      492,  492,  492,  493,  493,  493,  491,    0,    0,  492,
      486,    0,  493,  494,  494,  494,  495,  495,  495,    0,
      489,    0,  494,    0,    0,  495,  496,  496,  496,  491,
        0,  497,  497,  497,    0,  496,  490,    0,    0,  493,
      497,  498,  498,  498,  499,  499,  499,    0,    0,    0,
      498,    0,    0,  499,  500,  500,  500,    0,  501,  501,
      501,    0,  497,  500,    0,    0,  495,  501,  502,  502,

      502,    0,  503,  503,  503,  496,    0,  502,  498,    0,
      499,  503,  504,  504,  504,  500,  505,  505,  505,    0,
        0,  504,  506,  506,  506,  505,  507,  507,  507,    0,
        0,  506,  508,  508,  508,  507,  501,  503,  509,  509,
      509,  508,  510,  510,  510,    0,    0,  509,  511,  511,
      511,  510,  512,  512,  512,    0,  505,  511,  513,  513,
      513,  512,  504,    0,  514,  514,  514,  513,    0,    0,
      507,    0,  506,  514,  515,  515,  515,    0,  509,    0,
        0,  510,  508,  515,  516,  516,  516,  517,  517,  517,
      518,  518,  518,  516,    0,    0,  517,    0,    0,  518,

        0,  519,  519,  519,  520,  520,  520,    0,  513,    0,
      519,    0,    0,  520,  514,    0,  515,  521,  521,  521,
        0,    0,  518,  522,  522,  522,  521,    0,  523,  523,
      523,    0,  522,    0,    0,  516,  519,  523,    0,    0,
      520,  524,  524,  524,  525,  525,  525,  526,  526,  526,
      524,    0,    0,  525,    0,    0,  526,  527,  527,  527,
        0,    0,  521,  528,  528,  528,  527,  522,  529,  529,
      529,    0,  528,  532,  532,  532,    0,  529,  533,  533,
      533,    0,  532,  534,  534,  534,  525,  533,    0,  524,
        0,    0,  534,    0,  535,  535,  535,  526,  536,  536,

      536,    0,  527,  535,  537,  537,  537,  536,    0,    0,
      532,  528,    0,  537,  533,  534,  538,  538,  538,  539,
      539,  539,  541,  541,  541,  538,    0,    0,  539,    0,
        0,  541,  542,  542,  542,    0,  537,  543,  543,  543,
        0,  542,  544,  544,  544,  535,  543,    0,  536,    0,
        0,  544,  545,  545,  545,  546,  546,  546,  547,  547,
      547,  545,  541,  539,  546,    0,  542,  547,  543,    0,
      538,  548,  548,  548,  549,  549,  549,  550,  550,  550,
      548,    0,    0,  549,    0,    0,  550,  544,  551,  551,
      551,  552,  552,  552,  547,    0,    0,  551,    0,  546,

      552,    0,  545,  553,  553,  553,    0,  554,  554,  554,
        0,    0,  553,  550,    0,  548,  554,    0,    0,  549,
      555,  555,  555,  556,  556,  556,  557,  557,  557,  555,
        0,    0,  556,    0,    0,  557,  558,  558,  558,  559,
      559,  559,    0,  554,    0,  558,    0,    0,  559,  560,
      560,  560,    0,  553,  561,  561,  561,    0,  560,  556,
      563,  563,  563,  561,  562,  562,  562,    0,    0,  563,
      557,    0,    0,  562,  564,  564,  564,    0,    0,  559,
      558,    0,    0,  564,    0,  560,    0,  561,    0,    0,
      561,  565,  565,  565,    0,  566,  566,  566,    0,    0,

      565,    0,  561,  563,  566,    0,  562,  567,  567,  567,
      568,  568,  568,  569,  569,  569,  567,  564,    0,  568,
        0,    0,  569,  568,  570,  570,  570,  571,  571,  571,
      572,  572,  572,  570,    0,    0,  571,    0,    0,  572,
      573,  573,  573,  574,  574,  574,    0,    0,    0,  573,
        0,    0,  574,  569,    0,  570,    0,  567,  575,  575,
      575,  576,  576,  576,  571,    0,    0,  575,    0,    0,
      576,    0,  577,  577,  577,    0,  573,    0,    0,  574,
      572,  577,  578,  578,  578,  579,  579,  579,    0,    0,
        0,  578,  575,    0,  579,    0,    0,  576,    0,  580,

      580,  580,    0,  581,  581,  581,    0,  577,  580,  582,
      582,  582,  581,    0,  578,  583,  583,  583,  582,  584,
      584,  584,    0,    0,  583,    0,    0,  579,  584,  585,
      585,  585,  586,  586,  586,  587,  587,  587,  585,    0,
        0,  586,  580,  581,  587,  588,  588,  588,    0,  582,
      589,  589,  589,    0,  588,  584,  590,  590,  590,  589,
      591,  591,  591,    0,    0,  590,  592,  592,  592,  591,
      593,  593,  593,    0,    0,  592,    0,  585,    0,  593,
        0,  594,  594,  594,  597,  597,  597,    0,    0,  588,
      594,    0,    0,  597,  598,  598,  598,    0,  592,    0,

      589,    0,  591,  598,  599,  599,  599,    0,    0,    0,
        0,  590,    0,  599,    0,    0,  593,  594,  600,  600,
      600,  601,  601,  601,  602,  602,  602,  600,    0,    0,
      601,  598,    0,  602,  597,  603,  603,  603,  604,  604,
      604,    0,    0,    0,  603,    0,    0,  604,    0,    0,
      600,    0,  599,  601,  606,  606,  606,    0,  607,  607,
      607,    0,    0,  606,    0,    0,  602,  607,  608,  608,
      608,  609,  609,  609,  610,  610,  610,  608,    0,    0,
      609,    0,    0,  610,    0,  611,  611,  611,    0,    0,
      606,  612,  612,  612,  611,  613,  613,  613,    0,    0,

      612,  614,  614,  614,  613,  615,  615,  615,  607,    0,
      614,  616,  616,  616,  615,  609,  611,    0,  608,    0,
      616,    0,  612,  617,  617,  617,  618,  618,  618,  619,
      619,  619,  617,    0,    0,  618,    0,    0,  619,  620,
      620,  620,  616,    0,    0,  614,    0,    0,  620,  621,
      621,  621,    0,  615,  617,    0,    0,    0,  621,  622,
      622,  622,    0,    0,  619,  623,  623,  623,  622,  624,
      624,  624,  617,    0,  623,  625,  625,  625,  624,  626,
      626,  626,    0,    0,  625,  627,  627,  627,  626,    0,
      622,    0,    0,  621,  627,  628,  628,  628,  629,  629,

      629,  623,    0,    0,  628,    0,    0,  629,  630,  630,
      630,    0,    0,  624,    0,  626,    0,  630,  627,    0,
        0,  624,    0,  631,  631,  631,  625,  632,  632,  632,
        0,  628,  631,  633,  633,  633,  632,    0,  634,  634,
      634,    0,  633,  635,  635,  635,    0,  634,    0,    0,
      630,    0,  635,  636,  636,  636,    0,    0,  637,  637,
      637,    0,  636,    0,  632,  631,  634,  637,  638,  638,
      638,    0,    0,  633,  639,  639,  639,  638,  640,  640,
      640,    0,    0,  639,  641,  641,  641,  640,    0,  637,
        0,    0,    0,  641,  642,  642,  642,    0,    0,  638,

        0,    0,  639,  642,  643,  643,  643,  644,  644,  644,
      645,  645,  645,  643,    0,    0,  644,    0,    0,  645,
      641,  646,  646,  646,    0,    0,  640,  647,  647,  647,
      646,  648,  648,  648,  642,    0,  647,    0,    0,  644,
      648,  649,  649,  649,  650,  650,  650,    0,    0,    0,
      649,    0,  646,  650,    0,    0,  643,  651,  651,  651,
      652,  652,  652,    0,    0,    0,  651,    0,    0,  652,
      653,  653,  653,    0,  656,  656,  656,    0,    0,  653,
      657,  657,  657,  656,  658,  658,  658,    0,    0,  657,
      659,  659,  659,  658,  660,  660,  660,    0,    0,  659,

        0,    0,    0,  660,  661,  661,  661,  651,    0,  652,
      656,    0,    0,  661,  653,  663,  663,  663,  664,  664,
      664,  665,  665,  665,  663,  657,    0,  664,    0,    0,
      665,  666,  666,  666,  659,    0,  667,  667,  667,    0,
      666,  668,  668,  668,  660,  667,    0,  669,  669,  669,
      668,  670,  670,  670,    0,  661,  669,    0,    0,    0,
      670,  671,  671,  671,  663,    0,  665,    0,    0,  664,
      671,  672,  672,  672,  668,  673,  673,  673,    0,    0,
      672,    0,  667,    0,  673,  674,  674,  674,  675,  675,
      675,    0,    0,    0,  674,    0,  669,  675,    0,    0,

      670,  676,  676,  676,  677,  677,  677,    0,    0,  671,
      676,    0,    0,  677,  678,  678,  678,  679,  679,  679,
        0,  672,    0,  678,    0,  674,  679,  680,  680,  680,
      681,  681,  681,    0,    0,    0,  680,    0,  675,  681,
        0,  676,  677,  682,  682,  682,  683,  683,  683,  678,
        0,    0,  682,  679,    0,  683,  684,  684,  684,  685,
      685,  685,  686,  686,  686,  684,    0,    0,  685,  680,
        0,  686,  687,  687,  687,  688,  688,  688,    0,  682,
        0,  687,    0,    0,  688,  689,  689,  689,  690,  690,
      690,  691,  691,  691,  689,  685,    0,  690,  684,    0,

      691,    0,  686,  692,  692,  692,    0,  693,  693,  693,
        0,    0,  692,    0,  687,  688,  693,  694,  694,  694,
        0,    0,  689,  695,  695,  695,  694,    0,  690,    0,
        0,  691,  695,  696,  696,  696,  697,  697,  697,  698,
      698,  698,  696,    0,    0,  697,    0,    0,  698,    0,
        0,  694,    0,  692,  699,  699,  699,    0,    0,  695,
      700,  700,  700,  699,  703,  703,  703,    0,    0,  700,
        0,    0,  697,  703,    0,  696,  704,  704,  704,  705,
      705,  705,  706,  706,  706,  704,    0,    0,  705,    0,
        0,  706,  707,  707,  707,  709,  709,  709,  710,  710,

      710,  707,    0,    0,  709,    0,    0,  710,    0,    0,
      700,    0,  703,  711,  711,  711,    0,    0,  706,    0,
        0,    0,  711,    0,  704,  712,  712,  712,  707,  705,
      713,  713,  713,    0,  712,  714,  714,  714,    0,  713,
      715,  715,  715,    0,  714,    0,  710,    0,    0,  715,
        0,  716,  716,  716,  717,  717,  717,    0,    0,  711,
      716,    0,    0,  717,  718,  718,  718,  719,  719,  719,
      712,    0,    0,  718,    0,    0,  719,    0,    0,  720,
      720,  720,  721,  721,  721,  713,    0,  716,  720,    0,
        0,  721,  722,  722,  722,  723,  723,  723,  724,  724,

      724,  722,    0,    0,  723,    0,    0,  724,    0,  717,
      725,  725,  725,    0,  718,    0,  720,    0,    0,  725,
        0,    0,  721,  726,  726,  726,  727,  727,  727,  728,
      728,  728,  726,    0,  724,  727,    0,    0,  728,  723,
      729,  729,  729,  730,  730,  730,    0,    0,    0,  729,
        0,    0,  730,  731,  731,  731,    0,    0,  725,  732,
      732,  732,  731,  733,  733,  733,    0,    0,  732,    0,
        0,  728,  733,  734,  734,  734,  729,    0,  735,  735,
      735,    0,  734,  736,  736,  736,  730,  735,  737,  737,
      737,    0,  736,  731,    0,    0,  732,  737,  738,  738,

      738,  734,  739,  739,  739,    0,  733,  738,  742,  742,
      742,  739,  743,  743,  743,    0,    0,  742,  744,  744,
      744,  743,  745,  745,  745,    0,    0,  744,  746,  746,
      746,  745,  748,  748,  748,    0,    0,  746,  749,  749,
      749,  748,  750,  750,  750,    0,    0,  749,  743,    0,
      738,  750,  751,  751,  751,  752,  752,  752,    0,    0,
        0,  751,    0,    0,  752,  753,  753,  753,  748,  754,
      754,  754,    0,    0,  753,  755,  755,  755,  754,  756,
      756,  756,  750,    0,  755,    0,    0,  749,  756,  757,
      757,  757,  758,  758,  758,    0,    0,    0,  757,    0,

        0,  758,    0,    0,  752,  759,  759,  759,    0,  754,
        0,  753,    0,    0,  759,  760,  760,  760,  761,  761,
      761,    0,    0,  756,  760,    0,    0,  761,  762,  762,
      762,  763,  763,  763,  764,  764,  764,  762,    0,  757,
      763,    0,    0,  764,  765,  765,  765,  766,  766,  766,
        0,  760,    0,  765,    0,    0,  766,  767,  767,  767,
      769,  769,  769,    0,  762,    0,  767,    0,    0,  769,
      771,  771,  771,  763,  772,  772,  772,    0,    0,  771,
      765,    0,    0,  772,    0,    0,    0,  766,  773,  773,
      773,    0,    0,  767,  774,  774,  774,  773,  775,  775,

      775,    0,    0,  774,  776,  776,  776,  775,  777,  777,
      777,    0,    0,  776,  778,  778,  778,  777,  779,  779,
      779,    0,    0,  778,  780,  780,  780,  779,  781,  781,
      781,    0,  773,  780,  775,    0,    0,  781,    0,  774,
        0,  782,  782,  782,  783,  783,  783,    0,    0,  776,
      782,    0,    0,  783,  784,  784,  784,  786,  786,  786,
      787,  787,  787,  784,  781,    0,  786,    0,    0,  787,
      788,  788,  788,  789,  789,  789,  790,  790,  790,  788,
        0,    0,  789,    0,    0,  790,    0,  783,  791,  791,
      791,  792,  792,  792,  794,  794,  794,  791,  784,    0,

      792,    0,    0,  794,  795,  795,  795,  786,    0,    0,
        0,  787,    0,  795,  796,  796,  796,  789,  797,  797,
      797,    0,    0,  796,  791,    0,    0,  797,  798,  798,
      798,  800,  800,  800,  802,  802,  802,  798,    0,    0,
      800,  792,    0,  802,  804,  804,  804,  806,  806,  806,
        0,    0,  795,  804,    0,    0,  806,    0,    0,    0,
        0,    0,    0,    0,    0,  800,    0,    0,    0,    0,
      802,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  804,  808,  808,  808,  808,  808,  809,

      809,  809,  810,  810,  810,  810,  810,  811,  811,    0,
      811,  811,  812,  812,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807
    } ;

#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 ".\\parser.l"
#define INITIAL 0
#line 2 ".\\parser.l"
#include "pch.h"
#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

#include "rdogramma.h"
#include "rdoparser.h"

#define YY_INTERACTIVE

#define YY_USER_INIT {                      \
	rdoParse::currParser->lexer_loc_init(); \
}

#define YY_USER_ACTION {                      \
	rdoParse::currParser->lexer_loc_action(); \
}

#define comment 1

#line 1886 "rdolex.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 26 ".\\parser.l"


#line 2016 "rdolex.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 808 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5215 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 28 ".\\parser.l"
return(Resource_type);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 29 ".\\parser.l"
return(permanent);
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 30 ".\\parser.l"
return(Parameters);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 31 ".\\parser.l"
return(integer);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 32 ".\\parser.l"
return(real);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 33 ".\\parser.l"
return(End);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 34 ".\\parser.l"
return(temporary);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 35 ".\\parser.l"
return(such_as);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 36 ".\\parser.l"
return(dblpoint);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 38 ".\\parser.l"
return(Resources);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 39 ".\\parser.l"
return(trace_keyword);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 40 ".\\parser.l"
return(no_trace);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 42 ".\\parser.l"
return(Constant);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 43 ".\\parser.l"
return(Body);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 44 ".\\parser.l"
return(Function_keyword);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 45 ".\\parser.l"
return(Type_keyword);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 46 ".\\parser.l"
return(algorithmic);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 47 ".\\parser.l"
return(table_keyword);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 48 ".\\parser.l"
return(list_keyword);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 49 ".\\parser.l"
return(Calculate_if);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 50 ".\\parser.l"
return(Sequence);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 51 ".\\parser.l"
return(uniform);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 52 ".\\parser.l"
return(exponential);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 53 ".\\parser.l"
return(normal_keyword);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 54 ".\\parser.l"
return(by_hist);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 55 ".\\parser.l"
return(enumerative);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 57 ".\\parser.l"
return(Exist);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 58 ".\\parser.l"
return(Not_Exist);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 59 ".\\parser.l"
return(For_All);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 60 ".\\parser.l"
return(Not_For_All);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 61 ".\\parser.l"
return(neq);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 62 ".\\parser.l"
return(leq);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 63 ".\\parser.l"
return(geq);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 64 ".\\parser.l"
return(NoCheck);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 65 ".\\parser.l"
return(Calculate_if);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 66 ".\\parser.l"
return(or_keyword);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 67 ".\\parser.l"
return(and_keyword);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 70 ".\\parser.l"
return(Pattern);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 71 ".\\parser.l"
return(operation);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 72 ".\\parser.l"
return(irregular_event);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 73 ".\\parser.l"
return(rule_keyword);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 74 ".\\parser.l"
return(keyboard);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 75 ".\\parser.l"
return(Relevant_resources);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 76 ".\\parser.l"
return(Keep);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 77 ".\\parser.l"
return(Create_keyword);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 78 ".\\parser.l"
return(Erase);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 79 ".\\parser.l"
return(NonExist);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 80 ".\\parser.l"
return(NoChange);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 81 ".\\parser.l"
return(Time);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 82 ".\\parser.l"
return(Choice);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 83 ".\\parser.l"
return(from_keyword);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 84 ".\\parser.l"
return(first_keyword);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 85 ".\\parser.l"
return(Convert_begin);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 86 ".\\parser.l"
return(Convert_end);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 87 ".\\parser.l"
return(Convert_rule);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 88 ".\\parser.l"
return(Convert_event);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 89 ".\\parser.l"
return(with_max);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 90 ".\\parser.l"
return(with_min);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 91 ".\\parser.l"
return(Operations);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 92 ".\\parser.l"
return(Results);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 93 ".\\parser.l"
return(watch_par);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 94 ".\\parser.l"
return(watch_state);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 95 ".\\parser.l"
return(watch_quant);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 96 ".\\parser.l"
return(watch_value);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 97 ".\\parser.l"
return(get_value);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 99 ".\\parser.l"
return(Model_name);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 100 ".\\parser.l"
return(Resource_file);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 101 ".\\parser.l"
return(OprIev_file);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 102 ".\\parser.l"
return(Frame_file);	
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 103 ".\\parser.l"
return(Statistic_file);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 104 ".\\parser.l"
return(Results_file);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 105 ".\\parser.l"
return(Trace_file);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 106 ".\\parser.l"
return(Show_mode);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 107 ".\\parser.l"
return(Frame_number);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 108 ".\\parser.l"
return(Show_rate);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 109 ".\\parser.l"
return(Run_StartTime);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 110 ".\\parser.l"
return(Trace_StartTime);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 111 ".\\parser.l"
return(Trace_EndTime);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 112 ".\\parser.l"
return(Terminate_if);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 113 ".\\parser.l"
return(Break_point);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 114 ".\\parser.l"
return(Seed);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 115 ".\\parser.l"
return(NoShow);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 116 ".\\parser.l"
return(Monitor);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 117 ".\\parser.l"
return(Animation);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 120 ".\\parser.l"
return(Decision_point);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 121 ".\\parser.l"
return(search_keyword);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 122 ".\\parser.l"
return(trace_stat);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 123 ".\\parser.l"
return(trace_tops);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 124 ".\\parser.l"
return(trace_all);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 125 ".\\parser.l"
return(Condition_keyword);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 126 ".\\parser.l"
return(Term_condition);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 127 ".\\parser.l"
return(Evaluate_by);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 128 ".\\parser.l"
return(Compare_tops);
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 129 ".\\parser.l"
return(NO);
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 130 ".\\parser.l"
return(YES);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 131 ".\\parser.l"
return(Activities);
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 132 ".\\parser.l"
return(Process);
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 133 ".\\parser.l"
return(SEIZE);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 134 ".\\parser.l"
return(value_before);
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 135 ".\\parser.l"
return(value_after);
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 136 ".\\parser.l"
return(value_before);
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 137 ".\\parser.l"
return(value_after);
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 138 ".\\parser.l"
return(some);
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 140 ".\\parser.l"
return(Frame);
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 141 ".\\parser.l"
return(Show_if);
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 142 ".\\parser.l"
return(Back_picture);
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 143 ".\\parser.l"
return(Show);
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 144 ".\\parser.l"
return(frm_cell);
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 145 ".\\parser.l"
return(text);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 146 ".\\parser.l"
return(transparent);
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 147 ".\\parser.l"
return(bitmap);
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 148 ".\\parser.l"
return(s_bmp);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 149 ".\\parser.l"
return(rect_keyword);
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 150 ".\\parser.l"
return(r_rect);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 151 ".\\parser.l"
return(line);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 152 ".\\parser.l"
return(ellipse);
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 153 ".\\parser.l"
return(triang);
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 154 ".\\parser.l"
return(active);
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 156 ".\\parser.l"
{
						std::string n1(YYText());
						int len = n1.length();
						std::string *name = new std::string(n1, 1, len-2);
						rdoParse::currParser->addName(name);
						rdoParse::currParser->lexer_setvalue((int)name);
						return QUOTED_IDENTIF;
					}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 165 ".\\parser.l"
{
						std::string *name = new std::string(YYText());
						rdoParse::currParser->addName(name);
						rdoParse::currParser->lexer_setvalue((int)name);
						return QUOTED_IDENTIF_BAD;
					}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 172 ".\\parser.l"
BEGIN(comment);
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 174 ".\\parser.l"
/* eat anything that's not a '*' */
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 175 ".\\parser.l"
;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 176 ".\\parser.l"
;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 177 ".\\parser.l"
BEGIN(INITIAL);
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 180 ".\\parser.l"
;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 181 ".\\parser.l"
;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 182 ".\\parser.l"
return(YYText()[YYLeng()-1]);
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 184 ".\\parser.l"
{
							std::string n1(YYText(), YYLeng()-2);
							rdoParse::currParser->lexer_setvalue(atoi(n1.c_str()));
							unput('.');
							unput('.');
							return INT_CONST;
						}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 192 ".\\parser.l"
{
							double *val = rdoParse::currParser->addDouble(new double(atof(YYText())));
							rdoParse::currParser->lexer_setvalue((int)val);
							return REAL_CONST;
						}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 198 ".\\parser.l"
{
					rdoParse::currParser->lexer_setvalue(atoi(YYText()));
					return INT_CONST;
				}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 203 ".\\parser.l"
{
					std::string n1(YYText());
					std::string::size_type pos = n1.find_first_of("\r\n\t :");
					std::string *name = new std::string(n1, 0, pos);
					rdoParse::currParser->addName(name);
					rdoParse::currParser->lexer_setvalue((int)name);
					return IDENTIF_set;
				}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 212 ".\\parser.l"
{
					std::string n1(YYText());
					std::string::size_type pos = n1.find_first_of("\r\n\t :");
					std::string *name = new std::string(n1, 0, pos);
					rdoParse::currParser->addName(name);
					rdoParse::currParser->lexer_setvalue((int)name);
					return IDENTIF_NoChange_NoChange;
				}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 221 ".\\parser.l"
{
					std::string n1(YYText());
					std::string::size_type pos = n1.find_first_of("\r\n\t :");
					std::string *name = new std::string(n1, 0, pos);
					rdoParse::currParser->addName(name);
					rdoParse::currParser->lexer_setvalue((int)name);
					return IDENTIF_NoChange;
				}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 230 ".\\parser.l"
{
					std::string n1(YYText());
					std::string::size_type pos = n1.find_first_of("\r\n\t :");
					std::string *name = new std::string(n1, 0, pos);
					rdoParse::currParser->addName(name);
					rdoParse::currParser->lexer_setvalue((int)name);
					return IDENTIF_COLON;
				}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 239 ".\\parser.l"
{
					std::string *name = new std::string(YYText());
					rdoParse::currParser->addName(name);
					rdoParse::currParser->lexer_setvalue((int)name);
					return IDENTIF;
				}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 246 ".\\parser.l"
ECHO;
	YY_BREAK
#line 2850 "rdolex.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(comment):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 808 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 808 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 807);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 246 ".\\parser.l"

