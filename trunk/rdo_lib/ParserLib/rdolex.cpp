#line 2 "rdolex.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
class istream;
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 135
#define YY_END_OF_BUFFER 136
static yyconst short int yy_acclist[925] =
    {   0,
      121,  121,  136,  135,  125,  135,  134,  135,  135,  126,
      135,  126,  135,  126,  135,  129,  135,  126,  135,  126,
      135,  134,  135,  134,  135,  134,  135,  134,  135,  134,
      135,  134,  135,  134,  135,  134,  135,  134,  135,  134,
      135,  134,  135,  134,  135,  134,  135,  134,  135,  134,
      135,  134,  135,  134,  135,  134,  135,  134,  135,  134,
      135,  134,  135,  134,  135,  134,  135,  134,  135,  134,
      135,  134,  135,  134,  135,  134,  135,  134,  135,  134,
      135,  134,  135,  120,  135,  121,  135,  122,  135,  123,
      135,  125,  134,  133,  134,  134,  134,  134,  134,  134,

      134,  134,  134,  134,  134,  119,  129,    9,  128,   32,
       31,   33,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,   94,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,   36,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  124,  121,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      127,  128,  134,  134,  134,  134,  134,  134,  134,  134,

      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,   95,  134,
      134,  134,   37,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,    6,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      128,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,   44,  134,  134,  134,  134,  134,  134,  134,  134,

      134,  134,  134,  134,   81,  134,  107,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
       51,  134,  134,  134,  134,  134,  115,  134,   19,  134,
      134,  134,  134,  134,  134,    5,  134,  113,  134,   41,
      134,  134,  134,  103,  134,  134,  134,  134,  109,  134,
      134,  134,  134,  134,  134,  134,  134,  130,  134,  134,
       14,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,   49,  134,
       16,  134,  134,  134,  134,  134,  134,  134,   46,  134,
       27,  134,  134,  134,  134,  134,  134,  134,  134,  134,

      134,  134,  134,  134,  134,  134,   98,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,   52,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  112,  134,  134,  134,   18,  134,  134,   11,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  104,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,   50,  134,
      134,   45,  134,  134,  134,  134,  134,  134,  134,   82,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  118,  134,  134,  111,  134,  134,

      134,  134,  134,  134,  134,  134,  134,  134,  134,   24,
      134,  134,  134,  114,  134,   86,  134,  134,  134,  134,
      134,  117,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,   29,  134,
      134,  134,  134,   83,  134,  134,   34,  134,  134,  134,
      134,  134,  134,  134,  134,  105,  134,  134,  134,  134,
      134,  134,  134,  134,  134,   25,  134,  116,  134,  134,
      134,  134,  134,    4,  134,  134,  134,  134,  134,  134,
        8,  134,  134,  134,  134,  134,  134,   22,  134,  134,

      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,   38,  134,   97,
      134,  134,  134,   60,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,   48,  134,   47,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  108,  134,  134,  134,   42,  134,
       12,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,   57,  134,   58,  134,  134,
      134,  134,  134,   13,  134,  134,  134,   15,  134,  134,
      134,  134,  134,   21,  134,  134,   84,  134,  134,  134,

      134,  134,  134,  134,  134,  134,   28,  134,  134,  134,
      134,  134,  134,   73,  134,   75,  134,  134,  134,  134,
      134,  134,  134,  134,  134,   65,  134,  134,   39,  134,
        2,  134,    7,  134,   89,  134,  134,  134,  134,  134,
      134,   61,  134,  134,  134,  134,  132,  134,  134,  134,
       90,  134,  134,  134,  134,  134,  134,  134,   10,  134,
      134,  134,  134,  134,  134,  134,  134,   69,  134,  134,
       66,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,   72,  134,  134,  134,  134,  134,   87,  134,   88,
      134,  134,  134,  134,  134,  134,  134,   96,  134,  134,

      134,  134,  134,   59,  134,    3,  134,  134,  134,  134,
       80,  134,  134,  134,   54,  134,  134,  134,  134,   30,
      134,   68,  134,  134,  134,  134,  134,  134,  134,  134,
       17,  134,   26,  134,   23,  134,  134,  110,  134,  100,
      102,  134,  134,   63,  134,   62,  134,   64,  134,  134,
      134,  134,   92,  134,  134,  134,  134,   20,   35,  134,
      134,  134,   55,  134,   74,  134,  134,   71,  134,  134,
      134,   79,  134,  134,  134,  134,   99,  101,  134,  106,
      134,   93,  134,  134,  134,  134,  134,   53,  134,   56,
      134,   67,  134,   76,  134,  134,   78,  134,  134,  134,

      134,  134,    1,  134,  134,   70,  134,  134,  134,   85,
      134,  134,   91,  134,   77,  134,   40,  134,  134,  134,
      134,  131,   43,  134
    } ;

static yyconst short int yy_accept[806] =
    {   0,
        1,    1,    1,    2,    3,    4,    5,    7,    9,   10,
       12,   14,   16,   18,   20,   22,   24,   26,   28,   30,
       32,   34,   36,   38,   40,   42,   44,   46,   48,   50,
       52,   54,   56,   58,   60,   62,   64,   66,   68,   70,
       72,   74,   76,   78,   80,   82,   84,   86,   88,   90,
       92,   93,   93,   94,   95,   96,   97,   98,   99,  100,
      101,  102,  103,  104,  105,  106,  106,  107,  108,  109,
      110,  111,  112,  113,  114,  115,  116,  117,  118,  119,
      120,  121,  122,  123,  124,  125,  127,  128,  129,  130,
      131,  132,  133,  134,  135,  136,  137,  138,  139,  140,

      141,  142,  143,  144,  145,  146,  147,  148,  149,  150,
      151,  152,  153,  154,  155,  157,  158,  159,  160,  161,
      162,  163,  164,  165,  166,  167,  168,  169,  170,  171,
      172,  172,  173,  174,  174,  174,  175,  176,  177,  178,
      179,  180,  181,  182,  183,  184,  185,  186,  187,  188,
      189,  190,  191,  192,  193,  193,  194,  195,  196,  197,
      198,  199,  200,  201,  202,  203,  204,  205,  206,  207,
      208,  209,  210,  211,  212,  213,  214,  215,  216,  217,
      218,  219,  221,  222,  223,  225,  226,  227,  228,  229,
      230,  231,  232,  233,  234,  235,  236,  237,  238,  239,

      240,  241,  242,  243,  244,  245,  246,  247,  248,  249,
      250,  251,  252,  253,  254,  255,  256,  257,  258,  259,
      260,  260,  260,  261,  262,  263,  264,  265,  266,  268,
      269,  270,  271,  272,  273,  274,  275,  276,  277,  278,
      279,  280,  281,  281,  282,  283,  284,  285,  286,  287,
      288,  289,  290,  291,  292,  294,  295,  296,  297,  298,
      299,  300,  301,  302,  303,  304,  305,  307,  309,  310,
      311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
      321,  323,  324,  325,  326,  327,  329,  331,  332,  333,
      334,  335,  336,  338,  340,  342,  343,  344,  346,  347,

      348,  349,  351,  352,  353,  354,  355,  356,  357,  358,
      358,  359,  360,  361,  363,  364,  365,  366,  367,  368,
      369,  370,  371,  372,  373,  374,  375,  376,  377,  378,
      379,  381,  383,  384,  385,  386,  387,  388,  389,  391,
      393,  394,  395,  396,  397,  398,  399,  400,  401,  402,
      403,  404,  405,  406,  407,  409,  410,  411,  412,  413,
      414,  415,  416,  417,  418,  419,  420,  422,  423,  424,
      425,  426,  427,  428,  429,  430,  431,  432,  434,  435,
      436,  438,  439,  441,  442,  443,  444,  445,  446,  447,
      447,  448,  449,  450,  451,  452,  453,  454,  456,  457,

      458,  459,  460,  461,  462,  463,  464,  465,  466,  467,
      468,  469,  471,  472,  474,  475,  476,  477,  478,  479,
      480,  482,  483,  484,  485,  486,  487,  488,  489,  490,
      491,  492,  493,  494,  495,  497,  498,  500,  501,  502,
      503,  504,  505,  506,  507,  508,  509,  510,  512,  513,
      514,  516,  518,  519,  520,  521,  522,  524,  525,  525,
      526,  527,  528,  528,  529,  530,  531,  532,  533,  534,
      535,  536,  537,  538,  539,  540,  541,  542,  543,  544,
      545,  546,  547,  548,  549,  551,  552,  553,  554,  556,
      557,  559,  560,  561,  562,  563,  564,  565,  566,  568,

      569,  570,  571,  572,  573,  574,  575,  576,  578,  580,
      581,  582,  583,  584,  586,  587,  588,  589,  590,  591,
      593,  594,  595,  596,  597,  598,  600,  600,  600,  601,
      602,  603,  604,  605,  606,  607,  608,  608,  609,  610,
      611,  612,  613,  614,  615,  616,  617,  618,  620,  622,
      623,  624,  626,  627,  628,  629,  630,  631,  632,  633,
      634,  635,  637,  639,  640,  641,  642,  643,  644,  645,
      646,  647,  648,  649,  650,  651,  652,  653,  654,  655,
      657,  658,  659,  661,  663,  664,  665,  666,  667,  668,
      669,  670,  670,  670,  671,  672,  673,  674,  675,  676,

      678,  680,  680,  681,  682,  683,  684,  686,  687,  688,
      690,  691,  692,  693,  694,  696,  697,  699,  700,  701,
      702,  703,  704,  705,  706,  707,  709,  710,  711,  712,
      713,  714,  716,  718,  719,  720,  721,  722,  723,  724,
      725,  726,  728,  729,  731,  733,  735,  737,  738,  739,
      740,  740,  740,  741,  742,  744,  745,  746,  747,  748,
      749,  750,  751,  753,  754,  755,  756,  757,  758,  759,
      761,  762,  763,  764,  765,  766,  767,  768,  770,  771,
      773,  774,  775,  776,  777,  778,  779,  780,  781,  782,
      784,  785,  786,  787,  788,  790,  792,  793,  793,  793,

      794,  795,  796,  797,  798,  798,  800,  801,  802,  803,
      804,  806,  808,  809,  810,  811,  813,  814,  815,  817,
      818,  819,  820,  822,  824,  825,  826,  827,  828,  829,
      830,  831,  833,  835,  837,  838,  840,  841,  841,  843,
      844,  846,  848,  850,  850,  851,  852,  853,  855,  856,
      857,  858,  861,  862,  863,  865,  867,  868,  870,  871,
      872,  874,  875,  876,  877,  878,  880,  880,  882,  884,
      885,  886,  887,  888,  890,  892,  894,  896,  897,  899,
      900,  901,  901,  902,  903,  905,  906,  908,  909,  910,
      910,  912,  913,  915,  917,  919,  919,  920,  920,  921,

      921,  922,  923,  925,  925
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    4,    1,    1,    5,    6,
        6,    6,    7,    6,    7,    8,    6,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   10,    1,   11,
       12,   13,    1,    1,   14,   15,   16,   17,   18,   19,
       20,   20,   21,   20,   22,   20,   23,   24,   25,   26,
       20,   27,   28,   29,   20,   20,   20,   20,   30,   31,
        6,    1,    6,    1,   32,    1,   33,   34,   35,   36,

       37,   38,   39,   40,   41,   20,   42,   43,   44,   45,
       46,   47,   48,   49,   50,   51,   52,   53,   54,   55,
       56,   20,   57,    1,   58,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   20,    1,    1,    1,    1,    1,    1,
        1,   20,   20,   20,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20
    } ;

static yyconst int yy_meta[59] =
    {   0,
        1,    2,    3,    2,    1,    1,    1,    1,    2,    2,
        1,    1,    1,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    1,    4
    } ;

static yyconst short int yy_base[810] =
    {   0,
        0,    0,   56,   57,  257, 3871,   59,  114,  250, 3871,
      238,  236,   55,   53,  230,   65,   69,  117,   67,   89,
       99,   71,   80,  144,  102,   84,  149,   86,  158,  162,
      171,  175,  185,  191,  196,  200,  181,  206,  211,  222,
      233,  236,  246,  251,  261,  264,  182,    0, 3871, 3871,
       82,  274,  289, 3871,  298,  301,  304,  307,  310,  313,
      319,  325,  316,  335,  338,  228, 3871,   89, 3871,  334,
     3871, 3871, 3871,  329,  354,  357,  366,  375,  378,  380,
      393,  395,  399,  404,  414,  408,  419,  423,  428,  443,
      453,  455,  458,  464,  473,  477,  479,  483,  488,  492,

      498,  503,  509,  513,  515,  527,  529,  538,  540,  543,
      553,  556,  558,  567,  569,  578,  583,  593,  595,  608,
      610,  612,  614,  627,  631,  637,  642,  648,  652,  657,
      173,  171,    0,  177,  182,  661,  663,  666,  677,  679,
      682,  691,  694,  697,  703,  707,  713,  723,  726,  728,
      741,  743, 3871,  116,   69,  745,  747,  758,  760,  762,
      773,  776,  785,  789,  794,  800,  806,  809,  815,  820,
      826,  829,  831,  843,  846,  855,  860,  864,  866,  869,
      880,  878,  882,  891,  895,  897,  900,  906,  909,  918,
      922,  924,  933,  928,  942,  947,  952,  956,  965,  968,

      971,  980,  986,  989,  992,  995, 1001,  998, 1004, 1007,
     1010, 1021, 1030, 1045, 1049, 1055, 1059, 1064, 1068, 1070,
      201,  164, 1073, 1079, 1083, 1088, 1097, 1099, 1102, 1115,
     1117, 1120, 1126, 1135, 1139, 1141, 1150, 1154, 1160, 1163,
     1176, 1178,  202,  195, 1181, 1191, 1193, 1195, 1206, 1208,
     1217, 1219, 1221, 1234, 1236, 1238, 1247, 1250, 1253, 1259,
     1270, 1264, 1274, 1276, 1290, 1292, 1294, 1303, 1305, 1314,
     1319, 1328, 1330, 1334, 1339, 1348, 1350, 1359, 1361, 1363,
     1372, 1374, 1383, 1386, 1389, 1398, 1400, 1403, 1413, 1416,
     1418, 1427, 1429, 1431, 1440, 1445, 1451, 1454, 1456, 1465,

     1467, 1469, 1471, 1480, 1491, 1493, 1495, 1497, 1508,  156,
     3871, 1512, 1514, 1517, 1523, 1532, 1541, 1545, 1547, 1550,
     1556, 1560, 1565, 1569, 1574, 1578, 1580, 1594, 1598, 1610,
     1600, 1612, 1614, 1616, 1626, 1631, 1636, 1641, 1647, 1650,
     1652, 1656, 1661, 1670, 1672, 1674, 1684, 1687, 1689, 1700,
     1698, 1703, 1709, 1712, 1721, 1723, 1727, 1733, 1737, 1739,
     1751, 1755, 1771, 1777, 1780, 1783, 1786, 1795, 1797, 1801,
     1806, 1812, 1815, 1821, 1831, 1833, 1837, 1847, 1849, 1851,
     1853, 1863, 1865, 1867, 1869, 1883, 1888, 1892, 1897,  159,
     1901, 1903, 1907, 1913, 1916, 1919, 1925, 1928, 1934, 1937,

     1943, 1949, 1952, 1963, 1966, 1968, 1979, 1981, 1984, 1990,
     2001, 2003, 2007, 2018, 2020, 2029, 2033, 2038, 2042, 2044,
     2047, 2058, 2062, 2067, 2073, 2082, 2086, 2088, 2091, 2097,
     2108, 2110, 2112, 2121, 2123, 2125, 2144, 2148, 2150, 2153,
     2162, 2165, 2167, 2171, 2180, 2182, 2186, 2191, 2195, 2201,
     2212, 2214, 2216, 2225, 2227, 2230, 2239, 2241, 2259, 2254,
     2265, 2243,  137, 2245, 2269, 2271, 2287, 2292, 2296, 2301,
     2314, 2317, 2319, 2323, 2328, 2337, 2341, 2343, 2346, 2352,
     2361, 2363, 2377, 2381, 2386, 2392, 2398, 2401, 2412, 2414,
     2416, 2427, 2429, 2433, 2438, 2443, 2452, 2454, 2456, 2458,

     2467, 2471, 2480, 2483, 2485, 2489, 2494, 2498, 2503, 2507,
     2512, 2517, 2522, 2535, 2537, 2539, 2541, 2551, 2554, 2563,
     2566, 2569, 2578, 2580, 2582, 2584,  142,  142, 2598, 2593,
     2604, 2607, 2617, 2622, 2631, 2636,  136, 2641, 2650, 2646,
     2655, 2659, 2661, 2670, 2664, 2673, 2685, 2687, 2689, 2701,
     2710, 2713, 2722, 2724, 2726, 2735, 2738, 2740, 2751, 2753,
     2755, 2770, 2776, 2780, 2782, 2785, 2798, 2800, 2802, 2804,
     2813, 2817, 2819, 2815, 2830, 2832, 2834, 2844, 2855, 2857,
     2866, 2869, 2871, 2880, 2884, 2889, 2895, 2898, 2904, 2907,
     2909,  120,  129, 2913, 2918, 2922, 2924, 2928, 2933, 2942,

     2945,  125, 2956, 2960, 2965, 2970, 2975, 2980, 2985, 2989,
     2994, 2998, 3000, 3003, 3016, 3018, 3020, 3031, 3034, 3040,
     3046, 3049, 3055, 3059, 3061, 3065, 3070, 3076, 3079, 3085,
     3094, 3100, 3104, 3106, 3118, 3122, 3127, 3131, 3133, 3137,
     3142, 3146, 3151, 3155, 3157, 3160, 3169, 3175, 3178, 3184,
      121,  110, 3190, 3193, 3195, 3199, 3204, 3208,  104, 3213,
     3210, 3222, 3228, 3231, 3233, 3243, 3246, 3248, 3262, 3267,
     3271, 3273, 3277, 3282, 3292, 3288, 3297, 3301, 3306, 3312,
     3317, 3327, 3329, 3331, 3342, 3344, 3346, 3348, 3359, 3363,
     3365, 3369, 3374, 3378, 3383, 3388, 3392,  106,   88, 3401,

     3406, 3410, 3416, 3419,  248, 3421, 3425, 3430, 3434, 3436,
     3439, 3449, 3460, 3455, 3465, 3469, 3479, 3481, 3483, 3485,
     3496, 3498, 3500, 3502, 3511, 3516, 3521, 3525, 3534, 3536,
     3538, 3540, 3549, 3553, 3558, 3567, 3871,   85, 3571, 3573,
     3576, 3582, 3585,   67, 3587, 3591, 3596, 3602, 3605, 3611,
     3615, 3617, 3620, 3626, 3629, 3632, 3641, 3643, 3647, 3657,
     3659, 3661, 3670, 3672, 3871, 3683,   95, 3685, 3687, 3689,
     3700, 3702, 3704, 3713, 3715, 3717, 3719, 3728, 3730, 3733,
     3739,   63, 3742, 3745, 3751, 3754, 3756, 3765, 3760,   67,
     3769, 3771, 3780, 3784, 3786,   50, 3798,   54, 3802,   43,

     3804, 3871, 3807, 3871, 3854, 3857, 3860, 3864, 3868
    } ;

static yyconst short int yy_def[810] =
    {   0,
      804,    1,  805,  805,  804,  804,  804,  806,  807,  804,
      804,  804,  804,  804,  804,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  808,  809,  804,  804,
      804,  804,  806,  804,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  807,  804,  804,  804,  804,
      804,  804,  804,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,

      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      808,  808,  809,  804,  804,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  804,  804,  804,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,

      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      804,  804,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  804,  804,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,

      806,  806,  806,  806,  806,  806,  806,  806,  806,  804,
      804,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  804,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,

      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  804,  806,
      806,  806,  804,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,

      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  804,  804,  806,  806,
      806,  806,  806,  806,  806,  806,  804,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  804,  804,  806,  806,  806,  806,  806,  806,  806,

      806,  804,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      804,  804,  806,  806,  806,  806,  806,  806,  804,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  804,  804,  806,

      806,  806,  806,  806,  804,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  804,  804,  806,  806,
      806,  806,  806,  804,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  804,  806,  804,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  804,  806,  806,  806,  806,  806,  806,  806,  804,
      806,  806,  806,  806,  806,  804,  806,  804,  806,  804,

      806,  804,  806,    0,  804,  804,  804,  804,  804
    } ;

static yyconst short int yy_nxt[3930] =
    {   0,
        6,    7,    7,    8,    9,   10,   11,   12,   13,    6,
       14,   10,   15,   16,   17,   18,   19,   20,   21,   19,
       19,   22,   23,   24,   25,   19,   26,   27,   28,   29,
       19,   19,   30,   31,   19,   19,   32,   33,   34,   19,
       35,   36,   37,   19,   38,   39,   40,   19,   41,   42,
       43,   44,   45,   46,   19,   19,   47,    6,   49,   49,
       51,   51,   70,   68,   71,   72,   52,   52,   52,   52,
       52,   52,   52,   52,   54,  243,   54,  244,   54,  802,
       54,   52,   52,   51,   51,   52,   52,   52,   52,   54,
       52,   52,  800,   54,  798,   54,   70,   68,   54,  796,

       52,   52,  790,   52,   52,  705,  705,   84,   54,   74,
      782,   54,  767,   50,   50,   52,   52,   75,   52,   52,
       89,  765,   95,   54,  154,   85,   54,   55,   56,   57,
       58,   59,   60,  155,   96,   90,  738,   80,   61,   62,
       63,   64,   65,   81,   82,   52,   52,   83,   88,   76,
       52,   52,  155,   54,  737,  699,   77,  698,   54,   52,
       52,  659,   78,   52,   52,   79,  652,   54,   86,   91,
      651,   54,   52,   52,  602,   97,   52,   52,  593,  592,
       54,  537,   52,   52,   54,   92,   52,   52,   93,   87,
       54,  463,   52,   52,   54,  390,   98,   52,   52,   94,

       54,   52,   52,  244,   99,   54,  100,   52,   52,   54,
      244,  101,   52,   52,  311,   54,  310,  103,  222,  104,
       54,  112,  221,   52,   52,  106,  102,  108,  132,  105,
      132,   54,   67,  107,   52,   52,  111,   52,   52,  132,
      109,   73,   54,   69,  110,   54,   68,   52,   52,  705,
      705,  113,   52,   52,   67,   54,  804,  114,  116,  115,
       54,  804,   52,   52,  117,   52,   52,  120,  804,  118,
       54,  744,  121,   54,  804,   52,   52,  804,  124,  804,
      804,  122,  125,   54,  119,  804,  804,  123,  804,  804,
       52,   52,  804,  128,  126,  127,  129,  134,   54,   52,

       52,  804,   52,   52,  130,   52,   52,   54,   52,   52,
       54,   52,   52,   54,   52,   52,   54,   52,   52,   54,
       52,   52,   54,  135,  804,   54,   52,   52,   54,  804,
       52,   52,  136,  137,   54,  804,   52,   52,   54,   52,
       52,  153,  154,  140,   54,  804,  138,   54,  804,  139,
      804,  155,  148,  804,  141,   52,   52,  146,   52,   52,
      804,  143,  142,   54,  144,  145,   54,   52,   52,  156,
      155,  149,  804,  147,  150,   54,   52,   52,  151,   52,
       52,   52,   52,  804,   54,  804,  804,   54,  804,   54,
      157,  804,  804,  152,   52,   52,   52,   52,  804,  158,

       52,   52,   54,  804,   54,   52,   52,  804,   54,   52,
       52,  159,  162,   54,  161,   52,   52,   54,  804,  160,
       52,   52,  804,   54,   52,   52,  804,  804,   54,   52,
       52,  165,   54,  163,  169,  804,  804,   54,  804,  804,
      166,  804,  804,  164,   52,   52,  170,  804,  804,  167,
      804,  804,   54,  804,   52,   52,   52,   52,  168,   52,
       52,  804,   54,  171,   54,   52,   52,   54,  804,  172,
      176,  173,  804,   54,   52,   52,  804,  174,   52,   52,
       52,   52,   54,  804,   52,   52,   54,  175,   54,   52,
       52,  177,   54,   52,   52,  804,  179,   54,  804,   52,

       52,   54,  804,  178,   52,   52,  182,   54,  804,  181,
       52,   52,   54,  804,   52,   52,   52,   52,   54,  804,
      804,  180,   54,  804,   54,  804,  184,  185,   52,   52,
       52,   52,  804,  183,  187,  804,   54,  804,   54,   52,
       52,   52,   52,  804,   52,   52,  804,   54,  186,   54,
      804,  188,   54,  804,   52,   52,  804,   52,   52,   52,
       52,  190,   54,  804,  189,   54,  804,   54,   52,   52,
       52,   52,  192,  804,  193,  191,   54,  804,   54,   52,
       52,  804,  804,  804,   52,   52,  804,   54,  194,  200,
      195,  196,   54,  804,   52,   52,   52,   52,  804,  804,

      198,  804,   54,  202,   54,  199,  201,  804,  197,   52,
       52,   52,   52,   52,   52,   52,   52,   54,  804,   54,
      804,   54,  804,   54,  804,  205,  203,  206,   52,   52,
      804,  204,   52,   52,  804,  804,   54,  207,   52,   52,
       54,  208,  209,   52,   52,  804,   54,  804,  211,   52,
       52,   54,  804,   52,   52,  210,  804,   54,   52,   52,
      212,   54,   52,   52,   52,   52,   54,   52,   52,  215,
       54,  804,   54,  804,  213,   54,  804,  216,   52,   52,
       52,   52,  217,   52,   52,  214,   54,  804,   54,  804,
      218,   54,   52,   52,  804,   52,   52,  224,   52,   52,

       54,  225,  219,   54,   52,   52,   54,  220,   52,   52,
      804,  223,   54,  228,   52,   52,   54,  229,  804,  804,
      226,  227,   54,  230,   52,   52,  231,   52,   52,   52,
       52,  804,   54,  804,  804,   54,  804,   54,  804,  233,
      804,  232,   52,   52,   52,   52,   52,   52,   52,   52,
       54,  804,   54,  804,   54,  234,   54,  235,  236,   52,
       52,   52,   52,   52,   52,  237,  804,   54,  804,   54,
      804,   54,  238,  239,   52,   52,  240,   52,   52,  246,
      804,  804,   54,  804,  241,   54,   52,   52,  245,  242,
       52,   52,  247,  804,   54,   52,   52,  804,   54,  804,

      248,   52,   52,   54,  804,  250,  804,   52,   52,   54,
       52,   52,  804,  804,  249,   54,   52,   52,   54,  804,
      253,   52,   52,  804,   54,  251,  804,   52,   52,   54,
       52,   52,   52,   52,  252,   54,  804,  254,   54,  804,
       54,  804,  256,  260,   52,   52,  255,   52,   52,  257,
      804,  262,   54,  804,  258,   54,   52,   52,  804,  259,
      261,   52,   52,  804,   54,   52,   52,   52,   52,   54,
       52,   52,  804,   54,  804,   54,  804,  265,   54,   52,
       52,   52,   52,   52,   52,  266,  804,   54,  263,   54,
      804,   54,   52,   52,  264,  267,   52,   52,   52,   52,

       54,   52,   52,  804,   54,  804,   54,   52,   52,   54,
       52,   52,  270,  804,  271,   54,  269,  268,   54,   52,
       52,  804,  272,   52,   52,   52,   52,   54,  804,   52,
       52,   54,  804,   54,   52,   52,  273,   54,  804,  275,
      274,  804,   54,   52,   52,  804,  276,  804,   52,   52,
      804,   54,  277,   52,   52,  280,   54,   52,   52,  282,
      804,   54,  804,  278,  804,   54,   52,   52,  804,   52,
       52,  279,   52,   52,   54,  804,  281,   54,  283,  804,
       54,   52,   52,  284,  804,  285,  804,   52,   52,   54,
       52,   52,  286,   52,   52,   54,   52,   52,   54,   52,

       52,   54,   52,   52,   54,   52,   52,   54,   52,   52,
       54,   52,   52,   54,  289,  287,   54,  804,  288,   54,
      804,  804,   52,   52,  804,  292,  804,  804,  290,  291,
       54,   52,   52,  804,  293,  804,  804,  295,  804,   54,
      804,  296,  804,  298,  804,  294,   52,   52,  804,  299,
       52,   52,  297,  804,   54,  804,   52,   52,   54,  804,
       52,   52,  804,  300,   54,   52,   52,  804,   54,   52,
       52,   52,   52,   54,   52,   52,  301,   54,  804,   54,
       52,   52,   54,  303,   52,   52,  804,  305,   54,   52,
       52,  804,   54,  304,  804,  302,  306,   54,   52,   52,

       52,   52,  308,   52,   52,  804,   54,  804,   54,  309,
      804,   54,  804,  312,  804,  307,   52,   52,   52,   52,
      313,   52,   52,  804,   54,  804,   54,   52,   52,   54,
      804,  804,  316,  804,  315,   54,   52,   52,  314,  318,
       52,   52,   52,   52,   54,  804,  317,  804,   54,  804,
       54,   52,   52,  804,  321,   52,   52,  319,  804,   54,
      320,   52,   52,   54,   52,   52,  804,  323,  804,   54,
      804,  804,   54,  804,  322,  325,  804,   52,   52,   52,
       52,  804,   52,   52,  804,   54,  326,   54,  804,  324,
       54,  804,   52,   52,   52,   52,   52,   52,  804,  327,

       54,  804,   54,  804,   54,  328,  330,   52,   52,   52,
       52,  329,  331,  333,  332,   54,  804,   54,   52,   52,
       52,   52,   52,   52,  804,  804,   54,  804,   54,  336,
       54,  804,  334,  804,  341,   52,   52,   52,   52,   52,
       52,  804,  337,   54,  335,   54,  804,   54,   52,   52,
      804,   52,   52,  339,   52,   52,   54,  804,  338,   54,
       52,   52,   54,  804,  804,   52,   52,  804,   54,  340,
      342,   52,   52,   54,  804,   52,   52,   52,   52,   54,
      343,  804,  345,   54,  804,   54,  346,  349,  350,  804,
      804,   52,   52,   52,   52,   52,   52,  344,  347,   54,

      351,   54,  804,   54,   52,   52,   52,   52,  804,  355,
      804,  804,   54,  348,   54,   52,   52,  354,  353,  804,
       52,   52,  804,   54,  804,  352,  804,  804,   54,   52,
       52,   52,   52,  804,  356,   52,   52,   54,  804,   54,
       52,   52,  804,   54,  804,  357,  804,  804,   54,   52,
       52,   52,   52,  804,  358,  359,  804,   54,  804,   54,
       52,   52,   52,   52,   52,   52,  362,  804,   54,  804,
       54,  804,   54,   52,   52,   52,   52,  804,  361,  363,
      360,   54,  804,   54,   52,   52,  365,   52,   52,  804,
       52,   52,   54,  804,  364,   54,  804,  368,   54,   52,

       52,   52,   52,  366,   52,   52,  804,   54,  804,   54,
      804,  367,   54,  804,   52,   52,  804,   52,   52,   52,
       52,  370,   54,  804,  371,   54,  369,   54,   52,   52,
       52,   52,   52,   52,  372,  804,   54,  804,   54,  804,
       54,   52,   52,  804,  804,  374,   52,   52,  375,   54,
      376,  373,   52,   52,   54,   52,   52,   52,   52,  804,
       54,  377,  804,   54,  804,   54,   52,   52,   52,   52,
       52,   52,   52,   52,   54,  804,   54,  804,   54,  804,
       54,   52,   52,  804,  804,  379,  804,  380,  804,   54,
      804,  378,   52,   52,   52,   52,   52,   52,   52,   52,

       54,  381,   54,  804,   54,  804,   54,  383,  804,   52,
       52,  804,  382,   52,   52,   52,   52,   54,   52,   52,
      804,   54,  804,   54,   52,   52,   54,  804,  804,  384,
      804,  387,   54,   52,   52,  385,  388,  804,  386,  389,
      804,   54,   52,   52,  804,  392,   52,   52,   52,   52,
       54,   52,   52,  804,   54,  393,   54,   52,   52,   54,
      804,   52,   52,  804,  391,   54,   52,   52,  804,   54,
       52,   52,  394,  804,   54,   52,   52,  804,   54,   52,
       52,   52,   52,   54,  804,  804,  398,   54,  804,   54,
      804,  395,  400,  804,  396,   52,   52,  804,  397,   52,

       52,   52,   52,   54,  804,  402,  399,   54,  401,   54,
      403,   52,   52,   52,   52,   52,   52,   52,   52,   54,
      804,   54,  804,   54,  804,   54,  804,   52,   52,  804,
      404,  405,   52,   52,  407,   54,  406,   52,   52,  804,
       54,  408,   52,   52,  804,   54,  804,  410,   52,   52,
       54,   52,   52,   52,   52,  804,   54,   52,   52,   54,
      804,   54,   52,   52,  409,   54,  804,  412,  411,  804,
       54,   52,   52,   52,   52,   52,   52,  414,  804,   54,
      804,   54,  804,   54,  413,   52,   52,  416,   52,   52,
       52,   52,  417,   54,  415,  804,   54,  804,   54,   52,

       52,   52,   52,  804,   52,   52,  804,   54,  420,   54,
       52,   52,   54,   52,   52,  418,  419,  804,   54,  804,
      804,   54,   52,   52,   52,   52,  804,  422,   52,   52,
       54,  804,   54,  804,   52,   52,   54,  421,   52,   52,
       52,   52,   54,  423,  804,  424,   54,  804,   54,  804,
      425,  426,   52,   52,  804,  804,   52,   52,  804,  427,
       54,  804,  428,  429,   54,  804,  430,  804,  434,  804,
      804,  431,   52,   52,  804,  435,  432,  433,   52,   52,
       54,   52,   52,  804,   52,   52,   54,   52,   52,   54,
      804,  436,   54,  804,  804,   54,   52,   52,   52,   52,

      804,  437,   52,   52,   54,  804,   54,   52,   52,  804,
       54,  804,  804,   52,   52,   54,   52,   52,  804,  441,
      438,   54,   52,   52,   54,  804,  439,  804,  440,  443,
       54,  442,   52,   52,   52,   52,  804,  444,   52,   52,
       54,  804,   54,  804,  446,  804,   54,  447,   52,   52,
       52,   52,   52,   52,   52,   52,   54,  445,   54,  804,
       54,  804,   54,  448,   52,   52,   52,   52,   52,   52,
       52,   52,   54,  804,   54,  804,   54,  450,   54,  804,
      804,  449,  804,  453,   52,   52,  804,  451,  452,  459,
      459,  804,   54,   52,   52,  804,  455,   54,   52,   52,

      804,   54,   52,   52,   52,   52,   54,  457,   52,   52,
       54,  454,   54,  456,   52,   52,   54,   52,   52,  460,
       52,   52,   54,  461,  804,   54,   52,   52,   54,   52,
       52,  458,  804,  804,   54,   52,   52,   54,   52,   52,
      462,  464,  804,   54,   52,   52,   54,  804,  468,  465,
       52,   52,   54,   52,   52,  466,  804,  470,   54,  469,
      804,   54,  804,  467,   52,   52,  804,   52,   52,   52,
       52,  804,   54,  804,  471,   54,  804,   54,  804,  473,
       52,   52,   52,   52,  804,   52,   52,  472,   54,  804,
       54,   52,   52,   54,  804,  476,  804,  474,  804,   54,

      804,  475,   52,   52,   52,   52,  804,  804,   52,   52,
       54,  804,   54,  804,  477,  480,   54,  804,  478,   52,
       52,   52,   52,  479,  481,  804,  804,   54,  804,   54,
       52,   52,  804,  483,   52,   52,  482,  804,   54,   52,
       52,  804,   54,   52,   52,   52,   52,   54,   52,   52,
      804,   54,  804,   54,  804,  804,   54,  484,  804,   52,
       52,  804,  485,   52,   52,  804,  486,   54,   52,   52,
      804,   54,  804,  487,   52,   52,   54,  488,  804,  804,
      490,  804,   54,   52,   52,  491,  489,   52,   52,   52,
       52,   54,   52,   52,  804,   54,  804,   54,   52,   52,

       54,  804,  493,  804,  495,  804,   54,  492,  804,   52,
       52,   52,   52,   52,   52,  494,  496,   54,  804,   54,
      498,   54,   52,   52,   52,   52,   52,   52,  499,  804,
       54,  804,   54,  804,   54,  497,  804,  804,  504,  804,
      501,  804,  500,  804,  503,   52,   52,  804,  505,   52,
       52,   52,   52,   54,   52,   52,  804,   54,  506,   54,
      502,  804,   54,   52,   52,  804,   52,   52,   52,   52,
      804,   54,   52,   52,   54,  507,   54,  804,  804,  804,
       54,   52,   52,   52,   52,  510,  509,   52,   52,   54,
      804,   54,   52,   52,  804,   54,   52,   52,  508,  804,

       54,  804,   52,   52,   54,  804,  511,  512,  804,  513,
       54,  804,  804,   52,   52,   52,   52,   52,   52,  514,
      517,   54,  515,   54,  804,   54,   52,   52,   52,   52,
      516,   52,   52,  804,   54,  518,   54,  519,  804,   54,
       52,   52,   52,   52,   52,   52,   52,   52,   54,  804,
       54,  804,   54,  804,   54,   52,   52,  521,  804,  522,
      459,  459,  525,   54,  804,  520,   52,   52,   54,  804,
       52,   52,   52,   52,   54,  535,  523,  524,   54,  804,
       54,  804,  134,  536,  526,  804,  529,  530,   52,   52,
      804,  527,  528,   52,   52,  538,   54,   52,   52,  804,

      804,   54,   52,   52,  804,   54,  804,  540,  135,  539,
       54,  531,  532,  804,  533,   52,   52,  534,   52,   52,
       52,   52,  804,   54,   52,   52,   54,  541,   54,   52,
       52,  804,   54,  804,  804,  804,  542,   54,   52,   52,
      804,  543,   52,   52,   52,   52,   54,   52,   52,  804,
       54,  544,   54,   52,   52,   54,  804,  546,  804,  545,
      804,   54,   52,   52,   52,   52,  804,  548,  804,  547,
       54,  804,   54,  804,  804,  551,  804,  549,   52,   52,
      553,  550,   52,   52,  804,  804,   54,   52,   52,  804,
       54,  804,  552,   52,   52,   54,  804,  554,  804,   52,

       52,   54,   52,   52,  804,  804,  555,   54,  556,  804,
       54,  804,  558,   52,   52,   52,   52,   52,   52,  804,
      804,   54,  804,   54,  804,   54,  804,  557,   52,   52,
       52,   52,  559,  561,   52,   52,   54,  804,   54,   52,
       52,  804,   54,  804,   52,   52,  804,   54,  804,  560,
      562,  804,   54,   52,   52,   52,   52,   52,   52,   52,
       52,   54,  804,   54,  565,   54,  804,   54,   52,   52,
      804,  804,   52,   52,  804,  566,   54,  563,  564,  567,
       54,   52,   52,  568,   52,   52,   52,   52,  804,   54,
       52,   52,   54,  570,   54,   52,   52,  804,   54,   52,

       52,  804,  569,   54,   52,   52,  804,   54,   52,   52,
      804,  572,   54,   52,   52,  804,   54,  571,   52,   52,
      804,   54,  804,   52,   52,  804,   54,  574,  804,  576,
      573,   54,  804,  577,  804,  575,   52,   52,   52,   52,
       52,   52,   52,   52,   54,  804,   54,  804,   54,  804,
       54,  804,   52,   52,  804,   52,   52,  578,  804,  580,
       54,  804,  579,   54,   52,   52,  804,   52,   52,  582,
       52,   52,   54,  581,  583,   54,  804,  584,   54,   52,
       52,   52,   52,   52,   52,   52,   52,   54,  804,   54,
      804,   54,  804,   54,   52,   52,  585,  804,  586,   52,

       52,  804,   54,  804,  804,   52,   52,   54,   52,   52,
      804,  588,  804,   54,  587,  804,   54,  804,   52,   52,
      804,  804,  804,   52,   52,  590,   54,  804,  589,  595,
      591,   54,   52,   52,  804,  594,  596,   52,   52,  804,
       54,  804,   52,   52,  804,   54,  804,   52,   52,  804,
       54,   52,   52,  804,  599,   54,   52,   52,  597,   54,
       52,   52,   52,   52,   54,   52,   52,  598,   54,  804,
       54,   52,   52,   54,   52,   52,  804,  605,  804,   54,
      601,  603,   54,  804,  604,  600,   52,   52,   52,   52,
       52,   52,  804,  804,   54,  804,   54,  804,   54,  804,

      606,  804,   52,   52,  804,  608,  609,  804,  610,  607,
       54,   52,   52,  804,   52,   52,  804,  804,  611,   54,
      804,  612,   54,   52,   52,   52,   52,   52,   52,  804,
      804,   54,  804,   54,  804,   54,   52,   52,  804,   52,
       52,   52,   52,  804,   54,  804,  614,   54,  804,   54,
      804,  613,   52,   52,   52,   52,   52,   52,  615,  804,
       54,  804,   54,  804,   54,  804,  804,  804,  616,  804,
      617,   52,   52,  620,  619,  618,  621,   52,   52,   54,
      804,   52,   52,   52,   52,   54,   52,   52,  622,   54,
      804,   54,  804,  623,   54,  627,  624,  804,  625,   52,

       52,   52,   52,   52,   52,   52,   52,   54,  804,   54,
      804,   54,  804,   54,   52,   52,   52,   52,   52,   52,
       52,   52,   54,  804,   54,  628,   54,  804,   54,  629,
      626,   52,   52,   52,   52,   52,   52,  630,  804,   54,
      632,   54,  804,   54,  804,   52,   52,  804,  804,  633,
      636,  634,  631,   54,  804,  635,   52,   52,   52,   52,
      804,  804,  637,  804,   54,  804,   54,   52,   52,  804,
       52,   52,   52,   52,  638,   54,  804,  639,   54,  804,
       54,   52,   52,  804,  640,   52,   52,  804,  804,   54,
       52,   52,  804,   54,  804,  641,   52,   52,   54,   52,

       52,  804,  642,  804,   54,   52,   52,   54,   52,   52,
       52,   52,  804,   54,   52,   52,   54,  643,   54,   52,
       52,  804,   54,   52,   52,   52,   52,   54,  644,   52,
       52,   54,  804,   54,   52,   52,  648,   54,  804,  645,
      647,  804,   54,   52,   52,  650,   52,   52,  804,  804,
      646,   54,  804,  649,   54,  654,  656,   52,   52,  804,
      657,   52,   52,  653,  804,   54,   52,   52,  804,   54,
      655,   52,   52,  804,   54,  658,   52,   52,  804,   54,
      804,   52,   52,  804,   54,  804,   52,   52,  804,   54,
       52,   52,  660,  804,   54,   52,   52,  804,   54,   52,

       52,   52,   52,   54,   52,   52,  804,   54,  804,   54,
      661,  664,   54,  804,  663,  662,  665,   52,   52,   52,
       52,   52,   52,  804,  804,   54,  804,   54,  804,   54,
      804,  668,   52,   52,  669,   52,   52,  804,  666,  804,
       54,   52,   52,   54,  804,  804,  667,   52,   52,   54,
       52,   52,  670,  671,  804,   54,   52,   52,   54,  804,
       52,   52,   52,   52,   54,  673,   52,   52,   54,  804,
       54,   52,   52,  804,   54,  672,  674,   52,   52,   54,
       52,   52,  804,  804,  804,   54,   52,   52,   54,  804,
      675,  678,  679,  804,   54,   52,   52,  680,  676,  804,

      677,   52,   52,   54,  804,   52,   52,   52,   52,   54,
      804,  804,  681,   54,  804,   54,  683,  804,  682,   52,
       52,  804,  685,   52,   52,  684,  804,   54,   52,   52,
      804,   54,   52,   52,   52,   52,   54,  686,   52,   52,
       54,  804,   54,   52,   52,  804,   54,   52,   52,  687,
      688,   54,   52,   52,  804,   54,   52,   52,   52,   52,
       54,   52,   52,  804,   54,  804,   54,  690,  804,   54,
       52,   52,  804,  691,  693,  689,   52,   52,   54,   52,
       52,  804,  694,  804,   54,   52,   52,   54,  804,  692,
      804,   52,   52,   54,   52,   52,   52,   52,  804,   54,

       52,   52,   54,  804,   54,   52,   52,  804,   54,   52,
       52,   52,   52,   54,   52,   52,  804,   54,  804,   54,
      804,  804,   54,   52,   52,  695,  700,  696,  697,   52,
       52,   54,   52,   52,   52,   52,  804,   54,  701,  804,
       54,  804,   54,  702,   52,   52,  804,   52,   52,   52,
       52,  804,   54,  804,  703,   54,  804,   54,  804,  704,
      804,  707,  706,   52,   52,  804,  710,  708,   52,   52,
      804,   54,   52,   52,   52,   52,   54,  709,   52,   52,
       54,  804,   54,   52,   52,  804,   54,  804,  804,   52,
       52,   54,  711,   52,   52,  712,  713,   54,   52,   52,

      804,   54,   52,   52,  804,  804,   54,   52,   52,  804,
       54,  715,  714,   52,   52,   54,  804,  717,   52,   52,
      718,   54,  804,  716,  720,  804,   54,  719,   52,   52,
       52,   52,   52,   52,  804,  804,   54,  804,   54,  721,
       54,  804,  722,   52,   52,   52,   52,   52,   52,   52,
       52,   54,  804,   54,  804,   54,  804,   54,  804,  723,
       52,   52,  804,  724,   52,   52,   52,   52,   54,  725,
       52,   52,   54,  726,   54,   52,   52,  804,   54,   52,
       52,  728,  727,   54,   52,   52,  729,   54,  730,   52,
       52,  804,   54,   52,   52,  804,  804,   54,  804,  732,

      804,   54,   52,   52,  804,  733,  804,   52,   52,  731,
       54,   52,   52,  804,  735,   54,  734,   52,   52,   54,
       52,   52,   52,   52,  804,   54,   52,   52,   54,  804,
       54,   52,   52,  804,   54,   52,   52,   52,   52,   54,
       52,   52,  736,   54,  804,   54,  804,  804,   54,  739,
       52,   52,  742,  804,  740,  743,   52,   52,   54,  804,
      741,   52,   52,  804,   54,  804,   52,   52,  804,   54,
       52,   52,  804,  745,   54,  804,  746,  804,   54,  747,
       52,   52,   52,   52,   52,   52,   52,   52,   54,  804,
       54,  748,   54,  804,   54,  804,  749,   52,   52,   52,

       52,   52,   52,   52,   52,   54,  804,   54,  804,   54,
      750,   54,   52,   52,  804,  751,  752,   52,   52,  804,
       54,  753,   52,   52,  804,   54,   52,   52,  804,  754,
       54,  804,  755,  804,   54,   52,   52,   52,   52,   52,
       52,   52,   52,   54,  804,   54,  756,   54,  804,   54,
       52,   52,  758,  757,   52,   52,  804,  804,   54,   52,
       52,  804,   54,  804,  759,  760,  763,   54,   52,   52,
      804,  761,   52,   52,   52,   52,   54,   52,   52,  762,
       54,  804,   54,   52,   52,   54,   52,   52,   52,   52,
      804,   54,   52,   52,   54,  804,   54,   52,   52,  804,

       54,  804,  804,   52,   52,   54,   52,   52,  804,  766,
      764,   54,   52,   52,   54,  804,   52,   52,   52,   52,
       54,   52,   52,  768,   54,  804,   54,   52,   52,   54,
       52,   52,  804,   52,   52,   54,  770,  804,   54,  804,
      769,   54,   52,   52,   52,   52,  804,  804,   52,   52,
       54,  804,   54,  804,  771,  773,   54,  772,   52,   52,
       52,   52,   52,   52,  774,  804,   54,  804,   54,  804,
       54,   52,   52,   52,   52,  804,  775,  776,  804,   54,
      804,   54,  804,  777,   52,   52,   52,   52,   52,   52,
       52,   52,   54,  804,   54,  804,   54,  779,   54,  778,

      804,   52,   52,   52,   52,   52,   52,  804,  781,   54,
      780,   54,  804,   54,   52,   52,   52,   52,   52,   52,
       52,   52,   54,  804,   54,  804,   54,  804,   54,   52,
       52,   52,   52,  783,   52,   52,  804,   54,  785,   54,
       52,   52,   54,   52,   52,  784,   52,   52,   54,  786,
      804,   54,   52,   52,   54,   52,   52,   52,   52,  804,
       54,   52,   52,   54,  787,   54,   52,   52,  804,   54,
       52,   52,   52,   52,   54,  804,  788,  804,   54,  804,
       54,   52,   52,  789,  804,   52,   52,   52,   52,   54,
      804,  804,  791,   54,  804,   54,  792,  804,  793,   52,

       52,  794,  804,   52,   52,   52,   52,   54,   52,   52,
      795,   54,  804,   54,  804,  804,   54,  804,  804,  797,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  799,  804,  804,  804,  804,  804,  801,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  803,   48,   48,   48,   48,   53,   53,
       66,   66,   66,   66,  131,  131,  804,  131,  133,  133,
        5,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,

      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804
    } ;

static yyconst short int yy_chk[3930] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    4,
        7,    7,   13,   13,   14,   14,   16,   16,   19,   19,
       17,   17,   22,   22,   16,  155,   19,  155,   17,  800,
       22,   23,   23,   51,   51,   26,   26,   28,   28,   23,
       20,   20,  798,   26,  796,   28,   68,   68,   20,  790,

       21,   21,  782,   25,   25,  659,  659,   22,   21,   16,
      767,   25,  744,    3,    4,    8,    8,   17,   18,   18,
       26,  738,   28,    8,  154,   23,   18,    8,    8,    8,
        8,    8,    8,  154,   28,   26,  699,   20,    8,    8,
        8,    8,    8,   20,   21,   24,   24,   21,   25,   18,
       27,   27,  154,   24,  698,  652,   18,  651,   27,   29,
       29,  602,   18,   30,   30,   18,  593,   29,   24,   27,
      592,   30,   31,   31,  537,   29,   32,   32,  528,  527,
       31,  463,   37,   37,   32,   27,   33,   33,   27,   24,
       37,  390,   34,   34,   33,  310,   30,   35,   35,   27,

       34,   36,   36,  244,   30,   35,   30,   38,   38,   36,
      243,   31,   39,   39,  222,   38,  221,   32,  135,   32,
       39,   37,  134,   40,   40,   33,   31,   34,  132,   32,
      131,   40,   66,   33,   41,   41,   36,   42,   42,   47,
       35,   15,   41,   12,   35,   42,   11,   43,   43,  705,
      705,   38,   44,   44,    9,   43,    5,   39,   40,   39,
       44,    0,   45,   45,   41,   46,   46,   42,    0,   41,
       45,  705,   42,   46,    0,   52,   52,    0,   43,    0,
        0,   42,   43,   52,   41,    0,    0,   42,    0,    0,
       53,   53,    0,   45,   43,   44,   46,   52,   53,   55,

       55,    0,   56,   56,   46,   57,   57,   55,   58,   58,
       56,   59,   59,   57,   60,   60,   58,   63,   63,   59,
       61,   61,   60,   52,    0,   63,   62,   62,   61,    0,
       74,   74,   55,   56,   62,    0,   64,   64,   74,   65,
       65,   70,   70,   58,   64,    0,   56,   65,    0,   57,
        0,   70,   63,    0,   59,   75,   75,   62,   76,   76,
        0,   60,   59,   75,   60,   61,   76,   77,   77,   74,
       70,   64,    0,   62,   65,   77,   78,   78,   65,   79,
       79,   80,   80,    0,   78,    0,    0,   79,    0,   80,
       75,    0,    0,   65,   81,   81,   82,   82,    0,   76,

       83,   83,   81,    0,   82,   84,   84,    0,   83,   86,
       86,   77,   80,   84,   79,   85,   85,   86,    0,   78,
       87,   87,    0,   85,   88,   88,    0,    0,   87,   89,
       89,   83,   88,   81,   87,    0,    0,   89,    0,    0,
       84,    0,    0,   82,   90,   90,   87,    0,    0,   85,
        0,    0,   90,    0,   91,   91,   92,   92,   85,   93,
       93,    0,   91,   87,   92,   94,   94,   93,    0,   87,
       91,   88,    0,   94,   95,   95,    0,   89,   96,   96,
       97,   97,   95,    0,   98,   98,   96,   90,   97,   99,
       99,   92,   98,  100,  100,    0,   94,   99,    0,  101,

      101,  100,    0,   93,  102,  102,   97,  101,    0,   96,
      103,  103,  102,    0,  104,  104,  105,  105,  103,    0,
        0,   95,  104,    0,  105,    0,   99,  100,  106,  106,
      107,  107,    0,   98,  102,    0,  106,    0,  107,  108,
      108,  109,  109,    0,  110,  110,    0,  108,  101,  109,
        0,  103,  110,    0,  111,  111,    0,  112,  112,  113,
      113,  105,  111,    0,  104,  112,    0,  113,  114,  114,
      115,  115,  107,    0,  107,  106,  114,    0,  115,  116,
      116,    0,    0,    0,  117,  117,    0,  116,  108,  113,
      109,  110,  117,    0,  118,  118,  119,  119,    0,    0,

      112,    0,  118,  114,  119,  112,  113,    0,  111,  120,
      120,  121,  121,  122,  122,  123,  123,  120,    0,  121,
        0,  122,    0,  123,    0,  118,  116,  118,  124,  124,
        0,  117,  125,  125,    0,    0,  124,  119,  126,  126,
      125,  120,  121,  127,  127,    0,  126,    0,  123,  128,
      128,  127,    0,  129,  129,  122,    0,  128,  130,  130,
      124,  129,  136,  136,  137,  137,  130,  138,  138,  126,
      136,    0,  137,    0,  125,  138,    0,  126,  139,  139,
      140,  140,  127,  141,  141,  125,  139,    0,  140,    0,
      128,  141,  142,  142,    0,  143,  143,  137,  144,  144,

      142,  138,  129,  143,  145,  145,  144,  130,  146,  146,
        0,  136,  145,  140,  147,  147,  146,  141,    0,    0,
      139,  139,  147,  142,  148,  148,  143,  149,  149,  150,
      150,    0,  148,    0,    0,  149,    0,  150,    0,  145,
        0,  144,  151,  151,  152,  152,  156,  156,  157,  157,
      151,    0,  152,    0,  156,  146,  157,  146,  147,  158,
      158,  159,  159,  160,  160,  148,    0,  158,    0,  159,
        0,  160,  148,  149,  161,  161,  150,  162,  162,  157,
        0,    0,  161,    0,  151,  162,  163,  163,  156,  152,
      164,  164,  158,    0,  163,  165,  165,    0,  164,    0,

      159,  166,  166,  165,    0,  161,    0,  167,  167,  166,
      168,  168,    0,    0,  160,  167,  169,  169,  168,    0,
      164,  170,  170,    0,  169,  162,    0,  171,  171,  170,
      172,  172,  173,  173,  163,  171,    0,  165,  172,    0,
      173,    0,  167,  171,  174,  174,  166,  175,  175,  168,
        0,  173,  174,    0,  169,  175,  176,  176,    0,  170,
      172,  177,  177,    0,  176,  178,  178,  179,  179,  177,
      180,  180,    0,  178,    0,  179,    0,  175,  180,  182,
      182,  181,  181,  183,  183,  176,    0,  182,  174,  181,
        0,  183,  184,  184,  174,  177,  185,  185,  186,  186,

      184,  187,  187,    0,  185,    0,  186,  188,  188,  187,
      189,  189,  180,    0,  181,  188,  179,  178,  189,  190,
      190,    0,  183,  191,  191,  192,  192,  190,    0,  194,
      194,  191,    0,  192,  193,  193,  184,  194,    0,  187,
      186,    0,  193,  195,  195,    0,  188,    0,  196,  196,
        0,  195,  189,  197,  197,  192,  196,  198,  198,  194,
        0,  197,    0,  190,    0,  198,  199,  199,    0,  200,
      200,  191,  201,  201,  199,    0,  193,  200,  195,    0,
      201,  202,  202,  196,    0,  197,    0,  203,  203,  202,
      204,  204,  198,  205,  205,  203,  206,  206,  204,  208,

      208,  205,  207,  207,  206,  209,  209,  208,  210,  210,
      207,  211,  211,  209,  201,  199,  210,    0,  200,  211,
        0,    0,  212,  212,    0,  204,    0,    0,  202,  203,
      212,  213,  213,    0,  205,    0,    0,  207,    0,  213,
        0,  208,    0,  210,    0,  206,  214,  214,    0,  211,
      215,  215,  209,    0,  214,    0,  216,  216,  215,    0,
      217,  217,    0,  212,  216,  218,  218,    0,  217,  219,
      219,  220,  220,  218,  223,  223,  213,  219,    0,  220,
      224,  224,  223,  215,  225,  225,    0,  216,  224,  226,
      226,    0,  225,  215,    0,  214,  217,  226,  227,  227,

      228,  228,  219,  229,  229,    0,  227,    0,  228,  220,
        0,  229,    0,  223,    0,  218,  230,  230,  231,  231,
      224,  232,  232,    0,  230,    0,  231,  233,  233,  232,
        0,    0,  227,    0,  226,  233,  234,  234,  225,  228,
      235,  235,  236,  236,  234,    0,  227,    0,  235,    0,
      236,  237,  237,    0,  232,  238,  238,  230,    0,  237,
      231,  239,  239,  238,  240,  240,    0,  234,    0,  239,
        0,    0,  240,    0,  233,  236,    0,  241,  241,  242,
      242,    0,  245,  245,    0,  241,  237,  242,    0,  235,
      245,    0,  246,  246,  247,  247,  248,  248,    0,  238,

      246,    0,  247,    0,  248,  238,  240,  249,  249,  250,
      250,  239,  241,  245,  242,  249,    0,  250,  251,  251,
      252,  252,  253,  253,    0,    0,  251,    0,  252,  248,
      253,    0,  246,    0,  253,  254,  254,  255,  255,  256,
      256,    0,  249,  254,  247,  255,    0,  256,  257,  257,
        0,  258,  258,  251,  259,  259,  257,    0,  250,  258,
      260,  260,  259,    0,    0,  262,  262,    0,  260,  252,
      254,  261,  261,  262,    0,  263,  263,  264,  264,  261,
      256,    0,  258,  263,    0,  264,  258,  261,  261,    0,
        0,  265,  265,  266,  266,  267,  267,  257,  259,  265,

      262,  266,    0,  267,  268,  268,  269,  269,    0,  266,
        0,    0,  268,  260,  269,  270,  270,  265,  264,    0,
      271,  271,    0,  270,    0,  263,    0,    0,  271,  272,
      272,  273,  273,    0,  268,  274,  274,  272,    0,  273,
      275,  275,    0,  274,    0,  269,    0,    0,  275,  276,
      276,  277,  277,    0,  270,  271,    0,  276,    0,  277,
      278,  278,  279,  279,  280,  280,  274,    0,  278,    0,
      279,    0,  280,  281,  281,  282,  282,    0,  273,  275,
      272,  281,    0,  282,  283,  283,  277,  284,  284,    0,
      285,  285,  283,    0,  276,  284,    0,  280,  285,  286,

      286,  287,  287,  278,  288,  288,    0,  286,    0,  287,
        0,  279,  288,    0,  289,  289,    0,  290,  290,  291,
      291,  283,  289,    0,  284,  290,  282,  291,  292,  292,
      293,  293,  294,  294,  285,    0,  292,    0,  293,    0,
      294,  295,  295,    0,    0,  289,  296,  296,  290,  295,
      291,  288,  297,  297,  296,  298,  298,  299,  299,    0,
      297,  292,    0,  298,    0,  299,  300,  300,  301,  301,
      302,  302,  303,  303,  300,    0,  301,    0,  302,    0,
      303,  304,  304,    0,    0,  297,    0,  299,    0,  304,
        0,  296,  305,  305,  306,  306,  307,  307,  308,  308,

      305,  300,  306,    0,  307,    0,  308,  303,    0,  309,
      309,    0,  301,  312,  312,  313,  313,  309,  314,  314,
        0,  312,    0,  313,  315,  315,  314,    0,    0,  304,
        0,  307,  315,  316,  316,  305,  308,    0,  306,  309,
        0,  316,  317,  317,    0,  313,  318,  318,  319,  319,
      317,  320,  320,    0,  318,  315,  319,  321,  321,  320,
        0,  322,  322,    0,  312,  321,  323,  323,    0,  322,
      324,  324,  316,    0,  323,  325,  325,    0,  324,  326,
      326,  327,  327,  325,    0,    0,  320,  326,    0,  327,
        0,  317,  322,    0,  318,  328,  328,    0,  319,  329,

      329,  331,  331,  328,    0,  324,  321,  329,  323,  331,
      325,  330,  330,  332,  332,  333,  333,  334,  334,  330,
        0,  332,    0,  333,    0,  334,    0,  335,  335,    0,
      326,  327,  336,  336,  329,  335,  328,  337,  337,    0,
      336,  330,  338,  338,    0,  337,    0,  334,  339,  339,
      338,  340,  340,  341,  341,    0,  339,  342,  342,  340,
        0,  341,  343,  343,  333,  342,    0,  336,  335,    0,
      343,  344,  344,  345,  345,  346,  346,  338,    0,  344,
        0,  345,    0,  346,  337,  347,  347,  342,  348,  348,
      349,  349,  343,  347,  341,    0,  348,    0,  349,  351,

      351,  350,  350,    0,  352,  352,    0,  351,  346,  350,
      353,  353,  352,  354,  354,  344,  345,    0,  353,    0,
        0,  354,  355,  355,  356,  356,    0,  348,  357,  357,
      355,    0,  356,    0,  358,  358,  357,  347,  359,  359,
      360,  360,  358,  349,    0,  350,  359,    0,  360,    0,
      351,  352,  361,  361,    0,    0,  362,  362,    0,  353,
      361,    0,  354,  356,  362,    0,  356,    0,  359,    0,
        0,  356,  363,  363,    0,  360,  357,  358,  364,  364,
      363,  365,  365,    0,  366,  366,  364,  367,  367,  365,
        0,  361,  366,    0,    0,  367,  368,  368,  369,  369,

        0,  362,  370,  370,  368,    0,  369,  371,  371,    0,
      370,    0,    0,  372,  372,  371,  373,  373,    0,  366,
      363,  372,  374,  374,  373,    0,  364,    0,  365,  369,
      374,  368,  375,  375,  376,  376,    0,  370,  377,  377,
      375,    0,  376,    0,  372,    0,  377,  373,  378,  378,
      379,  379,  380,  380,  381,  381,  378,  371,  379,    0,
      380,    0,  381,  374,  382,  382,  383,  383,  384,  384,
      385,  385,  382,    0,  383,    0,  384,  376,  385,    0,
        0,  375,    0,  380,  386,  386,    0,  377,  379,  387,
      387,    0,  386,  388,  388,    0,  383,  387,  389,  389,

        0,  388,  391,  391,  392,  392,  389,  385,  393,  393,
      391,  382,  392,  384,  394,  394,  393,  395,  395,  387,
      396,  396,  394,  388,    0,  395,  397,  397,  396,  398,
      398,  386,    0,    0,  397,  399,  399,  398,  400,  400,
      389,  391,    0,  399,  401,  401,  400,    0,  395,  392,
      402,  402,  401,  403,  403,  393,    0,  397,  402,  396,
        0,  403,    0,  394,  404,  404,    0,  405,  405,  406,
      406,    0,  404,    0,  399,  405,    0,  406,    0,  401,
      407,  407,  408,  408,    0,  409,  409,  400,  407,    0,
      408,  410,  410,  409,    0,  404,    0,  402,    0,  410,

        0,  403,  411,  411,  412,  412,    0,    0,  413,  413,
      411,    0,  412,    0,  405,  408,  413,    0,  406,  414,
      414,  415,  415,  407,  409,    0,    0,  414,    0,  415,
      416,  416,    0,  411,  417,  417,  410,    0,  416,  418,
      418,    0,  417,  419,  419,  420,  420,  418,  421,  421,
        0,  419,    0,  420,    0,    0,  421,  413,    0,  422,
      422,    0,  415,  423,  423,    0,  416,  422,  424,  424,
        0,  423,    0,  416,  425,  425,  424,  417,    0,    0,
      419,    0,  425,  426,  426,  420,  418,  427,  427,  428,
      428,  426,  429,  429,    0,  427,    0,  428,  430,  430,

      429,    0,  423,    0,  425,    0,  430,  422,    0,  431,
      431,  432,  432,  433,  433,  424,  426,  431,    0,  432,
      428,  433,  434,  434,  435,  435,  436,  436,  429,    0,
      434,    0,  435,    0,  436,  427,    0,    0,  434,    0,
      431,    0,  430,    0,  433,  437,  437,    0,  434,  438,
      438,  439,  439,  437,  440,  440,    0,  438,  434,  439,
      432,    0,  440,  441,  441,    0,  442,  442,  443,  443,
        0,  441,  444,  444,  442,  436,  443,    0,    0,    0,
      444,  445,  445,  446,  446,  440,  439,  447,  447,  445,
        0,  446,  448,  448,    0,  447,  449,  449,  438,    0,

      448,    0,  450,  450,  449,    0,  441,  442,    0,  443,
      450,    0,    0,  451,  451,  452,  452,  453,  453,  444,
      447,  451,  445,  452,    0,  453,  454,  454,  455,  455,
      446,  456,  456,    0,  454,  449,  455,  450,    0,  456,
      457,  457,  458,  458,  462,  462,  464,  464,  457,    0,
      458,    0,  462,    0,  464,  460,  460,  454,    0,  455,
      459,  459,  456,  460,    0,  453,  461,  461,  459,    0,
      465,  465,  466,  466,  461,  462,  455,  455,  465,    0,
      466,    0,  459,  462,  458,    0,  460,  460,  467,  467,
        0,  459,  459,  468,  468,  464,  467,  469,  469,    0,

        0,  468,  470,  470,    0,  469,    0,  466,  459,  465,
      470,  461,  461,    0,  461,  471,  471,  461,  472,  472,
      473,  473,    0,  471,  474,  474,  472,  467,  473,  475,
      475,    0,  474,    0,    0,    0,  468,  475,  476,  476,
        0,  469,  477,  477,  478,  478,  476,  479,  479,    0,
      477,  470,  478,  480,  480,  479,    0,  472,    0,  471,
        0,  480,  481,  481,  482,  482,    0,  474,    0,  473,
      481,    0,  482,    0,    0,  477,    0,  475,  483,  483,
      479,  476,  484,  484,    0,    0,  483,  485,  485,    0,
      484,    0,  478,  486,  486,  485,    0,  480,    0,  487,

      487,  486,  488,  488,    0,    0,  481,  487,  482,    0,
      488,    0,  484,  489,  489,  490,  490,  491,  491,    0,
        0,  489,    0,  490,    0,  491,    0,  483,  492,  492,
      493,  493,  486,  488,  494,  494,  492,    0,  493,  495,
      495,    0,  494,    0,  496,  496,    0,  495,    0,  487,
      490,    0,  496,  497,  497,  498,  498,  499,  499,  500,
      500,  497,    0,  498,  494,  499,    0,  500,  501,  501,
        0,    0,  502,  502,    0,  495,  501,  492,  493,  496,
      502,  503,  503,  497,  504,  504,  505,  505,    0,  503,
      506,  506,  504,  500,  505,  507,  507,    0,  506,  508,

      508,    0,  498,  507,  509,  509,    0,  508,  510,  510,
        0,  502,  509,  511,  511,    0,  510,  501,  512,  512,
        0,  511,    0,  513,  513,    0,  512,  504,    0,  506,
      503,  513,    0,  507,    0,  505,  514,  514,  515,  515,
      516,  516,  517,  517,  514,    0,  515,    0,  516,    0,
      517,    0,  518,  518,    0,  519,  519,  510,    0,  512,
      518,    0,  511,  519,  520,  520,    0,  521,  521,  515,
      522,  522,  520,  513,  516,  521,    0,  517,  522,  523,
      523,  524,  524,  525,  525,  526,  526,  523,    0,  524,
        0,  525,    0,  526,  530,  530,  518,    0,  519,  529,

      529,    0,  530,    0,    0,  531,  531,  529,  532,  532,
        0,  522,    0,  531,  521,    0,  532,    0,  533,  533,
        0,    0,    0,  534,  534,  524,  533,    0,  523,  530,
      525,  534,  535,  535,    0,  529,  531,  536,  536,    0,
      535,    0,  538,  538,    0,  536,    0,  540,  540,    0,
      538,  539,  539,    0,  534,  540,  541,  541,  532,  539,
      542,  542,  543,  543,  541,  545,  545,  533,  542,    0,
      543,  544,  544,  545,  546,  546,    0,  540,    0,  544,
      536,  538,  546,    0,  539,  535,  547,  547,  548,  548,
      549,  549,    0,    0,  547,    0,  548,    0,  549,    0,

      541,    0,  550,  550,    0,  543,  544,    0,  545,  542,
      550,  551,  551,    0,  552,  552,    0,    0,  546,  551,
        0,  547,  552,  553,  553,  554,  554,  555,  555,    0,
        0,  553,    0,  554,    0,  555,  556,  556,    0,  557,
      557,  558,  558,    0,  556,    0,  551,  557,    0,  558,
        0,  550,  559,  559,  560,  560,  561,  561,  553,    0,
      559,    0,  560,    0,  561,    0,    0,    0,  554,    0,
      555,  562,  562,  558,  557,  556,  558,  563,  563,  562,
        0,  564,  564,  565,  565,  563,  566,  566,  558,  564,
        0,  565,    0,  559,  566,  565,  560,    0,  561,  567,

      567,  568,  568,  569,  569,  570,  570,  567,    0,  568,
        0,  569,    0,  570,  571,  571,  574,  574,  572,  572,
      573,  573,  571,    0,  574,  566,  572,    0,  573,  567,
      564,  575,  575,  576,  576,  577,  577,  568,    0,  575,
      570,  576,    0,  577,    0,  578,  578,    0,    0,  571,
      574,  572,  569,  578,    0,  573,  579,  579,  580,  580,
        0,    0,  575,    0,  579,    0,  580,  581,  581,    0,
      582,  582,  583,  583,  576,  581,    0,  577,  582,    0,
      583,  584,  584,    0,  578,  585,  585,    0,    0,  584,
      586,  586,    0,  585,    0,  579,  587,  587,  586,  588,

      588,    0,  581,    0,  587,  589,  589,  588,  590,  590,
      591,  591,    0,  589,  594,  594,  590,  582,  591,  595,
      595,    0,  594,  596,  596,  597,  597,  595,  585,  598,
      598,  596,    0,  597,  599,  599,  589,  598,    0,  586,
      588,    0,  599,  600,  600,  591,  601,  601,    0,    0,
      587,  600,    0,  590,  601,  595,  597,  603,  603,    0,
      598,  604,  604,  594,    0,  603,  605,  605,    0,  604,
      596,  606,  606,    0,  605,  599,  607,  607,    0,  606,
        0,  608,  608,    0,  607,    0,  609,  609,    0,  608,
      610,  610,  603,    0,  609,  611,  611,    0,  610,  612,

      612,  613,  613,  611,  614,  614,    0,  612,    0,  613,
      604,  608,  614,    0,  606,  605,  609,  615,  615,  616,
      616,  617,  617,    0,    0,  615,    0,  616,    0,  617,
        0,  613,  618,  618,  614,  619,  619,    0,  611,    0,
      618,  620,  620,  619,    0,    0,  612,  621,  621,  620,
      622,  622,  614,  616,    0,  621,  623,  623,  622,    0,
      624,  624,  625,  625,  623,  619,  626,  626,  624,    0,
      625,  627,  627,    0,  626,  618,  620,  628,  628,  627,
      629,  629,    0,    0,    0,  628,  630,  630,  629,    0,
      621,  623,  624,    0,  630,  631,  631,  625,  621,    0,

      622,  632,  632,  631,    0,  633,  633,  634,  634,  632,
        0,    0,  627,  633,    0,  634,  629,    0,  628,  635,
      635,    0,  631,  636,  636,  630,    0,  635,  637,  637,
        0,  636,  638,  638,  639,  639,  637,  634,  640,  640,
      638,    0,  639,  641,  641,    0,  640,  642,  642,  635,
      636,  641,  643,  643,    0,  642,  644,  644,  645,  645,
      643,  646,  646,    0,  644,    0,  645,  638,    0,  646,
      647,  647,    0,  639,  641,  637,  648,  648,  647,  649,
      649,    0,  643,    0,  648,  650,  650,  649,    0,  640,
        0,  653,  653,  650,  654,  654,  655,  655,    0,  653,

      656,  656,  654,    0,  655,  657,  657,    0,  656,  658,
      658,  661,  661,  657,  660,  660,    0,  658,    0,  661,
        0,    0,  660,  662,  662,  648,  653,  649,  650,  663,
      663,  662,  664,  664,  665,  665,    0,  663,  654,    0,
      664,    0,  665,  656,  666,  666,    0,  667,  667,  668,
      668,    0,  666,    0,  657,  667,    0,  668,    0,  658,
        0,  661,  660,  669,  669,    0,  665,  662,  670,  670,
        0,  669,  671,  671,  672,  672,  670,  664,  673,  673,
      671,    0,  672,  674,  674,    0,  673,    0,    0,  676,
      676,  674,  666,  675,  675,  667,  668,  676,  677,  677,

        0,  675,  678,  678,    0,    0,  677,  679,  679,    0,
      678,  671,  669,  680,  680,  679,    0,  673,  681,  681,
      674,  680,    0,  672,  676,    0,  681,  675,  682,  682,
      683,  683,  684,  684,    0,    0,  682,    0,  683,  677,
      684,    0,  679,  685,  685,  686,  686,  687,  687,  688,
      688,  685,    0,  686,    0,  687,    0,  688,    0,  681,
      689,  689,    0,  682,  690,  690,  691,  691,  689,  683,
      692,  692,  690,  684,  691,  693,  693,    0,  692,  694,
      694,  686,  685,  693,  695,  695,  687,  694,  688,  696,
      696,    0,  695,  697,  697,    0,    0,  696,    0,  691,

        0,  697,  700,  700,    0,  692,    0,  701,  701,  689,
      700,  702,  702,    0,  694,  701,  693,  703,  703,  702,
      704,  704,  706,  706,    0,  703,  707,  707,  704,    0,
      706,  708,  708,    0,  707,  709,  709,  710,  710,  708,
      711,  711,  697,  709,    0,  710,    0,    0,  711,  700,
      712,  712,  703,    0,  701,  704,  714,  714,  712,    0,
      702,  713,  713,    0,  714,    0,  715,  715,    0,  713,
      716,  716,    0,  707,  715,    0,  708,    0,  716,  709,
      717,  717,  718,  718,  719,  719,  720,  720,  717,    0,
      718,  710,  719,    0,  720,    0,  713,  721,  721,  722,

      722,  723,  723,  724,  724,  721,    0,  722,    0,  723,
      714,  724,  725,  725,    0,  715,  717,  726,  726,    0,
      725,  718,  727,  727,    0,  726,  728,  728,    0,  720,
      727,    0,  721,    0,  728,  729,  729,  730,  730,  731,
      731,  732,  732,  729,    0,  730,  722,  731,    0,  732,
      733,  733,  726,  725,  734,  734,    0,    0,  733,  735,
      735,    0,  734,    0,  727,  728,  731,  735,  736,  736,
        0,  729,  739,  739,  740,  740,  736,  741,  741,  730,
      739,    0,  740,  742,  742,  741,  743,  743,  745,  745,
        0,  742,  746,  746,  743,    0,  745,  747,  747,    0,

      746,    0,    0,  748,  748,  747,  749,  749,    0,  740,
      735,  748,  750,  750,  749,    0,  751,  751,  752,  752,
      750,  753,  753,  745,  751,    0,  752,  754,  754,  753,
      755,  755,    0,  756,  756,  754,  747,    0,  755,    0,
      746,  756,  757,  757,  758,  758,    0,    0,  759,  759,
      757,    0,  758,    0,  749,  751,  759,  750,  760,  760,
      761,  761,  762,  762,  753,    0,  760,    0,  761,    0,
      762,  763,  763,  764,  764,    0,  754,  757,    0,  763,
        0,  764,    0,  759,  766,  766,  768,  768,  769,  769,
      770,  770,  766,    0,  768,    0,  769,  762,  770,  760,

        0,  771,  771,  772,  772,  773,  773,    0,  764,  771,
      763,  772,    0,  773,  774,  774,  775,  775,  776,  776,
      777,  777,  774,    0,  775,    0,  776,    0,  777,  778,
      778,  779,  779,  770,  780,  780,    0,  778,  772,  779,
      781,  781,  780,  783,  783,  771,  784,  784,  781,  773,
        0,  783,  785,  785,  784,  786,  786,  787,  787,    0,
      785,  789,  789,  786,  778,  787,  788,  788,    0,  789,
      791,  791,  792,  792,  788,    0,  780,    0,  791,    0,
      792,  793,  793,  781,    0,  794,  794,  795,  795,  793,
        0,    0,  783,  794,    0,  795,  784,    0,  786,  797,

      797,  788,    0,  799,  799,  801,  801,  797,  803,  803,
      789,  799,    0,  801,    0,    0,  803,    0,    0,  792,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  797,    0,    0,    0,    0,    0,  799,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  801,  805,  805,  805,  805,  806,  806,
      807,  807,  807,  807,  808,  808,    0,  808,  809,  809,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,

      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804
    } ;

#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 ".\\parser.l"
#define INITIAL 0
#line 2 ".\\parser.l"
#include "pch.h"
#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

#include "rdogramrtp.hpp"
namespace rdoParse {
void setYylval(int val);
double *addDouble(double *val);
void addName(std::string *name);
}

#define comment 1

#line 1582 "rdolex.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 19 ".\\parser.l"


#line 1712 "rdolex.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 805 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3871 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 21 ".\\parser.l"
return(Resource_type);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 22 ".\\parser.l"
return(permanent);
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 23 ".\\parser.l"
return(Parameters);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 24 ".\\parser.l"
return(integer);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 25 ".\\parser.l"
return(real);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 26 ".\\parser.l"
return(End);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 27 ".\\parser.l"
return(temporary);                     
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 28 ".\\parser.l"
return(such_as);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 29 ".\\parser.l"
return(dblpoint);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 31 ".\\parser.l"
return(Resources);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 32 ".\\parser.l"
return(trace_keyword);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 33 ".\\parser.l"
return(no_trace);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 35 ".\\parser.l"
return(Constant);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 36 ".\\parser.l"
return(Body);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 37 ".\\parser.l"
return(Function_keyword);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 38 ".\\parser.l"
return(Type_keyword);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 39 ".\\parser.l"
return(algorithmic);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 40 ".\\parser.l"
return(table_keyword);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 41 ".\\parser.l"
return(list_keyword);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 42 ".\\parser.l"
return(Calculate_if);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 43 ".\\parser.l"
return(Sequence);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 44 ".\\parser.l"
return(uniform);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 45 ".\\parser.l"
return(exponential);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 46 ".\\parser.l"
return(normal_keyword);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 47 ".\\parser.l"
return(by_hist);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 48 ".\\parser.l"
return(enumerative);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 50 ".\\parser.l"
return(Exist);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 51 ".\\parser.l"
return(Not_Exist);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 52 ".\\parser.l"
return(For_All);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 53 ".\\parser.l"
return(Not_For_All);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 54 ".\\parser.l"
return(neq);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 55 ".\\parser.l"
return(leq);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 56 ".\\parser.l"
return(geq);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 57 ".\\parser.l"
return(NoCheck);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 58 ".\\parser.l"
return(Calculate_if);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 59 ".\\parser.l"
return(or_keyword);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 60 ".\\parser.l"
return(and_keyword);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 63 ".\\parser.l"
return(Pattern);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 64 ".\\parser.l"
return(operation);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 65 ".\\parser.l"
return(irregular_event);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 66 ".\\parser.l"
return(rule_keyword);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 67 ".\\parser.l"
return(keyboard);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 68 ".\\parser.l"
return(Relevant_resources);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 69 ".\\parser.l"
return(Keep);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 70 ".\\parser.l"
return(Create_keyword);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 71 ".\\parser.l"
return(Erase);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 72 ".\\parser.l"
return(NonExist);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 73 ".\\parser.l"
return(NoChange);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 74 ".\\parser.l"
return(Time);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 75 ".\\parser.l"
return(Choice);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 76 ".\\parser.l"
return(from_keyword);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 77 ".\\parser.l"
return(first_keyword);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 78 ".\\parser.l"
return(Convert_begin);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 79 ".\\parser.l"
return(Convert_end);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 80 ".\\parser.l"
return(Convert_rule);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 81 ".\\parser.l"
return(Convert_event);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 82 ".\\parser.l"
return(with_max);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 83 ".\\parser.l"
return(with_min);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 84 ".\\parser.l"
return(Operations);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 85 ".\\parser.l"
return(Results);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 86 ".\\parser.l"
return(watch_par);	   
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 87 ".\\parser.l"
return(watch_state);	   
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 88 ".\\parser.l"
return(watch_quant);	   
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 89 ".\\parser.l"
return(watch_value);	   
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 90 ".\\parser.l"
return(get_value);	   
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 92 ".\\parser.l"
return(Model_name);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 93 ".\\parser.l"
return(Resource_file);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 94 ".\\parser.l"
return(OprIev_file);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 95 ".\\parser.l"
return(Frame_file);	
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 96 ".\\parser.l"
return(Statistic_file);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 97 ".\\parser.l"
return(Results_file);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 98 ".\\parser.l"
return(Trace_file);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 99 ".\\parser.l"
return(Show_mode);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 100 ".\\parser.l"
return(Frame_number);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 101 ".\\parser.l"
return(Show_rate);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 102 ".\\parser.l"
return(Run_StartTime);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 103 ".\\parser.l"
return(Trace_StartTime);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 104 ".\\parser.l"
return(Trace_EndTime);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 105 ".\\parser.l"
return(Terminate_if);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 106 ".\\parser.l"
return(Break_point);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 107 ".\\parser.l"
return(Seed);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 108 ".\\parser.l"
return(NoShow);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 109 ".\\parser.l"
return(Monitor);	
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 110 ".\\parser.l"
return(Animation);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 113 ".\\parser.l"
return(Decision_point);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 114 ".\\parser.l"
return(search_keyword);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 115 ".\\parser.l"
return(trace_stat);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 116 ".\\parser.l"
return(trace_tops);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 117 ".\\parser.l"
return(trace_all);		     
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 118 ".\\parser.l"
return(Condition_keyword);		     
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 119 ".\\parser.l"
return(Term_condition);      
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 120 ".\\parser.l"
return(Evaluate_by);	        
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 121 ".\\parser.l"
return(Compare_tops);	     
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 122 ".\\parser.l"
return(NO);				        
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 123 ".\\parser.l"
return(YES);				     
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 124 ".\\parser.l"
return(Activities);		     
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 125 ".\\parser.l"
return(Process);		     
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 126 ".\\parser.l"
return(SIEZE);		     
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 127 ".\\parser.l"
return(value_before);	     
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 128 ".\\parser.l"
return(value_after);	        
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 129 ".\\parser.l"
return(value_before);	     
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 130 ".\\parser.l"
return(value_after);	        
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 131 ".\\parser.l"
return(some);				     
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 135 ".\\parser.l"
return(Frame);
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 136 ".\\parser.l"
return(Show_if);
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 137 ".\\parser.l"
return(Back_picture);
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 138 ".\\parser.l"
return(Show);
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 139 ".\\parser.l"
return(frm_cell);
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 140 ".\\parser.l"
return(text);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 141 ".\\parser.l"
return(transparent);
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 142 ".\\parser.l"
return(bitmap);
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 143 ".\\parser.l"
return(s_bmp);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 144 ".\\parser.l"
return(rect_keyword);
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 145 ".\\parser.l"
return(r_rect);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 146 ".\\parser.l"
return(line);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 147 ".\\parser.l"
return(ellipse);
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 148 ".\\parser.l"
return(triang);
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 149 ".\\parser.l"
return(active);
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 151 ".\\parser.l"
{
							std::string n1(YYText());
							int len = n1.length();
                     std::string *name = new std::string(n1, 1, len-2);
                     rdoParse::addName(name);
	                  rdoParse::setYylval((int)name);
                     return QUOTED_IDENTIF;
                  }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 160 ".\\parser.l"
BEGIN(comment);
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 162 ".\\parser.l"
/* eat anything that's not a '*' */
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 163 ".\\parser.l"
;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 164 ".\\parser.l"
BEGIN(INITIAL);
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 167 ".\\parser.l"
;	
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 168 ".\\parser.l"
;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 169 ".\\parser.l"
return(YYText()[YYLeng()-1]);
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 171 ".\\parser.l"
{
						std::string n1(YYText(), YYLeng()-2);
                  rdoParse::setYylval(atoi(n1.c_str()));
						unput('.');
						unput('.');
                  return INT_CONST;
					}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 179 ".\\parser.l"
{
                  double *val = rdoParse::addDouble(new double(atof(YYText())));
                  rdoParse::setYylval((int)val);
                  return REAL_CONST;
               }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 185 ".\\parser.l"
{
                  rdoParse::setYylval(atoi(YYText()));
                  return INT_CONST;
               }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 190 ".\\parser.l"
{       
							std::string n1(YYText());
							int pos = n1.find_first_of("\n\t :");
                     std::string *name = new std::string(n1, 0, pos);
                     rdoParse::addName(name);
	                  rdoParse::setYylval((int)name);
                     return IDENTIF_set;
                  }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 199 ".\\parser.l"
{       
							std::string n1(YYText());
							int pos = n1.find_first_of("\n\t :");
                     std::string *name = new std::string(n1, 0, pos);
                     rdoParse::addName(name);
	                  rdoParse::setYylval((int)name);
                     return IDENTIF_NoChange_NoChange;
                  }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 208 ".\\parser.l"
{       
							std::string n1(YYText());
							int pos = n1.find_first_of("\n\t :");
                     std::string *name = new std::string(n1, 0, pos);
                     rdoParse::addName(name);
	                  rdoParse::setYylval((int)name);
                     return IDENTIF_NoChange;
                  }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 217 ".\\parser.l"
{       
							std::string n1(YYText());
							int pos = n1.find_first_of("\n\t :");
                     std::string *name = new std::string(n1, 0, pos);
                     rdoParse::addName(name);
	                  rdoParse::setYylval((int)name);
                     return IDENTIF_COLON;
                  }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 226 ".\\parser.l"
{       
                     std::string *name = new std::string(YYText());
                     rdoParse::addName(name);
	                  rdoParse::setYylval((int)name);
                     return IDENTIF;
                  }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 234 ".\\parser.l"
ECHO;
	YY_BREAK
#line 2531 "rdolex.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(comment):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 805 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 805 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 804);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 234 ".\\parser.l"

   