#line 2 "rdolex.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
class istream;
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 134
#define YY_END_OF_BUFFER 135
static yyconst short int yy_acclist[920] =
    {   0,
      120,  120,  135,  134,  124,  134,  133,  134,  134,  125,
      134,  125,  134,  125,  134,  128,  134,  125,  134,  125,
      134,  133,  134,  133,  134,  133,  134,  133,  134,  133,
      134,  133,  134,  133,  134,  133,  134,  133,  134,  133,
      134,  133,  134,  133,  134,  133,  134,  133,  134,  133,
      134,  133,  134,  133,  134,  133,  134,  133,  134,  133,
      134,  133,  134,  133,  134,  133,  134,  133,  134,  133,
      134,  133,  134,  133,  134,  133,  134,  133,  134,  133,
      134,  133,  134,  119,  134,  120,  134,  121,  134,  122,
      134,  124,  133,  132,  133,  133,  133,  133,  133,  133,

      133,  133,  133,  133,  133,  118,  128,    9,  127,   32,
       31,   33,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,   94,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,   36,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      123,  120,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  126,
      127,  133,  133,  133,  133,  133,  133,  133,  133,  133,

      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,   95,  133,  133,  133,
       37,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,    6,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  127,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,   44,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,

      133,   81,  133,  106,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,   51,  133,  133,
      133,  133,  133,  114,  133,   19,  133,  133,  133,  133,
      133,  133,    5,  133,  112,  133,   41,  133,  133,  133,
      102,  133,  133,  133,  133,  108,  133,  133,  133,  133,
      133,  133,  133,  133,  129,  133,  133,   14,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,   49,  133,   16,  133,  133,
      133,  133,  133,  133,  133,   46,  133,   27,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,

      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,   52,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  111,  133,  133,  133,
       18,  133,  133,   11,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  103,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,   50,  133,  133,   45,  133,  133,  133,
      133,  133,  133,  133,   82,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  117,
      133,  133,  110,  133,  133,  133,  133,  133,  133,  133,

      133,  133,  133,  133,   24,  133,  133,  133,  113,  133,
       86,  133,  133,  133,  133,  133,  116,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,   29,  133,  133,  133,  133,   83,  133,
      133,   34,  133,  133,  133,  133,  133,  133,  133,  133,
      104,  133,  133,  133,  133,  133,  133,  133,  133,  133,
       25,  133,  115,  133,  133,  133,  133,  133,    4,  133,
      133,  133,  133,  133,  133,    8,  133,  133,  133,  133,
      133,  133,   22,  133,  133,  133,  133,  133,  133,  133,

      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,   38,  133,   97,  133,  133,  133,   60,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,   48,
      133,   47,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  107,
      133,  133,  133,   42,  133,   12,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
       57,  133,   58,  133,  133,  133,  133,  133,   13,  133,
      133,  133,   15,  133,  133,  133,  133,  133,   21,  133,
      133,   84,  133,  133,  133,  133,  133,  133,  133,  133,

      133,   28,  133,  133,  133,  133,  133,  133,   73,  133,
       75,  133,  133,  133,  133,  133,  133,  133,  133,  133,
       65,  133,  133,   39,  133,    2,  133,    7,  133,   89,
      133,  133,  133,  133,  133,  133,   61,  133,  133,  133,
      133,  131,  133,  133,  133,   90,  133,  133,  133,  133,
      133,  133,  133,   10,  133,  133,  133,  133,  133,  133,
      133,  133,   69,  133,  133,   66,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,   72,  133,  133,  133,
      133,  133,   87,  133,   88,  133,  133,  133,  133,  133,
      133,  133,   96,  133,  133,  133,  133,  133,   59,  133,

        3,  133,  133,  133,  133,   80,  133,  133,  133,   54,
      133,  133,  133,  133,   30,  133,   68,  133,  133,  133,
      133,  133,  133,  133,  133,   17,  133,   26,  133,   23,
      133,  133,  109,  133,   99,  101,  133,  133,   63,  133,
       62,  133,   64,  133,  133,  133,  133,   92,  133,  133,
      133,  133,   20,   35,  133,  133,  133,   55,  133,   74,
      133,  133,   71,  133,  133,  133,   79,  133,  133,  133,
      133,   98,  100,  133,  105,  133,   93,  133,  133,  133,
      133,  133,   53,  133,   56,  133,   67,  133,   76,  133,
      133,   78,  133,  133,  133,  133,  133,    1,  133,  133,

       70,  133,  133,  133,   85,  133,  133,   91,  133,   77,
      133,   40,  133,  133,  133,  133,  130,   43,  133
    } ;

static yyconst short int yy_accept[802] =
    {   0,
        1,    1,    1,    2,    3,    4,    5,    7,    9,   10,
       12,   14,   16,   18,   20,   22,   24,   26,   28,   30,
       32,   34,   36,   38,   40,   42,   44,   46,   48,   50,
       52,   54,   56,   58,   60,   62,   64,   66,   68,   70,
       72,   74,   76,   78,   80,   82,   84,   86,   88,   90,
       92,   93,   93,   94,   95,   96,   97,   98,   99,  100,
      101,  102,  103,  104,  105,  106,  106,  107,  108,  109,
      110,  111,  112,  113,  114,  115,  116,  117,  118,  119,
      120,  121,  122,  123,  124,  125,  127,  128,  129,  130,
      131,  132,  133,  134,  135,  136,  137,  138,  139,  140,

      141,  142,  143,  144,  145,  146,  147,  148,  149,  150,
      151,  152,  153,  154,  156,  157,  158,  159,  160,  161,
      162,  163,  164,  165,  166,  167,  168,  169,  170,  171,
      171,  172,  173,  173,  173,  174,  175,  176,  177,  178,
      179,  180,  181,  182,  183,  184,  185,  186,  187,  188,
      189,  190,  191,  192,  192,  193,  194,  195,  196,  197,
      198,  199,  200,  201,  202,  203,  204,  205,  206,  207,
      208,  209,  210,  211,  212,  213,  214,  215,  216,  217,
      219,  220,  221,  223,  224,  225,  226,  227,  228,  229,
      230,  231,  232,  233,  234,  235,  236,  237,  238,  239,

      240,  241,  242,  243,  244,  245,  246,  247,  248,  249,
      250,  251,  252,  253,  254,  255,  256,  257,  258,  258,
      258,  259,  260,  261,  262,  263,  264,  266,  267,  268,
      269,  270,  271,  272,  273,  274,  275,  276,  277,  278,
      279,  279,  280,  281,  282,  283,  284,  285,  286,  287,
      288,  289,  290,  292,  293,  294,  295,  296,  297,  298,
      299,  300,  301,  302,  304,  306,  307,  308,  309,  310,
      311,  312,  313,  314,  315,  316,  317,  318,  320,  321,
      322,  323,  324,  326,  328,  329,  330,  331,  332,  333,
      335,  337,  339,  340,  341,  343,  344,  345,  346,  348,

      349,  350,  351,  352,  353,  354,  355,  355,  356,  357,
      358,  360,  361,  362,  363,  364,  365,  366,  367,  368,
      369,  370,  371,  372,  373,  374,  375,  376,  378,  380,
      381,  382,  383,  384,  385,  386,  388,  390,  391,  392,
      393,  394,  395,  396,  397,  398,  399,  400,  401,  402,
      403,  404,  405,  406,  407,  408,  409,  410,  411,  412,
      413,  414,  415,  417,  418,  419,  420,  421,  422,  423,
      424,  425,  426,  427,  429,  430,  431,  433,  434,  436,
      437,  438,  439,  440,  441,  442,  442,  443,  444,  445,
      446,  447,  448,  449,  451,  452,  453,  454,  455,  456,

      457,  458,  459,  460,  461,  462,  463,  464,  466,  467,
      469,  470,  471,  472,  473,  474,  475,  477,  478,  479,
      480,  481,  482,  483,  484,  485,  486,  487,  488,  489,
      490,  492,  493,  495,  496,  497,  498,  499,  500,  501,
      502,  503,  504,  505,  507,  508,  509,  511,  513,  514,
      515,  516,  517,  519,  520,  520,  521,  522,  523,  523,
      524,  525,  526,  527,  528,  529,  530,  531,  532,  533,
      534,  535,  536,  537,  538,  539,  540,  541,  542,  543,
      544,  546,  547,  548,  549,  551,  552,  554,  555,  556,
      557,  558,  559,  560,  561,  563,  564,  565,  566,  567,

      568,  569,  570,  571,  573,  575,  576,  577,  578,  579,
      581,  582,  583,  584,  585,  586,  588,  589,  590,  591,
      592,  593,  595,  595,  595,  596,  597,  598,  599,  600,
      601,  602,  603,  603,  604,  605,  606,  607,  608,  609,
      610,  611,  612,  613,  615,  617,  618,  619,  621,  622,
      623,  624,  625,  626,  627,  628,  629,  630,  632,  634,
      635,  636,  637,  638,  639,  640,  641,  642,  643,  644,
      645,  646,  647,  648,  649,  650,  652,  653,  654,  656,
      658,  659,  660,  661,  662,  663,  664,  665,  665,  665,
      666,  667,  668,  669,  670,  671,  673,  675,  675,  676,

      677,  678,  679,  681,  682,  683,  685,  686,  687,  688,
      689,  691,  692,  694,  695,  696,  697,  698,  699,  700,
      701,  702,  704,  705,  706,  707,  708,  709,  711,  713,
      714,  715,  716,  717,  718,  719,  720,  721,  723,  724,
      726,  728,  730,  732,  733,  734,  735,  735,  735,  736,
      737,  739,  740,  741,  742,  743,  744,  745,  746,  748,
      749,  750,  751,  752,  753,  754,  756,  757,  758,  759,
      760,  761,  762,  763,  765,  766,  768,  769,  770,  771,
      772,  773,  774,  775,  776,  777,  779,  780,  781,  782,
      783,  785,  787,  788,  788,  788,  789,  790,  791,  792,

      793,  793,  795,  796,  797,  798,  799,  801,  803,  804,
      805,  806,  808,  809,  810,  812,  813,  814,  815,  817,
      819,  820,  821,  822,  823,  824,  825,  826,  828,  830,
      832,  833,  835,  836,  836,  838,  839,  841,  843,  845,
      845,  846,  847,  848,  850,  851,  852,  853,  856,  857,
      858,  860,  862,  863,  865,  866,  867,  869,  870,  871,
      872,  873,  875,  875,  877,  879,  880,  881,  882,  883,
      885,  887,  889,  891,  892,  894,  895,  896,  896,  897,
      898,  900,  901,  903,  904,  905,  905,  907,  908,  910,
      912,  914,  914,  915,  915,  916,  916,  917,  918,  920,

      920
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    4,    1,    1,    5,    6,
        6,    6,    7,    6,    7,    8,    6,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   10,    1,   11,
       12,   13,    1,    1,   14,   15,   16,   17,   18,   19,
       20,   20,   21,   20,   22,   20,   23,   24,   25,   26,
       20,   27,   28,   29,   20,   20,   20,   20,   30,   20,
        6,    1,    6,    1,   31,    1,   32,   33,   34,   35,

       36,   37,   38,   39,   40,   20,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   20,   56,    1,   57,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   20,    1,    1,    1,    1,    1,    1,
        1,   20,   20,   20,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20
    } ;

static yyconst int yy_meta[58] =
    {   0,
        1,    2,    3,    2,    1,    1,    1,    1,    2,    2,
        1,    1,    1,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    1,    4
    } ;

static yyconst short int yy_base[806] =
    {   0,
        0,    0,   55,   56,  278, 3855,   58,  112,  270, 3855,
      261,  246,   54,   52,  236,   64,   68,  115,   66,   88,
      100,   70,   79,  141,  147,   83,  159,   85,  162,  168,
      165,  171,  174,  180,  186,  197,  201,  216,  221,  226,
      235,  237,  247,  241,  262,  274,  189,    0, 3855, 3855,
       81,  250,   94, 3855,  253,  287,  290,  300,  302,  305,
      314,  318,  323,  327,  337,  237, 3855,   91, 3855,  333,
     3855, 3855, 3855,  342,  355,  365,  368,  377,  383,  386,
      392,  395,  398,  401,  407,  412,  424,  421,  426,  436,
      445,  447,  451,  456,  461,  474,  476,  485,  487,  496,

      498,  507,  509,  511,  522,  528,  525,  531,  534,  537,
      540,  549,  551,  553,  562,  564,  566,  575,  591,  593,
      603,  605,  616,  618,  620,  630,  632,  634,  645,  175,
      170,    0,  176,  170,  648,  654,  665,  663,  675,  677,
      679,  689,  691,  694,  700,  712,  714,  717,  723,  726,
      729, 3855,  199,   68,  735,  741,  750,  739,  744,  756,
      779,  783,  788,  792,  797,  801,  806,  803,  812,  815,
      821,  824,  837,  846,  851,  855,  857,  860,  866,  869,
      871,  881,  887,  891,  896,  902,  907,  911,  913,  917,
      922,  926,  928,  937,  941,  943,  956,  958,  967,  973,

      979,  982,  984,  988,  993,  997,  999, 1009, 1013, 1022,
     1025, 1031, 1034, 1040, 1046, 1051, 1055, 1057,  185,  147,
     1060, 1072, 1074, 1077, 1083, 1088, 1101, 1104, 1106, 1117,
     1123, 1128, 1132, 1134, 1137, 1151, 1153, 1155, 1164, 1167,
      185,  183, 1173, 1176, 1178, 1182, 1187, 1191, 1204, 1208,
     1210, 1223, 1225, 1228, 1234, 1240, 1243, 1245, 1259, 1254,
     1263, 1265, 1277, 1279, 1290, 1292, 1294, 1306, 1308, 1310,
     1320, 1323, 1325, 1334, 1336, 1338, 1347, 1351, 1362, 1364,
     1366, 1375, 1380, 1384, 1389, 1393, 1395, 1398, 1407, 1409,
     1413, 1419, 1429, 1432, 1441, 1443, 1445, 1447, 1457, 1459,

     1461, 1470, 1474, 1476, 1486, 1480,  152, 3855, 1491, 1495,
     1497, 1506, 1518, 1520, 1529, 1531, 1543, 1534, 1545, 1547,
     1549, 1558, 1561, 1563, 1573, 1585, 1589, 1594, 1598, 1600,
     1609, 1614, 1623, 1620, 1625, 1629, 1634, 1639, 1643, 1645,
     1655, 1660, 1669, 1675, 1680, 1684, 1686, 1689, 1695, 1699,
     1704, 1708, 1713, 1719, 1722, 1724, 1734, 1737, 1755, 1765,
     1767, 1769, 1778, 1782, 1784, 1787, 1793, 1796, 1798, 1807,
     1809, 1819, 1822, 1824, 1835, 1833, 1837, 1848, 1850, 1852,
     1854, 1865, 1868, 1874, 1877,  155, 1883, 1880, 1892, 1898,
     1901, 1904, 1907, 1919, 1922, 1925, 1928, 1939, 1943, 1948,

     1953, 1957, 1966, 1963, 1968, 1979, 1981, 1983, 1992, 1996,
     2001, 2012, 2014, 2016, 2025, 2027, 2029, 2031, 2042, 2044,
     2057, 2059, 2063, 2068, 2073, 2084, 2087, 2093, 2096, 2099,
     2105, 2111, 2120, 2122, 2131, 2136, 2142, 2145, 2147, 2156,
     2160, 2171, 2173, 2175, 2188, 2190, 2193, 2203, 2206, 2208,
     2212, 2221, 2227, 2231, 2233, 2236, 2246, 2248,  141, 2257,
     2261, 2273, 2275, 2284, 2287, 2300, 2302, 2311, 2314, 2316,
     2320, 2331, 2333, 2335, 2346, 2351, 2355, 2360, 2369, 2371,
     2375, 2380, 2384, 2389, 2401, 2404, 2406, 2415, 2420, 2424,
     2426, 2435, 2429, 2439, 2441, 2444, 2454, 2456, 2465, 2470,

     2474, 2479, 2483, 2488, 2492, 2497, 2503, 2506, 2508, 2518,
     2523, 2527, 2529, 2532, 2541, 2547, 2558, 2561, 2564, 2570,
     2573, 2576,  142,  123, 2579, 2588, 2585, 2590, 2594, 2599,
     2608, 2610,  120, 2620, 2623, 2625, 2635, 2637, 2640, 2649,
     2661, 2663, 2665, 2667, 2676, 2679, 2688, 2690, 2692, 2694,
     2704, 2707, 2709, 2713, 2723, 2729, 2732, 2734, 2748, 2750,
     2752, 2754, 2766, 2768, 2771, 2777, 2780, 2783, 2786, 2789,
     2799, 2801, 2804, 2816, 2825, 2827, 2830, 2836, 2839, 2842,
     2848, 2851, 2857, 2860, 2866, 2869, 2871,  106,  118, 2875,
     2880, 2884, 2886, 2901, 2903, 2906, 2917,  110, 2919, 2921,

     2932, 2934, 2936, 2938, 2948, 2950, 2954, 2960, 2963, 2965,
     2974, 2978, 2983, 2987, 2989, 2999, 3001, 3013, 3015, 3019,
     3024, 3030, 3034, 3036, 3040, 3045, 3055, 3059, 3064, 3069,
     3078, 3084, 3080, 3089, 3093, 3095, 3104, 3108, 3113, 3117,
     3119, 3128, 3132, 3138, 3143, 3147,   99,   87, 3149, 3152,
     3158, 3161, 3163, 3167,  150, 3172, 3176, 3191, 3193, 3196,
     3205, 3207, 3209, 3220, 3222, 3231, 3237, 3241, 3243, 3247,
     3252, 3257, 3261, 3263, 3272, 3276, 3278, 3287, 3292, 3296,
     3302, 3307, 3311, 3316, 3325, 3327, 3331, 3337, 3343, 3347,
     3352, 3356, 3358,   75,   72, 3361, 3367, 3376, 3378, 3387,

      256, 3389, 3391, 3400, 3402, 3414, 3417, 3419, 3428, 3430,
     3432, 3434, 3446, 3448, 3450, 3452, 3463, 3465, 3468, 3474,
     3477, 3487, 3490, 3492, 3501, 3504, 3506, 3515, 3518, 3524,
     3527, 3538, 3855,   75, 3540, 3542, 3551, 3553, 3555,   64,
     3557, 3566, 3570, 3572, 3581, 3585, 3587, 3596, 3598, 3601,
     3610, 3614, 3616, 3619, 3630, 3633, 3635, 3644, 3646, 3655,
     3855, 3657,   91, 3659, 3661, 3671, 3674, 3680, 3685, 3690,
     3694, 3696, 3699, 3708, 3710, 3719, 3721,   66, 3723, 3725,
     3735, 3737, 3739, 3748, 3750,   69, 3753, 3764, 3767, 3769,
     3780,   50, 3783,   54, 3785,   43, 3789, 3855, 3794, 3855,

     3838, 3841, 3844, 3848, 3852
    } ;

static yyconst short int yy_def[806] =
    {   0,
      800,    1,  801,  801,  800,  800,  800,  802,  803,  800,
      800,  800,  800,  800,  800,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  804,  805,  800,  800,
      800,  800,  802,  800,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  803,  800,  800,  800,  800,
      800,  800,  800,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,

      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  804,
      804,  805,  800,  800,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  800,  800,  800,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,

      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  800,  800,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      800,  800,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,

      802,  802,  802,  802,  802,  802,  800,  800,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  800,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,

      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  800,  802,  802,  802,  800,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,

      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  800,  800,  802,  802,  802,  802,  802,  802,
      802,  802,  800,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  800,  800,  802,
      802,  802,  802,  802,  802,  802,  802,  800,  802,  802,

      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  800,  800,  802,  802,
      802,  802,  802,  802,  800,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  800,  800,  802,  802,  802,  802,  802,

      800,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  800,  800,  802,  802,  802,  802,  802,  800,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      800,  802,  800,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  800,  802,  802,
      802,  802,  802,  802,  802,  800,  802,  802,  802,  802,
      802,  800,  802,  800,  802,  800,  802,  800,  802,    0,

      800,  800,  800,  800,  800
    } ;

static yyconst short int yy_nxt[3913] =
    {   0,
        6,    7,    7,    8,    9,   10,   11,   12,   13,    6,
       14,   10,   15,   16,   17,   18,   19,   20,   21,   19,
       19,   22,   23,   24,   25,   19,   26,   27,   28,   29,
       19,   30,   31,   19,   19,   32,   33,   34,   19,   35,
       36,   37,   19,   38,   39,   40,   19,   41,   42,   43,
       44,   45,   46,   19,   19,   47,    6,   49,   49,   51,
       51,   70,   68,   71,   72,   52,   52,   52,   52,   52,
       52,   52,   52,   54,  241,   54,  242,   54,  798,   54,
       52,   52,   51,   51,   52,   52,   52,   52,   54,   52,
       52,  796,   54,  794,   54,   52,   52,   54,   70,   68,

      792,   52,   52,   54,  786,   84,  778,   74,  763,   54,
      761,   50,   50,   52,   52,   75,   52,   52,   89,  734,
       94,   54,  733,   85,   54,   55,   56,   57,   58,   59,
       60,  695,   95,   90,  694,   80,   61,   62,   63,   64,
       65,   81,   52,   52,   82,  655,   76,   83,   52,   52,
       54,  701,  701,   77,  648,  647,   54,  598,  589,   78,
       52,   52,   79,   52,   52,   86,   52,   52,   54,   52,
       52,   54,   52,   52,   54,   52,   52,   54,  588,   96,
       54,   52,   52,   54,  533,   87,  459,   52,   52,   54,
      386,  242,   88,  242,   91,   54,  308,   92,   52,   52,

      307,   97,   52,   52,  100,  220,   54,  153,   93,   98,
       54,   99,  102,  105,  103,  107,  154,   52,   52,  101,
      219,  106,   52,   52,  104,   54,  131,   52,   52,  108,
       54,  131,  110,  109,  154,   54,   52,   52,   52,   52,
      111,   67,   52,   52,   54,  131,   54,   73,   52,   52,
       54,   52,   52,   69,   52,   52,   54,  701,  701,   54,
      112,  115,   54,   52,   52,  116,  113,  119,  114,   68,
      117,   54,  120,  133,   67,   52,   52,  800,  123,  740,
      800,  121,  124,   54,  126,  118,  135,  122,   52,   52,
      800,   52,   52,  127,  125,  800,   54,  800,  134,   54,

      800,   52,   52,   52,   52,  128,   52,   52,  800,   54,
      800,   54,  800,  129,   54,   52,   52,  800,  136,   52,
       52,  800,  800,   54,   52,   52,  800,   54,   52,   52,
      800,  137,   54,  800,  138,  139,   54,  800,   52,   52,
      152,  153,  800,   52,   52,  140,   54,  800,  800,  145,
      154,   54,  142,  141,  800,  143,   52,   52,  147,  144,
      800,  800,  148,  800,   54,  146,   52,   52,  154,   52,
       52,  800,  149,  800,   54,  800,  150,   54,   52,   52,
      800,  155,  800,  800,   52,   52,   54,   52,   52,  800,
      156,  151,   54,   52,   52,   54,   52,   52,  800,   52,

       52,   54,   52,   52,   54,  800,  157,   54,   52,   52,
       54,  800,  158,   52,   52,  800,   54,  161,  160,  800,
      159,   54,   52,   52,  800,   52,   52,   52,   52,  164,
       54,  162,  800,   54,  800,   54,  165,   52,   52,  168,
      800,  166,  163,  800,  800,   54,   52,   52,   52,   52,
      167,  169,   52,   52,   54,  800,   54,   52,   52,  800,
       54,  800,   52,   52,  800,   54,  800,  170,  172,  800,
       54,  800,  800,  171,  173,   52,   52,   52,   52,  174,
      175,  800,  177,   54,  800,   54,   52,   52,   52,   52,
      800,  176,  179,  800,   54,  800,   54,   52,   52,   52,

       52,  180,  800,  178,  800,   54,  800,   54,   52,   52,
       52,   52,   52,   52,  800,  800,   54,  800,   54,  800,
       54,  183,  182,   52,   52,  181,   52,   52,  185,   52,
       52,   54,   52,   52,   54,   52,   52,   54,   52,   52,
       54,   52,   52,   54,  800,  184,   54,  800,  186,   54,
       52,   52,   52,   52,   52,   52,  188,  800,   54,  187,
       54,  800,   54,   52,   52,   52,   52,   52,   52,  189,
      190,   54,  191,   54,  192,   54,   52,   52,  800,  198,
      193,  194,  800,  196,   54,  800,  200,  800,  197,  800,
      800,  195,   52,   52,   52,   52,  199,  203,  800,  204,

       54,  800,   54,  800,   52,   52,   52,   52,  800,  201,
      800,  202,   54,  800,   54,  800,  205,   52,   52,   52,
       52,   52,   52,  206,  207,   54,  800,   54,  800,   54,
      800,   52,   52,   52,   52,   52,   52,  800,  209,   54,
      800,   54,  800,   54,  800,  208,   52,   52,  210,   52,
       52,  213,  800,  800,   54,   52,   52,   54,  800,  214,
      211,  800,  800,   54,   52,   52,   52,   52,  800,  215,
      800,  212,   54,  216,   54,  800,   52,   52,   52,   52,
       52,   52,  800,  217,   54,  800,   54,  222,   54,  800,
       52,   52,   52,   52,  218,   52,   52,  221,   54,  223,

       54,   52,   52,   54,  800,  224,  225,  800,  226,   54,
      228,  227,  800,   52,   52,   52,   52,  800,   52,   52,
      229,   54,  800,   54,   52,   52,   54,   52,   52,  231,
       52,   52,   54,  800,  230,   54,   52,   52,   54,  800,
       52,   52,   52,   52,   54,   52,   52,  232,   54,  233,
       54,   52,   52,   54,  800,  235,  234,   52,   52,   54,
      800,  800,  236,  237,  800,   54,  800,  800,  239,  800,
      238,  800,  244,  800,  240,  800,  800,  243,  246,  800,
       52,   52,  800,  245,   52,   52,  800,  248,   54,   52,
       52,  800,   54,   52,   52,  247,  800,   54,   52,   52,

      800,   54,   52,   52,   52,   52,   54,   52,   52,  800,
       54,  800,   54,   52,   52,   54,   52,   52,  251,  800,
      800,   54,   52,   52,   54,   52,   52,  249,  800,  800,
       54,  250,  258,   54,  252,  800,  254,  800,   52,   52,
      800,  256,  253,  800,  260,  255,   54,   52,   52,  800,
      257,  259,   52,   52,  800,   54,   52,   52,   52,   52,
       54,   52,   52,  800,   54,  800,   54,   52,   52,   54,
       52,   52,   52,   52,  800,   54,  263,  800,   54,  800,
       54,  261,   52,   52,  800,  264,  800,  262,   52,   52,
       54,  800,   52,   52,  800,  800,   54,   52,   52,  268,

       54,  800,  267,   52,   52,   54,  266,  265,   52,   52,
      269,   54,   52,   52,   52,   52,   54,  800,   52,   52,
       54,  800,   54,   52,   52,  270,   54,   52,   52,   52,
       52,   54,  800,  271,  272,   54,  800,   54,   52,   52,
      800,  273,   52,   52,   52,   52,   54,  277,  800,  274,
       54,  800,   54,  800,  800,  275,  279,   52,   52,   52,
       52,  276,  800,  280,  278,   54,  800,   54,   52,   52,
      800,  800,  281,  282,   52,   52,   54,  800,  283,  800,
       52,   52,   54,   52,   52,   52,   52,  800,   54,   52,
       52,   54,  800,   54,   52,   52,  800,   54,   52,   52,

       52,   52,   54,  800,  800,  284,   54,  285,   54,  286,
       52,   52,  800,  800,   52,   52,  800,  289,   54,  800,
      287,  288,   54,   52,   52,  290,   52,   52,  292,  800,
      800,   54,   52,   52,   54,   52,   52,  291,  800,  293,
       54,   52,   52,   54,  295,  800,  294,   52,   52,   54,
      800,  296,   52,   52,  800,   54,   52,   52,   52,   52,
       54,   52,   52,  297,   54,  800,   54,  300,  800,   54,
      298,  302,  800,   52,   52,   52,   52,  301,   52,   52,
      299,   54,  303,   54,   52,   52,   54,  800,  305,   52,
       52,  800,   54,  800,  800,  306,  800,   54,  800,  309,

      800,  304,   52,   52,  800,   52,   52,   52,   52,  800,
       54,  800,  310,   54,  800,   54,  800,  313,   52,   52,
      800,  800,  312,  800,   52,   52,   54,  315,  311,   52,
       52,  314,   54,   52,   52,   52,   52,   54,   52,   52,
      800,   54,  800,   54,  800,  316,   54,  800,  317,  800,
      318,  800,   52,   52,   52,   52,   52,   52,  800,  320,
       54,  800,   54,  800,   54,   52,   52,  322,   52,   52,
      319,  800,  323,   54,   52,   52,   54,   52,   52,   52,
       52,  321,   54,   52,   52,   54,  800,   54,   52,   52,
      800,   54,   52,   52,  800,  324,   54,  327,  800,  328,

       54,  325,  329,  326,  330,   52,   52,  800,  800,   52,
       52,   52,   52,   54,  800,  333,  331,   54,  800,   54,
      800,  800,  334,  338,   52,   52,   52,   52,  332,   52,
       52,  800,   54,  800,   54,   52,   52,   54,  800,  336,
      335,   52,   52,   54,   52,   52,   52,   52,  800,   54,
      800,  800,   54,  800,   54,   52,   52,  337,  339,  800,
       52,   52,  800,   54,   52,   52,   52,   52,   54,  340,
      800,  342,   54,  800,   54,  343,  346,  347,   52,   52,
       52,   52,  800,  341,  800,  800,   54,  344,   54,  348,
      800,   52,   52,   52,   52,   52,   52,  800,  345,   54,

      800,   54,  800,   54,  351,  800,  350,   52,   52,   52,
       52,   52,   52,  349,  800,   54,  800,   54,  800,   54,
      352,   52,   52,  800,   52,   52,   52,   52,  800,   54,
      800,  353,   54,  354,   54,   52,   52,   52,   52,   52,
       52,  355,  800,   54,  800,   54,  800,   54,   52,   52,
      800,  358,   52,   52,  800,  800,   54,  357,  800,  356,
       54,  800,  359,   52,   52,   52,   52,   52,   52,  361,
      360,   54,  800,   54,  800,   54,   52,   52,  800,  362,
      364,   52,   52,  800,   54,   52,   52,  363,  800,   54,
       52,   52,  800,   54,   52,   52,   52,   52,   54,   52,

       52,  366,   54,  367,   54,  800,  800,   54,   52,   52,
       52,   52,  800,  365,   52,   52,   54,  800,   54,  368,
       52,   52,   54,  800,  370,  800,  371,  800,   54,  372,
       52,   52,  800,   52,   52,  800,  369,  800,   54,  800,
      373,   54,   52,   52,   52,   52,   52,   52,   52,   52,
       54,  800,   54,  800,   54,  800,   54,  800,   52,   52,
       52,   52,   52,   52,  800,  375,   54,  800,   54,  800,
       54,   52,   52,  376,  374,   52,   52,   52,   52,   54,
      377,   52,   52,   54,  800,   54,  800,   52,   52,   54,
      800,  378,   52,   52,  379,   54,   52,   52,   52,   52,

       54,  800,  800,  800,   54,  800,   54,   52,   52,  380,
      385,  383,  800,  381,  800,   54,  800,  800,  382,   52,
       52,   52,   52,  800,  384,  388,  800,   54,  800,   54,
       52,   52,   52,   52,  800,   52,   52,  389,   54,  800,
       54,  800,  387,   54,   52,   52,   52,   52,   52,   52,
       52,   52,   54,  800,   54,  800,   54,  390,   54,   52,
       52,  800,   52,   52,   52,   52,  800,   54,  800,  391,
       54,  800,   54,  800,   52,   52,  396,  392,  394,  800,
      800,  393,   54,  395,  398,  800,   52,   52,  800,  397,
       52,   52,  800,  399,   54,   52,   52,  800,   54,   52,

       52,   52,   52,   54,  800,  800,  800,   54,  800,   54,
       52,   52,  400,  401,  402,   52,   52,  800,   54,  404,
      403,   52,   52,   54,   52,   52,   52,   52,  800,   54,
       52,   52,   54,  800,   54,   52,   52,  800,   54,  406,
       52,   52,  800,   54,   52,   52,   52,   52,   54,  405,
      800,  800,   54,  800,   54,  407,   52,   52,  408,  800,
      410,   52,   52,  800,   54,  800,  800,  409,  800,   54,
       52,   52,  800,  412,  800,  413,   52,   52,   54,  800,
      411,   52,   52,  800,   54,   52,   52,   52,   52,   54,
       52,   52,  800,   54,  800,   54,   52,   52,   54,  414,

       52,   52,  416,  415,   54,   52,   52,  800,   54,   52,
       52,  800,  800,   54,   52,   52,  800,   54,  800,  418,
       52,   52,   54,   52,   52,   52,   52,  417,   54,  800,
      420,   54,  800,   54,  800,   52,   52,  419,   52,   52,
      421,  800,  422,   54,  800,  800,   54,  425,  423,  800,
      426,  800,  430,  424,  800,  427,   52,   52,  800,  431,
      800,  428,  429,  800,   54,  800,   52,   52,   52,   52,
       52,   52,  800,  432,   54,  800,   54,  800,   54,   52,
       52,  800,  433,   52,   52,   52,   52,   54,   52,   52,
      800,   54,  800,   54,   52,   52,   54,   52,   52,   52,

       52,  800,   54,  434,  437,   54,  800,   54,   52,   52,
       52,   52,  800,  435,  436,  439,   54,  438,   54,  800,
       52,   52,  440,   52,   52,   52,   52,  442,   54,  443,
      800,   54,  800,   54,   52,   52,   52,   52,   52,   52,
      800,  800,   54,  441,   54,  800,   54,  800,  444,   52,
       52,   52,   52,   52,   52,   52,   52,   54,  445,   54,
      800,   54,  446,   54,  449,  800,   52,   52,  800,  455,
      455,  447,  800,  448,   54,   52,   52,   54,   52,   52,
      451,   52,   52,   54,   52,   52,   54,  800,  800,   54,
      800,  453,   54,   52,   52,  450,  800,  452,  456,   52,

       52,   54,   52,   52,  457,   52,   52,   54,   52,   52,
       54,  800,  454,   54,  800,  800,   54,  800,  800,  458,
       52,   52,  460,   52,   52,  461,   52,   52,   54,   52,
       52,   54,  464,  800,   54,  800,  800,   54,  466,  462,
       52,   52,  800,  465,   52,   52,  800,  463,   54,   52,
       52,  800,   54,  800,   52,   52,  800,   54,   52,   52,
      800,  467,   54,  469,   52,   52,   54,   52,   52,   52,
       52,  800,   54,  800,  468,   54,  800,   54,  800,  472,
       52,   52,   52,   52,   52,   52,  470,  800,   54,  800,
       54,  471,   54,   52,   52,  800,  476,   52,   52,  800,

      473,   54,   52,   52,  800,   54,  474,  477,  800,  475,
       54,  800,  479,   52,   52,   52,   52,   52,   52,  800,
      800,   54,  800,   54,  478,   54,   52,   52,   52,   52,
       52,   52,   52,   52,   54,  800,   54,  800,   54,  800,
       54,  480,  481,   52,   52,   52,   52,  800,  482,  800,
      800,   54,  800,   54,  800,  483,  800,  484,   52,   52,
       52,   52,  486,  485,   52,   52,   54,  487,   54,   52,
       52,  800,   54,  800,   52,   52,  800,   54,  800,  488,
      800,  489,   54,  800,  800,   52,   52,  491,   52,   52,
      800,  490,  492,   54,   52,   52,   54,   52,   52,  494,

       52,   52,   54,  800,  800,   54,   52,   52,   54,  495,
      800,  493,   52,   52,   54,  800,  500,  800,  497,  800,
       54,   52,   52,   52,   52,  800,  501,  499,  496,   54,
      800,   54,   52,   52,  800,  502,  800,   52,   52,  800,
       54,  800,  498,   52,   52,   54,   52,   52,   52,   52,
      800,   54,  800,  800,   54,  800,   54,   52,   52,  800,
      503,   52,   52,  800,  800,   54,  505,  506,  800,   54,
      800,  504,   52,   52,   52,   52,   52,   52,  800,  800,
       54,  800,   54,  800,   54,  507,  508,  800,  509,   52,
       52,   52,   52,  800,   52,   52,  800,   54,  800,   54,

      800,  511,   54,  510,   52,   52,  513,   52,   52,   52,
       52,  800,   54,   52,   52,   54,  800,   54,  512,  800,
      800,   54,   52,   52,  800,  515,  800,  514,   52,   52,
       54,  800,   52,   52,  455,  455,   54,   52,   52,  517,
       54,  800,   54,  518,  800,   54,  800,   52,   52,   52,
       52,  800,  521,  800,  516,   54,  133,   54,   52,   52,
      519,  520,   52,   52,  523,  524,   54,  525,  526,  800,
       54,  800,  800,  522,   52,   52,   52,   52,  800,  531,
      800,  134,   54,  800,   54,   52,   52,  532,   52,   52,
      800,  527,  528,   54,  529,  800,   54,  530,  800,  800,

      535,   52,   52,   52,   52,  800,  534,  800,  536,   54,
      800,   54,   52,   52,  537,   52,   52,   52,   52,  800,
       54,   52,   52,   54,  800,   54,  800,  538,  800,   54,
      800,  539,   52,   52,   52,   52,   52,   52,  800,  800,
       54,  800,   54,  800,   54,  800,  541,   52,   52,  540,
      542,  800,   52,   52,  800,   54,   52,   52,  800,  544,
       54,   52,   52,  543,   54,  800,  547,  800,  545,   54,
       52,   52,   52,   52,  546,  800,   52,   52,   54,  549,
       54,   52,   52,  548,   54,   52,   52,  800,  800,   54,
       52,   52,  800,   54,  800,  550,  800,  800,   54,  551,

      800,  554,   52,   52,  552,   52,   52,   52,   52,  800,
       54,  800,  800,   54,  800,   54,   52,   52,  553,  555,
      557,   52,   52,  800,   54,   52,   52,   52,   52,   54,
       52,   52,  800,   54,  556,   54,   52,   52,   54,  558,
       52,   52,   52,   52,   54,   52,   52,  800,   54,  800,
       54,  800,  800,   54,  561,   52,   52,   52,   52,  564,
      800,  800,  562,   54,  559,   54,   52,   52,  560,  800,
      563,   52,   52,  800,   54,   52,   52,  800,  566,   54,
       52,   52,  800,   54,   52,   52,  565,  800,   54,   52,
       52,  800,   54,   52,   52,  568,  800,   54,   52,   52,

      800,   54,  800,  567,   52,   52,   54,   52,   52,   52,
       52,  800,   54,  570,  569,   54,  800,   54,  572,   52,
       52,  573,  800,  571,   52,   52,  800,   54,   52,   52,
       52,   52,   54,   52,   52,  800,   54,  800,   54,  800,
      800,   54,   52,   52,  800,  800,  574,  576,   52,   52,
       54,  800,  575,  800,  578,  800,   54,  800,  577,   52,
       52,  579,   52,   52,  580,   52,   52,   54,  800,  800,
       54,   52,   52,   54,   52,   52,  581,   52,   52,   54,
       52,   52,   54,  800,  582,   54,   52,   52,   54,   52,
       52,   52,   52,  800,   54,   52,   52,   54,  800,   54,

       52,   52,  584,   54,  800,  583,  800,  800,   54,   52,
       52,   52,   52,  585,  586,  590,  592,   54,  800,   54,
      587,   52,   52,  591,   52,   52,   52,   52,  800,   54,
      595,  800,   54,  800,   54,  800,   52,   52,   52,   52,
      593,   52,   52,  594,   54,  800,   54,  800,  800,   54,
       52,   52,  800,  597,  800,  601,  600,  800,   54,  599,
      800,  596,   52,   52,   52,   52,   52,   52,   52,   52,
       54,  800,   54,  800,   54,  800,   54,   52,   52,  602,
       52,   52,  800,  604,  605,   54,  603,  800,   54,   52,
       52,   52,   52,   52,   52,   52,   52,   54,  800,   54,

      608,   54,  800,   54,  606,   52,   52,  607,   52,   52,
       52,   52,  800,   54,   52,   52,   54,  800,   54,  800,
      800,  800,   54,  610,   52,   52,  800,  611,  609,  800,
       52,   52,   54,   52,   52,   52,   52,  612,   54,  800,
      800,   54,  800,   54,  615,  616,  614,  613,  617,   52,
       52,   52,   52,   52,   52,   52,   52,   54,  800,   54,
      618,   54,  800,   54,  619,  623,  800,   52,   52,   52,
       52,  620,   52,   52,  621,   54,  800,   54,   52,   52,
       54,   52,   52,  800,   52,   52,   54,   52,   52,   54,
       52,   52,   54,  624,  800,   54,  625,  800,   54,  622,

       52,   52,   52,   52,  626,   52,   52,  800,   54,  800,
       54,  800,  628,   54,  800,  629,  630,   52,   52,  800,
      627,  631,  800,  632,  800,   54,   52,   52,   52,   52,
      633,   52,   52,  800,   54,  800,   54,   52,   52,   54,
       52,   52,  634,   52,   52,   54,  635,  800,   54,   52,
       52,   54,   52,   52,  800,  636,  800,   54,   52,   52,
       54,   52,   52,  800,  637,  638,   54,   52,   52,   54,
       52,   52,   52,   52,  800,   54,   52,   52,   54,  800,
       54,   52,   52,  639,   54,   52,   52,   52,   52,   54,
      800,  640,  800,   54,  800,   54,  800,  644,  800,  800,

      641,  643,   52,   52,   52,   52,  646,   52,   52,  800,
       54,  642,   54,  800,  645,   54,  650,  652,   52,   52,
       52,   52,   52,   52,  649,  800,   54,  800,   54,  800,
       54,  651,  653,   52,   52,   52,   52,   52,   52,   52,
       52,   54,  800,   54,  654,   54,  800,   54,  800,   52,
       52,   52,   52,  800,  656,   52,   52,   54,  800,   54,
      800,   52,   52,   54,   52,   52,   52,   52,  660,   54,
      657,  800,   54,  800,   54,   52,   52,  659,  661,   52,
       52,  658,  800,   54,   52,   52,  800,   54,   52,   52,
       52,   52,   54,  664,  800,  665,   54,  662,   54,  800,

       52,   52,   52,   52,  800,  800,  800,  663,   54,  800,
       54,  800,  667,  666,   52,   52,   52,   52,  800,  669,
       52,   52,   54,  800,   54,   52,   52,  800,   54,  800,
      668,   52,   52,   54,  670,   52,   52,   52,   52,   54,
      800,   52,   52,   54,  671,   54,   52,   52,  800,   54,
      674,  675,  672,  800,   54,  800,   52,   52,  800,  676,
       52,   52,  800,  673,   54,   52,   52,  800,   54,  800,
       52,   52,  800,   54,  800,  677,  679,  678,   54,   52,
       52,   52,   52,  681,  680,   52,   52,   54,  800,   54,
       52,   52,  800,   54,   52,   52,   52,   52,   54,  682,

      800,  800,   54,  800,   54,   52,   52,  800,  683,   52,
       52,  800,  684,   54,   52,   52,  800,   54,   52,   52,
       52,   52,   54,  800,  686,  800,   54,  685,   54,   52,
       52,  800,  687,   52,   52,  689,  800,   54,  800,   52,
       52,   54,  800,  690,   52,   52,  688,   54,   52,   52,
       52,   52,   54,   52,   52,  800,   54,  800,   54,   52,
       52,   54,   52,   52,   52,   52,  800,   54,   52,   52,
       54,  800,   54,   52,   52,  800,   54,   52,   52,  800,
      800,   54,  800,  800,  696,   54,  800,  691,  800,  800,
      693,  692,   52,   52,   52,   52,  697,   52,   52,  800,

       54,  800,   54,  800,  698,   54,   52,   52,   52,   52,
       52,   52,  699,  800,   54,  800,   54,  700,   54,  800,
      702,   52,   52,   52,   52,  800,  703,  800,  800,   54,
      800,   54,   52,   52,  800,  704,  800,  706,   52,   52,
       54,  705,   52,   52,   52,   52,   54,  800,   52,   52,
       54,  800,   54,   52,   52,  707,   54,  708,   52,   52,
      800,   54,   52,   52,   52,   52,   54,  709,  800,  800,
       54,  710,   54,   52,   52,  800,  711,   52,   52,   52,
       52,   54,  713,  800,  714,   54,  715,   54,   52,   52,
      712,  800,  716,   52,   52,  800,   54,   52,   52,  800,

      800,   54,  717,   52,   52,   54,  800,  718,   52,   52,
      800,   54,   52,   52,  800,  800,   54,   52,   52,  719,
       54,  800,  720,  800,  800,   54,   52,   52,   52,   52,
      800,  721,   52,   52,   54,  800,   54,  722,   52,   52,
       54,  723,  800,  724,   52,   52,   54,  800,   52,   52,
      725,  800,   54,   52,   52,  726,   54,   52,   52,   52,
       52,   54,   52,   52,  728,   54,  800,   54,   52,   52,
       54,  800,  729,  800,  727,  800,   54,   52,   52,   52,
       52,  800,  731,  800,  730,   54,  800,   54,   52,   52,
       52,   52,   52,   52,  800,  800,   54,  800,   54,  800,

       54,   52,   52,   52,   52,  800,  800,  732,  735,   54,
      800,   54,  800,  738,  736,   52,   52,  800,   52,   52,
       52,   52,  739,   54,  800,  737,   54,  800,   54,   52,
       52,   52,   52,   52,   52,   52,   52,   54,  741,   54,
      800,   54,  800,   54,  800,  742,  743,   52,   52,   52,
       52,   52,   52,   52,   52,   54,  800,   54,  800,   54,
      800,   54,  800,  745,   52,   52,   52,   52,  744,   52,
       52,  800,   54,  800,   54,   52,   52,   54,   52,   52,
      800,  747,  748,   54,  746,  800,   54,  749,   52,   52,
      800,   52,   52,   52,   52,  750,   54,  800,  751,   54,

      800,   54,   52,   52,  800,   52,   52,   52,   52,  800,
       54,  800,  752,   54,  800,   54,   52,   52,  753,   52,
       52,  800,  754,  800,   54,   52,   52,   54,   52,   52,
      800,  756,  755,   54,  759,  800,   54,  757,  800,   52,
       52,   52,   52,   52,   52,  800,  758,   54,  800,   54,
      800,   54,   52,   52,   52,   52,   52,   52,   52,   52,
       54,  800,   54,  800,   54,  800,   54,   52,   52,  800,
      800,   52,   52,   52,   52,   54,  800,  762,  760,   54,
      800,   54,   52,   52,  800,  800,   52,   52,   52,   52,
       54,  800,  764,  800,   54,  800,   54,   52,   52,   52,

       52,  800,   52,   52,  800,   54,  800,   54,  800,  766,
       54,   52,   52,  800,  765,   52,   52,   52,   52,   54,
       52,   52,  800,   54,  800,   54,  769,  800,   54,  767,
      768,   52,   52,  800,   52,   52,   52,   52,  800,   54,
      800,  770,   54,  800,   54,   52,   52,   52,   52,  800,
      771,  772,  800,   54,  800,   54,   52,   52,   52,   52,
       52,   52,   52,   52,   54,  773,   54,  800,   54,  800,
       54,  800,   52,   52,  774,   52,   52,  800,  800,  775,
       54,   52,   52,   54,  800,  776,   52,   52,  800,   54,
      777,   52,   52,  800,   54,   52,   52,   52,   52,   54,

       52,   52,  800,   54,  800,   54,  800,  800,   54,   52,
       52,   52,   52,  800,  779,  781,  800,   54,  780,   54,
       52,   52,   52,   52,   52,   52,   52,   52,   54,  782,
       54,  800,   54,  800,   54,  800,   52,   52,   52,   52,
       52,   52,  800,  783,   54,  800,   54,  800,   54,   52,
       52,   52,   52,  800,   52,   52,  800,   54,  800,   54,
      800,  784,   54,  800,  785,   52,   52,  800,   52,   52,
       52,   52,  787,   54,  800,  788,   54,  800,   54,  800,
      789,   52,   52,  790,   52,   52,   52,   52,  800,   54,
       52,   52,   54,  800,   54,   52,   52,  800,   54,  791,

      800,  800,  800,   54,  800,  800,  800,  800,  800,  800,
      800,  793,  800,  800,  800,  800,  795,  800,  800,  800,
      797,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  799,   48,   48,
       48,   48,   53,   53,   66,   66,   66,   66,  130,  130,
      800,  130,  132,  132,    5,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,

      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800
    } ;

static yyconst short int yy_chk[3913] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    4,    7,
        7,   13,   13,   14,   14,   16,   16,   19,   19,   17,
       17,   22,   22,   16,  154,   19,  154,   17,  796,   22,
       23,   23,   51,   51,   26,   26,   28,   28,   23,   20,
       20,  794,   26,  792,   28,   53,   53,   20,   68,   68,

      786,   21,   21,   53,  778,   22,  763,   16,  740,   21,
      734,    3,    4,    8,    8,   17,   18,   18,   26,  695,
       28,    8,  694,   23,   18,    8,    8,    8,    8,    8,
        8,  648,   28,   26,  647,   20,    8,    8,    8,    8,
        8,   20,   24,   24,   21,  598,   18,   21,   25,   25,
       24,  655,  655,   18,  589,  588,   25,  533,  524,   18,
       27,   27,   18,   29,   29,   24,   31,   31,   27,   30,
       30,   29,   32,   32,   31,   33,   33,   30,  523,   29,
       32,   34,   34,   33,  459,   24,  386,   35,   35,   34,
      307,  242,   25,  241,   27,   35,  220,   27,   36,   36,

      219,   30,   37,   37,   31,  134,   36,  153,   27,   30,
       37,   30,   32,   33,   32,   34,  153,   38,   38,   31,
      133,   33,   39,   39,   32,   38,  131,   40,   40,   35,
       39,  130,   36,   35,  153,   40,   41,   41,   42,   42,
       37,   66,   44,   44,   41,   47,   42,   15,   43,   43,
       44,   52,   52,   12,   55,   55,   43,  701,  701,   52,
       38,   40,   55,   45,   45,   41,   39,   42,   39,   11,
       41,   45,   42,   52,    9,   46,   46,    5,   43,  701,
        0,   42,   43,   46,   44,   41,   55,   42,   56,   56,
        0,   57,   57,   45,   43,    0,   56,    0,   52,   57,

        0,   58,   58,   59,   59,   46,   60,   60,    0,   58,
        0,   59,    0,   46,   60,   61,   61,    0,   56,   62,
       62,    0,    0,   61,   63,   63,    0,   62,   64,   64,
        0,   56,   63,    0,   57,   58,   64,    0,   65,   65,
       70,   70,    0,   74,   74,   59,   65,    0,    0,   62,
       70,   74,   60,   59,    0,   60,   75,   75,   63,   61,
        0,    0,   64,    0,   75,   62,   76,   76,   70,   77,
       77,    0,   65,    0,   76,    0,   65,   77,   78,   78,
        0,   74,    0,    0,   79,   79,   78,   80,   80,    0,
       75,   65,   79,   81,   81,   80,   82,   82,    0,   83,

       83,   81,   84,   84,   82,    0,   76,   83,   85,   85,
       84,    0,   77,   86,   86,    0,   85,   80,   79,    0,
       78,   86,   88,   88,    0,   87,   87,   89,   89,   83,
       88,   81,    0,   87,    0,   89,   84,   90,   90,   87,
        0,   85,   82,    0,    0,   90,   91,   91,   92,   92,
       85,   87,   93,   93,   91,    0,   92,   94,   94,    0,
       93,    0,   95,   95,    0,   94,    0,   87,   88,    0,
       95,    0,    0,   87,   89,   96,   96,   97,   97,   90,
       91,    0,   93,   96,    0,   97,   98,   98,   99,   99,
        0,   92,   95,    0,   98,    0,   99,  100,  100,  101,

      101,   96,    0,   94,    0,  100,    0,  101,  102,  102,
      103,  103,  104,  104,    0,    0,  102,    0,  103,    0,
      104,   99,   98,  105,  105,   97,  107,  107,  101,  106,
      106,  105,  108,  108,  107,  109,  109,  106,  110,  110,
      108,  111,  111,  109,    0,  100,  110,    0,  102,  111,
      112,  112,  113,  113,  114,  114,  104,    0,  112,  103,
      113,    0,  114,  115,  115,  116,  116,  117,  117,  105,
      106,  115,  106,  116,  107,  117,  118,  118,    0,  112,
      108,  109,    0,  111,  118,    0,  113,    0,  111,    0,
        0,  110,  119,  119,  120,  120,  112,  117,    0,  117,

      119,    0,  120,    0,  121,  121,  122,  122,    0,  115,
        0,  116,  121,    0,  122,    0,  118,  123,  123,  124,
      124,  125,  125,  119,  120,  123,    0,  124,    0,  125,
        0,  126,  126,  127,  127,  128,  128,    0,  122,  126,
        0,  127,    0,  128,    0,  121,  129,  129,  123,  135,
      135,  125,    0,    0,  129,  136,  136,  135,    0,  125,
      124,    0,    0,  136,  138,  138,  137,  137,    0,  126,
        0,  124,  138,  127,  137,    0,  139,  139,  140,  140,
      141,  141,    0,  128,  139,    0,  140,  136,  141,    0,
      142,  142,  143,  143,  129,  144,  144,  135,  142,  137,

      143,  145,  145,  144,    0,  138,  138,    0,  139,  145,
      141,  140,    0,  146,  146,  147,  147,    0,  148,  148,
      142,  146,    0,  147,  149,  149,  148,  150,  150,  144,
      151,  151,  149,    0,  143,  150,  155,  155,  151,    0,
      158,  158,  156,  156,  155,  159,  159,  145,  158,  145,
      156,  157,  157,  159,    0,  147,  146,  160,  160,  157,
        0,    0,  147,  148,    0,  160,    0,    0,  150,    0,
      149,    0,  156,    0,  151,    0,    0,  155,  158,    0,
      161,  161,    0,  157,  162,  162,    0,  160,  161,  163,
      163,    0,  162,  164,  164,  159,    0,  163,  165,  165,

        0,  164,  166,  166,  168,  168,  165,  167,  167,    0,
      166,    0,  168,  169,  169,  167,  170,  170,  163,    0,
        0,  169,  171,  171,  170,  172,  172,  161,    0,    0,
      171,  162,  170,  172,  164,    0,  166,    0,  173,  173,
        0,  168,  165,    0,  172,  167,  173,  174,  174,    0,
      169,  171,  175,  175,    0,  174,  176,  176,  177,  177,
      175,  178,  178,    0,  176,    0,  177,  179,  179,  178,
      180,  180,  181,  181,    0,  179,  174,    0,  180,    0,
      181,  173,  182,  182,    0,  175,    0,  173,  183,  183,
      182,    0,  184,  184,    0,    0,  183,  185,  185,  179,

      184,    0,  178,  186,  186,  185,  177,  176,  187,  187,
      181,  186,  188,  188,  189,  189,  187,    0,  190,  190,
      188,    0,  189,  191,  191,  182,  190,  192,  192,  193,
      193,  191,    0,  184,  185,  192,    0,  193,  194,  194,
        0,  186,  195,  195,  196,  196,  194,  190,    0,  187,
      195,    0,  196,    0,    0,  188,  192,  197,  197,  198,
      198,  189,    0,  193,  191,  197,    0,  198,  199,  199,
        0,    0,  194,  195,  200,  200,  199,    0,  196,    0,
      201,  201,  200,  202,  202,  203,  203,    0,  201,  204,
      204,  202,    0,  203,  205,  205,    0,  204,  206,  206,

      207,  207,  205,    0,    0,  197,  206,  198,  207,  199,
      208,  208,    0,    0,  209,  209,    0,  202,  208,    0,
      200,  201,  209,  210,  210,  203,  211,  211,  205,    0,
        0,  210,  212,  212,  211,  213,  213,  204,    0,  206,
      212,  214,  214,  213,  208,    0,  207,  215,  215,  214,
        0,  209,  216,  216,    0,  215,  217,  217,  218,  218,
      216,  221,  221,  210,  217,    0,  218,  213,    0,  221,
      211,  214,    0,  222,  222,  223,  223,  213,  224,  224,
      212,  222,  215,  223,  225,  225,  224,    0,  217,  226,
      226,    0,  225,    0,    0,  218,    0,  226,    0,  221,

        0,  216,  227,  227,    0,  228,  228,  229,  229,    0,
      227,    0,  222,  228,    0,  229,    0,  225,  230,  230,
        0,    0,  224,    0,  231,  231,  230,  226,  223,  232,
      232,  225,  231,  233,  233,  234,  234,  232,  235,  235,
        0,  233,    0,  234,    0,  228,  235,    0,  229,    0,
      230,    0,  236,  236,  237,  237,  238,  238,    0,  232,
      236,    0,  237,    0,  238,  239,  239,  234,  240,  240,
      231,    0,  235,  239,  243,  243,  240,  244,  244,  245,
      245,  233,  243,  246,  246,  244,    0,  245,  247,  247,
        0,  246,  248,  248,    0,  236,  247,  238,    0,  239,

      248,  236,  240,  237,  243,  249,  249,    0,    0,  250,
      250,  251,  251,  249,    0,  246,  244,  250,    0,  251,
        0,    0,  247,  251,  252,  252,  253,  253,  245,  254,
      254,    0,  252,    0,  253,  255,  255,  254,    0,  249,
      248,  256,  256,  255,  257,  257,  258,  258,    0,  256,
        0,    0,  257,    0,  258,  260,  260,  250,  252,    0,
      259,  259,    0,  260,  261,  261,  262,  262,  259,  254,
        0,  256,  261,    0,  262,  256,  259,  259,  263,  263,
      264,  264,    0,  255,    0,    0,  263,  257,  264,  260,
        0,  265,  265,  266,  266,  267,  267,    0,  258,  265,

        0,  266,    0,  267,  263,    0,  262,  268,  268,  269,
      269,  270,  270,  261,    0,  268,    0,  269,    0,  270,
      265,  271,  271,    0,  272,  272,  273,  273,    0,  271,
        0,  266,  272,  267,  273,  274,  274,  275,  275,  276,
      276,  268,    0,  274,    0,  275,    0,  276,  277,  277,
        0,  271,  278,  278,    0,    0,  277,  270,    0,  269,
      278,    0,  272,  279,  279,  280,  280,  281,  281,  274,
      273,  279,    0,  280,    0,  281,  282,  282,    0,  275,
      277,  283,  283,    0,  282,  284,  284,  276,    0,  283,
      285,  285,    0,  284,  286,  286,  287,  287,  285,  288,

      288,  280,  286,  281,  287,    0,    0,  288,  289,  289,
      290,  290,    0,  279,  291,  291,  289,    0,  290,  282,
      292,  292,  291,    0,  286,    0,  287,    0,  292,  288,
      293,  293,    0,  294,  294,    0,  285,    0,  293,    0,
      289,  294,  295,  295,  296,  296,  297,  297,  298,  298,
      295,    0,  296,    0,  297,    0,  298,    0,  299,  299,
      300,  300,  301,  301,    0,  294,  299,    0,  300,    0,
      301,  302,  302,  296,  293,  303,  303,  304,  304,  302,
      297,  306,  306,  303,    0,  304,    0,  305,  305,  306,
        0,  298,  309,  309,  300,  305,  310,  310,  311,  311,

      309,    0,    0,    0,  310,    0,  311,  312,  312,  301,
      306,  304,    0,  302,    0,  312,    0,    0,  303,  313,
      313,  314,  314,    0,  305,  310,    0,  313,    0,  314,
      315,  315,  316,  316,    0,  318,  318,  312,  315,    0,
      316,    0,  309,  318,  317,  317,  319,  319,  320,  320,
      321,  321,  317,    0,  319,    0,  320,  313,  321,  322,
      322,    0,  323,  323,  324,  324,    0,  322,    0,  314,
      323,    0,  324,    0,  325,  325,  319,  315,  317,    0,
        0,  316,  325,  318,  321,    0,  326,  326,    0,  320,
      327,  327,    0,  322,  326,  328,  328,    0,  327,  329,

      329,  330,  330,  328,    0,    0,    0,  329,    0,  330,
      331,  331,  323,  324,  325,  332,  332,    0,  331,  327,
      326,  334,  334,  332,  333,  333,  335,  335,    0,  334,
      336,  336,  333,    0,  335,  337,  337,    0,  336,  331,
      338,  338,    0,  337,  339,  339,  340,  340,  338,  330,
        0,    0,  339,    0,  340,  332,  341,  341,  333,    0,
      335,  342,  342,    0,  341,    0,    0,  334,    0,  342,
      343,  343,    0,  339,    0,  340,  344,  344,  343,    0,
      338,  345,  345,    0,  344,  346,  346,  347,  347,  345,
      348,  348,    0,  346,    0,  347,  349,  349,  348,  341,

      350,  350,  343,  342,  349,  351,  351,    0,  350,  352,
      352,    0,    0,  351,  353,  353,    0,  352,    0,  345,
      354,  354,  353,  355,  355,  356,  356,  344,  354,    0,
      347,  355,    0,  356,    0,  357,  357,  346,  358,  358,
      348,    0,  349,  357,    0,    0,  358,  352,  350,    0,
      352,    0,  355,  351,    0,  352,  359,  359,    0,  356,
        0,  353,  354,    0,  359,    0,  360,  360,  361,  361,
      362,  362,    0,  357,  360,    0,  361,    0,  362,  363,
      363,    0,  358,  364,  364,  365,  365,  363,  366,  366,
        0,  364,    0,  365,  367,  367,  366,  368,  368,  369,

      369,    0,  367,  359,  362,  368,    0,  369,  370,  370,
      371,  371,    0,  360,  361,  365,  370,  364,  371,    0,
      372,  372,  366,  373,  373,  374,  374,  368,  372,  369,
        0,  373,    0,  374,  376,  376,  375,  375,  377,  377,
        0,    0,  376,  367,  375,    0,  377,    0,  370,  378,
      378,  379,  379,  380,  380,  381,  381,  378,  371,  379,
        0,  380,  372,  381,  376,    0,  382,  382,    0,  383,
      383,  373,    0,  375,  382,  384,  384,  383,  385,  385,
      379,  388,  388,  384,  387,  387,  385,    0,    0,  388,
        0,  381,  387,  389,  389,  378,    0,  380,  383,  390,

      390,  389,  391,  391,  384,  392,  392,  390,  393,  393,
      391,    0,  382,  392,    0,    0,  393,    0,    0,  385,
      394,  394,  387,  395,  395,  388,  396,  396,  394,  397,
      397,  395,  391,    0,  396,    0,    0,  397,  393,  389,
      398,  398,    0,  392,  399,  399,    0,  390,  398,  400,
      400,    0,  399,    0,  401,  401,    0,  400,  402,  402,
        0,  395,  401,  397,  404,  404,  402,  403,  403,  405,
      405,    0,  404,    0,  396,  403,    0,  405,    0,  400,
      406,  406,  407,  407,  408,  408,  398,    0,  406,    0,
      407,  399,  408,  409,  409,    0,  404,  410,  410,    0,

      401,  409,  411,  411,    0,  410,  402,  405,    0,  403,
      411,    0,  407,  412,  412,  413,  413,  414,  414,    0,
        0,  412,    0,  413,  406,  414,  415,  415,  416,  416,
      417,  417,  418,  418,  415,    0,  416,    0,  417,    0,
      418,  409,  411,  419,  419,  420,  420,    0,  412,    0,
        0,  419,    0,  420,    0,  412,    0,  413,  421,  421,
      422,  422,  415,  414,  423,  423,  421,  416,  422,  424,
      424,    0,  423,    0,  425,  425,    0,  424,    0,  418,
        0,  419,  425,    0,    0,  426,  426,  421,  427,  427,
        0,  420,  422,  426,  428,  428,  427,  429,  429,  424,

      430,  430,  428,    0,    0,  429,  431,  431,  430,  425,
        0,  423,  432,  432,  431,    0,  430,    0,  427,    0,
      432,  433,  433,  434,  434,    0,  430,  429,  426,  433,
        0,  434,  435,  435,    0,  430,    0,  436,  436,    0,
      435,    0,  428,  437,  437,  436,  438,  438,  439,  439,
        0,  437,    0,    0,  438,    0,  439,  440,  440,    0,
      432,  441,  441,    0,    0,  440,  435,  436,    0,  441,
        0,  434,  442,  442,  443,  443,  444,  444,    0,    0,
      442,    0,  443,    0,  444,  437,  438,    0,  439,  445,
      445,  446,  446,    0,  447,  447,    0,  445,    0,  446,

        0,  441,  447,  440,  448,  448,  443,  449,  449,  450,
      450,    0,  448,  451,  451,  449,    0,  450,  442,    0,
        0,  451,  452,  452,    0,  446,    0,  445,  453,  453,
      452,    0,  454,  454,  455,  455,  453,  456,  456,  450,
      454,    0,  455,  451,    0,  456,    0,  457,  457,  458,
      458,    0,  452,    0,  449,  457,  455,  458,  460,  460,
      451,  451,  461,  461,  455,  455,  460,  456,  456,    0,
      461,    0,    0,  454,  462,  462,  463,  463,    0,  458,
        0,  455,  462,    0,  463,  464,  464,  458,  465,  465,
        0,  457,  457,  464,  457,    0,  465,  457,    0,    0,

      461,  466,  466,  467,  467,    0,  460,    0,  462,  466,
        0,  467,  468,  468,  463,  469,  469,  470,  470,    0,
      468,  471,  471,  469,    0,  470,    0,  464,    0,  471,
        0,  465,  472,  472,  473,  473,  474,  474,    0,    0,
      472,    0,  473,    0,  474,    0,  467,  475,  475,  466,
      468,    0,  476,  476,    0,  475,  477,  477,    0,  470,
      476,  478,  478,  469,  477,    0,  473,    0,  471,  478,
      479,  479,  480,  480,  472,    0,  481,  481,  479,  475,
      480,  482,  482,  474,  481,  483,  483,    0,    0,  482,
      484,  484,    0,  483,    0,  476,    0,    0,  484,  477,

        0,  480,  485,  485,  478,  486,  486,  487,  487,    0,
      485,    0,    0,  486,    0,  487,  488,  488,  479,  482,
      484,  489,  489,    0,  488,  490,  490,  491,  491,  489,
      493,  493,    0,  490,  483,  491,  492,  492,  493,  486,
      494,  494,  495,  495,  492,  496,  496,    0,  494,    0,
      495,    0,    0,  496,  490,  497,  497,  498,  498,  493,
        0,    0,  491,  497,  488,  498,  499,  499,  489,    0,
      492,  500,  500,    0,  499,  501,  501,    0,  496,  500,
      502,  502,    0,  501,  503,  503,  494,    0,  502,  504,
      504,    0,  503,  505,  505,  498,    0,  504,  506,  506,

        0,  505,    0,  497,  507,  507,  506,  508,  508,  509,
      509,    0,  507,  500,  499,  508,    0,  509,  502,  510,
      510,  503,    0,  501,  511,  511,    0,  510,  512,  512,
      513,  513,  511,  514,  514,    0,  512,    0,  513,    0,
        0,  514,  515,  515,    0,    0,  506,  508,  516,  516,
      515,    0,  507,    0,  511,    0,  516,    0,  509,  517,
      517,  512,  518,  518,  513,  519,  519,  517,    0,    0,
      518,  520,  520,  519,  521,  521,  514,  522,  522,  520,
      525,  525,  521,    0,  515,  522,  527,  527,  525,  526,
      526,  528,  528,    0,  527,  529,  529,  526,    0,  528,

      530,  530,  518,  529,    0,  517,    0,    0,  530,  531,
      531,  532,  532,  519,  520,  525,  527,  531,    0,  532,
      521,  534,  534,  526,  535,  535,  536,  536,    0,  534,
      530,    0,  535,    0,  536,    0,  537,  537,  538,  538,
      528,  539,  539,  529,  537,    0,  538,    0,    0,  539,
      540,  540,    0,  532,    0,  536,  535,    0,  540,  534,
        0,  531,  541,  541,  542,  542,  543,  543,  544,  544,
      541,    0,  542,    0,  543,    0,  544,  545,  545,  537,
      546,  546,    0,  539,  540,  545,  538,    0,  546,  547,
      547,  548,  548,  549,  549,  550,  550,  547,    0,  548,

      543,  549,    0,  550,  541,  551,  551,  542,  552,  552,
      553,  553,    0,  551,  554,  554,  552,    0,  553,    0,
        0,    0,  554,  547,  555,  555,    0,  549,  546,    0,
      556,  556,  555,  557,  557,  558,  558,  550,  556,    0,
        0,  557,    0,  558,  553,  554,  552,  551,  554,  559,
      559,  560,  560,  561,  561,  562,  562,  559,    0,  560,
      554,  561,    0,  562,  555,  561,    0,  563,  563,  564,
      564,  556,  565,  565,  557,  563,    0,  564,  566,  566,
      565,  567,  567,    0,  568,  568,  566,  569,  569,  567,
      570,  570,  568,  562,    0,  569,  563,    0,  570,  560,

      571,  571,  572,  572,  564,  573,  573,    0,  571,    0,
      572,    0,  566,  573,    0,  567,  568,  574,  574,    0,
      565,  569,    0,  570,    0,  574,  575,  575,  576,  576,
      571,  577,  577,    0,  575,    0,  576,  578,  578,  577,
      579,  579,  572,  580,  580,  578,  573,    0,  579,  581,
      581,  580,  582,  582,    0,  574,    0,  581,  583,  583,
      582,  584,  584,    0,  575,  577,  583,  585,  585,  584,
      586,  586,  587,  587,    0,  585,  590,  590,  586,    0,
      587,  591,  591,  578,  590,  592,  592,  593,  593,  591,
        0,  581,    0,  592,    0,  593,    0,  585,    0,    0,

      582,  584,  594,  594,  595,  595,  587,  596,  596,    0,
      594,  583,  595,    0,  586,  596,  591,  593,  597,  597,
      599,  599,  600,  600,  590,    0,  597,    0,  599,    0,
      600,  592,  594,  601,  601,  602,  602,  603,  603,  604,
      604,  601,    0,  602,  595,  603,    0,  604,    0,  605,
      605,  606,  606,    0,  599,  607,  607,  605,    0,  606,
        0,  608,  608,  607,  609,  609,  610,  610,  604,  608,
      600,    0,  609,    0,  610,  611,  611,  602,  605,  612,
      612,  601,    0,  611,  613,  613,    0,  612,  614,  614,
      615,  615,  613,  609,    0,  610,  614,  607,  615,    0,

      616,  616,  617,  617,    0,    0,    0,  608,  616,    0,
      617,    0,  612,  610,  618,  618,  619,  619,    0,  615,
      620,  620,  618,    0,  619,  621,  621,    0,  620,    0,
      614,  622,  622,  621,  616,  623,  623,  624,  624,  622,
        0,  625,  625,  623,  617,  624,  626,  626,    0,  625,
      619,  620,  617,    0,  626,    0,  627,  627,    0,  621,
      628,  628,    0,  618,  627,  629,  629,    0,  628,    0,
      630,  630,    0,  629,    0,  623,  625,  624,  630,  631,
      631,  633,  633,  627,  626,  632,  632,  631,    0,  633,
      634,  634,    0,  632,  635,  635,  636,  636,  634,  630,

        0,    0,  635,    0,  636,  637,  637,    0,  631,  638,
      638,    0,  632,  637,  639,  639,    0,  638,  640,  640,
      641,  641,  639,    0,  634,    0,  640,  633,  641,  642,
      642,    0,  635,  643,  643,  637,    0,  642,    0,  644,
      644,  643,    0,  639,  645,  645,  636,  644,  646,  646,
      649,  649,  645,  650,  650,    0,  646,    0,  649,  651,
      651,  650,  652,  652,  653,  653,    0,  651,  654,  654,
      652,    0,  653,  656,  656,    0,  654,  657,  657,    0,
        0,  656,    0,    0,  649,  657,    0,  644,    0,    0,
      646,  645,  658,  658,  659,  659,  650,  660,  660,    0,

      658,    0,  659,    0,  652,  660,  661,  661,  662,  662,
      663,  663,  653,    0,  661,    0,  662,  654,  663,    0,
      656,  664,  664,  665,  665,    0,  657,    0,    0,  664,
        0,  665,  666,  666,    0,  658,    0,  661,  667,  667,
      666,  660,  668,  668,  669,  669,  667,    0,  670,  670,
      668,    0,  669,  671,  671,  662,  670,  663,  672,  672,
        0,  671,  673,  673,  674,  674,  672,  664,    0,    0,
      673,  665,  674,  675,  675,    0,  667,  676,  676,  677,
      677,  675,  669,    0,  670,  676,  671,  677,  678,  678,
      668,    0,  672,  679,  679,    0,  678,  680,  680,    0,

        0,  679,  673,  681,  681,  680,    0,  675,  682,  682,
        0,  681,  683,  683,    0,    0,  682,  684,  684,  677,
      683,    0,  678,    0,    0,  684,  685,  685,  686,  686,
        0,  679,  687,  687,  685,    0,  686,  680,  688,  688,
      687,  681,    0,  682,  689,  689,  688,    0,  690,  690,
      683,    0,  689,  691,  691,  684,  690,  692,  692,  693,
      693,  691,  696,  696,  687,  692,    0,  693,  697,  697,
      696,    0,  688,    0,  685,    0,  697,  698,  698,  699,
      699,    0,  690,    0,  689,  698,    0,  699,  700,  700,
      702,  702,  703,  703,    0,    0,  700,    0,  702,    0,

      703,  704,  704,  705,  705,    0,    0,  693,  696,  704,
        0,  705,    0,  699,  697,  706,  706,    0,  707,  707,
      708,  708,  700,  706,    0,  698,  707,    0,  708,  709,
      709,  710,  710,  711,  711,  712,  712,  709,  703,  710,
        0,  711,    0,  712,    0,  704,  705,  713,  713,  714,
      714,  715,  715,  716,  716,  713,    0,  714,    0,  715,
        0,  716,    0,  709,  717,  717,  718,  718,  706,  719,
      719,    0,  717,    0,  718,  720,  720,  719,  721,  721,
        0,  711,  713,  720,  710,    0,  721,  714,  722,  722,
        0,  723,  723,  724,  724,  716,  722,    0,  717,  723,

        0,  724,  725,  725,    0,  726,  726,  727,  727,    0,
      725,    0,  718,  726,    0,  727,  728,  728,  721,  729,
      729,    0,  722,    0,  728,  730,  730,  729,  731,  731,
        0,  724,  723,  730,  727,    0,  731,  725,    0,  732,
      732,  735,  735,  736,  736,    0,  726,  732,    0,  735,
        0,  736,  737,  737,  738,  738,  739,  739,  741,  741,
      737,    0,  738,    0,  739,    0,  741,  742,  742,    0,
        0,  743,  743,  744,  744,  742,    0,  736,  731,  743,
        0,  744,  745,  745,    0,    0,  746,  746,  747,  747,
      745,    0,  741,    0,  746,    0,  747,  748,  748,  749,

      749,    0,  750,  750,    0,  748,    0,  749,    0,  743,
      750,  751,  751,    0,  742,  752,  752,  753,  753,  751,
      754,  754,    0,  752,    0,  753,  747,    0,  754,  745,
      746,  755,  755,    0,  756,  756,  757,  757,    0,  755,
        0,  749,  756,    0,  757,  758,  758,  759,  759,    0,
      750,  753,    0,  758,    0,  759,  760,  760,  762,  762,
      764,  764,  765,  765,  760,  755,  762,    0,  764,    0,
      765,    0,  766,  766,  756,  767,  767,    0,    0,  758,
      766,  768,  768,  767,    0,  759,  769,  769,    0,  768,
      760,  770,  770,    0,  769,  771,  771,  772,  772,  770,

      773,  773,    0,  771,    0,  772,    0,    0,  773,  774,
      774,  775,  775,    0,  766,  768,    0,  774,  767,  775,
      776,  776,  777,  777,  779,  779,  780,  780,  776,  769,
      777,    0,  779,    0,  780,    0,  781,  781,  782,  782,
      783,  783,    0,  774,  781,    0,  782,    0,  783,  784,
      784,  785,  785,    0,  787,  787,    0,  784,    0,  785,
        0,  776,  787,    0,  777,  788,  788,    0,  789,  789,
      790,  790,  779,  788,    0,  780,  789,    0,  790,    0,
      782,  791,  791,  784,  793,  793,  795,  795,    0,  791,
      797,  797,  793,    0,  795,  799,  799,    0,  797,  785,

        0,    0,    0,  799,    0,    0,    0,    0,    0,    0,
        0,  788,    0,    0,    0,    0,  793,    0,    0,    0,
      795,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  797,  801,  801,
      801,  801,  802,  802,  803,  803,  803,  803,  804,  804,
        0,  804,  805,  805,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,

      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800
    } ;

#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 ".\\parser.l"
#define INITIAL 0
#line 2 ".\\parser.l"
#include "pch.h"
#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

#include "rdogramrtp.hpp"
namespace rdoParse {
void setYylval(int val);
double *addDouble(double *val);
void addName(std::string *name);
}

#define comment 1

#line 1579 "rdolex.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 19 ".\\parser.l"


#line 1709 "rdolex.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 801 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3855 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 21 ".\\parser.l"
return(Resource_type);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 22 ".\\parser.l"
return(permanent);
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 23 ".\\parser.l"
return(Parameters);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 24 ".\\parser.l"
return(integer);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 25 ".\\parser.l"
return(real);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 26 ".\\parser.l"
return(End);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 27 ".\\parser.l"
return(temporary);                     
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 28 ".\\parser.l"
return(such_as);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 29 ".\\parser.l"
return(dblpoint);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 31 ".\\parser.l"
return(Resources);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 32 ".\\parser.l"
return(trace_keyword);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 33 ".\\parser.l"
return(no_trace);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 35 ".\\parser.l"
return(Constant);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 36 ".\\parser.l"
return(Body);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 37 ".\\parser.l"
return(Function_keyword);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 38 ".\\parser.l"
return(Type_keyword);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 39 ".\\parser.l"
return(algorithmic);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 40 ".\\parser.l"
return(table_keyword);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 41 ".\\parser.l"
return(list_keyword);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 42 ".\\parser.l"
return(Calculate_if);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 43 ".\\parser.l"
return(Sequence);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 44 ".\\parser.l"
return(uniform);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 45 ".\\parser.l"
return(exponential);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 46 ".\\parser.l"
return(normal_keyword);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 47 ".\\parser.l"
return(by_hist);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 48 ".\\parser.l"
return(enumerative);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 50 ".\\parser.l"
return(Exist);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 51 ".\\parser.l"
return(Not_Exist);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 52 ".\\parser.l"
return(For_All);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 53 ".\\parser.l"
return(Not_For_All);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 54 ".\\parser.l"
return(neq);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 55 ".\\parser.l"
return(leq);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 56 ".\\parser.l"
return(geq);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 57 ".\\parser.l"
return(NoCheck);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 58 ".\\parser.l"
return(Calculate_if);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 59 ".\\parser.l"
return(or_keyword);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 60 ".\\parser.l"
return(and_keyword);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 63 ".\\parser.l"
return(Pattern);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 64 ".\\parser.l"
return(operation);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 65 ".\\parser.l"
return(irregular_event);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 66 ".\\parser.l"
return(rule_keyword);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 67 ".\\parser.l"
return(keyboard);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 68 ".\\parser.l"
return(Relevant_resources);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 69 ".\\parser.l"
return(Keep);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 70 ".\\parser.l"
return(Create_keyword);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 71 ".\\parser.l"
return(Erase);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 72 ".\\parser.l"
return(NonExist);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 73 ".\\parser.l"
return(NoChange);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 74 ".\\parser.l"
return(Time);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 75 ".\\parser.l"
return(Choice);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 76 ".\\parser.l"
return(from_keyword);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 77 ".\\parser.l"
return(first_keyword);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 78 ".\\parser.l"
return(Convert_begin);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 79 ".\\parser.l"
return(Convert_end);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 80 ".\\parser.l"
return(Convert_rule);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 81 ".\\parser.l"
return(Convert_event);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 82 ".\\parser.l"
return(with_max);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 83 ".\\parser.l"
return(with_min);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 84 ".\\parser.l"
return(Operations);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 85 ".\\parser.l"
return(Results);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 86 ".\\parser.l"
return(watch_par);	   
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 87 ".\\parser.l"
return(watch_state);	   
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 88 ".\\parser.l"
return(watch_quant);	   
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 89 ".\\parser.l"
return(watch_value);	   
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 90 ".\\parser.l"
return(get_value);	   
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 92 ".\\parser.l"
return(Model_name);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 93 ".\\parser.l"
return(Resource_file);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 94 ".\\parser.l"
return(OprIev_file);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 95 ".\\parser.l"
return(Frame_file);	
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 96 ".\\parser.l"
return(Statistic_file);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 97 ".\\parser.l"
return(Results_file);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 98 ".\\parser.l"
return(Trace_file);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 99 ".\\parser.l"
return(Show_mode);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 100 ".\\parser.l"
return(Frame_number);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 101 ".\\parser.l"
return(Show_rate);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 102 ".\\parser.l"
return(Run_StartTime);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 103 ".\\parser.l"
return(Trace_StartTime);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 104 ".\\parser.l"
return(Trace_EndTime);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 105 ".\\parser.l"
return(Terminate_if);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 106 ".\\parser.l"
return(Break_point);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 107 ".\\parser.l"
return(Seed);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 108 ".\\parser.l"
return(NoShow);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 109 ".\\parser.l"
return(Monitor);	
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 110 ".\\parser.l"
return(Animation);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 113 ".\\parser.l"
return(Decision_point);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 114 ".\\parser.l"
return(search_keyword);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 115 ".\\parser.l"
return(trace_stat);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 116 ".\\parser.l"
return(trace_tops);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 117 ".\\parser.l"
return(trace_all);		     
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 118 ".\\parser.l"
return(Condition_keyword);		     
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 119 ".\\parser.l"
return(Term_condition);      
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 120 ".\\parser.l"
return(Evaluate_by);	        
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 121 ".\\parser.l"
return(Compare_tops);	     
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 122 ".\\parser.l"
return(NO);				        
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 123 ".\\parser.l"
return(YES);				     
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 124 ".\\parser.l"
return(Activities);		     
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 125 ".\\parser.l"
return(Process);		     
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 126 ".\\parser.l"
return(value_before);	     
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 127 ".\\parser.l"
return(value_after);	        
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 128 ".\\parser.l"
return(value_before);	     
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 129 ".\\parser.l"
return(value_after);	        
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 130 ".\\parser.l"
return(some);				     
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 134 ".\\parser.l"
return(Frame);
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 135 ".\\parser.l"
return(Show_if);
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 136 ".\\parser.l"
return(Back_picture);
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 137 ".\\parser.l"
return(Show);
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 138 ".\\parser.l"
return(frm_cell);
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 139 ".\\parser.l"
return(text);
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 140 ".\\parser.l"
return(transparent);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 141 ".\\parser.l"
return(bitmap);
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 142 ".\\parser.l"
return(s_bmp);
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 143 ".\\parser.l"
return(rect_keyword);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 144 ".\\parser.l"
return(r_rect);
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 145 ".\\parser.l"
return(line);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 146 ".\\parser.l"
return(ellipse);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 147 ".\\parser.l"
return(triang);
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 148 ".\\parser.l"
return(active);
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 150 ".\\parser.l"
{
							std::string n1(YYText());
							int len = n1.length();
                     std::string *name = new std::string(n1, 1, len-2);
                     rdoParse::addName(name);
	                  rdoParse::setYylval((int)name);
                     return QUOTED_IDENTIF;
                  }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 159 ".\\parser.l"
BEGIN(comment);
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 161 ".\\parser.l"
/* eat anything that's not a '*' */
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 162 ".\\parser.l"
;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 163 ".\\parser.l"
BEGIN(INITIAL);
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 166 ".\\parser.l"
;	
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 167 ".\\parser.l"
;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 168 ".\\parser.l"
return(YYText()[YYLeng()-1]);
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 170 ".\\parser.l"
{
						std::string n1(YYText(), YYLeng()-2);
                  rdoParse::setYylval(atoi(n1.c_str()));
						unput('.');
						unput('.');
                  return INT_CONST;
					}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 178 ".\\parser.l"
{
                  double *val = rdoParse::addDouble(new double(atof(YYText())));
                  rdoParse::setYylval((int)val);
                  return REAL_CONST;
               }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 184 ".\\parser.l"
{
                  rdoParse::setYylval(atoi(YYText()));
                  return INT_CONST;
               }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 189 ".\\parser.l"
{       
							std::string n1(YYText());
							int pos = n1.find_first_of("\n\t :");
                     std::string *name = new std::string(n1, 0, pos);
                     rdoParse::addName(name);
	                  rdoParse::setYylval((int)name);
                     return IDENTIF_set;
                  }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 198 ".\\parser.l"
{       
							std::string n1(YYText());
							int pos = n1.find_first_of("\n\t :");
                     std::string *name = new std::string(n1, 0, pos);
                     rdoParse::addName(name);
	                  rdoParse::setYylval((int)name);
                     return IDENTIF_NoChange_NoChange;
                  }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 207 ".\\parser.l"
{       
							std::string n1(YYText());
							int pos = n1.find_first_of("\n\t :");
                     std::string *name = new std::string(n1, 0, pos);
                     rdoParse::addName(name);
	                  rdoParse::setYylval((int)name);
                     return IDENTIF_NoChange;
                  }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 216 ".\\parser.l"
{       
							std::string n1(YYText());
							int pos = n1.find_first_of("\n\t :");
                     std::string *name = new std::string(n1, 0, pos);
                     rdoParse::addName(name);
	                  rdoParse::setYylval((int)name);
                     return IDENTIF_COLON;
                  }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 225 ".\\parser.l"
{       
                     std::string *name = new std::string(YYText());
                     rdoParse::addName(name);
	                  rdoParse::setYylval((int)name);
                     return IDENTIF;
                  }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 233 ".\\parser.l"
ECHO;
	YY_BREAK
#line 2523 "rdolex.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(comment):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 801 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 801 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 800);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 233 ".\\parser.l"

   