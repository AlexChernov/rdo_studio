#line 2 "rdolex.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
class istream;
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 139
#define YY_END_OF_BUFFER 140
static yyconst short int yy_acclist[954] =
    {   0,
      123,  123,  140,  139,  128,  139,  138,  139,  139,  129,
      139,  129,  139,  129,  139,  131,  132,  139,  129,  139,
      129,  139,  138,  139,  138,  139,  138,  139,  138,  139,
      138,  139,  138,  139,  138,  139,  138,  139,  138,  139,
      138,  139,  138,  139,  138,  139,  138,  139,  138,  139,
      138,  139,  138,  139,  138,  139,  138,  139,  138,  139,
      138,  139,  138,  139,  138,  139,  138,  139,  138,  139,
      138,  139,  138,  139,  138,  139,  138,  139,  138,  139,
      138,  139,  138,  139,  138,  139,  122,  139,  123,  139,
      124,  139,  125,  139,  126,  139,  128,  138,  137,  138,

      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      120,  131,  132,    9,  133,  132,  131,  132,  133,   32,
       31,   33,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,   94,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,   36,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  127,  123,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,

      138,  121,  133,  130,  132,  133,  132,  133,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,   95,  138,  138,  138,   37,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,    6,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  132,  132,  132,

      133,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,   44,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,   81,  138,  108,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,   51,  138,  138,  138,  138,  138,  116,  138,   19,
      138,  138,  138,  138,  138,  138,    5,  138,  114,  138,
       41,  138,  138,  138,  104,  138,  138,  138,  138,  110,
      138,  138,  138,  138,  138,  138,  138,  138,  134,  138,
      138,   14,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,   49,

      138,   16,  138,  132,  133,  132,  138,  138,  138,  138,
      138,  138,   46,  138,   27,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,   98,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,   52,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  113,  138,  138,  138,
       18,  138,  138,   11,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  105,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,   50,  138,  138,   45,  138,  138,  138,

      138,  138,  138,  138,  138,   82,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      119,  138,  138,  112,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,   24,  138,  138,  138,  115,
      138,   86,  138,  138,  138,  138,  138,  118,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,   29,  138,  138,  138,  138,  138,
       83,  138,  138,   34,  138,  138,  138,  138,  138,  138,
      138,  138,  106,  138,  138,  138,  138,  138,  138,  138,

      138,  138,   25,  138,  117,  138,  138,  138,  138,  138,
        4,  138,  138,  138,  138,  138,  138,    8,  138,  138,
      138,  138,  138,  138,   22,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,   38,  138,   97,  138,  138,  138,
       60,  138,  138,  138,  138,  138,  138,  138,  138,  138,
       99,  138,  138,   48,  138,   47,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  109,  138,  138,  138,   42,  138,   12,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,

      138,  138,  138,  138,   57,  138,   58,  138,  138,  138,
      138,  138,   13,  138,  138,  138,   15,  138,  138,  138,
      138,  138,   21,  138,  138,   84,  138,  138,  138,  138,
      138,  138,  138,  138,  138,   28,  138,  138,  138,  138,
      138,  138,   73,  138,   75,  138,  138,  138,  138,  138,
      138,  138,  138,  138,   65,  138,  138,   39,  138,    2,
      138,    7,  138,   89,  138,  138,  138,  138,  138,  138,
       61,  138,  138,  138,  138,  136,  138,  138,  138,   90,
      138,  138,  138,  138,  138,  138,  138,   10,  138,  138,
      138,  138,  138,  138,  138,  138,   69,  138,  138,   66,

      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
       72,  138,  138,  138,  138,  138,   87,  138,   88,  138,
      138,  138,  138,  138,  138,  138,   96,  138,  138,  138,
      138,  138,   59,  138,    3,  138,  138,  138,  138,   80,
      138,  138,  138,   54,  138,  138,  138,  138,   30,  138,
       68,  138,  138,  138,  138,  138,  138,  138,  138,   17,
      138,   26,  138,   23,  138,  138,  111,  138,  101,  103,
      138,  138,   63,  138,   62,  138,   64,  138,  138,  138,
      138,   92,  138,  138,  138,  138,   20,   35,  138,  138,
      138,   55,  138,   74,  138,  138,   71,  138,  138,  138,

       79,  138,  138,  138,  138,  100,  102,  138,  107,  138,
       93,  138,  138,  138,  138,  138,   53,  138,   56,  138,
       67,  138,   76,  138,  138,   78,  138,  138,  138,  138,
      138,    1,  138,  138,   70,  138,  138,  138,   85,  138,
      138,   91,  138,   77,  138,   40,  138,  138,  138,  138,
      135,   43,  138
    } ;

static yyconst short int yy_accept[831] =
    {   0,
        1,    1,    1,    2,    3,    4,    5,    7,    9,   10,
       12,   14,   16,   19,   21,   23,   25,   27,   29,   31,
       33,   35,   37,   39,   41,   43,   45,   47,   49,   51,
       53,   55,   57,   59,   61,   63,   65,   67,   69,   71,
       73,   75,   77,   79,   81,   83,   85,   87,   89,   91,
       93,   95,   97,   98,   98,   99,  100,  101,  102,  103,
      104,  105,  106,  107,  108,  109,  110,  111,  111,  111,
      112,  114,  115,  116,  116,  117,  119,  120,  121,  122,
      123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
      133,  134,  135,  136,  138,  139,  140,  141,  142,  143,

      144,  145,  146,  147,  148,  149,  150,  151,  152,  153,
      154,  155,  156,  157,  158,  159,  160,  161,  162,  163,
      164,  165,  166,  168,  169,  170,  171,  172,  173,  174,
      175,  176,  177,  178,  179,  180,  181,  182,  183,  183,
      184,  185,  185,  185,  186,  187,  188,  189,  190,  191,
      192,  193,  194,  195,  196,  197,  198,  199,  200,  201,
      202,  203,  204,  204,  205,  206,  207,  207,  209,  210,
      211,  212,  213,  214,  215,  216,  217,  218,  219,  220,
      221,  222,  223,  224,  225,  226,  227,  228,  229,  230,
      231,  232,  233,  234,  235,  236,  238,  239,  240,  242,

      243,  244,  245,  246,  247,  248,  249,  250,  251,  252,
      253,  254,  255,  256,  257,  258,  259,  260,  261,  262,
      263,  264,  265,  266,  267,  268,  269,  270,  271,  272,
      273,  274,  275,  276,  277,  277,  277,  278,  279,  280,
      281,  282,  283,  285,  286,  287,  288,  289,  290,  291,
      292,  293,  294,  295,  296,  297,  298,  299,  300,  302,
      303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
      313,  315,  316,  317,  318,  319,  320,  321,  322,  323,
      324,  325,  326,  328,  330,  331,  332,  333,  334,  335,
      336,  337,  338,  339,  340,  341,  342,  344,  345,  346,

      347,  348,  350,  352,  353,  354,  355,  356,  357,  359,
      361,  363,  364,  365,  367,  368,  369,  370,  372,  373,
      374,  375,  376,  377,  378,  379,  379,  380,  381,  382,
      384,  385,  386,  387,  388,  389,  390,  391,  392,  393,
      394,  395,  396,  397,  398,  399,  400,  402,  404,  405,
      406,  407,  408,  409,  410,  411,  412,  413,  415,  417,
      418,  419,  420,  421,  422,  423,  424,  425,  426,  427,
      428,  429,  430,  431,  432,  434,  435,  436,  437,  438,
      439,  440,  441,  442,  443,  444,  445,  447,  448,  449,
      450,  451,  452,  453,  454,  455,  456,  457,  459,  460,

      461,  463,  464,  466,  467,  468,  469,  470,  471,  472,
      472,  473,  474,  475,  476,  477,  478,  479,  481,  482,
      483,  484,  485,  486,  487,  488,  489,  490,  491,  491,
      491,  492,  493,  494,  496,  497,  499,  500,  501,  502,
      503,  504,  505,  506,  508,  509,  510,  511,  512,  513,
      514,  515,  516,  517,  518,  519,  520,  521,  523,  524,
      526,  527,  528,  529,  530,  531,  532,  533,  534,  535,
      536,  538,  539,  540,  542,  544,  545,  546,  547,  548,
      550,  551,  551,  552,  553,  554,  554,  555,  556,  557,
      558,  559,  560,  561,  562,  563,  564,  565,  566,  567,

      568,  569,  570,  571,  572,  573,  574,  575,  577,  578,
      579,  580,  581,  583,  584,  586,  587,  588,  589,  590,
      591,  592,  593,  595,  596,  597,  598,  599,  600,  601,
      602,  603,  605,  607,  608,  609,  610,  611,  613,  614,
      615,  616,  617,  618,  620,  621,  622,  623,  624,  625,
      627,  627,  627,  628,  629,  630,  631,  632,  633,  634,
      635,  635,  636,  637,  638,  639,  640,  641,  642,  643,
      644,  645,  647,  649,  650,  651,  653,  654,  655,  656,
      657,  658,  659,  660,  661,  663,  664,  666,  668,  669,
      670,  671,  672,  673,  674,  675,  676,  677,  678,  679,

      680,  681,  682,  683,  684,  686,  687,  688,  690,  692,
      693,  694,  695,  696,  697,  698,  699,  699,  699,  700,
      701,  702,  703,  704,  705,  707,  709,  709,  710,  711,
      712,  713,  715,  716,  717,  719,  720,  721,  722,  723,
      725,  726,  728,  729,  730,  731,  732,  733,  734,  735,
      736,  738,  739,  740,  741,  742,  743,  745,  747,  748,
      749,  750,  751,  752,  753,  754,  755,  757,  758,  760,
      762,  764,  766,  767,  768,  769,  769,  769,  770,  771,
      773,  774,  775,  776,  777,  778,  779,  780,  782,  783,
      784,  785,  786,  787,  788,  790,  791,  792,  793,  794,

      795,  796,  797,  799,  800,  802,  803,  804,  805,  806,
      807,  808,  809,  810,  811,  813,  814,  815,  816,  817,
      819,  821,  822,  822,  822,  823,  824,  825,  826,  827,
      827,  829,  830,  831,  832,  833,  835,  837,  838,  839,
      840,  842,  843,  844,  846,  847,  848,  849,  851,  853,
      854,  855,  856,  857,  858,  859,  860,  862,  864,  866,
      867,  869,  870,  870,  872,  873,  875,  877,  879,  879,
      880,  881,  882,  884,  885,  886,  887,  890,  891,  892,
      894,  896,  897,  899,  900,  901,  903,  904,  905,  906,
      907,  909,  909,  911,  913,  914,  915,  916,  917,  919,

      921,  923,  925,  926,  928,  929,  930,  930,  931,  932,
      934,  935,  937,  938,  939,  939,  941,  942,  944,  946,
      948,  948,  949,  949,  950,  950,  951,  952,  954,  954
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    5,    1,    1,    6,    7,
        7,    7,    8,    7,    8,    9,    7,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   11,    1,   12,
       13,   14,    1,    1,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   22,   24,   22,   25,   26,   27,   28,
       22,   29,   30,   31,   22,   22,   22,   22,   32,   33,
        7,    1,    7,    1,   34,    1,   35,   36,   37,   38,

       39,   40,   41,   42,   43,   22,   44,   45,   46,   47,
       48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
       58,   22,   59,    1,   60,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   22,    1,    1,    1,    1,    1,    1,
        1,   22,   22,   22,   22,   22,   22,   22,   22,   22,

       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22
    } ;

static yyconst int yy_meta[61] =
    {   0,
        1,    2,    3,    4,    5,    1,    1,    6,    7,    5,
        2,    1,    1,    1,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    1,    8
    } ;

static yyconst short int yy_base[838] =
    {   0,
        0,    0,   58,   60,  249, 5356,   63,  119,   65, 5356,
      235,  235,   64,   56,  221,   77,   74,  129,   87,  102,
      106,  141,   90,  159,  163,  180,  183,  193,  197,  212,
      215,  236,  239,  252,  262,  265,  278,  288,  302,  307,
      318,  321,  331,  337,  334,  360,  380,  173,    0, 5356,
     5356, 5356,   93,  390,  350, 5356,  394,  400,  406,  410,
      416,  422,  426,  442,  448,  453,  458,   81,   96, 5356,
      470, 5356,    0,  106,  475,  494,  118, 5356, 5356, 5356,
      463,  496,  436,  508,  518,  521,  534,  537,  540,  550,
      555,  560,  571,  575,  585,  590,  601,  617,  620,  623,

      633,  643,  646,  656,  666,  669,  672,  682,  696,  699,
      712,  715,  725,  728,  739,  742,  752,  756,  762,  778,
      788,  773,  798,  812,  815,  825,  829,  839,  842,  845,
      865,  868,  878,  882,  894,  897,  907,  910,  170,  168,
        0,  179,  186,  925,  928,  941,  944,  947,  964,  969,
      983,  994,  997, 1008, 1012, 1018, 1022, 1028, 1040, 1043,
      152,    0,  249, 5356, 1048,    0,  262,  165, 1062, 1072,
     1078, 1091, 1094, 1107, 1110, 1120, 1124, 1134, 1137, 1148,
     1162, 1165, 1175, 1179, 1185, 1189, 1203, 1207, 1225, 1229,
     1235, 1239, 1245, 1261, 1249, 1264, 1267, 1277, 1280, 1290,

     1300, 1310, 1313, 1316, 1326, 1329, 1341, 1345, 1358, 1363,
     1369, 1373, 1379, 1389, 1392, 1404, 1407, 1417, 1420, 1423,
     1433, 1437, 1443, 1447, 1457, 1460, 1471, 1476, 1486, 1489,
     1499, 1504, 1510, 1514,  207,  168, 1524, 1534, 1538, 1548,
     1551, 1561, 1566, 1571, 1577, 1581, 1591, 1596, 1606, 1609,
     1622, 1625, 1636, 1641, 1646, 1652, 1656,  318,  210, 1665,
     1678, 1690, 1694, 1700, 1704, 1710, 1714, 1725, 1730, 1743,
     1748, 1759, 1762, 1772, 1775, 1778, 1789, 1792, 1795, 1810,
     1814, 1826, 1830, 1836, 1848, 1854, 1860, 1864, 1870, 1874,
     1884, 1890, 1901, 1904, 1914, 1920, 1926, 1930, 1941, 1945,

     1951, 1957, 1961, 1967, 1972, 1977, 1987, 1990, 1993, 2006,
     2012, 2017, 2022, 2027, 2033, 2037, 2043, 2047, 2053, 2058,
     2068, 2071, 2082, 2085, 2095,  171, 5356, 2098, 2101, 2114,
     2120, 2130, 2134, 2140, 2145, 2155, 2158, 2161, 2172, 2175,
     2178, 2198, 2201, 2204, 2217, 2220, 2223, 2233,  159,  171,
      200, 2236, 2239, 2255, 2258, 2261, 2272, 2275, 2288, 2291,
     2303, 2306, 2316, 2320, 2330, 2336, 2340, 2350, 2353, 2356,
     2367, 2372, 2377, 2383, 2387, 2397, 2403, 2409, 2413, 2423,
     2435, 2447, 2450, 2461, 2464, 2477, 2480, 2483, 2495, 2501,
     2506, 2516, 2521, 2531, 2534, 2544, 2550, 2555, 2560, 2566,

     2570, 2581, 2586, 2596, 2602, 2606, 2612, 2622, 2625,  174,
     2636, 2647, 2650, 2661, 2664, 2674, 2678, 2684, 2689, 2700,
     2704, 2716, 2719, 2722, 2733, 2736, 2747, 2758,  195,  196,
     2761, 2771, 2774, 2777, 2788, 2794, 2799, 2810, 2804, 2814,
     2820, 2825, 2835, 2845, 2849, 2861, 2865, 2871, 2881, 2884,
     2887, 2904, 2908, 2922, 2926, 2936, 2947, 2950, 2961, 2965,
     2971, 2981, 2986, 2991, 2996, 3001, 3006, 3023, 3026, 3029,
     3040, 3045, 3050, 3056, 3060, 3070, 3076, 3080, 3090, 3093,
     3096, 3110, 3115, 3126, 3136,  155, 3150, 3153, 3156, 3166,
     3180, 3183, 3186, 3196, 3202, 3208, 3212, 3218, 3222, 3238,

     3232, 3244, 3249, 3254, 3260, 3274, 3284, 3287, 3290, 3301,
     3311, 3317, 3321, 3332, 3335, 3338, 3354, 3358, 3364, 3370,
     3374, 3384, 3394, 3399, 3409, 3412, 3415, 3425, 3428, 3439,
     3442, 3445, 3455, 3467, 3472, 3483, 3486, 3489, 3499, 3503,
     3513, 3519, 3533, 3543, 3546, 3557, 3560, 3570, 3573, 3583,
      153,  153, 3587, 3597, 3603, 3608, 3618, 3628, 3631, 3642,
      148, 3647, 3657, 3653, 3663, 3673, 3689, 3693, 3699, 3703,
     3713, 3716, 3719, 3731, 3736, 3746, 3751, 3756, 3761, 3766,
     3776, 3789, 3793, 3803, 3808, 3818, 3828, 3831, 3841, 3844,
     3854, 3858, 3864, 3868, 3874, 3878, 3896, 3884, 3899, 3916,

     3927, 3932, 3937, 3942, 3952, 3955, 3958, 3971, 3984, 3987,
     3997, 4000, 4003, 4014, 4017, 4020,  135,  136, 4033, 4036,
     4049, 4052, 4066, 4069, 4079, 4091,  133, 4094, 4104, 4107,
     4117, 4120, 4132, 4135, 4138, 4148, 4151, 4169, 4172, 4175,
     4185, 4188, 4205, 4208, 4211, 4223, 4226, 4229, 4243, 4253,
     4256, 4270, 4273, 4283, 4286, 4296, 4299, 4302, 4317, 4322,
     4328, 4332, 4338, 4342, 4358, 4361, 4364, 4376, 4386, 4389,
     4400, 4403, 4413, 4416, 4426,  129,  108, 4430, 4436, 4440,
     4446, 4450, 4456,  364, 4460, 4472, 4475, 4478, 4488, 4493,
     4498, 4503, 4513, 4516, 4528, 4531, 4541, 4545, 4555, 4559,

     4569, 4573, 4579, 4589, 4599, 4602, 4612, 4618, 4622, 4628,
     4632, 4638, 4642, 4652, 4655, 4666, 4671, 4676, 4686, 4689,
     4704, 4709,  100,   91, 4715, 4720, 4725, 4730, 4735,  524,
     4740, 4745, 4750, 4756, 4761, 4773, 4777, 4783, 4787, 4798,
     4803, 4809, 4813, 4823, 4826, 4829, 4839, 4844, 4850, 4855,
     4860, 4872, 4876, 4882, 4892, 4902, 4905, 4921, 4924, 4937,
     4940, 5356,  102, 4943, 4954, 4957, 4960, 4970,   79, 4973,
     4976, 4986, 4992, 4996, 5002, 5006, 5012, 5016, 5022, 5028,
     5032, 5042, 5053, 5056, 5066, 5069, 5080, 5083, 5086, 5356,
     5096,  102, 5099, 5102, 5112, 5118, 5128, 5131, 5134, 5144,

     5147, 5150, 5160, 5166, 5170, 5180,   70, 5183, 5186, 5198,
     5201, 5204, 5215, 5218,   76, 5221, 5231, 5235, 5241, 5247,
       60, 5253,   45, 5257,   43, 5263, 5356, 5273, 5356, 5315,
     5322, 5327, 5331, 5338, 5346,   70, 5349
    } ;

static yyconst short int yy_def[838] =
    {   0,
      829,    1,  830,  830,  829,  829,  829,  831,  832,  829,
      829,  829,  833,  829,  829,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  834,  835,  829,
      829,  829,  829,  829,  831,  829,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  832,  832,  829,
      833,  829,  836,  833,  833,  833,  837,  829,  829,  829,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,

      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  834,  834,
      835,  829,  829,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      832,  836,  833,  829,  833,  836,  833,  837,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,

      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  829,  829,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  833,  833,  836,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,

      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  829,  829,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  829,  836,
      829,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,

      831,  831,  831,  831,  831,  831,  831,  831,  831,  829,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  829,  829,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  829,  831,  831,  831,  829,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,

      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      829,  829,  831,  831,  831,  831,  831,  831,  831,  831,
      829,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,

      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  829,  829,  831,  831,
      831,  831,  831,  831,  831,  831,  829,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  829,  829,  831,  831,  831,
      831,  831,  831,  829,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,

      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  829,  829,  831,  831,  831,  831,  831,  829,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  829,  829,  831,  831,  831,  831,  831,  829,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  829,
      831,  829,  831,  831,  831,  831,  831,  831,  831,  831,

      831,  831,  831,  831,  831,  831,  829,  831,  831,  831,
      831,  831,  831,  831,  829,  831,  831,  831,  831,  831,
      829,  831,  829,  831,  829,  831,  829,  831,    0,  829,
      829,  829,  829,  829,  829,  829,  829
    } ;

static yyconst short int yy_nxt[5417] =
    {   0,
        6,    7,    7,    7,    8,    9,   10,   11,   12,   13,
        6,   14,   10,   15,   16,   17,   18,   19,   20,   21,
       22,   19,   19,   23,   24,   25,   26,   19,   27,   28,
       29,   30,   19,   19,   31,   32,   19,   19,   33,   34,
       35,   19,   36,   37,   38,   19,   39,   40,   41,   19,
       42,   43,   44,   45,   46,   47,   19,   19,   48,    6,
       50,   51,   50,   51,   53,   53,   53,   69,   78,   79,
       70,   74,   75,   76,  162,   54,   54,   54,   54,   54,
       54,  827,   77,   69,   56,  825,   70,   56,   54,   54,
       54,   54,   54,   54,   53,   53,   53,   56,   69,  161,

       56,   70,   77,   54,   54,   54,  823,   54,   54,   54,
      821,  815,   56,  829,  829,  163,   56,   52,  807,   52,
       54,   54,   54,   81,   82,  167,  792,  168,   92,   56,
       54,   54,   54,   57,   58,   59,   60,   61,   62,   56,
      790,  763,   54,   54,   54,   63,   64,   65,   66,   67,
      762,   56,   87,   89,   69,  724,   90,   70,   88,   91,
       54,   54,   54,   83,   54,   54,   54,  723,  349,   56,
       84,  684,  829,   56,  259,  677,   85,  429,  430,   86,
      259,   54,   54,   54,   54,   54,   54,  676,  627,   94,
       56,  618,  617,   56,   54,   54,   54,  429,   54,   54,

       54,  561,  430,   56,  351,  351,   93,   56,  486,  351,
       95,   99,  410,   54,   54,   54,   54,   54,   54,  259,
      327,   97,   56,  326,  236,   56,  235,  140,   96,  140,
      105,  100,  140,   80,  101,  103,   98,   54,   54,   54,
       54,   54,   54,   72,   71,  102,   56,  104,  829,   56,
      829,  106,  829,   54,   54,   54,  829,  829,  829,  107,
      829,  108,   56,   54,   54,   54,   54,   54,   54,  829,
      829,  258,   56,  829,  829,   56,  829,  829,  109,   54,
       54,   54,  829,  111,  829,  112,  829,  829,   56,   54,
       54,   54,  829,  110,  114,  113,  829,  829,   56,  829,

      116,  829,  115,   54,   54,   54,  829,  829,   54,   54,
       54,  117,   56,  829,  829,  118,  119,   56,  829,   54,
       54,   54,   54,   54,   54,  829,  829,  351,   56,  829,
      120,   56,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   56,  829,  829,   56,  829,  829,   56,  829,  121,
      829,   54,   54,   54,  125,  122,  124,  123,  829,  126,
       56,   54,   54,   54,  128,  730,  730,  730,  829,  129,
       56,  132,  829,  829,  127,  133,  829,  829,  130,  829,
      135,   54,   54,   54,  131,  829,  829,  134,  829,  829,
       56,   54,   54,   54,  136,   54,   54,   54,  829,  829,

       56,   54,   54,   54,   56,  829,  829,   54,   54,   54,
       56,   54,   54,   54,  137,  142,   56,   54,   54,   54,
       56,  829,  138,   54,   54,   54,   56,   54,   54,   54,
      144,  829,   56,  829,  145,  829,   56,   54,   54,   54,
      829,  143,  829,   54,   54,   54,   56,  146,  148,   54,
       54,   54,   56,  147,   54,   54,   54,  829,   56,   54,
       54,   54,  149,   56,   54,   54,   54,  829,   56,  829,
      150,  829,  151,   56,  153,  152,  154,   74,   75,   76,
      171,  829,   74,  164,  165,  829,  156,  829,   77,  829,
      829,  157,  155,   77,  829,  829,  158,   54,   54,   54,

      159,   74,   75,   76,  829,  169,   56,  829,   77,   54,
       54,   54,   77,   77,  829,  160,  829,  829,   56,   54,
       54,   54,   54,   54,   54,  730,  730,  730,   56,  829,
      829,   56,   77,  829,  170,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   56,  829,  829,   56,  829,  769,
       56,   54,   54,   54,  829,  172,   54,   54,   54,  174,
       56,   54,   54,   54,  173,   56,  829,  829,  175,  829,
       56,  829,   54,   54,   54,  829,   54,   54,   54,  176,
      179,   56,  829,  829,  178,   56,   54,   54,   54,  829,
      177,   54,   54,   54,  829,   56,  829,  829,  180,  829,

       56,  183,   54,   54,   54,  829,  829,  829,  181,  829,
      829,   56,  829,  829,  184,  829,  829,  182,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   56,  829,  829,
       56,  185,  829,   56,   54,   54,   54,  186,  829,  829,
      187,  829,  190,   56,   54,   54,   54,   54,   54,   54,
      829,  829,  188,   56,  829,  829,   56,   54,   54,   54,
      829,  191,  829,  189,  829,  829,   56,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   56,  193,  829,   56,
      192,  829,   56,   54,   54,   54,  829,  829,  829,  829,
      195,  829,   56,  829,  829,  196,  194,   54,   54,   54,

       54,   54,   54,  829,  829,  829,   56,  829,  829,   56,
      829,  829,  198,   54,   54,   54,   54,   54,   54,  199,
      829,  197,   56,  829,  829,   56,   54,   54,   54,   54,
       54,   54,  201,  829,  829,   56,  829,  829,   56,  829,
       54,   54,   54,   54,   54,   54,  829,  829,  200,   56,
      829,  829,   56,   54,   54,   54,  202,   54,   54,   54,
      829,  829,   56,   54,   54,   54,   56,  829,  203,  829,
      829,  829,   56,  204,   54,   54,   54,  829,  205,   54,
       54,   54,  829,   56,  206,  829,  207,  829,   56,   54,
       54,   54,  829,  829,  208,  829,  829,  829,   56,   54,

       54,   54,  829,  829,  209,  829,  210,  829,   56,  829,
      829,  216,  829,   54,   54,   54,   54,   54,   54,  211,
      829,  214,   56,  829,  212,   56,   54,   54,   54,  213,
       54,   54,   54,  829,  829,   56,  829,  829,  215,   56,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   56,
      829,  829,   56,  829,  829,   56,  829,  829,  829,  219,
      829,  220,  217,  829,  829,  218,   54,   54,   54,   54,
       54,   54,  829,  221,  222,   56,  223,  829,   56,   54,
       54,   54,  829,   54,   54,   54,  829,  829,   56,  829,
      224,  829,   56,  829,  829,   54,   54,   54,   54,   54,

       54,  225,  829,  226,   56,  829,  829,   56,   54,   54,
       54,   54,   54,   54,  829,  829,  229,   56,  829,  829,
       56,  829,  829,  227,  230,  829,   54,   54,   54,   54,
       54,   54,  829,  829,  228,   56,  231,  829,   56,  829,
      829,  232,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   56,  829,  829,   56,  829,  829,   56,  829,  233,
      829,  829,  234,  829,  238,   54,   54,   54,  829,  829,
       54,   54,   54,  829,   56,  829,  829,  237,  239,   56,
      829,  829,  829,  242,   54,   54,   54,  829,  829,  240,
      241,  829,  829,   56,  829,   54,   54,   54,   54,   54,

       54,  243,  829,  244,   56,  829,  829,   56,  829,   54,
       54,   54,  829,   54,   54,   54,  829,  245,   56,   54,
       54,   54,   56,   54,   54,   54,  829,  829,   56,   54,
       54,   54,   56,  829,  829,  247,  829,  829,   56,  829,
      246,   54,   54,   54,   54,   54,   54,  829,  829,  829,
       56,  829,  829,   56,  829,   74,  829,  257,  248,  250,
      249,  829,  251,   54,   54,   54,   77,  829,  829,  252,
      829,  253,   56,   54,   54,   54,  829,  829,  254,   54,
       54,   54,   56,  829,  829,  255,   77,  829,   56,  829,
      829,  256,   54,   54,   54,   54,   54,   54,  829,  829,

      829,   56,  829,  829,   56,  829,  261,  260,   54,   54,
       54,   54,   54,   54,  262,  829,  829,   56,  829,  829,
       56,   54,   54,   54,  829,   54,   54,   54,  829,  829,
       56,  829,  829,  263,   56,   54,   54,   54,   54,   54,
       54,  265,  829,  829,   56,  829,  829,   56,  264,   54,
       54,   54,  829,  829,  829,  270,  829,  268,   56,  829,
      829,  266,  829,   54,   54,   54,   54,   54,   54,  829,
      829,  267,   56,  829,  829,   56,   54,   54,   54,  269,
       54,   54,   54,  829,  829,   56,   54,   54,   54,   56,
       54,   54,   54,  829,  829,   56,  271,  829,  829,   56,

      272,  829,  829,  276,   54,   54,   54,  273,   54,   54,
       54,  829,  829,   56,  829,  829,  274,   56,  829,  829,
      275,  829,  277,  829,  829,  278,   54,   54,   54,  829,
       54,   54,   54,  829,  829,   56,   54,   54,   54,   56,
       54,   54,   54,  829,  829,   56,   54,   54,   54,   56,
       54,   54,   54,  829,  279,   56,  829,  829,  281,   56,
      280,  282,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   56,  283,  829,   56,  829,  829,   56,   54,   54,
       54,   54,   54,   54,  829,  287,  829,   56,  829,  829,
       56,   54,   54,   54,  284,  829,  829,  285,  829,  829,

       56,   54,   54,   54,  829,  829,  286,  829,  829,  288,
       56,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       56,  829,  829,   56,  289,  829,   56,   54,   54,   54,
       54,   54,   54,  829,  829,  290,   56,  829,  829,   56,
      829,  291,   54,   54,   54,  829,   54,   54,   54,  829,
      829,   56,  292,  829,  829,   56,  829,  829,  293,   54,
       54,   54,  296,  294,   54,   54,   54,  829,   56,  829,
       54,   54,   54,   56,   54,   54,   54,  295,  298,   56,
       54,   54,   54,   56,  829,  829,  297,  829,  829,   56,
       54,   54,   54,   54,   54,   54,  299,  829,  829,   56,

      829,  300,   56,  829,  301,   54,   54,   54,   54,   54,
       54,  302,  829,  829,   56,  829,  829,   56,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   56,  829,  829,
       56,  303,  829,   56,   54,   54,   54,  305,   54,   54,
       54,  304,  829,   56,   54,   54,   54,   56,   54,   54,
       54,  829,  307,   56,  306,  308,  829,   56,   54,   54,
       54,   54,   54,   54,  309,  829,  829,   56,  829,  829,
       56,  311,   54,   54,   54,  310,  829,   54,   54,   54,
      829,   56,  312,  829,  829,  314,   56,   54,   54,   54,
       54,   54,   54,  313,  829,  829,   56,  829,  315,   56,

       54,   54,   54,  829,  316,   54,   54,   54,  829,   56,
      829,   54,   54,   54,   56,   54,   54,   54,  829,  317,
       56,  829,  319,  321,   56,   54,   54,   54,  318,  829,
      829,  829,  320,  829,   56,   54,   54,   54,  322,   54,
       54,   54,  829,  829,   56,  829,  324,  829,   56,   54,
       54,   54,   54,   54,   54,  325,  829,  323,   56,  829,
      829,   56,   54,   54,   54,  829,  328,   54,   54,   54,
      829,   56,   54,   54,   54,  829,   56,  329,   54,   54,
       54,   56,   54,   54,   54,  829,  829,   56,  332,  829,
      829,   56,   54,   54,   54,  330,  331,   54,   54,   54,

      829,   56,  333,  334,  829,  829,   56,   54,   54,   54,
       54,   54,   54,  829,  829,  335,   56,  337,  829,   56,
      829,  829,  336,   54,   54,   54,   54,   54,   54,  829,
      339,  829,   56,  829,  829,   56,  829,   54,   54,   54,
      829,  338,   54,   54,   54,  341,   56,   54,   54,   54,
      829,   56,  829,   54,   54,   54,   56,  829,  340,  829,
      342,  829,   56,  829,  829,  349,   54,   54,   54,  829,
      829,  829,  343,  829,  350,   56,  829,  829,  344,   54,
       54,   54,  829,  829,  347,  829,  346,  829,   56,  345,
      348,   54,   54,   54,  350,   54,   54,   54,  829,  352,

       56,   54,   54,   54,   56,   54,   54,   54,  829,  829,
       56,   54,   54,   54,   56,   54,   54,   54,  829,  829,
       56,  353,  829,  829,   56,  829,   54,   54,   54,  829,
      355,   54,   54,   54,  829,   56,  829,  829,  356,  360,
       56,  829,  829,  354,   54,   54,   54,  829,  358,   54,
       54,   54,  829,   56,  829,  829,  357,  829,   56,  829,
       54,   54,   54,   54,   54,   54,  359,  829,  361,   56,
      829,  362,   56,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   56,  829,  829,   56,  829,  829,   56,  829,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   56,

      829,  829,   56,  363,  829,   56,  365,  369,  370,  829,
      366,   54,   54,   54,  364,   54,   54,   54,  829,  829,
       56,  829,  367,  829,   56,  829,  829,   54,   54,   54,
      371,   54,   54,   54,  368,  829,   56,   54,   54,   54,
       56,  829,  829,  374,  375,  829,   56,  829,  372,   54,
       54,   54,  829,  829,  373,   54,   54,   54,   56,  829,
      829,   54,   54,   54,   56,   54,   54,   54,  829,  376,
       56,   54,   54,   54,   56,   54,   54,   54,  829,  829,
       56,  829,  829,  829,   56,   54,   54,   54,  829,  829,
      377,   54,   54,   54,   56,  829,  378,  829,  379,  829,

       56,  829,   54,   54,   54,   54,   54,   54,  382,  829,
      829,   56,  829,  829,   56,   54,   54,   54,  380,  829,
      381,   54,   54,   54,   56,  829,  383,   54,   54,   54,
       56,   54,   54,   54,  829,  829,   56,  829,  384,  385,
       56,  829,   54,   54,   54,  829,   54,   54,   54,  829,
      386,   56,   54,   54,   54,   56,  388,  829,   54,   54,
       54,   56,   54,   54,   54,  829,  387,   56,   54,   54,
       54,   56,  829,   54,   54,   54,  829,   56,   54,   54,
       54,  390,   56,  829,  389,  391,  829,   56,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   56,  392,  829,

       56,  829,  829,   56,  829,  829,  394,   54,   54,   54,
      829,  395,  829,   54,   54,   54,   56,  393,   54,   54,
       54,  396,   56,   54,   54,   54,  397,   56,   54,   54,
       54,  829,   56,  829,   54,   54,   54,   56,   54,   54,
       54,  829,  829,   56,   54,   54,   54,   56,   54,   54,
       54,  829,  829,   56,   54,   54,   54,   56,  399,   54,
       54,   54,  829,   56,  829,  398,  400,  829,   56,   54,
       54,   54,   54,   54,   54,  401,  829,  829,   56,  829,
      829,   56,  829,   54,   54,   54,   54,   54,   54,  829,
      402,  403,   56,  829,  829,   56,   54,   54,   54,   54,

       54,   54,   54,   54,   54,   56,  829,  829,   56,  404,
      829,   56,  829,  829,  405,   54,   54,   54,  406,  829,
      407,   54,   54,   54,   56,  829,  408,  829,  409,  829,
       56,   54,   54,   54,  412,   54,   54,   54,  829,  829,
       56,   54,   54,   54,   56,  829,   54,   54,   54,  829,
       56,  829,  411,  829,  413,   56,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   56,  829,  829,   56,  829,
      829,   56,  414,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   56,  829,  829,   56,  415,  829,   56,  829,
      829,  416,  829,  418,  829,  420,  829,  829,  417,   54,

       54,   54,   54,   54,   54,   54,   54,   54,   56,  829,
      419,   56,  829,  422,   56,  829,  423,  421,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   56,  829,  829,
       56,  829,  829,   56,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   56,  829,  829,   56,  829,  426,   56,
      829,  829,  424,  428,  425,  427,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   56,  829,  829,   56,  829,
      829,   56,  432,   54,   54,   54,   54,   54,   54,  829,
      829,  829,   56,  829,  829,   56,  829,  829,  431,   54,
       54,   54,   54,   54,   54,  829,  434,  829,   56,  433,

      829,   56,  829,  829,   54,   54,   54,   54,   54,   54,
      436,  435,  829,   56,  829,  829,   56,   54,   54,   54,
      439,   54,   54,   54,  829,  829,   56,  829,  829,  829,
       56,   54,   54,   54,  829,  437,  438,   54,   54,   54,
       56,   54,   54,   54,  829,  829,   56,  829,  829,  440,
       56,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       56,  829,  829,   56,  829,  829,   56,  441,   54,   54,
       54,  829,  443,   54,   54,   54,  442,   56,   54,   54,
       54,  829,   56,  829,   54,   54,   54,   56,   54,   54,
       54,  829,  445,   56,  829,  444,  829,   56,   54,   54,

       54,  829,  829,  447,   54,   54,   54,   56,  829,  446,
       54,   54,   54,   56,   54,   54,   54,  829,  829,   56,
      829,  448,  449,   56,   54,   54,   54,  829,  829,  450,
      829,  829,  829,   56,  829,  451,   54,   54,   54,  452,
      829,  829,  453,  829,  829,   56,  457,  454,   54,   54,
       54,   54,   54,   54,  455,  456,  829,   56,  829,  829,
       56,  458,   54,   54,   54,   54,   54,   54,  829,  829,
      829,   56,  829,  829,   56,  829,  829,  459,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   56,  829,  829,
       56,  829,  829,   56,  829,  460,   54,   54,   54,  829,

      829,  461,   54,   54,   54,   56,  829,   54,   54,   54,
      829,   56,  462,  829,  463,  464,   56,   54,   54,   54,
      829,  465,   54,   54,   54,  829,   56,  829,  829,  466,
      829,   56,   54,   54,   54,   54,   54,   54,  829,  467,
      829,   56,  829,  829,   56,   54,   54,   54,  829,  829,
      469,   54,   54,   54,   56,  470,   54,   54,   54,  468,
       56,   54,   54,   54,  829,   56,  829,   54,   54,   54,
       56,   54,   54,   54,  829,  471,   56,  829,  829,  829,
       56,  829,   54,   54,   54,  829,  472,   54,   54,   54,
      473,   56,  829,  829,  829,  829,   56,   54,   54,   54,

      476,  475,  474,   54,   54,   54,   56,   54,   54,   54,
      829,  829,   56,  482,  482,  482,   56,  829,  829,  478,
      829,  829,   56,   54,   54,   54,   54,   54,   54,  829,
      829,  477,   56,  829,  829,   56,  829,   54,   54,   54,
      829,  829,  480,  829,  479,  483,   56,  829,   54,   54,
       54,   54,   54,   54,  829,  484,  481,   56,  829,  829,
       56,  829,   54,   54,   54,   54,   54,   54,  829,  829,
      485,   56,  829,  829,   56,   54,   54,   54,  487,   54,
       54,   54,  829,  829,   56,   54,   54,   54,   56,  829,
       54,   54,   54,  829,   56,  488,  829,  829,  491,   56,

      489,   54,   54,   54,  829,   54,   54,   54,  829,  829,
       56,  829,  493,  490,   56,  829,  492,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   56,  829,  829,   56,
      829,  494,   56,  829,   54,   54,   54,   54,   54,   54,
      829,  829,  496,   56,  829,  829,   56,  829,   54,   54,
       54,  829,  495,  829,  829,  829,  499,   56,  829,   54,
       54,   54,   54,   54,   54,  829,  497,  829,   56,  829,
      498,   56,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   56,  829,  500,   56,  829,  829,   56,  501,   54,
       54,   54,  829,  502,  503,   54,   54,   54,   56,  829,

       54,   54,   54,  504,   56,   54,   54,   54,  506,   56,
      829,   54,   54,   54,   56,   54,   54,   54,  829,  505,
       56,   54,   54,   54,   56,  829,   54,   54,   54,  829,
       56,  829,  829,  829,  511,   56,   54,   54,   54,  829,
      507,  829,  829,  508,  829,   56,   54,   54,   54,  509,
       54,   54,   54,  829,  829,   56,  510,  829,  829,   56,
      512,  829,   54,   54,   54,  514,   54,   54,   54,  829,
      513,   56,   54,   54,   54,   56,  829,  829,  515,  829,
      829,   56,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   56,  829,  829,   56,  829,  829,   56,  829,  829,

      516,  829,  829,  517,  519,   54,   54,   54,  829,   54,
       54,   54,  829,  829,   56,  518,  829,  520,   56,  829,
      829,  522,  829,   54,   54,   54,  829,   54,   54,   54,
      829,  829,   56,  829,  829,  521,   56,   54,   54,   54,
      829,  829,  829,  523,  829,  829,   56,  829,   54,   54,
       54,   54,   54,   54,  829,  524,  525,   56,  829,  829,
       56,  829,   54,   54,   54,  528,   54,   54,   54,  829,
      527,   56,   54,   54,   54,   56,  529,  829,  526,  829,
      829,   56,   54,   54,   54,  829,  530,   54,   54,   54,
      829,   56,   54,   54,   54,  829,   56,   54,   54,   54,

      829,   56,   54,   54,   54,  829,   56,   54,   54,   54,
      829,   56,  829,  531,  829,  829,   56,  829,  829,  533,
      534,  829,  829,  532,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   56,  829,  829,   56,  535,  829,   56,
      536,   54,   54,   54,  829,  537,   54,   54,   54,  829,
       56,   54,   54,   54,  829,   56,  538,   54,   54,   54,
       56,   54,   54,   54,  829,  541,   56,  539,  829,  829,
       56,   54,   54,   54,  829,  829,  540,   54,   54,   54,
       56,   54,   54,   54,  829,  829,   56,  542,  543,  829,
       56,   54,   54,   54,   54,   54,   54,   54,   54,   54,

       56,  829,  829,   56,  829,  829,   56,  829,  829,  829,
      545,  482,  482,  482,  546,  829,   54,   54,   54,  829,
       56,  544,  829,  829,  549,   56,  829,   54,   54,   54,
      829,  547,  548,  829,  829,  142,   56,   54,   54,   54,
      829,  550,  829,  829,  551,  552,   56,  829,  829,  553,
      554,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       56,  143,  829,   56,  829,  829,   56,   54,   54,   54,
      559,  829,  829,  829,  555,  556,   56,  557,  560,  829,
      558,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       56,  829,  829,   56,  564,  563,   56,   54,   54,   54,

      829,  829,  562,   54,   54,   54,   56,  829,  565,   54,
       54,   54,   56,   54,   54,   54,  829,  829,   56,   54,
       54,   54,   56,   54,   54,   54,  566,  829,   56,  829,
      567,  829,   56,   54,   54,   54,  829,  829,  568,   54,
       54,   54,   56,  569,  570,   54,   54,   54,   56,  829,
       54,   54,   54,  829,   56,   54,   54,   54,  572,   56,
      571,   54,   54,   54,   56,  829,  829,  829,  574,  573,
       56,  829,  829,  829,  575,   54,   54,   54,  829,  829,
      577,  829,  829,  576,   56,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   56,  829,  578,   56,  829,  829,

       56,  579,   54,   54,   54,  829,  829,  580,  829,  829,
      829,   56,   54,   54,   54,  829,  829,  582,   54,   54,
       54,   56,   54,   54,   54,  829,  581,   56,  829,  585,
      829,   56,  583,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   56,  829,  829,   56,  829,  829,   56,  829,
      829,  586,  829,  829,  584,   54,   54,   54,  829,   54,
       54,   54,  829,  829,   56,   54,   54,   54,   56,  829,
      587,   54,   54,   54,   56,   54,   54,   54,  829,  829,
       56,  829,  829,  829,   56,   54,   54,   54,  829,  829,
      588,  590,  829,  829,   56,   54,   54,   54,  829,  829,

       54,   54,   54,  591,   56,  589,  829,  593,  592,   56,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   56,
      829,  829,   56,  829,  829,   56,   54,   54,   54,   54,
       54,   54,  829,  829,  594,   56,  595,  829,   56,  829,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   56,
      829,  829,   56,  829,  597,   56,   54,   54,   54,  829,
      829,  596,  829,  829,  829,   56,  829,  598,   54,   54,
       54,  599,  829,   54,   54,   54,  829,   56,  829,  829,
      600,  601,   56,  602,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   56,  829,  829,   56,  829,  829,   56,

       54,   54,   54,  829,   54,   54,   54,  829,  829,   56,
      829,  829,  829,   56,   54,   54,   54,  829,  829,  603,
       54,   54,   54,   56,  604,  829,  829,  605,  829,   56,
      829,  829,  829,  607,   54,   54,   54,  829,  829,  606,
      608,  829,  829,   56,   54,   54,   54,   54,   54,   54,
      829,  609,  829,   56,  829,  829,   56,  829,   54,   54,
       54,   54,   54,   54,  829,  829,  610,   56,  829,  829,
       56,   54,   54,   54,   54,   54,   54,  829,  829,  611,
       56,  829,  829,   56,   54,   54,   54,  829,   54,   54,
       54,  829,  829,   56,  829,  829,  612,   56,   54,   54,

       54,  613,  829,  829,   54,   54,   54,   56,  829,   54,
       54,   54,  614,   56,  829,  829,  829,  615,   56,   54,
       54,   54,  829,  616,  829,  829,  619,  829,   56,   54,
       54,   54,   54,   54,   54,  620,  829,  621,   56,  829,
      829,   56,  829,   54,   54,   54,  829,  829,   54,   54,
       54,  829,   56,  829,   54,   54,   54,   56,   54,   54,
       54,  622,  624,   56,   54,   54,   54,   56,  829,  829,
      623,  829,  829,   56,   54,   54,   54,  829,  829,  829,
      829,  829,  829,   56,  829,  829,  630,  625,  626,  628,
       54,   54,   54,  629,   54,   54,   54,  829,  829,   56,

       54,   54,   54,   56,   54,   54,   54,  829,  829,   56,
      631,  829,  829,   56,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   56,  829,  632,   56,  829,  829,   56,
      829,  634,   54,   54,   54,  633,  829,   54,   54,   54,
      829,   56,  829,  829,  829,  635,   56,   54,   54,   54,
      636,  637,   54,   54,   54,  829,   56,   54,   54,   54,
      829,   56,   54,   54,   54,  829,   56,   54,   54,   54,
      829,   56,  829,  829,  639,  829,   56,   54,   54,   54,
      829,  829,  829,  638,  829,  829,   56,  829,  829,  640,
       54,   54,   54,  829,   54,   54,   54,  829,  829,   56,

      829,  829,  641,   56,   54,   54,   54,  642,  643,   54,
       54,   54,  829,   56,  644,  829,  829,  829,   56,   54,
       54,   54,  829,  829,  645,  829,  829,  646,   56,   54,
       54,   54,   54,   54,   54,  829,  829,  648,   56,  647,
      829,   56,   54,   54,   54,   54,   54,   54,  649,  829,
      829,   56,  829,  829,   56,   54,   54,   54,  652,   54,
       54,   54,  829,  650,   56,   54,   54,   54,   56,   54,
       54,   54,  829,  829,   56,   54,   54,   54,   56,   54,
       54,   54,  829,  829,   56,   54,   54,   54,   56,  829,
      829,  654,  829,  651,   56,  829,  653,   54,   54,   54,

       54,   54,   54,  655,  829,  829,   56,  829,  829,   56,
      829,  829,  657,  829,  829,  829,  658,   54,   54,   54,
      656,  829,  660,  829,  829,  829,   56,  829,   54,   54,
       54,  829,  659,   54,   54,   54,  661,   56,   54,   54,
       54,  829,   56,   54,   54,   54,  829,   56,  829,  829,
      662,  829,   56,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   56,  829,  829,   56,  829,  829,   56,  829,
      829,  663,   54,   54,   54,  829,  829,  664,  829,  665,
      829,   56,  829,  829,  666,   54,   54,   54,   54,   54,
       54,  829,  829,  667,   56,  829,  829,   56,   54,   54,

       54,   54,   54,   54,   54,   54,   54,   56,  668,  829,
       56,  829,  829,   56,  829,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   56,  829,  829,   56,  829,  829,
       56,  829,  829,  669,   54,   54,   54,   54,   54,   54,
      829,  829,  829,   56,  829,  829,   56,  672,  673,  670,
       54,   54,   54,   54,   54,   54,  829,  671,  675,   56,
      829,  829,   56,  829,  829,  674,  829,   54,   54,   54,
       54,   54,   54,  829,  829,  679,   56,  829,  829,   56,
       54,   54,   54,  829,  829,  678,  681,  829,  829,   56,
      829,  829,   54,   54,   54,   54,   54,   54,  829,  680,

      682,   56,  829,  829,   56,   54,   54,   54,   54,   54,
       54,  829,  829,  683,   56,  829,  829,   56,   54,   54,
       54,   54,   54,   54,  829,  829,  829,   56,  829,  829,
       56,  829,  685,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   56,  829,  829,   56,  829,  829,   56,   54,
       54,   54,   54,   54,   54,  829,  686,  829,   56,  687,
      829,   56,  829,  688,  829,  689,  829,  829,  690,  829,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   56,
      829,  829,   56,  829,  829,   56,   54,   54,   54,   54,
       54,   54,  829,  829,  691,   56,  829,  829,   56,  829,

      829,  692,  693,  829,  829,  694,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   56,  829,  829,   56,  829,
      829,   56,  696,  695,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   56,  829,  829,   56,  829,  829,   56,
      829,  698,  829,  829,   54,   54,   54,  829,  829,  699,
      829,  697,  829,   56,   54,   54,   54,   54,   54,   54,
      829,  829,  829,   56,  829,  829,   56,  703,  829,  700,
      829,   54,   54,   54,   54,   54,   54,  701,  704,  702,
       56,  829,  829,   56,   54,   54,   54,   54,   54,   54,
      829,  705,  829,   56,  829,  829,   56,   54,   54,   54,

       54,   54,   54,   54,   54,   54,   56,  829,  829,   56,
      829,  829,   56,  829,  706,  829,  829,  707,   54,   54,
       54,  829,  708,   54,   54,   54,  710,   56,  709,   54,
       54,   54,   56,   54,   54,   54,  829,  829,   56,   54,
       54,   54,   56,   54,   54,   54,  829,  829,   56,  829,
      711,  829,   56,  829,  829,  712,  829,  829,  713,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   56,  829,
      829,   56,  829,  829,   56,  829,  715,   54,   54,   54,
      829,  829,  714,  829,  716,  829,   56,   54,   54,   54,
       54,   54,   54,  829,  829,  718,   56,  829,  829,   56,

      829,   54,   54,   54,   54,   54,   54,  829,  829,  719,
       56,  829,  717,   56,   54,   54,   54,   54,   54,   54,
      829,  829,  829,   56,  829,  829,   56,   54,   54,   54,
      829,   54,   54,   54,  829,  829,   56,   54,   54,   54,
       56,   54,   54,   54,  829,  829,   56,   54,   54,   54,
       56,   54,   54,   54,  829,  829,   56,   54,   54,   54,
       56,   54,   54,   54,  829,  720,   56,  721,  725,  829,
       56,  829,  722,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   56,  726,  829,   56,  829,  829,   56,   54,
       54,   54,  727,  829,   54,   54,   54,  829,   56,   54,

       54,   54,  728,   56,   54,   54,   54,  829,   56,  729,
      829,  731,  829,   56,   54,   54,   54,   54,   54,   54,
      829,  829,  733,   56,  829,  732,   56,  829,  735,   54,
       54,   54,   54,   54,   54,  829,  734,  829,   56,  829,
      829,   56,   54,   54,   54,  829,   54,   54,   54,  736,
      829,   56,  829,  829,  737,   56,   54,   54,   54,  829,
       54,   54,   54,  738,  829,   56,  829,  829,  739,   56,
       54,   54,   54,  740,   54,   54,   54,  829,  829,   56,
       54,   54,   54,   56,  829,  829,  829,  742,  829,   56,
       54,   54,   54,  741,  829,  743,  744,  829,  829,   56,

       54,   54,   54,   54,   54,   54,  829,  745,  829,   56,
      829,  829,   56,   54,   54,   54,  829,  746,  829,   54,
       54,   54,   56,   54,   54,   54,  829,  747,   56,   54,
       54,   54,   56,   54,   54,   54,  829,  829,   56,   54,
       54,   54,   56,   54,   54,   54,  748,  829,   56,  829,
      749,  829,   56,   54,   54,   54,   54,   54,   54,  829,
      750,  829,   56,  829,  829,   56,  751,   54,   54,   54,
      752,  753,   54,   54,   54,  829,   56,   54,   54,   54,
      754,   56,  829,  829,  755,  829,   56,   54,   54,   54,
       54,   54,   54,  829,  829,  829,   56,  829,  829,   56,

      829,  829,  757,  829,  756,   54,   54,   54,  829,  758,
       54,   54,   54,  829,   56,  829,   54,   54,   54,   56,
      759,   54,   54,   54,  760,   56,   54,   54,   54,  829,
       56,   54,   54,   54,  829,   56,   54,   54,   54,  829,
       56,   54,   54,   54,  829,   56,   54,   54,   54,  829,
       56,   54,   54,   54,  829,   56,  829,   54,   54,   54,
       56,  761,   54,   54,   54,  764,   56,  829,  767,  829,
      765,   56,  829,  768,   54,   54,   54,  766,   54,   54,
       54,  829,  829,   56,   54,   54,   54,   56,   54,   54,
       54,  829,  829,   56,  829,  770,  829,   56,  771,   54,

       54,   54,  829,  772,   54,   54,   54,  829,   56,  829,
       54,   54,   54,   56,   54,   54,   54,  829,  773,   56,
      829,  774,  829,   56,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   56,  829,  829,   56,  829,  829,   56,
       54,   54,   54,  829,  775,   54,   54,   54,  777,   56,
      776,   54,   54,   54,   56,  778,   54,   54,   54,  829,
       56,   54,   54,   54,  829,   56,  829,  780,  829,  829,
       56,  829,  779,   54,   54,   54,  829,   54,   54,   54,
      829,  829,   56,   54,   54,   54,   56,  829,  829,  781,
      829,  829,   56,   54,   54,   54,  829,  829,  783,  782,

      829,  829,   56,   54,   54,   54,   54,   54,   54,  829,
      829,  829,   56,  829,  829,   56,  829,  784,  785,  829,
      829,  786,   54,   54,   54,   54,   54,   54,  829,  829,
      829,   56,  788,  829,   56,  829,  829,  787,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   56,  829,  829,
       56,  829,  829,   56,  829,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   56,  829,  829,   56,  829,  829,
       56,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       56,  829,  829,   56,  829,  829,   56,   54,   54,   54,
      829,  789,  791,   54,   54,   54,   56,   54,   54,   54,

      829,  829,   56,   54,   54,   54,   56,   54,   54,   54,
      829,  793,   56,   54,   54,   54,   56,   54,   54,   54,
      829,  829,   56,   54,   54,   54,   56,  794,  795,   54,
       54,   54,   56,   54,   54,   54,  829,  829,   56,  829,
      829,  829,   56,   54,   54,   54,  829,  796,  798,  829,
      797,  829,   56,  829,   54,   54,   54,   54,   54,   54,
      829,  829,  799,   56,  829,  829,   56,   54,   54,   54,
       54,   54,   54,  829,  800,  829,   56,  829,  829,   56,
      801,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       56,  829,  829,   56,  802,  829,   56,   54,   54,   54,

       54,   54,   54,   54,   54,   54,   56,  829,  829,   56,
      803,  829,   56,   54,   54,   54,  829,  829,  804,   54,
       54,   54,   56,  829,  806,  805,  829,  829,   56,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   56,  829,
      829,   56,  829,  829,   56,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   56,  829,  829,   56,  808,  829,
       56,   54,   54,   54,  829,  809,  810,   54,   54,   54,
       56,   54,   54,   54,  829,  829,   56,  829,  811,  829,
       56,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       56,  829,  829,   56,  829,  829,   56,  829,  812,   54,

       54,   54,   54,   54,   54,   54,   54,   54,   56,  829,
      829,   56,  829,  829,   56,  813,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   56,  814,  829,   56,  829,
      829,   56,   54,   54,   54,  816,   54,   54,   54,  817,
      829,   56,   54,   54,   54,   56,  829,  818,   54,   54,
       54,   56,  829,  819,   54,   54,   54,   56,   54,   54,
       54,  829,  829,   56,   54,   54,   54,   56,  829,  829,
      820,  829,  829,   56,   54,   54,   54,  829,  829,  829,
      829,  822,  829,   56,  829,  829,  829,  829,  829,  824,
      829,  829,  829,  829,  829,  826,  829,  829,  829,  829,

      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  828,   49,   49,   49,   49,   49,
       49,   49,   49,   55,   55,   55,   55,   68,   68,   68,
       68,   68,   68,   68,   68,   73,   73,   73,  139,  139,
      829,  139,  139,  139,  139,  139,  141,  141,  829,  829,
      141,  141,  141,  166,  166,    5,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,

      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829
    } ;

static yyconst short int yy_chk[5417] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        3,    3,    4,    4,    7,    7,    7,    9,   14,   14,
        9,   13,   13,   13,  836,   17,   17,   17,   16,   16,
       16,  825,   13,   68,   17,  823,   68,   16,   19,   19,
       19,   23,   23,   23,   53,   53,   53,   19,   69,   69,

       23,   69,   13,   20,   20,   20,  821,   21,   21,   21,
      815,  807,   20,   74,   74,   74,   21,    3,  792,    4,
        8,    8,    8,   16,   17,   77,  769,   77,   23,    8,
       18,   18,   18,    8,    8,    8,    8,    8,    8,   18,
      763,  724,   22,   22,   22,    8,    8,    8,    8,    8,
      723,   22,   20,   21,  161,  677,   21,  161,   20,   22,
       24,   24,   24,   18,   25,   25,   25,  676,  349,   24,
       18,  627,  168,   25,  168,  618,   18,  349,  350,   18,
      350,   26,   26,   26,   27,   27,   27,  617,  561,   25,
       26,  552,  551,   27,   28,   28,   28,  349,   29,   29,

       29,  486,  429,   28,  429,  430,   24,   29,  410,  351,
       25,   28,  326,   30,   30,   30,   31,   31,   31,  259,
      236,   27,   30,  235,  143,   31,  142,  140,   26,  139,
       30,   28,   48,   15,   28,   29,   27,   32,   32,   32,
       33,   33,   33,   12,   11,   28,   32,   29,    5,   33,
        0,   31,    0,   34,   34,   34,  163,  163,  163,   31,
        0,   31,   34,   35,   35,   35,   36,   36,   36,  167,
      167,  167,   35,    0,    0,   36,    0,    0,   32,   37,
       37,   37,    0,   33,    0,   33,    0,    0,   37,   38,
       38,   38,    0,   32,   34,   33,    0,    0,   38,    0,

       35,    0,   34,   39,   39,   39,    0,    0,   40,   40,
       40,   36,   39,    0,    0,   36,   37,   40,    0,   41,
       41,   41,   42,   42,   42,  258,  258,  258,   41,    0,
       38,   42,   43,   43,   43,   45,   45,   45,   44,   44,
       44,   43,    0,    0,   45,    0,    0,   44,    0,   39,
        0,   55,   55,   55,   42,   40,   41,   40,    0,   42,
       55,   46,   46,   46,   43,  684,  684,  684,    0,   43,
       46,   44,    0,    0,   42,   44,    0,    0,   43,    0,
       45,   47,   47,   47,   43,    0,    0,   44,    0,    0,
       47,   54,   54,   54,   46,   57,   57,   57,    0,    0,

       54,   58,   58,   58,   57,    0,    0,   59,   59,   59,
       58,   60,   60,   60,   47,   54,   59,   61,   61,   61,
       60,    0,   47,   62,   62,   62,   61,   63,   63,   63,
       57,    0,   62,    0,   58,    0,   63,   83,   83,   83,
        0,   54,    0,   64,   64,   64,   83,   58,   60,   65,
       65,   65,   64,   59,   66,   66,   66,    0,   65,   67,
       67,   67,   61,   66,   81,   81,   81,    0,   67,    0,
       61,    0,   62,   81,   63,   62,   64,   71,   71,   71,
       83,    0,   75,   75,   75,    0,   65,    0,   71,    0,
        0,   66,   64,   75,    0,    0,   67,   82,   82,   82,

       67,   76,   76,   76,    0,   81,   82,    0,   71,   84,
       84,   84,   76,   75,    0,   67,    0,    0,   84,   85,
       85,   85,   86,   86,   86,  730,  730,  730,   85,    0,
        0,   86,   76,    0,   82,   87,   87,   87,   88,   88,
       88,   89,   89,   89,   87,    0,    0,   88,    0,  730,
       89,   90,   90,   90,    0,   84,   91,   91,   91,   86,
       90,   92,   92,   92,   85,   91,    0,    0,   87,    0,
       92,    0,   93,   93,   93,    0,   94,   94,   94,   88,
       91,   93,    0,    0,   90,   94,   95,   95,   95,    0,
       89,   96,   96,   96,    0,   95,    0,    0,   92,    0,

       96,   95,   97,   97,   97,    0,    0,    0,   93,    0,
        0,   97,    0,    0,   95,    0,    0,   93,   98,   98,
       98,   99,   99,   99,  100,  100,  100,   98,    0,    0,
       99,   95,    0,  100,  101,  101,  101,   95,    0,    0,
       96,    0,   99,  101,  102,  102,  102,  103,  103,  103,
        0,    0,   97,  102,    0,    0,  103,  104,  104,  104,
        0,  100,    0,   98,    0,    0,  104,  105,  105,  105,
      106,  106,  106,  107,  107,  107,  105,  102,    0,  106,
      101,    0,  107,  108,  108,  108,    0,    0,    0,    0,
      104,    0,  108,    0,    0,  105,  103,  109,  109,  109,

      110,  110,  110,    0,    0,    0,  109,    0,    0,  110,
        0,    0,  107,  111,  111,  111,  112,  112,  112,  108,
        0,  106,  111,    0,    0,  112,  113,  113,  113,  114,
      114,  114,  110,    0,    0,  113,    0,    0,  114,    0,
      115,  115,  115,  116,  116,  116,    0,    0,  109,  115,
        0,    0,  116,  117,  117,  117,  111,  118,  118,  118,
        0,    0,  117,  119,  119,  119,  118,    0,  112,    0,
        0,    0,  119,  113,  122,  122,  122,    0,  114,  120,
      120,  120,    0,  122,  115,    0,  115,    0,  120,  121,
      121,  121,    0,    0,  116,    0,    0,    0,  121,  123,

      123,  123,    0,    0,  117,    0,  118,    0,  123,    0,
        0,  122,    0,  124,  124,  124,  125,  125,  125,  119,
        0,  121,  124,    0,  120,  125,  126,  126,  126,  120,
      127,  127,  127,    0,    0,  126,    0,    0,  121,  127,
      128,  128,  128,  129,  129,  129,  130,  130,  130,  128,
        0,    0,  129,    0,    0,  130,    0,    0,    0,  126,
        0,  126,  124,    0,    0,  125,  131,  131,  131,  132,
      132,  132,    0,  127,  128,  131,  129,    0,  132,  133,
      133,  133,    0,  134,  134,  134,    0,    0,  133,    0,
      130,    0,  134,    0,    0,  135,  135,  135,  136,  136,

      136,  131,    0,  132,  135,    0,    0,  136,  137,  137,
      137,  138,  138,  138,    0,    0,  134,  137,    0,    0,
      138,    0,    0,  133,  134,    0,  144,  144,  144,  145,
      145,  145,    0,    0,  133,  144,  135,    0,  145,    0,
        0,  136,  146,  146,  146,  147,  147,  147,  148,  148,
      148,  146,    0,    0,  147,    0,    0,  148,    0,  137,
        0,    0,  138,    0,  145,  149,  149,  149,    0,    0,
      150,  150,  150,    0,  149,    0,    0,  144,  146,  150,
        0,    0,    0,  148,  151,  151,  151,    0,    0,  147,
      147,    0,    0,  151,    0,  152,  152,  152,  153,  153,

      153,  149,    0,  150,  152,    0,    0,  153,    0,  154,
      154,  154,    0,  155,  155,  155,    0,  151,  154,  156,
      156,  156,  155,  157,  157,  157,    0,    0,  156,  158,
      158,  158,  157,    0,    0,  153,    0,    0,  158,    0,
      152,  159,  159,  159,  160,  160,  160,    0,    0,    0,
      159,    0,    0,  160,    0,  165,  165,  165,  154,  155,
      154,    0,  156,  169,  169,  169,  165,    0,    0,  156,
        0,  157,  169,  170,  170,  170,    0,    0,  158,  171,
      171,  171,  170,    0,    0,  159,  165,    0,  171,    0,
        0,  160,  172,  172,  172,  173,  173,  173,    0,    0,

        0,  172,    0,    0,  173,    0,  170,  169,  174,  174,
      174,  175,  175,  175,  171,    0,    0,  174,    0,    0,
      175,  176,  176,  176,    0,  177,  177,  177,    0,    0,
      176,    0,    0,  172,  177,  178,  178,  178,  179,  179,
      179,  174,    0,    0,  178,    0,    0,  179,  173,  180,
      180,  180,    0,    0,    0,  179,    0,  177,  180,    0,
        0,  175,    0,  181,  181,  181,  182,  182,  182,    0,
        0,  176,  181,    0,    0,  182,  183,  183,  183,  178,
      184,  184,  184,    0,    0,  183,  185,  185,  185,  184,
      186,  186,  186,    0,    0,  185,  180,    0,    0,  186,

      181,    0,    0,  185,  187,  187,  187,  182,  188,  188,
      188,    0,    0,  187,    0,    0,  183,  188,    0,    0,
      184,    0,  186,    0,    0,  187,  189,  189,  189,    0,
      190,  190,  190,    0,    0,  189,  191,  191,  191,  190,
      192,  192,  192,    0,    0,  191,  193,  193,  193,  192,
      195,  195,  195,    0,  188,  193,    0,    0,  189,  195,
      188,  190,  194,  194,  194,  196,  196,  196,  197,  197,
      197,  194,  191,    0,  196,    0,    0,  197,  198,  198,
      198,  199,  199,  199,    0,  195,    0,  198,    0,    0,
      199,  200,  200,  200,  192,    0,    0,  193,    0,    0,

      200,  201,  201,  201,    0,    0,  194,    0,    0,  197,
      201,  202,  202,  202,  203,  203,  203,  204,  204,  204,
      202,    0,    0,  203,  198,    0,  204,  205,  205,  205,
      206,  206,  206,    0,    0,  200,  205,    0,    0,  206,
        0,  201,  207,  207,  207,    0,  208,  208,  208,    0,
        0,  207,  202,    0,    0,  208,    0,    0,  203,  209,
      209,  209,  206,  204,  210,  210,  210,    0,  209,    0,
      211,  211,  211,  210,  212,  212,  212,  205,  208,  211,
      213,  213,  213,  212,    0,    0,  207,    0,    0,  213,
      214,  214,  214,  215,  215,  215,  209,    0,    0,  214,

        0,  210,  215,    0,  211,  216,  216,  216,  217,  217,
      217,  212,    0,    0,  216,    0,    0,  217,  218,  218,
      218,  219,  219,  219,  220,  220,  220,  218,    0,    0,
      219,  213,    0,  220,  221,  221,  221,  215,  222,  222,
      222,  214,    0,  221,  223,  223,  223,  222,  224,  224,
      224,    0,  217,  223,  216,  218,    0,  224,  225,  225,
      225,  226,  226,  226,  219,    0,    0,  225,    0,    0,
      226,  221,  227,  227,  227,  220,    0,  228,  228,  228,
        0,  227,  222,    0,    0,  224,  228,  229,  229,  229,
      230,  230,  230,  223,    0,    0,  229,    0,  225,  230,

      231,  231,  231,    0,  226,  232,  232,  232,    0,  231,
        0,  233,  233,  233,  232,  234,  234,  234,    0,  227,
      233,    0,  229,  230,  234,  237,  237,  237,  228,    0,
        0,    0,  229,    0,  237,  238,  238,  238,  231,  239,
      239,  239,    0,    0,  238,    0,  233,    0,  239,  240,
      240,  240,  241,  241,  241,  234,    0,  232,  240,    0,
        0,  241,  242,  242,  242,    0,  237,  243,  243,  243,
        0,  242,  244,  244,  244,    0,  243,  238,  245,  245,
      245,  244,  246,  246,  246,    0,    0,  245,  241,    0,
        0,  246,  247,  247,  247,  239,  240,  248,  248,  248,

        0,  247,  241,  242,    0,    0,  248,  249,  249,  249,
      250,  250,  250,    0,    0,  244,  249,  246,    0,  250,
        0,    0,  245,  251,  251,  251,  252,  252,  252,    0,
      248,    0,  251,    0,    0,  252,    0,  253,  253,  253,
        0,  247,  254,  254,  254,  250,  253,  255,  255,  255,
        0,  254,    0,  256,  256,  256,  255,    0,  249,    0,
      251,    0,  256,  257,  257,  257,  260,  260,  260,    0,
        0,    0,  252,    0,  257,  260,    0,    0,  252,  261,
      261,  261,    0,    0,  255,    0,  254,    0,  261,  253,
      256,  262,  262,  262,  257,  263,  263,  263,    0,  260,

      262,  264,  264,  264,  263,  265,  265,  265,    0,    0,
      264,  266,  266,  266,  265,  267,  267,  267,    0,    0,
      266,  261,    0,    0,  267,    0,  268,  268,  268,    0,
      263,  269,  269,  269,    0,  268,    0,    0,  264,  268,
      269,    0,    0,  262,  270,  270,  270,    0,  266,  271,
      271,  271,    0,  270,    0,    0,  265,    0,  271,    0,
      272,  272,  272,  273,  273,  273,  267,    0,  269,  272,
        0,  270,  273,  274,  274,  274,  275,  275,  275,  276,
      276,  276,  274,    0,    0,  275,    0,    0,  276,    0,
      277,  277,  277,  278,  278,  278,  279,  279,  279,  277,

        0,    0,  278,  272,    0,  279,  274,  277,  277,    0,
      274,  280,  280,  280,  273,  281,  281,  281,    0,    0,
      280,    0,  275,    0,  281,    0,    0,  282,  282,  282,
      278,  283,  283,  283,  276,    0,  282,  284,  284,  284,
      283,    0,    0,  281,  282,    0,  284,    0,  279,  285,
      285,  285,    0,    0,  280,  286,  286,  286,  285,    0,
        0,  287,  287,  287,  286,  288,  288,  288,    0,  284,
      287,  289,  289,  289,  288,  290,  290,  290,    0,    0,
      289,    0,    0,    0,  290,  291,  291,  291,    0,    0,
      285,  292,  292,  292,  291,    0,  286,    0,  287,    0,

      292,    0,  293,  293,  293,  294,  294,  294,  290,    0,
        0,  293,    0,    0,  294,  295,  295,  295,  288,    0,
      289,  296,  296,  296,  295,    0,  291,  297,  297,  297,
      296,  298,  298,  298,    0,    0,  297,    0,  292,  293,
      298,    0,  299,  299,  299,    0,  300,  300,  300,    0,
      294,  299,  301,  301,  301,  300,  296,    0,  302,  302,
      302,  301,  303,  303,  303,    0,  295,  302,  304,  304,
      304,  303,    0,  305,  305,  305,    0,  304,  306,  306,
      306,  299,  305,    0,  298,  300,    0,  306,  307,  307,
      307,  308,  308,  308,  309,  309,  309,  307,  301,    0,

      308,    0,    0,  309,    0,    0,  305,  310,  310,  310,
        0,  306,    0,  311,  311,  311,  310,  304,  312,  312,
      312,  307,  311,  313,  313,  313,  308,  312,  314,  314,
      314,    0,  313,    0,  315,  315,  315,  314,  316,  316,
      316,    0,    0,  315,  317,  317,  317,  316,  318,  318,
      318,    0,    0,  317,  319,  319,  319,  318,  313,  320,
      320,  320,    0,  319,    0,  312,  315,    0,  320,  321,
      321,  321,  322,  322,  322,  316,    0,    0,  321,    0,
        0,  322,    0,  323,  323,  323,  324,  324,  324,    0,
      317,  319,  323,    0,    0,  324,  325,  325,  325,  328,

      328,  328,  329,  329,  329,  325,    0,    0,  328,  320,
        0,  329,    0,    0,  321,  330,  330,  330,  322,    0,
      323,  331,  331,  331,  330,    0,  324,    0,  325,    0,
      331,  332,  332,  332,  329,  333,  333,  333,    0,    0,
      332,  334,  334,  334,  333,    0,  335,  335,  335,    0,
      334,    0,  328,    0,  331,  335,  336,  336,  336,  337,
      337,  337,  338,  338,  338,  336,    0,    0,  337,    0,
        0,  338,  332,  339,  339,  339,  340,  340,  340,  341,
      341,  341,  339,    0,    0,  340,  333,    0,  341,    0,
        0,  334,    0,  336,    0,  338,    0,    0,  335,  342,

      342,  342,  343,  343,  343,  344,  344,  344,  342,    0,
      337,  343,    0,  340,  344,    0,  341,  339,  345,  345,
      345,  346,  346,  346,  347,  347,  347,  345,    0,    0,
      346,    0,    0,  347,  348,  348,  348,  352,  352,  352,
      353,  353,  353,  348,    0,    0,  352,    0,  344,  353,
        0,    0,  342,  346,  343,  345,  354,  354,  354,  355,
      355,  355,  356,  356,  356,  354,    0,    0,  355,    0,
        0,  356,  353,  357,  357,  357,  358,  358,  358,    0,
        0,    0,  357,    0,    0,  358,    0,    0,  352,  359,
      359,  359,  360,  360,  360,    0,  355,    0,  359,  354,

        0,  360,    0,    0,  361,  361,  361,  362,  362,  362,
      357,  356,    0,  361,    0,    0,  362,  363,  363,  363,
      362,  364,  364,  364,    0,    0,  363,    0,    0,    0,
      364,  365,  365,  365,    0,  360,  361,  366,  366,  366,
      365,  367,  367,  367,    0,    0,  366,    0,    0,  363,
      367,  368,  368,  368,  369,  369,  369,  370,  370,  370,
      368,    0,    0,  369,    0,    0,  370,  364,  371,  371,
      371,    0,  366,  372,  372,  372,  365,  371,  373,  373,
      373,    0,  372,    0,  374,  374,  374,  373,  375,  375,
      375,    0,  368,  374,    0,  367,    0,  375,  376,  376,

      376,    0,    0,  370,  377,  377,  377,  376,    0,  369,
      378,  378,  378,  377,  379,  379,  379,    0,    0,  378,
        0,  371,  372,  379,  380,  380,  380,    0,    0,  373,
        0,    0,    0,  380,    0,  374,  381,  381,  381,  376,
        0,    0,  376,    0,    0,  381,  379,  376,  382,  382,
      382,  383,  383,  383,  377,  378,    0,  382,    0,    0,
      383,  380,  384,  384,  384,  385,  385,  385,    0,    0,
        0,  384,    0,    0,  385,    0,    0,  381,  386,  386,
      386,  387,  387,  387,  388,  388,  388,  386,    0,    0,
      387,    0,    0,  388,    0,  382,  389,  389,  389,    0,

        0,  383,  390,  390,  390,  389,    0,  391,  391,  391,
        0,  390,  384,    0,  385,  386,  391,  392,  392,  392,
        0,  388,  393,  393,  393,    0,  392,    0,    0,  389,
        0,  393,  394,  394,  394,  395,  395,  395,    0,  390,
        0,  394,    0,    0,  395,  396,  396,  396,    0,    0,
      392,  397,  397,  397,  396,  393,  398,  398,  398,  391,
      397,  399,  399,  399,    0,  398,    0,  400,  400,  400,
      399,  401,  401,  401,    0,  394,  400,    0,    0,    0,
      401,    0,  402,  402,  402,    0,  395,  403,  403,  403,
      396,  402,    0,    0,    0,    0,  403,  404,  404,  404,

      400,  399,  397,  405,  405,  405,  404,  406,  406,  406,
        0,    0,  405,  407,  407,  407,  406,    0,    0,  403,
        0,    0,  407,  408,  408,  408,  409,  409,  409,    0,
        0,  402,  408,    0,    0,  409,    0,  411,  411,  411,
        0,    0,  405,    0,  404,  407,  411,    0,  412,  412,
      412,  413,  413,  413,    0,  408,  406,  412,    0,    0,
      413,    0,  414,  414,  414,  415,  415,  415,    0,    0,
      409,  414,    0,    0,  415,  416,  416,  416,  411,  417,
      417,  417,    0,    0,  416,  418,  418,  418,  417,    0,
      419,  419,  419,    0,  418,  412,    0,    0,  415,  419,

      413,  420,  420,  420,    0,  421,  421,  421,    0,    0,
      420,    0,  417,  414,  421,    0,  416,  422,  422,  422,
      423,  423,  423,  424,  424,  424,  422,    0,    0,  423,
        0,  419,  424,    0,  425,  425,  425,  426,  426,  426,
        0,    0,  421,  425,    0,    0,  426,    0,  427,  427,
      427,    0,  420,    0,    0,    0,  424,  427,    0,  428,
      428,  428,  431,  431,  431,    0,  422,    0,  428,    0,
      423,  431,  432,  432,  432,  433,  433,  433,  434,  434,
      434,  432,    0,  425,  433,    0,    0,  434,  426,  435,
      435,  435,    0,  427,  428,  436,  436,  436,  435,    0,

      437,  437,  437,  431,  436,  439,  439,  439,  433,  437,
        0,  438,  438,  438,  439,  440,  440,  440,    0,  432,
      438,  441,  441,  441,  440,    0,  442,  442,  442,    0,
      441,    0,    0,    0,  439,  442,  443,  443,  443,    0,
      435,    0,    0,  437,    0,  443,  444,  444,  444,  438,
      445,  445,  445,    0,    0,  444,  438,    0,    0,  445,
      440,    0,  446,  446,  446,  442,  447,  447,  447,    0,
      441,  446,  448,  448,  448,  447,    0,    0,  443,    0,
        0,  448,  449,  449,  449,  450,  450,  450,  451,  451,
      451,  449,    0,    0,  450,    0,    0,  451,    0,    0,

      445,    0,    0,  446,  448,  452,  452,  452,    0,  453,
      453,  453,    0,    0,  452,  447,    0,  449,  453,    0,
        0,  451,    0,  454,  454,  454,    0,  455,  455,  455,
        0,    0,  454,    0,    0,  450,  455,  456,  456,  456,
        0,    0,    0,  452,    0,    0,  456,    0,  457,  457,
      457,  458,  458,  458,    0,  453,  454,  457,    0,    0,
      458,    0,  459,  459,  459,  457,  460,  460,  460,    0,
      456,  459,  461,  461,  461,  460,  457,    0,  455,    0,
        0,  461,  462,  462,  462,    0,  457,  463,  463,  463,
        0,  462,  464,  464,  464,    0,  463,  465,  465,  465,

        0,  464,  466,  466,  466,    0,  465,  467,  467,  467,
        0,  466,    0,  459,    0,    0,  467,    0,    0,  462,
      463,    0,    0,  461,  468,  468,  468,  469,  469,  469,
      470,  470,  470,  468,    0,    0,  469,  464,    0,  470,
      465,  471,  471,  471,    0,  466,  472,  472,  472,    0,
      471,  473,  473,  473,    0,  472,  467,  474,  474,  474,
      473,  475,  475,  475,    0,  470,  474,  468,    0,    0,
      475,  476,  476,  476,    0,    0,  469,  477,  477,  477,
      476,  478,  478,  478,    0,    0,  477,  472,  473,    0,
      478,  479,  479,  479,  480,  480,  480,  481,  481,  481,

      479,    0,    0,  480,    0,    0,  481,    0,    0,    0,
      477,  482,  482,  482,  478,    0,  483,  483,  483,    0,
      482,  476,    0,    0,  479,  483,    0,  484,  484,  484,
        0,  478,  478,    0,    0,  482,  484,  485,  485,  485,
        0,  481,    0,    0,  482,  482,  485,    0,    0,  483,
      483,  487,  487,  487,  488,  488,  488,  489,  489,  489,
      487,  482,    0,  488,    0,    0,  489,  490,  490,  490,
      485,    0,    0,    0,  484,  484,  490,  484,  485,    0,
      484,  491,  491,  491,  492,  492,  492,  493,  493,  493,
      491,    0,    0,  492,  489,  488,  493,  494,  494,  494,

        0,    0,  487,  495,  495,  495,  494,    0,  490,  496,
      496,  496,  495,  497,  497,  497,    0,    0,  496,  498,
      498,  498,  497,  499,  499,  499,  491,    0,  498,    0,
      492,    0,  499,  501,  501,  501,    0,    0,  493,  500,
      500,  500,  501,  494,  495,  502,  502,  502,  500,    0,
      503,  503,  503,    0,  502,  504,  504,  504,  497,  503,
      496,  505,  505,  505,  504,    0,    0,    0,  499,  498,
      505,    0,    0,    0,  500,  506,  506,  506,    0,    0,
      502,    0,    0,  501,  506,  507,  507,  507,  508,  508,
      508,  509,  509,  509,  507,    0,  503,  508,    0,    0,

      509,  504,  510,  510,  510,    0,    0,  505,    0,    0,
        0,  510,  511,  511,  511,    0,    0,  507,  512,  512,
      512,  511,  513,  513,  513,    0,  506,  512,    0,  511,
        0,  513,  509,  514,  514,  514,  515,  515,  515,  516,
      516,  516,  514,    0,    0,  515,    0,    0,  516,    0,
        0,  512,    0,    0,  510,  517,  517,  517,    0,  518,
      518,  518,    0,    0,  517,  519,  519,  519,  518,    0,
      514,  520,  520,  520,  519,  521,  521,  521,    0,    0,
      520,    0,    0,    0,  521,  522,  522,  522,    0,    0,
      516,  518,    0,    0,  522,  523,  523,  523,    0,    0,

      524,  524,  524,  519,  523,  517,    0,  521,  520,  524,
      525,  525,  525,  526,  526,  526,  527,  527,  527,  525,
        0,    0,  526,    0,    0,  527,  528,  528,  528,  529,
      529,  529,    0,    0,  522,  528,  524,    0,  529,    0,
      530,  530,  530,  531,  531,  531,  532,  532,  532,  530,
        0,    0,  531,    0,  526,  532,  533,  533,  533,    0,
        0,  525,    0,    0,    0,  533,    0,  527,  534,  534,
      534,  528,    0,  535,  535,  535,    0,  534,    0,    0,
      529,  530,  535,  531,  536,  536,  536,  537,  537,  537,
      538,  538,  538,  536,    0,    0,  537,    0,    0,  538,

      539,  539,  539,    0,  540,  540,  540,    0,    0,  539,
        0,    0,    0,  540,  541,  541,  541,    0,    0,  534,
      542,  542,  542,  541,  535,    0,    0,  536,    0,  542,
        0,    0,    0,  539,  543,  543,  543,    0,    0,  537,
      540,    0,    0,  543,  544,  544,  544,  545,  545,  545,
        0,  541,    0,  544,    0,    0,  545,    0,  546,  546,
      546,  547,  547,  547,    0,    0,  542,  546,    0,    0,
      547,  548,  548,  548,  549,  549,  549,    0,    0,  543,
      548,    0,    0,  549,  550,  550,  550,    0,  553,  553,
      553,    0,    0,  550,    0,    0,  545,  553,  554,  554,

      554,  546,    0,    0,  555,  555,  555,  554,    0,  556,
      556,  556,  547,  555,    0,    0,    0,  548,  556,  557,
      557,  557,    0,  549,    0,    0,  553,    0,  557,  558,
      558,  558,  559,  559,  559,  554,    0,  555,  558,    0,
        0,  559,    0,  560,  560,  560,    0,    0,  562,  562,
      562,    0,  560,    0,  564,  564,  564,  562,  563,  563,
      563,  556,  558,  564,  565,  565,  565,  563,    0,    0,
      557,    0,    0,  565,  566,  566,  566,    0,    0,    0,
        0,    0,    0,  566,    0,    0,  564,  559,  560,  562,
      567,  567,  567,  563,  568,  568,  568,    0,    0,  567,

      569,  569,  569,  568,  570,  570,  570,    0,    0,  569,
      565,    0,    0,  570,  571,  571,  571,  572,  572,  572,
      573,  573,  573,  571,    0,  566,  572,    0,    0,  573,
        0,  568,  574,  574,  574,  567,    0,  575,  575,  575,
        0,  574,    0,    0,    0,  569,  575,  576,  576,  576,
      570,  571,  577,  577,  577,    0,  576,  578,  578,  578,
        0,  577,  579,  579,  579,    0,  578,  580,  580,  580,
        0,  579,    0,    0,  575,    0,  580,  581,  581,  581,
        0,    0,    0,  574,    0,    0,  581,    0,    0,  577,
      582,  582,  582,    0,  583,  583,  583,    0,    0,  582,

        0,    0,  578,  583,  584,  584,  584,  579,  580,  585,
      585,  585,    0,  584,  581,    0,    0,    0,  585,  586,
      586,  586,    0,    0,  582,    0,    0,  582,  586,  587,
      587,  587,  588,  588,  588,    0,    0,  583,  587,  582,
        0,  588,  589,  589,  589,  590,  590,  590,  584,    0,
        0,  589,    0,    0,  590,  591,  591,  591,  590,  592,
      592,  592,    0,  586,  591,  593,  593,  593,  592,  594,
      594,  594,    0,    0,  593,  595,  595,  595,  594,  596,
      596,  596,    0,    0,  595,  598,  598,  598,  596,    0,
        0,  592,    0,  589,  598,    0,  591,  597,  597,  597,

      599,  599,  599,  593,    0,    0,  597,    0,    0,  599,
        0,    0,  595,    0,    0,    0,  596,  600,  600,  600,
      594,    0,  598,    0,    0,    0,  600,    0,  601,  601,
      601,    0,  597,  602,  602,  602,  599,  601,  603,  603,
      603,    0,  602,  604,  604,  604,    0,  603,    0,    0,
      600,    0,  604,  605,  605,  605,  606,  606,  606,  607,
      607,  607,  605,    0,    0,  606,    0,    0,  607,    0,
        0,  601,  608,  608,  608,    0,    0,  602,    0,  603,
        0,  608,    0,    0,  604,  609,  609,  609,  610,  610,
      610,    0,    0,  606,  609,    0,    0,  610,  611,  611,

      611,  612,  612,  612,  613,  613,  613,  611,  607,    0,
      612,    0,    0,  613,    0,  614,  614,  614,  615,  615,
      615,  616,  616,  616,  614,    0,    0,  615,    0,    0,
      616,    0,    0,  610,  619,  619,  619,  620,  620,  620,
        0,    0,    0,  619,    0,    0,  620,  613,  614,  611,
      621,  621,  621,  622,  622,  622,    0,  612,  616,  621,
        0,    0,  622,    0,    0,  615,    0,  623,  623,  623,
      624,  624,  624,    0,    0,  620,  623,    0,    0,  624,
      625,  625,  625,    0,    0,  619,  622,    0,    0,  625,
        0,    0,  626,  626,  626,  628,  628,  628,    0,  621,

      623,  626,    0,    0,  628,  629,  629,  629,  630,  630,
      630,    0,    0,  624,  629,    0,    0,  630,  631,  631,
      631,  632,  632,  632,    0,    0,    0,  631,    0,    0,
      632,    0,  628,  633,  633,  633,  634,  634,  634,  635,
      635,  635,  633,    0,    0,  634,    0,    0,  635,  636,
      636,  636,  637,  637,  637,    0,  629,    0,  636,  630,
        0,  637,    0,  631,    0,  633,    0,    0,  634,    0,
      638,  638,  638,  639,  639,  639,  640,  640,  640,  638,
        0,    0,  639,    0,    0,  640,  641,  641,  641,  642,
      642,  642,    0,    0,  636,  641,    0,    0,  642,    0,

        0,  637,  638,    0,    0,  639,  643,  643,  643,  644,
      644,  644,  645,  645,  645,  643,    0,    0,  644,    0,
        0,  645,  641,  639,  646,  646,  646,  647,  647,  647,
      648,  648,  648,  646,    0,    0,  647,    0,    0,  648,
        0,  644,    0,    0,  649,  649,  649,    0,    0,  645,
        0,  643,    0,  649,  650,  650,  650,  651,  651,  651,
        0,    0,    0,  650,    0,    0,  651,  648,    0,  646,
        0,  652,  652,  652,  653,  653,  653,  646,  649,  647,
      652,    0,    0,  653,  654,  654,  654,  655,  655,  655,
        0,  650,    0,  654,    0,    0,  655,  656,  656,  656,

      657,  657,  657,  658,  658,  658,  656,    0,    0,  657,
        0,    0,  658,    0,  652,    0,    0,  653,  659,  659,
      659,    0,  654,  660,  660,  660,  656,  659,  655,  661,
      661,  661,  660,  662,  662,  662,    0,    0,  661,  663,
      663,  663,  662,  664,  664,  664,    0,    0,  663,    0,
      659,    0,  664,    0,    0,  660,    0,    0,  661,  665,
      665,  665,  666,  666,  666,  667,  667,  667,  665,    0,
        0,  666,    0,    0,  667,    0,  663,  668,  668,  668,
        0,    0,  662,    0,  664,    0,  668,  669,  669,  669,
      670,  670,  670,    0,    0,  666,  669,    0,    0,  670,

        0,  671,  671,  671,  672,  672,  672,    0,    0,  668,
      671,    0,  665,  672,  673,  673,  673,  674,  674,  674,
        0,    0,    0,  673,    0,    0,  674,  675,  675,  675,
        0,  678,  678,  678,    0,    0,  675,  679,  679,  679,
      678,  680,  680,  680,    0,    0,  679,  681,  681,  681,
      680,  682,  682,  682,    0,    0,  681,  683,  683,  683,
      682,  685,  685,  685,    0,  673,  683,  674,  678,    0,
      685,    0,  675,  686,  686,  686,  687,  687,  687,  688,
      688,  688,  686,  679,    0,  687,    0,    0,  688,  689,
      689,  689,  681,    0,  690,  690,  690,    0,  689,  691,

      691,  691,  682,  690,  692,  692,  692,    0,  691,  683,
        0,  685,    0,  692,  693,  693,  693,  694,  694,  694,
        0,    0,  687,  693,    0,  686,  694,    0,  690,  695,
      695,  695,  696,  696,  696,    0,  689,    0,  695,    0,
        0,  696,  697,  697,  697,    0,  698,  698,  698,  691,
        0,  697,    0,    0,  692,  698,  699,  699,  699,    0,
      700,  700,  700,  693,    0,  699,    0,    0,  694,  700,
      701,  701,  701,  696,  702,  702,  702,    0,    0,  701,
      703,  703,  703,  702,    0,    0,    0,  698,    0,  703,
      704,  704,  704,  697,    0,  699,  700,    0,    0,  704,

      705,  705,  705,  706,  706,  706,    0,  701,    0,  705,
        0,    0,  706,  707,  707,  707,    0,  702,    0,  708,
      708,  708,  707,  709,  709,  709,    0,  704,  708,  710,
      710,  710,  709,  711,  711,  711,    0,    0,  710,  712,
      712,  712,  711,  713,  713,  713,  706,    0,  712,    0,
      707,    0,  713,  714,  714,  714,  715,  715,  715,    0,
      708,    0,  714,    0,    0,  715,  709,  716,  716,  716,
      710,  711,  717,  717,  717,    0,  716,  718,  718,  718,
      712,  717,    0,    0,  713,    0,  718,  719,  719,  719,
      720,  720,  720,    0,    0,    0,  719,    0,    0,  720,

        0,    0,  716,    0,  714,  721,  721,  721,    0,  717,
      722,  722,  722,    0,  721,    0,  725,  725,  725,  722,
      718,  726,  726,  726,  719,  725,  727,  727,  727,    0,
      726,  728,  728,  728,    0,  727,  729,  729,  729,    0,
      728,  731,  731,  731,    0,  729,  732,  732,  732,    0,
      731,  733,  733,  733,    0,  732,    0,  734,  734,  734,
      733,  722,  735,  735,  735,  725,  734,    0,  728,    0,
      726,  735,    0,  729,  736,  736,  736,  727,  737,  737,
      737,    0,    0,  736,  738,  738,  738,  737,  739,  739,
      739,    0,    0,  738,    0,  732,    0,  739,  733,  740,

      740,  740,    0,  734,  741,  741,  741,    0,  740,    0,
      742,  742,  742,  741,  743,  743,  743,    0,  735,  742,
        0,  738,    0,  743,  744,  744,  744,  745,  745,  745,
      746,  746,  746,  744,    0,    0,  745,    0,    0,  746,
      747,  747,  747,    0,  739,  748,  748,  748,  742,  747,
      740,  749,  749,  749,  748,  743,  750,  750,  750,    0,
      749,  751,  751,  751,    0,  750,    0,  746,    0,    0,
      751,    0,  745,  752,  752,  752,    0,  753,  753,  753,
        0,    0,  752,  754,  754,  754,  753,    0,    0,  747,
        0,    0,  754,  755,  755,  755,    0,    0,  751,  750,

        0,    0,  755,  756,  756,  756,  757,  757,  757,    0,
        0,    0,  756,    0,    0,  757,    0,  752,  753,    0,
        0,  754,  758,  758,  758,  759,  759,  759,    0,    0,
        0,  758,  756,    0,  759,    0,    0,  755,  760,  760,
      760,  761,  761,  761,  764,  764,  764,  760,    0,    0,
      761,    0,    0,  764,    0,  765,  765,  765,  766,  766,
      766,  767,  767,  767,  765,    0,    0,  766,    0,    0,
      767,  768,  768,  768,  770,  770,  770,  771,  771,  771,
      768,    0,    0,  770,    0,    0,  771,  772,  772,  772,
        0,  760,  765,  773,  773,  773,  772,  774,  774,  774,

        0,    0,  773,  775,  775,  775,  774,  776,  776,  776,
        0,  770,  775,  777,  777,  777,  776,  778,  778,  778,
        0,    0,  777,  779,  779,  779,  778,  771,  772,  780,
      780,  780,  779,  781,  781,  781,    0,    0,  780,    0,
        0,    0,  781,  782,  782,  782,    0,  774,  776,    0,
      775,    0,  782,    0,  783,  783,  783,  784,  784,  784,
        0,    0,  778,  783,    0,    0,  784,  785,  785,  785,
      786,  786,  786,    0,  779,    0,  785,    0,    0,  786,
      782,  787,  787,  787,  788,  788,  788,  789,  789,  789,
      787,    0,    0,  788,  784,    0,  789,  791,  791,  791,

      793,  793,  793,  794,  794,  794,  791,    0,    0,  793,
      785,    0,  794,  795,  795,  795,    0,    0,  787,  796,
      796,  796,  795,    0,  789,  788,    0,    0,  796,  797,
      797,  797,  798,  798,  798,  799,  799,  799,  797,    0,
        0,  798,    0,    0,  799,  800,  800,  800,  801,  801,
      801,  802,  802,  802,  800,    0,    0,  801,  795,    0,
      802,  803,  803,  803,    0,  796,  797,  804,  804,  804,
      803,  805,  805,  805,    0,    0,  804,    0,  798,    0,
      805,  806,  806,  806,  808,  808,  808,  809,  809,  809,
      806,    0,    0,  808,    0,    0,  809,    0,  803,  810,

      810,  810,  811,  811,  811,  812,  812,  812,  810,    0,
        0,  811,    0,    0,  812,  805,  813,  813,  813,  814,
      814,  814,  816,  816,  816,  813,  806,    0,  814,    0,
        0,  816,  817,  817,  817,  808,  818,  818,  818,  809,
        0,  817,  819,  819,  819,  818,    0,  811,  820,  820,
      820,  819,    0,  813,  822,  822,  822,  820,  824,  824,
      824,    0,    0,  822,  826,  826,  826,  824,    0,    0,
      814,    0,    0,  826,  828,  828,  828,    0,    0,    0,
        0,  817,    0,  828,    0,    0,    0,    0,    0,  822,
        0,    0,    0,    0,    0,  824,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  826,  830,  830,  830,  830,  830,
      830,  830,  830,  831,  831,  831,  831,  832,  832,  832,
      832,  832,  832,  832,  832,  833,  833,  833,  834,  834,
        0,  834,  834,  834,  834,  834,  835,  835,    0,    0,
      835,  835,  835,  837,  837,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,

      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829
    } ;

#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 ".\\parser.l"
#define INITIAL 0
#line 2 ".\\parser.l"
#include "pch.h"
#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

#include "rdogramma.h"
#include "rdoparser.h"

#define YY_INTERACTIVE

#define YY_USER_INIT {                      \
	rdoParse::currParser->lexer_loc_init(); \
}

#define YY_USER_ACTION {                      \
	rdoParse::currParser->lexer_loc_action(); \
}

#define comment 1

#line 1927 "rdolex.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 26 ".\\parser.l"


#line 2057 "rdolex.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 830 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5356 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 28 ".\\parser.l"
return(Resource_type);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 29 ".\\parser.l"
return(permanent);
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 30 ".\\parser.l"
return(Parameters);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 31 ".\\parser.l"
return(integer);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 32 ".\\parser.l"
return(real);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 33 ".\\parser.l"
return(End);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 34 ".\\parser.l"
return(temporary);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 35 ".\\parser.l"
return(such_as);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 36 ".\\parser.l"
return(dblpoint);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 38 ".\\parser.l"
return(Resources);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 39 ".\\parser.l"
return(trace_keyword);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 40 ".\\parser.l"
return(no_trace);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 42 ".\\parser.l"
return(Constant);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 43 ".\\parser.l"
return(Body);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 44 ".\\parser.l"
return(Function_keyword);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 45 ".\\parser.l"
return(Type_keyword);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 46 ".\\parser.l"
return(algorithmic);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 47 ".\\parser.l"
return(table_keyword);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 48 ".\\parser.l"
return(list_keyword);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 49 ".\\parser.l"
return(Calculate_if);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 50 ".\\parser.l"
return(Sequence);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 51 ".\\parser.l"
return(uniform);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 52 ".\\parser.l"
return(exponential);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 53 ".\\parser.l"
return(normal_keyword);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 54 ".\\parser.l"
return(by_hist);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 55 ".\\parser.l"
return(enumerative);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 57 ".\\parser.l"
return(Exist);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 58 ".\\parser.l"
return(Not_Exist);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 59 ".\\parser.l"
return(For_All);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 60 ".\\parser.l"
return(Not_For_All);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 61 ".\\parser.l"
return(neq);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 62 ".\\parser.l"
return(leq);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 63 ".\\parser.l"
return(geq);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 64 ".\\parser.l"
return(NoCheck);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 65 ".\\parser.l"
return(Calculate_if);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 66 ".\\parser.l"
return(or_keyword);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 67 ".\\parser.l"
return(and_keyword);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 70 ".\\parser.l"
return(Pattern);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 71 ".\\parser.l"
return(operation);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 72 ".\\parser.l"
return(irregular_event);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 73 ".\\parser.l"
return(rule_keyword);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 74 ".\\parser.l"
return(keyboard);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 75 ".\\parser.l"
return(Relevant_resources);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 76 ".\\parser.l"
return(Keep);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 77 ".\\parser.l"
return(Create_keyword);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 78 ".\\parser.l"
return(Erase);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 79 ".\\parser.l"
return(NonExist);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 80 ".\\parser.l"
return(NoChange);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 81 ".\\parser.l"
return(Time);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 82 ".\\parser.l"
return(Choice);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 83 ".\\parser.l"
return(from_keyword);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 84 ".\\parser.l"
return(first_keyword);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 85 ".\\parser.l"
return(Convert_begin);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 86 ".\\parser.l"
return(Convert_end);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 87 ".\\parser.l"
return(Convert_rule);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 88 ".\\parser.l"
return(Convert_event);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 89 ".\\parser.l"
return(with_max);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 90 ".\\parser.l"
return(with_min);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 91 ".\\parser.l"
return(Operations);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 92 ".\\parser.l"
return(Results);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 93 ".\\parser.l"
return(watch_par);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 94 ".\\parser.l"
return(watch_state);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 95 ".\\parser.l"
return(watch_quant);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 96 ".\\parser.l"
return(watch_value);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 97 ".\\parser.l"
return(get_value);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 99 ".\\parser.l"
return(Model_name);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 100 ".\\parser.l"
return(Resource_file);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 101 ".\\parser.l"
return(OprIev_file);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 102 ".\\parser.l"
return(Frame_file);	
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 103 ".\\parser.l"
return(Statistic_file);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 104 ".\\parser.l"
return(Results_file);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 105 ".\\parser.l"
return(Trace_file);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 106 ".\\parser.l"
return(Show_mode);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 107 ".\\parser.l"
return(Frame_number);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 108 ".\\parser.l"
return(Show_rate);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 109 ".\\parser.l"
return(Run_StartTime);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 110 ".\\parser.l"
return(Trace_StartTime);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 111 ".\\parser.l"
return(Trace_EndTime);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 112 ".\\parser.l"
return(Terminate_if);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 113 ".\\parser.l"
return(Break_point);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 114 ".\\parser.l"
return(Seed);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 115 ".\\parser.l"
return(NoShow);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 116 ".\\parser.l"
return(Monitor);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 117 ".\\parser.l"
return(Animation);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 120 ".\\parser.l"
return(Decision_point);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 121 ".\\parser.l"
return(search_keyword);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 122 ".\\parser.l"
return(trace_stat);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 123 ".\\parser.l"
return(trace_tops);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 124 ".\\parser.l"
return(trace_all);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 125 ".\\parser.l"
return(Condition_keyword);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 126 ".\\parser.l"
return(Term_condition);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 127 ".\\parser.l"
return(Evaluate_by);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 128 ".\\parser.l"
return(Compare_tops);
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 129 ".\\parser.l"
return(NO);
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 130 ".\\parser.l"
return(YES);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 131 ".\\parser.l"
return(Activities);
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 132 ".\\parser.l"
return(Process);
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 133 ".\\parser.l"
return(SEIZE);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 134 ".\\parser.l"
return(GENERATE);
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 135 ".\\parser.l"
return(value_before);
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 136 ".\\parser.l"
return(value_after);
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 137 ".\\parser.l"
return(value_before);
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 138 ".\\parser.l"
return(value_after);
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 139 ".\\parser.l"
return(some);
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 141 ".\\parser.l"
return(Frame);
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 142 ".\\parser.l"
return(Show_if);
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 143 ".\\parser.l"
return(Back_picture);
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 144 ".\\parser.l"
return(Show);
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 145 ".\\parser.l"
return(frm_cell);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 146 ".\\parser.l"
return(text);
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 147 ".\\parser.l"
return(transparent);
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 148 ".\\parser.l"
return(bitmap);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 149 ".\\parser.l"
return(s_bmp);
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 150 ".\\parser.l"
return(rect_keyword);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 151 ".\\parser.l"
return(r_rect);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 152 ".\\parser.l"
return(line);
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 153 ".\\parser.l"
return(ellipse);
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 154 ".\\parser.l"
return(triang);
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 155 ".\\parser.l"
return(active);
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 157 ".\\parser.l"
{
						std::string n1(YYText());
						int len = n1.length();
						std::string *name = new std::string(n1, 1, len-2);
						rdoParse::currParser->addName(name);
						rdoParse::currParser->lexer_setvalue((int)name);
						return QUOTED_IDENTIF;
					}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 166 ".\\parser.l"
{
						std::string *name = new std::string(YYText());
						rdoParse::currParser->addName(name);
						rdoParse::currParser->lexer_setvalue((int)name);
						return QUOTED_IDENTIF_BAD;
					}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 173 ".\\parser.l"
BEGIN(comment);
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 175 ".\\parser.l"
/* eat anything that's not a '*' */
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 176 ".\\parser.l"
;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 177 ".\\parser.l"
;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 178 ".\\parser.l"
BEGIN(INITIAL);
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 181 ".\\parser.l"
;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 182 ".\\parser.l"
;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 183 ".\\parser.l"
return(YYText()[YYLeng()-1]);
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 185 ".\\parser.l"
{
						std::string n1(YYText(), YYLeng()-2);
						rdoParse::currParser->lexer_setvalue(atoi(n1.c_str()));
						unput('.');
						unput('.');
						rdoParse::currParser->lexer_loc_delta_pos( -2 );
						return INT_CONST;
					}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 194 ".\\parser.l"
{
						rdoParse::currParser->lexer_setvalue(atoi(YYText()));
						return INT_CONST;
					}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 199 ".\\parser.l"
{
						double *val = rdoParse::currParser->addDouble(new double(atof(YYText())));
						rdoParse::currParser->lexer_setvalue((int)val);
						return REAL_CONST;
					}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 205 ".\\parser.l"
{
						std::string *name = new std::string(YYText());
						rdoParse::currParser->addName(name);
						rdoParse::currParser->lexer_setvalue((int)name);
						return IDENTIF_BAD;
					}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 212 ".\\parser.l"
{
					std::string n1(YYText());
					std::string::size_type pos = n1.find_first_of("\r\n\t :");
					std::string *name = new std::string(n1, 0, pos);
					rdoParse::currParser->addName(name);
					rdoParse::currParser->lexer_setvalue((int)name);
					return IDENTIF_set;
				}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 221 ".\\parser.l"
{
					std::string n1(YYText());
					std::string::size_type pos = n1.find_first_of("\r\n\t :");
					std::string *name = new std::string(n1, 0, pos);
					rdoParse::currParser->addName(name);
					rdoParse::currParser->lexer_setvalue((int)name);
					return IDENTIF_NoChange_NoChange;
				}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 230 ".\\parser.l"
{
					std::string n1(YYText());
					std::string::size_type pos = n1.find_first_of("\r\n\t :");
					std::string *name = new std::string(n1, 0, pos);
					rdoParse::currParser->addName(name);
					rdoParse::currParser->lexer_setvalue((int)name);
					return IDENTIF_NoChange;
				}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 239 ".\\parser.l"
{
					std::string n1(YYText());
					std::string::size_type pos = n1.find_first_of("\r\n\t :");
					std::string *name = new std::string(n1, 0, pos);
					rdoParse::currParser->addName(name);
					rdoParse::currParser->lexer_setvalue((int)name);
					return IDENTIF_COLON;
				}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 248 ".\\parser.l"
{
					std::string *name = new std::string(YYText());
					rdoParse::currParser->addName(name);
					rdoParse::currParser->lexer_setvalue((int)name);
					return IDENTIF;
				}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 255 ".\\parser.l"
ECHO;
	YY_BREAK
#line 2907 "rdolex.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(comment):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 830 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 830 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 829);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 255 ".\\parser.l"

