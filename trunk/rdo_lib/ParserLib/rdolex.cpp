#line 2 "rdolex.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
class istream;
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 138
#define YY_END_OF_BUFFER 139
static yyconst short int yy_acclist[937] =
    {   0,
      122,  122,  139,  138,  127,  138,  137,  138,  138,  128,
      138,  128,  138,  128,  138,  130,  131,  138,  128,  138,
      128,  138,  137,  138,  137,  138,  137,  138,  137,  138,
      137,  138,  137,  138,  137,  138,  137,  138,  137,  138,
      137,  138,  137,  138,  137,  138,  137,  138,  137,  138,
      137,  138,  137,  138,  137,  138,  137,  138,  137,  138,
      137,  138,  137,  138,  137,  138,  137,  138,  137,  138,
      137,  138,  137,  138,  137,  138,  137,  138,  137,  138,
      137,  138,  137,  138,  121,  138,  122,  138,  123,  138,
      124,  138,  125,  138,  127,  137,  136,  137,  137,  137,

      137,  137,  137,  137,  137,  137,  137,  137,  119,  130,
      131,    9,  132,  131,  130,  131,  132,   32,   31,   33,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,   94,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,   36,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  126,
      122,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  120,  132,

      129,  131,  131,  132,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
       95,  137,  137,  137,   37,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,    6,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  131,  137,  137,  137,  137,  137,  137,  137,

      137,  137,  137,   44,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,   81,  137,  107,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,   51,  137,  137,  137,  137,  137,  115,  137,
       19,  137,  137,  137,  137,  137,  137,    5,  137,  113,
      137,   41,  137,  137,  137,  103,  137,  137,  137,  137,
      109,  137,  137,  137,  137,  137,  137,  137,  137,  133,
      137,  137,   14,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
       49,  137,   16,  137,  137,  137,  137,  137,  137,  137,

       46,  137,   27,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,   98,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,   52,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  112,  137,  137,  137,   18,  137,  137,
       11,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  104,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
       50,  137,  137,   45,  137,  137,  137,  137,  137,  137,
      137,   82,  137,  137,  137,  137,  137,  137,  137,  137,

      137,  137,  137,  137,  137,  137,  118,  137,  137,  111,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,   24,  137,  137,  137,  114,  137,   86,  137,  137,
      137,  137,  137,  117,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
       29,  137,  137,  137,  137,   83,  137,  137,   34,  137,
      137,  137,  137,  137,  137,  137,  137,  105,  137,  137,
      137,  137,  137,  137,  137,  137,  137,   25,  137,  116,
      137,  137,  137,  137,  137,    4,  137,  137,  137,  137,

      137,  137,    8,  137,  137,  137,  137,  137,  137,   22,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,   38,
      137,   97,  137,  137,  137,   60,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,   48,  137,   47,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  108,  137,  137,  137,
       42,  137,   12,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,   57,  137,   58,
      137,  137,  137,  137,  137,   13,  137,  137,  137,   15,

      137,  137,  137,  137,  137,   21,  137,  137,   84,  137,
      137,  137,  137,  137,  137,  137,  137,  137,   28,  137,
      137,  137,  137,  137,  137,   73,  137,   75,  137,  137,
      137,  137,  137,  137,  137,  137,  137,   65,  137,  137,
       39,  137,    2,  137,    7,  137,   89,  137,  137,  137,
      137,  137,  137,   61,  137,  137,  137,  137,  135,  137,
      137,  137,   90,  137,  137,  137,  137,  137,  137,  137,
       10,  137,  137,  137,  137,  137,  137,  137,  137,   69,
      137,  137,   66,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,   72,  137,  137,  137,  137,  137,   87,

      137,   88,  137,  137,  137,  137,  137,  137,  137,   96,
      137,  137,  137,  137,  137,   59,  137,    3,  137,  137,
      137,  137,   80,  137,  137,  137,   54,  137,  137,  137,
      137,   30,  137,   68,  137,  137,  137,  137,  137,  137,
      137,  137,   17,  137,   26,  137,   23,  137,  137,  110,
      137,  100,  102,  137,  137,   63,  137,   62,  137,   64,
      137,  137,  137,  137,   92,  137,  137,  137,  137,   20,
       35,  137,  137,  137,   55,  137,   74,  137,  137,   71,
      137,  137,  137,   79,  137,  137,  137,  137,   99,  101,
      137,  106,  137,   93,  137,  137,  137,  137,  137,   53,

      137,   56,  137,   67,  137,   76,  137,  137,   78,  137,
      137,  137,  137,  137,    1,  137,  137,   70,  137,  137,
      137,   85,  137,  137,   91,  137,   77,  137,   40,  137,
      137,  137,  137,  134,   43,  137
    } ;

static yyconst short int yy_accept[814] =
    {   0,
        1,    1,    1,    2,    3,    4,    5,    7,    9,   10,
       12,   14,   16,   19,   21,   23,   25,   27,   29,   31,
       33,   35,   37,   39,   41,   43,   45,   47,   49,   51,
       53,   55,   57,   59,   61,   63,   65,   67,   69,   71,
       73,   75,   77,   79,   81,   83,   85,   87,   89,   91,
       93,   95,   96,   96,   97,   98,   99,  100,  101,  102,
      103,  104,  105,  106,  107,  108,  109,  109,  109,  110,
      112,  113,  114,  115,  117,  118,  119,  120,  121,  122,
      123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
      133,  135,  136,  137,  138,  139,  140,  141,  142,  143,

      144,  145,  146,  147,  148,  149,  150,  151,  152,  153,
      154,  155,  156,  157,  158,  159,  160,  161,  162,  163,
      165,  166,  167,  168,  169,  170,  171,  172,  173,  174,
      175,  176,  177,  178,  179,  180,  180,  181,  182,  182,
      182,  183,  184,  185,  186,  187,  188,  189,  190,  191,
      192,  193,  194,  195,  196,  197,  198,  199,  200,  201,
      202,  203,  203,  203,  205,  206,  207,  208,  209,  210,
      211,  212,  213,  214,  215,  216,  217,  218,  219,  220,
      221,  222,  223,  224,  225,  226,  227,  228,  229,  230,
      231,  233,  234,  235,  237,  238,  239,  240,  241,  242,

      243,  244,  245,  246,  247,  248,  249,  250,  251,  252,
      253,  254,  255,  256,  257,  258,  259,  260,  261,  262,
      263,  264,  265,  266,  267,  268,  269,  270,  271,  272,
      272,  272,  273,  274,  275,  276,  277,  278,  280,  281,
      282,  283,  284,  285,  286,  287,  288,  289,  290,  291,
      292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
      302,  303,  304,  306,  307,  308,  309,  310,  311,  312,
      313,  314,  315,  316,  317,  319,  321,  322,  323,  324,
      325,  326,  327,  328,  329,  330,  331,  332,  333,  335,
      336,  337,  338,  339,  341,  343,  344,  345,  346,  347,

      348,  350,  352,  354,  355,  356,  358,  359,  360,  361,
      363,  364,  365,  366,  367,  368,  369,  370,  370,  371,
      372,  373,  375,  376,  377,  378,  379,  380,  381,  382,
      383,  384,  385,  386,  387,  388,  389,  390,  391,  393,
      395,  396,  397,  398,  399,  400,  401,  403,  405,  406,
      407,  408,  409,  410,  411,  412,  413,  414,  415,  416,
      417,  418,  419,  421,  422,  423,  424,  425,  426,  427,
      428,  429,  430,  431,  432,  434,  435,  436,  437,  438,
      439,  440,  441,  442,  443,  444,  446,  447,  448,  450,
      451,  453,  454,  455,  456,  457,  458,  459,  459,  460,

      461,  462,  463,  464,  465,  466,  468,  469,  470,  471,
      472,  473,  474,  475,  476,  477,  478,  479,  480,  481,
      483,  484,  486,  487,  488,  489,  490,  491,  492,  494,
      495,  496,  497,  498,  499,  500,  501,  502,  503,  504,
      505,  506,  507,  509,  510,  512,  513,  514,  515,  516,
      517,  518,  519,  520,  521,  522,  524,  525,  526,  528,
      530,  531,  532,  533,  534,  536,  537,  537,  538,  539,
      540,  540,  541,  542,  543,  544,  545,  546,  547,  548,
      549,  550,  551,  552,  553,  554,  555,  556,  557,  558,
      559,  560,  561,  563,  564,  565,  566,  568,  569,  571,

      572,  573,  574,  575,  576,  577,  578,  580,  581,  582,
      583,  584,  585,  586,  587,  588,  590,  592,  593,  594,
      595,  596,  598,  599,  600,  601,  602,  603,  605,  606,
      607,  608,  609,  610,  612,  612,  612,  613,  614,  615,
      616,  617,  618,  619,  620,  620,  621,  622,  623,  624,
      625,  626,  627,  628,  629,  630,  632,  634,  635,  636,
      638,  639,  640,  641,  642,  643,  644,  645,  646,  647,
      649,  651,  652,  653,  654,  655,  656,  657,  658,  659,
      660,  661,  662,  663,  664,  665,  666,  667,  669,  670,
      671,  673,  675,  676,  677,  678,  679,  680,  681,  682,

      682,  682,  683,  684,  685,  686,  687,  688,  690,  692,
      692,  693,  694,  695,  696,  698,  699,  700,  702,  703,
      704,  705,  706,  708,  709,  711,  712,  713,  714,  715,
      716,  717,  718,  719,  721,  722,  723,  724,  725,  726,
      728,  730,  731,  732,  733,  734,  735,  736,  737,  738,
      740,  741,  743,  745,  747,  749,  750,  751,  752,  752,
      752,  753,  754,  756,  757,  758,  759,  760,  761,  762,
      763,  765,  766,  767,  768,  769,  770,  771,  773,  774,
      775,  776,  777,  778,  779,  780,  782,  783,  785,  786,
      787,  788,  789,  790,  791,  792,  793,  794,  796,  797,

      798,  799,  800,  802,  804,  805,  805,  805,  806,  807,
      808,  809,  810,  810,  812,  813,  814,  815,  816,  818,
      820,  821,  822,  823,  825,  826,  827,  829,  830,  831,
      832,  834,  836,  837,  838,  839,  840,  841,  842,  843,
      845,  847,  849,  850,  852,  853,  853,  855,  856,  858,
      860,  862,  862,  863,  864,  865,  867,  868,  869,  870,
      873,  874,  875,  877,  879,  880,  882,  883,  884,  886,
      887,  888,  889,  890,  892,  892,  894,  896,  897,  898,
      899,  900,  902,  904,  906,  908,  909,  911,  912,  913,
      913,  914,  915,  917,  918,  920,  921,  922,  922,  924,

      925,  927,  929,  931,  931,  932,  932,  933,  933,  934,
      935,  937,  937
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    5,    1,    1,    6,    7,
        7,    7,    8,    7,    8,    9,    7,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   11,    1,   12,
       13,   14,    1,    1,   15,   16,   17,   18,   19,   20,
       21,   21,   22,   21,   23,   21,   24,   25,   26,   27,
       21,   28,   29,   30,   21,   21,   21,   21,   31,   32,
        7,    1,    7,    1,   33,    1,   34,   35,   36,   37,

       38,   39,   40,   41,   42,   21,   43,   44,   45,   46,
       47,   48,   49,   50,   51,   52,   53,   54,   55,   56,
       57,   21,   58,    1,   59,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   21,    1,    1,    1,    1,    1,    1,
        1,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21
    } ;

static yyconst int yy_meta[60] =
    {   0,
        1,    2,    3,    4,    5,    1,    1,    1,    6,    5,
        2,    1,    1,    1,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    1,    7
    } ;

static yyconst short int yy_base[820] =
    {   0,
        0,    0,   57,   59,  242, 5349,   62,  117,   64, 5349,
      222,  216,   59,   58,  211,   71,   77,  120,   81,   92,
      102,   87,  153,  169,  172,  175,  185,  195,  190,  208,
      227,  232,  237,  247,  253,  257,   97,  263,  269,  287,
      290,  302,  318,  305,  328,  342,  163,    0, 5349, 5349,
     5349,  107,  355,  361, 5349,  367,  371,  383,  386,  389,
      405,  408,  411,  425,  429,  435,  109,  147, 5349,  208,
     5349,    0,  432,  438,  130, 5349, 5349, 5349,  476,  479,
      482,  492,  495,  498,  508,  511,  521,  526,  541,  544,
      547,  559,  562,  580,  583,  593,  596,  599,  614,  617,

      634,  640,  650,  653,  668,  671,  674,  684,  687,  697,
      707,  711,  722,  727,  732,  744,  748,  758,  762,  773,
      784,  794,  807,  810,  813,  824,  827,  848,  853,  858,
      863,  874,  878,  888,  891,  162,  156,    0,  167,  170,
      904,  908,  921,  924,  927,  943,  948,  962,  972,  975,
      986,  990,  996, 1000, 1006, 1012, 1017,  123,    0, 5349,
      243,  150,  197,  195, 1022, 1028, 1039, 1042, 1057, 1067,
     1070, 1083, 1086, 1096, 1101, 1106, 1111, 1121, 1124, 1127,
     1148, 1152, 1164, 1167, 1180, 1183, 1186, 1199, 1202, 1212,
     1222, 1225, 1228, 1241, 1251, 1254, 1257, 1267, 1270, 1280,

     1283, 1298, 1286, 1302, 1318, 1322, 1333, 1343, 1347, 1357,
     1361, 1371, 1374, 1377, 1387, 1390, 1402, 1406, 1416, 1420,
     1430, 1433, 1446, 1449, 1460, 1464, 1475, 1480, 1485,  186,
      150, 1497, 1502, 1507, 1518, 1521, 1531, 1544, 1548, 1558,
     1572, 1575, 1578, 1591, 1594, 1607, 1611, 1617, 1629, 1633,
     1644,  181, 1649, 1664, 1674, 1677, 1687, 1690, 1693, 1706,
     1717, 1712, 1732, 1735, 1745, 1749, 1759, 1762, 1765, 1778,
     1788, 1791, 1801, 1806, 1811, 1817, 1829, 1834, 1840, 1844,
     1850, 1854, 1864, 1870, 1881, 1891, 1901, 1905, 1911, 1921,
     1924, 1927, 1940, 1943, 1946, 1957, 1967, 1970, 1980, 1986,

     1991, 2006, 2009, 2021, 2024, 2027, 2037, 2040, 2043, 2053,
     2063, 2069, 2073, 2083, 2089, 2093, 2103,  149, 5349, 2106,
     2120, 2135, 2138, 2141, 2152, 2155, 2165, 2171, 2175, 2185,
     2188, 2191, 2209, 2212, 2228, 2232, 2242, 2238, 2248, 2252,
     2258, 2271, 2275, 2285, 2281, 2291, 2295, 2305, 2309, 2322,
     2332, 2335, 2338, 2355, 2358, 2368, 2372, 2383, 2386, 2396,
     2400, 2412, 2415, 2418, 2430, 2433, 2445, 2451, 2455, 2469,
     2472, 2482, 2488, 2492, 2498, 2502, 2508, 2518, 2523, 2533,
     2543, 2546, 2549, 2559, 2562, 2576, 2580, 2591, 2595, 2605,
     2608, 2620, 2624, 2634, 2640, 2645, 2650,  151, 2655, 2668,

     2672, 2678, 2683, 2689, 2699, 2702, 2716, 2721, 2732, 2735,
     2738, 2748, 2751, 2761, 2764, 2775, 2788, 2791, 2794, 2804,
     2814, 2818, 2829, 2832, 2842, 2845, 2856, 2859, 2872, 2878,
     2882, 2888, 2901, 2904, 2907, 2917, 2928, 2933, 2939, 2943,
     2953, 2957, 2967, 2979, 2989, 2995, 2999, 3005, 3009, 3015,
     3019, 3025, 3030, 3040, 3046, 3050, 3062, 3065, 3068, 3081,
     3084, 3094, 3097, 3107, 3110, 3113, 3134, 3140, 3150, 3123,
      138, 3160, 3175, 3178, 3189, 3192, 3203, 3207, 3217, 3221,
     3231, 3241, 3237, 3251, 3254, 3264, 3267, 3270, 3282, 3296,
     3302, 3307, 3317, 3320, 3323, 3333, 3344, 3347, 3357, 3361,

     3367, 3371, 3377, 3387, 3390, 3403, 3406, 3417, 3427, 3430,
     3433, 3444, 3447, 3458, 3462, 3472, 3478, 3484, 3490, 3494,
     3504, 3507, 3510, 3521, 3524, 3537, 3543, 3548, 3561, 3564,
     3567, 3577, 3583, 3588,  143,  143, 3593, 3598, 3603, 3614,
     3618, 3624, 3636, 3639,  129, 3642, 3652, 3657, 3662, 3672,
     3675, 3678, 3691, 3694, 3697, 3708, 3711, 3723, 3727, 3740,
     3743, 3746, 3756, 3759, 3769, 3774, 3784, 3780, 3794, 3811,
     3815, 3827, 3830, 3833, 3844, 3847, 3850, 3860, 3863, 3878,
     3881, 3892, 3902, 3905, 3919, 3923, 3929, 3935, 3939, 3949,
     3952, 3955, 3965, 3970, 3976, 3980, 3986, 3990, 4001,  116,

      127, 4004, 4014, 4024, 4038, 4041, 4044, 4055, 4058,  127,
     4074, 4078, 4088, 4091, 4094, 4105, 4111, 4115, 4121, 4125,
     4131, 4143, 4146, 4149, 4159, 4169, 4179, 4185, 4189, 4195,
     4199, 4205, 4215, 4218, 4228, 4243, 4247, 4253, 4258, 4263,
     4273, 4278, 4288, 4294, 4298, 4304, 4314, 4324, 4327, 4330,
     4341, 4347, 4351, 4361, 4364, 4377, 4380, 4390,  125,  115,
     4394, 4400, 4404, 4410, 4414, 4424,  334, 4435, 4438, 4441,
     4451, 4456, 4461, 4467, 4471, 4481, 4491, 4495, 4505, 4508,
     4521, 4524, 4534, 4537, 4547, 4550, 4563, 4566, 4576, 4579,
     4582, 4592, 4595, 4605, 4608, 4611, 4623, 4627, 4637, 4643,

     4653, 4656, 4659, 4674, 4680,  109,   91, 4684, 4696, 4699,
     4702, 4712,  450, 4715, 4718, 4733, 4745, 4750, 4755, 4760,
     4771, 4774, 4784, 4787, 4799, 4802, 4812, 4815, 4818, 4830,
     4843, 4846, 4849, 4860, 4863, 4873, 4879, 4883, 4893, 4898,
     4903, 4908, 4918, 4922, 5349,   92, 4928, 4932, 4938, 4942,
     4948,   67, 4952, 4958, 4962, 4972, 4975, 4985, 4989, 4995,
     4999, 5009, 5012, 5025, 5035, 5038, 5048, 5051, 5054, 5064,
     5067, 5077, 5349, 5080,   90, 5090, 5094, 5108, 5114, 5118,
     5124, 5128, 5134, 5138, 5144, 5148, 5161, 5164, 5174,   61,
     5177, 5180, 5190, 5193, 5196, 5208, 5211,   59, 5214, 5224,

     5234, 5238, 5248,   41, 5251,   46, 5254,   39, 5264, 5349,
     5267, 5349, 5315, 5321, 5326, 5329, 5335, 5342,   71
    } ;

static yyconst short int yy_def[820] =
    {   0,
      812,    1,  813,  813,  812,  812,  812,  814,  815,  812,
      812,  812,  816,  812,  812,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  817,  818,  812,  812,
      812,  812,  812,  814,  812,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  815,  815,  812,  816,
      812,  819,  812,  816,  819,  812,  812,  812,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,

      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  817,  817,  818,  812,  812,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  815,  819,  812,
      812,  812,  812,  819,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,

      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  812,
      812,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  812,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,

      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  812,  812,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  812,  814,  814,

      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  812,  814,  814,  814,
      812,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,

      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  812,  812,  814,  814,  814,  814,
      814,  814,  814,  814,  812,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  812,

      812,  814,  814,  814,  814,  814,  814,  814,  814,  812,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  812,  812,
      814,  814,  814,  814,  814,  814,  812,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,

      814,  814,  814,  814,  814,  812,  812,  814,  814,  814,
      814,  814,  812,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  812,  812,  814,  814,  814,  814,
      814,  812,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  812,  814,  812,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  812,
      814,  814,  814,  814,  814,  814,  814,  812,  814,  814,

      814,  814,  814,  812,  814,  812,  814,  812,  814,  812,
      814,    0,  812,  812,  812,  812,  812,  812,  812
    } ;

static yyconst short int yy_nxt[5409] =
    {   0,
        6,    7,    7,    7,    8,    9,   10,   11,   12,   13,
        6,   14,   10,   15,   16,   17,   18,   19,   20,   21,
       19,   19,   22,   23,   24,   25,   19,   26,   27,   28,
       29,   19,   19,   30,   31,   19,   19,   32,   33,   34,
       19,   35,   36,   37,   19,   38,   39,   40,   19,   41,
       42,   43,   44,   45,   46,   19,   19,   47,    6,   49,
       50,   49,   50,   52,   52,   52,   68,   73,   74,   69,
       76,   77,   53,   53,   53,  159,  810,   75,   53,   53,
       53,   55,   53,   53,   53,  808,  806,   55,   53,   53,
       53,   55,  804,   53,   53,   53,   75,   55,   53,   53,

       53,  798,   55,   53,   53,   53,  790,   55,   52,   52,
       52,   68,   55,  775,   69,   51,   79,   51,   53,   53,
       53,   53,   53,   53,   89,   68,   80,   55,   69,  773,
       55,   56,   57,   58,   59,   60,   61,  163,  117,  164,
      746,   85,   62,   63,   64,   65,   66,   86,   87,   68,
      158,   88,   69,   81,   53,   53,   53,  163,  745,  252,
       82,  707,  706,   55,  667,  660,   83,  659,  610,   84,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   55,
      601,  600,   55,  545,  471,   55,   53,   53,   53,  398,
      252,   53,   53,   53,   91,   55,   53,   53,   53,   90,

       55,  319,  318,   96,  164,   55,  252,  231,  102,   53,
       53,   53,   94,  230,  137,   92,   73,   74,   55,   93,
      137,  137,   97,   78,   71,   98,   75,   95,   53,   53,
       53,   70,  100,   53,   53,   53,   99,   55,   53,   53,
       53,  812,   55,  103,  101,   75,  812,   55,   53,   53,
       53,  104,  161,  105,   53,   53,   53,   55,   53,   53,
       53,  162,  812,   55,   53,   53,   53,   55,  106,  812,
       53,   53,   53,   55,  812,  108,  812,  109,  111,   55,
      162,  812,  812,  107,  113,  812,  112,  110,   53,   53,
       53,   53,   53,   53,  116,  812,  812,   55,  114,  812,

       55,  812,  115,   53,   53,   53,   53,   53,   53,  118,
      812,  812,   55,  812,  812,   55,  119,  812,  120,   53,
       53,   53,  122,  812,  121,  812,  812,  123,   55,   53,
       53,   53,  812,  812,  125,  713,  713,  713,   55,  126,
      812,  812,  124,   53,   53,   53,  812,  812,  127,  812,
      132,  129,   55,  812,  128,  130,   53,   53,   53,  812,
      812,  133,   53,   53,   53,   55,  812,  131,   53,   53,
       53,   55,   53,   53,   53,  134,  812,   55,  812,  139,
      812,   55,  812,  135,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   55,  812,  812,   55,  812,  812,   55,

      812,  812,  141,  812,  142,  140,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   55,  812,  143,   55,  812,
      812,   55,  812,  145,  812,  812,   53,   53,   53,  144,
       53,   53,   53,  812,  146,   55,   53,   53,   53,   55,
      160,  161,  147,  812,  151,   55,   73,   74,  812,  812,
      162,  713,  713,  713,  148,  150,   75,  149,  812,  812,
      152,  812,  153,  812,  812,  812,  154,  812,  812,  162,
      812,  812,  155,  812,  752,   75,  156,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   55,  812,  812,   55,
      812,  157,   55,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   55,  812,  812,   55,  812,  812,   55,   53,
       53,   53,   53,   53,   53,  812,  166,  165,   55,  812,
      812,   55,   53,   53,   53,  167,  812,   53,   53,   53,
      812,   55,  812,  812,  812,  170,   55,  812,  168,  812,
      169,  171,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   55,  172,  812,   55,  812,  812,   55,  812,  174,
       53,   53,   53,   53,   53,   53,  812,  812,  812,   55,
      173,  812,   55,  812,  812,  178,  812,  812,  175,  812,
      176,   53,   53,   53,   53,   53,   53,  179,  812,  177,
       55,  812,  812,   55,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   55,  180,  812,   55,  812,  812,   55,
      181,  182,  812,  812,  185,   53,   53,   53,   53,   53,
       53,  812,  812,  812,   55,  812,  812,   55,  184,  812,
      183,  812,  812,  186,  812,   53,   53,   53,  812,  812,
      812,   53,   53,   53,   55,  187,  812,  188,  812,  812,
       55,   53,   53,   53,   53,   53,   53,  812,  812,  812,
       55,  812,  812,   55,  812,  812,  189,  190,  191,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   55,  812,
      812,   55,  812,  812,   55,   53,   53,   53,   53,   53,
       53,  812,  193,  812,   55,  812,  812,   55,   53,   53,

       53,  192,  812,  812,  194,  812,  196,   55,   53,   53,
       53,  812,   53,   53,   53,  812,  812,   55,  812,  812,
      812,   55,  195,   53,   53,   53,  812,  197,   53,   53,
       53,  812,   55,   53,   53,   53,  812,   55,  812,  198,
      812,  812,   55,  812,  199,   53,   53,   53,  812,   53,
       53,   53,  812,  812,   55,  201,  200,  202,   55,   53,
       53,   53,  812,   53,   53,   53,  812,  812,   55,  812,
      812,  812,   55,  203,   53,   53,   53,  812,  204,  812,
      812,  205,  812,   55,  812,   53,   53,   53,  812,  812,
      209,  812,  812,  207,   55,   53,   53,   53,  208,  211,

      206,  812,  812,  812,   55,  812,  812,  210,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   55,  812,  812,
       55,  812,  812,   55,  812,   53,   53,   53,   53,   53,
       53,  812,  812,  212,   55,  812,  812,   55,  812,  812,
      214,  812,  215,  213,  812,  812,  812,  217,  812,   53,
       53,   53,  812,  216,   53,   53,   53,  218,   55,   53,
       53,   53,  812,   55,   53,   53,   53,  812,   55,  812,
      812,  219,  812,   55,  812,   53,   53,   53,  812,   53,
       53,   53,  812,  220,   55,  812,  812,  221,   55,   53,
       53,   53,   53,   53,   53,  812,  224,  812,   55,  812,

      812,   55,  222,  812,  225,   53,   53,   53,  812,   53,
       53,   53,  812,  223,   55,  226,  812,  812,   55,  812,
      812,  227,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   55,  812,  812,   55,  812,  812,   55,  812,  228,
      812,  812,  229,  233,   53,   53,   53,  812,  812,   53,
       53,   53,  812,   55,  812,  232,  812,  234,   55,  812,
      812,  812,  237,   53,   53,   53,  812,  812,  235,  236,
      812,  812,   55,   53,   53,   53,   53,   53,   53,  238,
      812,  239,   55,  812,  812,   55,  812,   53,   53,   53,
      812,   53,   53,   53,  812,  240,   55,   53,   53,   53,

       55,   53,   53,   53,  812,  812,   55,   53,   53,   53,
       55,  812,  242,   53,   53,   53,   55,  241,   53,   53,
       53,  812,   55,   53,   53,   53,  812,   55,  812,   53,
       53,   53,   55,  812,  812,  243,  245,  244,   55,  246,
       53,   53,   53,   53,   53,   53,  247,  812,  248,   55,
      812,  812,   55,  812,  812,  249,  250,  812,   53,   53,
       53,  254,  812,  812,  251,  812,  253,   55,   53,   53,
       53,   53,   53,   53,  255,  812,  812,   55,  812,  812,
       55,  812,  812,  256,   53,   53,   53,   53,   53,   53,
      812,  812,  812,   55,  812,  812,   55,   53,   53,   53,

      258,  812,   53,   53,   53,  812,   55,   53,   53,   53,
      257,   55,   53,   53,   53,  812,   55,  812,  261,  812,
      259,   55,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   55,  812,  260,   55,  812,  812,   55,  812,  812,
      262,  812,  812,  264,  812,  268,  812,  812,  263,   53,
       53,   53,  265,   53,   53,   53,  812,  812,   55,  812,
      812,  266,   55,  812,  267,   53,   53,   53,   53,   53,
       53,  812,  812,  270,   55,  812,  812,   55,  812,  812,
      269,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       55,  812,  812,   55,  812,  812,   55,  812,  812,  273,

       53,   53,   53,   53,   53,   53,  812,  812,  812,   55,
      271,  274,   55,   53,   53,   53,  272,  812,  812,  275,
      812,  812,   55,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   55,  812,  812,   55,  812,  812,   55,  812,
      276,  812,   53,   53,   53,  812,  278,  279,  812,  812,
      277,   55,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   55,  812,  812,   55,  812,  280,   55,   53,   53,
       53,   53,   53,   53,  281,  812,  812,   55,  812,  812,
       55,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       55,  812,  812,   55,  283,  282,   55,  812,  284,   53,

       53,   53,  812,   53,   53,   53,  812,  812,   55,  812,
      812,  285,   55,  812,  812,  288,  286,  812,  290,   53,
       53,   53,  812,   53,   53,   53,  812,  812,   55,  812,
      287,  812,   55,  812,   53,   53,   53,  812,  812,  291,
      812,  812,  289,   55,   53,   53,   53,  812,   53,   53,
       53,  812,  812,   55,  812,  292,  293,   55,   53,   53,
       53,  812,   53,   53,   53,  812,  812,   55,  812,  812,
      294,   55,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   55,  812,  812,   55,  812,  812,   55,   53,   53,
       53,   53,   53,   53,  295,  812,  812,   55,  296,  812,

       55,  297,  812,   53,   53,   53,  812,   53,   53,   53,
      298,  300,   55,  812,  812,  299,   55,   53,   53,   53,
      301,   53,   53,   53,  812,  812,   55,  303,  812,  812,
       55,   53,   53,   53,   53,   53,   53,  812,  302,  812,
       55,  812,  812,   55,  812,  812,  304,   53,   53,   53,
       53,   53,   53,  306,  812,  305,   55,  812,  812,   55,
      307,   53,   53,   53,  812,   53,   53,   53,  812,  812,
       55,  812,  812,  308,   55,  812,   53,   53,   53,  812,
      309,   53,   53,   53,  311,   55,   53,   53,   53,  812,
       55,  812,  812,  313,  312,   55,  812,  310,   53,   53,

       53,  812,  314,   53,   53,   53,  812,   55,   53,   53,
       53,  812,   55,  812,  812,  316,  812,   55,  812,   53,
       53,   53,   53,   53,   53,  317,  812,  315,   55,  812,
      812,   55,   53,   53,   53,  812,  812,  812,  320,  812,
      812,   55,  812,  812,  321,   53,   53,   53,  812,   53,
       53,   53,  812,  812,   55,  812,  812,  324,   55,   53,
       53,   53,  812,  322,  812,  323,  812,  812,   55,  812,
      812,  325,  326,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   55,  812,  812,   55,  812,  812,   55,  812,
      812,  327,   53,   53,   53,   53,   53,   53,  812,  812,

      812,   55,  328,  812,   55,  812,  812,  329,   53,   53,
       53,  331,   53,   53,   53,  812,  812,   55,   53,   53,
       53,   55,  812,  812,  330,  812,  812,   55,  812,  333,
       53,   53,   53,  812,   53,   53,   53,  812,  812,   55,
      812,  812,  332,   55,  334,   53,   53,   53,  812,  812,
       53,   53,   53,  812,   55,  812,  812,  335,  812,   55,
      812,  812,  812,  336,  812,   53,   53,   53,  812,  337,
      339,  812,  812,  338,   55,   53,   53,   53,   53,   53,
       53,  340,  341,  812,   55,  812,  812,   55,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   55,  812,  812,

       55,  812,  812,   55,  812,  812,  342,   53,   53,   53,
      812,  812,  344,   53,   53,   53,   55,  812,   53,   53,
       53,  812,   55,  812,  345,  812,  343,   55,  812,  812,
      347,  349,  812,   53,   53,   53,   53,   53,   53,  812,
      812,  346,   55,  812,  812,   55,   53,   53,   53,  350,
       53,   53,   53,  812,  812,   55,  812,  348,  812,   55,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   55,
      812,  812,   55,  812,  812,   55,  812,  812,  351,   53,
       53,   53,  353,  357,  358,  812,  354,  812,   55,   53,
       53,   53,   53,   53,   53,  812,  352,  812,   55,  812,

      812,   55,   53,   53,   53,  355,  812,   53,   53,   53,
      812,   55,   53,   53,   53,  359,   55,  356,   53,   53,
       53,   55,  812,  812,  363,  812,  812,   55,  812,  362,
       53,   53,   53,  812,  361,   53,   53,   53,  812,   55,
      360,   53,   53,   53,   55,   53,   53,   53,  812,  364,
       55,   53,   53,   53,   55,   53,   53,   53,  812,  812,
       55,  812,  812,  812,   55,   53,   53,   53,  812,  812,
      365,   53,   53,   53,   55,  366,  812,  367,  812,  812,
       55,  812,   53,   53,   53,  812,  812,  370,  812,  812,
      812,   55,   53,   53,   53,  812,  812,  368,  812,  369,

      812,   55,   53,   53,   53,  371,   53,   53,   53,  812,
      812,   55,   53,   53,   53,   55,  812,  372,  373,  812,
      812,   55,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   55,  812,  812,   55,  812,  374,   55,  812,  812,
      376,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       55,  812,  375,   55,  812,  812,   55,  812,   53,   53,
       53,  812,  812,  378,  812,  812,  379,   55,   53,   53,
       53,   53,   53,   53,  377,  812,  812,   55,  812,  812,
       55,   53,   53,   53,  812,  812,  380,   53,   53,   53,
       55,  812,   53,   53,   53,  812,   55,  812,  812,  812,

      382,   55,  812,  383,  812,  812,  381,   53,   53,   53,
       53,   53,   53,  384,  812,  812,   55,  812,  812,   55,
      812,  385,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   55,  812,  812,   55,  812,  812,   55,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   55,  812,  812,
       55,  812,  812,   55,   53,   53,   53,  812,  812,  387,
      812,  812,  812,   55,   53,   53,   53,  812,  386,  388,
       53,   53,   53,   55,   53,   53,   53,  389,  812,   55,
      812,  812,  812,   55,   53,   53,   53,  812,  812,  390,
       53,   53,   53,   55,   53,   53,   53,  812,  812,   55,

      391,  812,  812,   55,   53,   53,   53,   53,   53,   53,
      812,  812,  812,   55,  812,  812,   55,  812,  393,  392,
      812,   53,   53,   53,  812,  812,  395,  812,  812,  394,
       55,  812,  812,  396,  812,  397,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   55,  812,  812,   55,  812,
      812,   55,  400,   53,   53,   53,   53,   53,   53,  399,
      812,  812,   55,  812,  812,   55,   53,   53,   53,  812,
      812,  401,   53,   53,   53,   55,   53,   53,   53,  812,
      812,   55,  402,  812,  812,   55,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   55,  812,  812,   55,  812,

      812,   55,  812,  403,  812,  404,  812,  812,  406,  812,
       53,   53,   53,   53,   53,   53,  812,  405,  408,   55,
      812,  812,   55,  812,  812,  812,  407,  812,  410,   53,
       53,   53,  409,   53,   53,   53,  812,  812,   55,   53,
       53,   53,   55,   53,   53,   53,  411,  812,   55,   53,
       53,   53,   55,   53,   53,   53,  812,  812,   55,   53,
       53,   53,   55,  812,  812,  412,  812,  812,   55,  812,
      416,  812,   53,   53,   53,  414,   53,   53,   53,  415,
      413,   55,   53,   53,   53,   55,   53,   53,   53,  812,
      812,   55,   53,   53,   53,   55,   53,   53,   53,  812,

      812,   55,  812,  418,  812,   55,   53,   53,   53,  417,
       53,   53,   53,  812,  812,   55,  812,  812,  419,   55,
      812,  812,  420,   53,   53,   53,  812,  812,  422,  812,
      421,  812,   55,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   55,  812,  812,   55,  812,  812,   55,  812,
      812,  812,  423,  812,  424,  812,   53,   53,   53,   53,
       53,   53,  812,  812,  425,   55,  812,  812,   55,   53,
       53,   53,  812,   53,   53,   53,  812,  812,   55,  812,
      812,  426,   55,  427,   53,   53,   53,   53,   53,   53,
      428,  812,  812,   55,  812,  812,   55,   53,   53,   53,

      812,   53,   53,   53,  812,  812,   55,  812,  812,  430,
       55,  812,  429,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   55,  812,  812,   55,  812,  431,   55,  432,
      812,   53,   53,   53,   53,   53,   53,  812,  812,  433,
       55,  812,  812,   55,  812,  434,   53,   53,   53,  812,
      812,  435,   53,   53,   53,   55,   53,   53,   53,  437,
      812,   55,  438,  436,  812,   55,  812,  439,  812,  812,
       53,   53,   53,   53,   53,   53,  812,  442,  441,   55,
      440,  812,   55,   53,   53,   53,  812,  812,  443,   53,
       53,   53,   55,   53,   53,   53,  444,  812,   55,   53,

       53,   53,   55,   53,   53,   53,  812,  812,   55,   53,
       53,   53,   55,  812,  812,  812,  445,  812,   55,   53,
       53,   53,  446,  812,   53,   53,   53,  812,   55,  449,
      812,  812,  447,   55,   53,   53,   53,  448,  812,  450,
      812,  451,  812,   55,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   55,  812,  452,   55,  812,  812,   55,
       53,   53,   53,   53,   53,   53,  454,  812,  812,   55,
      812,  812,   55,  812,  812,  453,  455,   53,   53,   53,
      812,   53,   53,   53,  812,  812,   55,  812,  812,  456,
       55,  812,   53,   53,   53,  812,   53,   53,   53,  812,

      457,   55,  812,  812,  458,   55,   53,   53,   53,   53,
       53,   53,  812,  459,  812,   55,  812,  812,   55,  812,
      460,   53,   53,   53,  461,   53,   53,   53,  812,  812,
       55,  812,  812,  812,   55,   53,   53,   53,  812,  812,
      463,  467,  467,  467,   55,  812,   53,   53,   53,  812,
       55,   53,   53,   53,  462,   55,   53,   53,   53,  812,
       55,  812,  812,  465,  812,   55,  812,  464,  812,   53,
       53,   53,  468,   53,   53,   53,  812,  469,   55,   53,
       53,   53,   55,  466,   53,   53,   53,  812,   55,  812,
       53,   53,   53,   55,  470,  812,  472,  812,  812,   55,

       53,   53,   53,   53,   53,   53,  812,  812,  812,   55,
      812,  812,   55,  812,  812,  473,  476,   53,   53,   53,
      812,  474,   53,   53,   53,  812,   55,  812,  812,  475,
      477,   55,  478,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   55,  812,  812,   55,  812,  812,   55,   53,
       53,   53,   53,   53,   53,  812,  812,  479,   55,  812,
      812,   55,   53,   53,   53,   53,   53,   53,  812,  481,
      812,   55,  480,  812,   55,  812,   53,   53,   53,  812,
      812,  484,  812,  812,  482,   55,  812,  812,  483,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   55,  812,

      485,   55,  812,  812,   55,   53,   53,   53,  812,  487,
      488,  812,  486,  812,   55,   53,   53,   53,  812,   53,
       53,   53,  812,  812,   55,  812,  812,  491,   55,  489,
       53,   53,   53,   53,   53,   53,  812,  812,  490,   55,
      812,  812,   55,   53,   53,   53,   53,   53,   53,  812,
      812,  812,   55,  812,  812,   55,  812,   53,   53,   53,
       53,   53,   53,  812,  812,  492,   55,  812,  812,   55,
      494,  812,  493,   53,   53,   53,  812,  495,  812,   53,
       53,   53,   55,   53,   53,   53,  812,  496,   55,   53,
       53,   53,   55,  812,  497,  498,  812,  812,   55,  812,

      812,  499,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   55,  812,  812,   55,  812,  812,   55,   53,   53,
       53,  812,  812,  501,  812,  812,  812,   55,  500,   53,
       53,   53,  812,  503,   53,   53,   53,  502,   55,  504,
       53,   53,   53,   55,   53,   53,   53,  812,  812,   55,
      506,  812,  812,   55,   53,   53,   53,  505,   53,   53,
       53,  812,  812,   55,  812,  812,  507,   55,   53,   53,
       53,  812,  509,  812,  812,  512,  812,   55,  812,  508,
       53,   53,   53,  812,  812,  513,  511,  812,  812,   55,
       53,   53,   53,  812,  510,  514,   53,   53,   53,   55,

       53,   53,   53,  812,  812,   55,   53,   53,   53,   55,
       53,   53,   53,  812,  812,   55,   53,   53,   53,   55,
       53,   53,   53,  812,  812,   55,   53,   53,   53,   55,
      515,   53,   53,   53,  812,   55,  517,  812,  518,  812,
       55,   53,   53,   53,  812,  812,  516,   53,   53,   53,
       55,   53,   53,   53,  519,  812,   55,  812,  520,  812,
       55,  812,  521,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   55,  523,  522,   55,  812,  812,   55,  812,
      812,  525,   53,   53,   53,   53,   53,   53,  812,  524,
      812,   55,  812,  812,   55,   53,   53,   53,   53,   53,

       53,  812,  527,  526,   55,  812,  812,   55,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   55,  812,  812,
       55,  812,  812,   55,   53,   53,   53,  529,  812,  812,
      530,  812,  812,   55,  528,  467,  467,  467,  812,  812,
      533,   53,   53,   53,   55,  812,  812,  531,  532,  812,
       55,   53,   53,   53,  812,  812,  543,  534,  139,  812,
       55,   53,   53,   53,  544,  812,  812,  535,  536,  812,
       55,  812,  812,  537,  538,  812,   53,   53,   53,   53,
       53,   53,  812,  812,  140,   55,  812,  812,   55,  812,
       53,   53,   53,   53,   53,   53,  812,  539,  540,   55,

      541,  812,   55,  542,   53,   53,   53,  812,   53,   53,
       53,  546,  812,   55,  812,  548,  547,   55,   53,   53,
       53,  812,   53,   53,   53,  812,  812,   55,  812,  812,
      549,   55,   53,   53,   53,  812,  812,  550,   53,   53,
       53,   55,   53,   53,   53,  812,  812,   55,  812,  551,
      812,   55,   53,   53,   53,   53,   53,   53,  552,  812,
      812,   55,  554,  553,   55,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   55,  812,  812,   55,  812,  812,
       55,  812,  555,   53,   53,   53,  556,  557,  812,  559,
      812,  812,   55,  812,  812,  812,  558,   53,   53,   53,

      812,  812,  561,   53,   53,   53,   55,  812,   53,   53,
       53,  812,   55,  812,  560,  812,  562,   55,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   55,  563,  812,
       55,  812,  812,   55,   53,   53,   53,  812,  812,  566,
      812,  812,  564,   55,  812,   53,   53,   53,   53,   53,
       53,  812,  812,  565,   55,  812,  812,   55,   53,   53,
       53,  567,   53,   53,   53,  812,  569,   55,   53,   53,
       53,   55,   53,   53,   53,  568,  812,   55,   53,   53,
       53,   55,  812,  812,  570,  812,  812,   55,   53,   53,
       53,   53,   53,   53,  812,  812,  812,   55,  812,  812,

       55,  812,  812,  573,   53,   53,   53,   53,   53,   53,
      812,  812,  571,   55,  812,  574,   55,  572,   53,   53,
       53,  812,  576,  812,  575,  812,  812,   55,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   55,  812,  812,
       55,  812,  812,   55,  812,   53,   53,   53,   53,   53,
       53,  812,  577,  578,   55,  812,  812,   55,  812,   53,
       53,   53,  812,   53,   53,   53,  812,  812,   55,  812,
      812,  580,   55,   53,   53,   53,  812,  812,  579,   53,
       53,   53,   55,  812,  581,   53,   53,   53,   55,  582,
      812,   53,   53,   53,   55,   53,   53,   53,  583,  584,

       55,  812,  585,  812,   55,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   55,  812,  812,   55,  812,  812,
       55,  812,   53,   53,   53,   53,   53,   53,  812,  812,
      812,   55,  812,  812,   55,  586,  812,  588,   53,   53,
       53,  587,  812,  590,   53,   53,   53,   55,  812,   53,
       53,   53,  812,   55,  812,  812,  589,  591,   55,  812,
      812,  592,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   55,  812,  812,   55,  812,  812,   55,   53,   53,
       53,  812,  812,  593,   53,   53,   53,   55,  594,   53,
       53,   53,  812,   55,   53,   53,   53,  812,   55,   53,

       53,   53,  812,   55,   53,   53,   53,  596,   55,  812,
      595,  812,  812,   55,  812,   53,   53,   53,  597,   53,
       53,   53,  812,  598,   55,   53,   53,   53,   55,  812,
      812,  602,  599,  812,   55,  603,  604,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   55,  812,  812,   55,
      812,  812,   55,   53,   53,   53,  812,  607,   53,   53,
       53,  812,   55,   53,   53,   53,  605,   55,  812,  606,
      812,  812,   55,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   55,  611,  609,   55,  812,  612,   55,  613,
      812,  608,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   55,  812,  812,   55,  812,  812,   55,  614,   53,
       53,   53,   53,   53,   53,  617,  812,  812,   55,  812,
      616,   55,  812,  615,   53,   53,   53,  812,   53,   53,
       53,  812,  812,   55,  620,  812,  618,   55,  812,  812,
      619,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       55,  812,  812,   55,  812,  812,   55,   53,   53,   53,
       53,   53,   53,  812,  622,  812,   55,  812,  812,   55,
       53,   53,   53,  812,  621,   53,   53,   53,  812,   55,
      623,   53,   53,   53,   55,   53,   53,   53,  812,  812,
       55,  624,  812,  812,   55,   53,   53,   53,  812,  812,

      626,  625,  812,  812,   55,  812,  627,  812,  628,  812,
      812,  629,   53,   53,   53,  812,   53,   53,   53,  812,
      812,   55,  812,  630,  632,   55,  812,  631,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   55,  633,  812,
       55,  812,  812,   55,  635,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   55,  812,  812,   55,  812,  812,
       55,   53,   53,   53,   53,   53,   53,  812,  812,  812,
       55,  812,  812,   55,  636,  812,  637,  812,  634,   53,
       53,   53,   53,   53,   53,  638,  812,  812,   55,  812,
      812,   55,  812,   53,   53,   53,  812,  640,  812,  812,

      641,  639,   55,   53,   53,   53,   53,   53,   53,  812,
      812,  812,   55,  642,  812,   55,  812,  812,  643,  812,
       53,   53,   53,  812,   53,   53,   53,  812,  644,   55,
       53,   53,   53,   55,  812,  645,   53,   53,   53,   55,
       53,   53,   53,  812,  812,   55,  812,  812,  646,   55,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   55,
      812,  812,   55,  647,  648,   55,   53,   53,   53,  812,
      649,   53,   53,   53,  812,   55,  650,   53,   53,   53,
       55,   53,   53,   53,  812,  812,   55,   53,   53,   53,
       55,   53,   53,   53,  812,  812,   55,  812,  651,  812,

       55,  812,   53,   53,   53,   53,   53,   53,  812,  812,
      652,   55,  812,  812,   55,   53,   53,   53,  812,  656,
      812,  653,  812,  655,   55,   53,   53,   53,  812,  812,
      812,  812,  654,  812,   55,  812,  812,  657,  658,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   55,  812,
      812,   55,  662,  812,   55,  661,   53,   53,   53,   53,
       53,   53,  812,  812,  812,   55,  812,  812,   55,  812,
      812,  664,  812,  663,  665,   53,   53,   53,  812,   53,
       53,   53,  812,  812,   55,  812,  812,  666,   55,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   55,  812,

      812,   55,  812,  812,   55,  812,   53,   53,   53,  812,
      812,  668,   53,   53,   53,   55,   53,   53,   53,  812,
      812,   55,   53,   53,   53,   55,   53,   53,   53,  669,
      812,   55,   53,   53,   53,   55,  671,  672,  812,  670,
      812,   55,  812,  673,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   55,  812,  812,   55,  812,  812,   55,
       53,   53,   53,  676,  812,  812,  674,  812,  812,   55,
       53,   53,   53,  812,  675,  677,  812,  812,  812,   55,
       53,   53,   53,  812,  812,  679,   53,   53,   53,   55,
       53,   53,   53,  678,  812,   55,   53,   53,   53,   55,

       53,   53,   53,  812,  812,   55,   53,   53,   53,   55,
      812,  681,  812,  812,  680,   55,   53,   53,   53,   53,
       53,   53,  682,  812,  812,   55,  812,  812,   55,   53,
       53,   53,  812,  812,  683,  812,  686,  812,   55,  687,
      812,  812,  684,  812,   53,   53,   53,  685,   53,   53,
       53,  812,  688,   55,   53,   53,   53,   55,  812,   53,
       53,   53,  812,   55,   53,   53,   53,  812,   55,  812,
      812,  689,  812,   55,   53,   53,   53,  812,  812,   53,
       53,   53,  812,   55,  812,  691,  690,  693,   55,   53,
       53,   53,  812,  812,  692,   53,   53,   53,   55,   53,

       53,   53,  812,  812,   55,   53,   53,   53,   55,  812,
      694,  812,  812,  812,   55,   53,   53,   53,  812,  812,
      695,  812,  812,  696,   55,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   55,  812,  812,   55,  812,  812,
       55,  698,   53,   53,   53,  812,  812,  697,   53,   53,
       53,   55,   53,   53,   53,  699,  812,   55,  812,  812,
      701,   55,   53,   53,   53,   53,   53,   53,  812,  812,
      812,   55,  812,  702,   55,  812,  812,  700,   53,   53,
       53,   53,   53,   53,  812,  812,  812,   55,  812,  812,
       55,   53,   53,   53,  812,   53,   53,   53,  812,  812,

       55,   53,   53,   53,   55,   53,   53,   53,  812,  812,
       55,   53,   53,   53,   55,   53,   53,   53,  812,  812,
       55,  812,  812,  812,   55,   53,   53,   53,  703,  812,
      704,  708,  812,  812,   55,  705,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   55,  709,  812,   55,  812,
      812,   55,   53,   53,   53,  710,  812,   53,   53,   53,
      812,   55,   53,   53,   53,  711,   55,  812,   53,   53,
       53,   55,   53,   53,   53,  812,  712,   55,  812,  812,
      812,   55,   53,   53,   53,  714,  812,  716,  812,  812,
      715,   55,   53,   53,   53,  718,   53,   53,   53,  812,

      812,   55,  812,  717,  812,   55,   53,   53,   53,   53,
       53,   53,  812,  812,  812,   55,  812,  719,   55,  812,
      812,  720,   53,   53,   53,   53,   53,   53,  812,  812,
      721,   55,  812,  812,   55,   53,   53,   53,   53,   53,
       53,  812,  722,  812,   55,  812,  723,   55,   53,   53,
       53,   53,   53,   53,  812,  812,  812,   55,  812,  724,
       55,  812,  725,  726,   53,   53,   53,   53,   53,   53,
      727,  812,  812,   55,  728,  812,   55,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   55,  812,  812,   55,
      729,  812,   55,   53,   53,   53,   53,   53,   53,  812,

      730,  812,   55,  812,  812,   55,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   55,  732,  812,   55,  731,
      812,   55,  812,  733,   53,   53,   53,  812,   53,   53,
       53,  812,  812,   55,  812,  734,  735,   55,   53,   53,
       53,  812,  812,  736,   53,   53,   53,   55,  812,  737,
      812,  812,  738,   55,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   55,  812,  812,   55,  812,  812,   55,
      812,  812,  740,  812,  739,   53,   53,   53,  812,  812,
      741,   53,   53,   53,   55,   53,   53,   53,  812,  812,
       55,  812,  812,  743,   55,  812,  742,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   55,  812,  812,   55,
      812,  812,   55,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   55,  812,  812,   55,  812,  812,   55,  812,
      812,  744,  812,  747,   53,   53,   53,  812,  812,  750,
      812,  812,  812,   55,  812,  748,   53,   53,   53,  751,
      749,   53,   53,   53,  812,   55,   53,   53,   53,  812,
       55,   53,   53,   53,  812,   55,  812,  753,  812,  812,
       55,  812,   53,   53,   53,   53,   53,   53,  812,  812,
      754,   55,  812,  812,   55,   53,   53,   53,   53,   53,
       53,  755,  812,  812,   55,  812,  812,   55,  812,  812,

       53,   53,   53,   53,   53,   53,  756,  812,  757,   55,
      812,  812,   55,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   55,  812,  812,   55,  812,  812,   55,  812,
      758,   53,   53,   53,  812,  759,  812,  760,  812,  812,
       55,  812,  812,  761,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   55,  812,  763,   55,  812,  812,   55,
      762,   53,   53,   53,   53,   53,   53,  812,  812,  812,
       55,  812,  812,   55,   53,   53,   53,  812,  812,  764,
       53,   53,   53,   55,   53,   53,   53,  812,  812,   55,
      812,  812,  765,   55,   53,   53,   53,  766,  812,   53,

       53,   53,  812,   55,   53,   53,   53,  767,   55,   53,
       53,   53,  812,   55,  768,  812,  812,  769,   55,   53,
       53,   53,  771,   53,   53,   53,  812,  770,   55,   53,
       53,   53,   55,   53,   53,   53,  812,  812,   55,   53,
       53,   53,   55,   53,   53,   53,  812,  812,   55,   53,
       53,   53,   55,   53,   53,   53,  812,  812,   55,   53,
       53,   53,   55,   53,   53,   53,  812,  812,   55,  774,
      812,  772,   55,   53,   53,   53,   53,   53,   53,  812,
      812,  812,   55,  812,  812,   55,   53,   53,   53,  776,
       53,   53,   53,  812,  812,   55,   53,   53,   53,   55,

       53,   53,   53,  778,  812,   55,  812,  812,  777,   55,
       53,   53,   53,   53,   53,   53,  812,  812,  812,   55,
      812,  812,   55,  812,  812,  779,   53,   53,   53,  812,
      781,  812,  780,  812,  812,   55,   53,   53,   53,   53,
       53,   53,  812,  812,  782,   55,  812,  812,   55,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   55,  812,
      783,   55,  812,  812,   55,   53,   53,   53,   53,   53,
       53,  812,  784,  812,   55,  812,  812,   55,   53,   53,
       53,   53,   53,   53,  812,  785,  812,   55,  812,  812,
       55,   53,   53,   53,  786,   53,   53,   53,  812,  812,

       55,  787,  812,  812,   55,  812,  812,  812,  788,   53,
       53,   53,  812,  812,  789,   53,   53,   53,   55,   53,
       53,   53,  812,  812,   55,   53,   53,   53,   55,   53,
       53,   53,  812,  812,   55,   53,   53,   53,   55,   53,
       53,   53,  812,  812,   55,   53,   53,   53,   55,   53,
       53,   53,  812,  791,   55,  793,  812,  812,   55,  812,
      792,  812,   53,   53,   53,   53,   53,   53,  812,  812,
      794,   55,  812,  812,   55,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   55,  795,  812,   55,  812,  812,
       55,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       55,  812,  812,   55,  812,  812,   55,  812,  796,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   55,  797,
      812,   55,  812,  812,   55,   53,   53,   53,  799,  812,
      812,  812,  800,  812,   55,   53,   53,   53,  801,   53,
       53,   53,  812,  812,   55,  802,  812,  812,   55,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   55,  812,
      812,   55,  803,  812,   55,   53,   53,   53,   53,   53,
       53,  812,  812,  805,   55,  812,  812,   55,  812,  812,
      812,  812,  812,  812,  812,  812,  807,  812,  812,  812,
      812,  809,  812,  812,  812,  812,  812,  812,  812,  812,

      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  811,   48,   48,   48,   48,   48,
       48,   48,   54,   54,   54,   54,   67,   67,   67,   67,
       67,   67,   67,   72,   72,  136,  136,  812,  136,  136,
      136,  136,  138,  138,  812,  812,  138,  138,    5,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,

      812,  812,  812,  812,  812,  812,  812,  812
    } ;

static yyconst short int yy_chk[5409] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        3,    4,    4,    7,    7,    7,    9,   13,   13,    9,
       14,   14,   16,   16,   16,  819,  808,   13,   17,   17,
       17,   16,   19,   19,   19,  806,  804,   17,   22,   22,
       22,   19,  798,   20,   20,   20,   13,   22,   37,   37,

       37,  790,   20,   21,   21,   21,  775,   37,   52,   52,
       52,   67,   21,  752,   67,    3,   16,    4,    8,    8,
        8,   18,   18,   18,   22,  158,   17,    8,  158,  746,
       18,    8,    8,    8,    8,    8,    8,   75,   37,   75,
      707,   20,    8,    8,    8,    8,    8,   20,   21,   68,
       68,   21,   68,   18,   23,   23,   23,  162,  706,  162,
       18,  660,  659,   23,  610,  601,   18,  600,  545,   18,
       24,   24,   24,   25,   25,   25,   26,   26,   26,   24,
      536,  535,   25,  471,  398,   26,   27,   27,   27,  318,
      252,   29,   29,   29,   24,   27,   28,   28,   28,   23,

       29,  231,  230,   27,  164,   28,  163,  140,   29,   30,
       30,   30,   26,  139,  137,   24,   70,   70,   30,   25,
      136,   47,   27,   15,   12,   27,   70,   26,   31,   31,
       31,   11,   28,   32,   32,   32,   27,   31,   33,   33,
       33,    5,   32,   30,   28,   70,    0,   33,   34,   34,
       34,   30,  161,   30,   35,   35,   35,   34,   36,   36,
       36,  161,    0,   35,   38,   38,   38,   36,   31,    0,
       39,   39,   39,   38,    0,   32,    0,   32,   33,   39,
      161,    0,    0,   31,   34,    0,   33,   32,   40,   40,
       40,   41,   41,   41,   36,    0,    0,   40,   35,    0,

       41,    0,   35,   42,   42,   42,   44,   44,   44,   38,
        0,    0,   42,    0,    0,   44,   39,    0,   39,   43,
       43,   43,   41,    0,   40,    0,    0,   41,   43,   45,
       45,   45,    0,    0,   42,  667,  667,  667,   45,   42,
        0,    0,   41,   46,   46,   46,    0,    0,   42,    0,
       44,   43,   46,    0,   42,   43,   53,   53,   53,    0,
        0,   45,   54,   54,   54,   53,    0,   43,   56,   56,
       56,   54,   57,   57,   57,   46,    0,   56,    0,   53,
        0,   57,    0,   46,   58,   58,   58,   59,   59,   59,
       60,   60,   60,   58,    0,    0,   59,    0,    0,   60,

        0,    0,   56,    0,   57,   53,   61,   61,   61,   62,
       62,   62,   63,   63,   63,   61,    0,   57,   62,    0,
        0,   63,    0,   59,    0,    0,   64,   64,   64,   58,
       65,   65,   65,    0,   60,   64,   66,   66,   66,   65,
       73,   73,   60,    0,   63,   66,   74,   74,    0,    0,
       73,  713,  713,  713,   61,   62,   74,   61,    0,    0,
       63,    0,   64,    0,    0,    0,   65,    0,    0,   73,
        0,    0,   66,    0,  713,   74,   66,   79,   79,   79,
       80,   80,   80,   81,   81,   81,   79,    0,    0,   80,
        0,   66,   81,   82,   82,   82,   83,   83,   83,   84,

       84,   84,   82,    0,    0,   83,    0,    0,   84,   85,
       85,   85,   86,   86,   86,    0,   80,   79,   85,    0,
        0,   86,   87,   87,   87,   81,    0,   88,   88,   88,
        0,   87,    0,    0,    0,   84,   88,    0,   82,    0,
       83,   85,   89,   89,   89,   90,   90,   90,   91,   91,
       91,   89,   86,    0,   90,    0,    0,   91,    0,   88,
       92,   92,   92,   93,   93,   93,    0,    0,    0,   92,
       87,    0,   93,    0,    0,   92,    0,    0,   89,    0,
       90,   94,   94,   94,   95,   95,   95,   92,    0,   90,
       94,    0,    0,   95,   96,   96,   96,   97,   97,   97,

       98,   98,   98,   96,   92,    0,   97,    0,    0,   98,
       92,   93,    0,    0,   96,   99,   99,   99,  100,  100,
      100,    0,    0,    0,   99,    0,    0,  100,   95,    0,
       94,    0,    0,   97,    0,  101,  101,  101,    0,    0,
        0,  102,  102,  102,  101,   98,    0,   99,    0,    0,
      102,  103,  103,  103,  104,  104,  104,    0,    0,    0,
      103,    0,    0,  104,    0,    0,  100,  101,  102,  105,
      105,  105,  106,  106,  106,  107,  107,  107,  105,    0,
        0,  106,    0,    0,  107,  108,  108,  108,  109,  109,
      109,    0,  104,    0,  108,    0,    0,  109,  110,  110,

      110,  103,    0,    0,  105,    0,  107,  110,  111,  111,
      111,    0,  112,  112,  112,    0,    0,  111,    0,    0,
        0,  112,  106,  113,  113,  113,    0,  108,  114,  114,
      114,    0,  113,  115,  115,  115,    0,  114,    0,  109,
        0,    0,  115,    0,  110,  116,  116,  116,    0,  117,
      117,  117,    0,    0,  116,  112,  111,  112,  117,  118,
      118,  118,    0,  119,  119,  119,    0,    0,  118,    0,
        0,    0,  119,  113,  120,  120,  120,    0,  114,    0,
        0,  115,    0,  120,    0,  121,  121,  121,    0,    0,
      118,    0,    0,  117,  121,  122,  122,  122,  117,  119,

      116,    0,    0,    0,  122,    0,    0,  118,  123,  123,
      123,  124,  124,  124,  125,  125,  125,  123,    0,    0,
      124,    0,    0,  125,    0,  126,  126,  126,  127,  127,
      127,    0,    0,  121,  126,    0,    0,  127,    0,    0,
      123,    0,  123,  122,    0,    0,    0,  125,    0,  128,
      128,  128,    0,  124,  129,  129,  129,  126,  128,  130,
      130,  130,    0,  129,  131,  131,  131,    0,  130,    0,
        0,  127,    0,  131,    0,  132,  132,  132,    0,  133,
      133,  133,    0,  128,  132,    0,    0,  129,  133,  134,
      134,  134,  135,  135,  135,    0,  131,    0,  134,    0,

        0,  135,  130,    0,  131,  141,  141,  141,    0,  142,
      142,  142,    0,  130,  141,  132,    0,    0,  142,    0,
        0,  133,  143,  143,  143,  144,  144,  144,  145,  145,
      145,  143,    0,    0,  144,    0,    0,  145,    0,  134,
        0,    0,  135,  142,  146,  146,  146,    0,    0,  147,
      147,  147,    0,  146,    0,  141,    0,  143,  147,    0,
        0,    0,  145,  148,  148,  148,    0,    0,  144,  144,
        0,    0,  148,  149,  149,  149,  150,  150,  150,  146,
        0,  147,  149,    0,    0,  150,    0,  151,  151,  151,
        0,  152,  152,  152,    0,  148,  151,  153,  153,  153,

      152,  154,  154,  154,    0,    0,  153,  155,  155,  155,
      154,    0,  150,  156,  156,  156,  155,  149,  157,  157,
      157,    0,  156,  165,  165,  165,    0,  157,    0,  166,
      166,  166,  165,    0,    0,  151,  152,  151,  166,  153,
      167,  167,  167,  168,  168,  168,  153,    0,  154,  167,
        0,    0,  168,    0,    0,  155,  156,    0,  169,  169,
      169,  166,    0,    0,  157,    0,  165,  169,  170,  170,
      170,  171,  171,  171,  167,    0,    0,  170,    0,    0,
      171,    0,    0,  168,  172,  172,  172,  173,  173,  173,
        0,    0,    0,  172,    0,    0,  173,  174,  174,  174,

      170,    0,  175,  175,  175,    0,  174,  176,  176,  176,
      169,  175,  177,  177,  177,    0,  176,    0,  173,    0,
      171,  177,  178,  178,  178,  179,  179,  179,  180,  180,
      180,  178,    0,  172,  179,    0,    0,  180,    0,    0,
      174,    0,    0,  176,    0,  180,    0,    0,  175,  181,
      181,  181,  177,  182,  182,  182,    0,    0,  181,    0,
        0,  178,  182,    0,  179,  183,  183,  183,  184,  184,
      184,    0,    0,  182,  183,    0,    0,  184,    0,    0,
      181,  185,  185,  185,  186,  186,  186,  187,  187,  187,
      185,    0,    0,  186,    0,    0,  187,    0,    0,  184,

      188,  188,  188,  189,  189,  189,    0,    0,    0,  188,
      183,  185,  189,  190,  190,  190,  183,    0,    0,  186,
        0,    0,  190,  191,  191,  191,  192,  192,  192,  193,
      193,  193,  191,    0,    0,  192,    0,    0,  193,    0,
      187,    0,  194,  194,  194,    0,  189,  190,    0,    0,
      188,  194,  195,  195,  195,  196,  196,  196,  197,  197,
      197,  195,    0,    0,  196,    0,  192,  197,  198,  198,
      198,  199,  199,  199,  193,    0,    0,  198,    0,    0,
      199,  200,  200,  200,  201,  201,  201,  203,  203,  203,
      200,    0,    0,  201,  196,  195,  203,    0,  197,  202,

      202,  202,    0,  204,  204,  204,    0,    0,  202,    0,
        0,  198,  204,    0,    0,  201,  199,    0,  203,  205,
      205,  205,    0,  206,  206,  206,    0,    0,  205,    0,
      200,    0,  206,    0,  207,  207,  207,    0,    0,  204,
        0,    0,  202,  207,  208,  208,  208,    0,  209,  209,
      209,    0,    0,  208,    0,  205,  206,  209,  210,  210,
      210,    0,  211,  211,  211,    0,    0,  210,    0,    0,
      207,  211,  212,  212,  212,  213,  213,  213,  214,  214,
      214,  212,    0,    0,  213,    0,    0,  214,  215,  215,
      215,  216,  216,  216,  208,    0,    0,  215,  209,    0,

      216,  210,    0,  217,  217,  217,    0,  218,  218,  218,
      211,  213,  217,    0,    0,  212,  218,  219,  219,  219,
      214,  220,  220,  220,    0,    0,  219,  216,    0,    0,
      220,  221,  221,  221,  222,  222,  222,    0,  215,    0,
      221,    0,    0,  222,    0,    0,  217,  223,  223,  223,
      224,  224,  224,  219,    0,  218,  223,    0,    0,  224,
      220,  225,  225,  225,    0,  226,  226,  226,    0,    0,
      225,    0,    0,  221,  226,    0,  227,  227,  227,    0,
      222,  228,  228,  228,  224,  227,  229,  229,  229,    0,
      228,    0,    0,  225,  224,  229,    0,  223,  232,  232,

      232,    0,  226,  233,  233,  233,    0,  232,  234,  234,
      234,    0,  233,    0,    0,  228,    0,  234,    0,  235,
      235,  235,  236,  236,  236,  229,    0,  227,  235,    0,
        0,  236,  237,  237,  237,    0,    0,    0,  232,    0,
        0,  237,    0,    0,  233,  238,  238,  238,    0,  239,
      239,  239,    0,    0,  238,    0,    0,  236,  239,  240,
      240,  240,    0,  234,    0,  235,    0,    0,  240,    0,
        0,  236,  237,  241,  241,  241,  242,  242,  242,  243,
      243,  243,  241,    0,    0,  242,    0,    0,  243,    0,
        0,  239,  244,  244,  244,  245,  245,  245,    0,    0,

        0,  244,  240,    0,  245,    0,    0,  241,  246,  246,
      246,  243,  247,  247,  247,    0,    0,  246,  248,  248,
      248,  247,    0,    0,  242,    0,    0,  248,    0,  245,
      249,  249,  249,    0,  250,  250,  250,    0,    0,  249,
        0,    0,  244,  250,  246,  251,  251,  251,    0,    0,
      253,  253,  253,    0,  251,    0,    0,  247,    0,  253,
        0,    0,    0,  247,    0,  254,  254,  254,    0,  248,
      250,    0,    0,  249,  254,  255,  255,  255,  256,  256,
      256,  251,  253,    0,  255,    0,    0,  256,  257,  257,
      257,  258,  258,  258,  259,  259,  259,  257,    0,    0,

      258,    0,    0,  259,    0,    0,  254,  260,  260,  260,
        0,    0,  256,  262,  262,  262,  260,    0,  261,  261,
      261,    0,  262,    0,  257,    0,  255,  261,    0,    0,
      259,  261,    0,  263,  263,  263,  264,  264,  264,    0,
        0,  258,  263,    0,    0,  264,  265,  265,  265,  262,
      266,  266,  266,    0,    0,  265,    0,  260,    0,  266,
      267,  267,  267,  268,  268,  268,  269,  269,  269,  267,
        0,    0,  268,    0,    0,  269,    0,    0,  264,  270,
      270,  270,  266,  269,  269,    0,  266,    0,  270,  271,
      271,  271,  272,  272,  272,    0,  265,    0,  271,    0,

        0,  272,  273,  273,  273,  267,    0,  274,  274,  274,
        0,  273,  275,  275,  275,  270,  274,  268,  276,  276,
      276,  275,    0,    0,  274,    0,    0,  276,    0,  273,
      277,  277,  277,    0,  272,  278,  278,  278,    0,  277,
      271,  279,  279,  279,  278,  280,  280,  280,    0,  276,
      279,  281,  281,  281,  280,  282,  282,  282,    0,    0,
      281,    0,    0,    0,  282,  283,  283,  283,    0,    0,
      277,  284,  284,  284,  283,  278,    0,  279,    0,    0,
      284,    0,  285,  285,  285,    0,    0,  282,    0,    0,
        0,  285,  286,  286,  286,    0,    0,  280,    0,  281,

        0,  286,  287,  287,  287,  283,  288,  288,  288,    0,
        0,  287,  289,  289,  289,  288,    0,  284,  285,    0,
        0,  289,  290,  290,  290,  291,  291,  291,  292,  292,
      292,  290,    0,    0,  291,    0,  286,  292,    0,    0,
      288,  293,  293,  293,  294,  294,  294,  295,  295,  295,
      293,    0,  287,  294,    0,    0,  295,    0,  296,  296,
      296,    0,    0,  291,    0,    0,  292,  296,  297,  297,
      297,  298,  298,  298,  290,    0,    0,  297,    0,    0,
      298,  299,  299,  299,    0,    0,  293,  300,  300,  300,
      299,    0,  301,  301,  301,    0,  300,    0,    0,    0,

      297,  301,    0,  298,    0,    0,  296,  302,  302,  302,
      303,  303,  303,  299,    0,    0,  302,    0,    0,  303,
        0,  300,  304,  304,  304,  305,  305,  305,  306,  306,
      306,  304,    0,    0,  305,    0,    0,  306,  307,  307,
      307,  308,  308,  308,  309,  309,  309,  307,    0,    0,
      308,    0,    0,  309,  310,  310,  310,    0,    0,  305,
        0,    0,    0,  310,  311,  311,  311,    0,  304,  307,
      312,  312,  312,  311,  313,  313,  313,  308,    0,  312,
        0,    0,    0,  313,  314,  314,  314,    0,    0,  309,
      315,  315,  315,  314,  316,  316,  316,    0,    0,  315,

      311,    0,    0,  316,  317,  317,  317,  320,  320,  320,
        0,    0,    0,  317,    0,    0,  320,    0,  313,  312,
        0,  321,  321,  321,    0,    0,  315,    0,    0,  314,
      321,    0,    0,  316,    0,  317,  322,  322,  322,  323,
      323,  323,  324,  324,  324,  322,    0,    0,  323,    0,
        0,  324,  321,  325,  325,  325,  326,  326,  326,  320,
        0,    0,  325,    0,    0,  326,  327,  327,  327,    0,
        0,  323,  328,  328,  328,  327,  329,  329,  329,    0,
        0,  328,  324,    0,    0,  329,  330,  330,  330,  331,
      331,  331,  332,  332,  332,  330,    0,    0,  331,    0,

        0,  332,    0,  325,    0,  326,    0,    0,  328,    0,
      333,  333,  333,  334,  334,  334,    0,  327,  330,  333,
        0,    0,  334,    0,    0,    0,  329,    0,  332,  335,
      335,  335,  331,  336,  336,  336,    0,    0,  335,  338,
      338,  338,  336,  337,  337,  337,  333,    0,  338,  339,
      339,  339,  337,  340,  340,  340,    0,    0,  339,  341,
      341,  341,  340,    0,    0,  334,    0,    0,  341,    0,
      338,    0,  342,  342,  342,  336,  343,  343,  343,  337,
      335,  342,  345,  345,  345,  343,  344,  344,  344,    0,
        0,  345,  346,  346,  346,  344,  347,  347,  347,    0,

        0,  346,    0,  342,    0,  347,  348,  348,  348,  341,
      349,  349,  349,    0,    0,  348,    0,    0,  343,  349,
        0,    0,  344,  350,  350,  350,    0,    0,  346,    0,
      345,    0,  350,  351,  351,  351,  352,  352,  352,  353,
      353,  353,  351,    0,    0,  352,    0,    0,  353,    0,
        0,    0,  349,    0,  350,    0,  354,  354,  354,  355,
      355,  355,    0,    0,  351,  354,    0,    0,  355,  356,
      356,  356,    0,  357,  357,  357,    0,    0,  356,    0,
        0,  352,  357,  353,  358,  358,  358,  359,  359,  359,
      354,    0,    0,  358,    0,    0,  359,  360,  360,  360,

        0,  361,  361,  361,    0,    0,  360,    0,    0,  356,
      361,    0,  355,  362,  362,  362,  363,  363,  363,  364,
      364,  364,  362,    0,    0,  363,    0,  357,  364,  358,
        0,  365,  365,  365,  366,  366,  366,    0,    0,  359,
      365,    0,    0,  366,    0,  360,  367,  367,  367,    0,
        0,  361,  368,  368,  368,  367,  369,  369,  369,  364,
        0,  368,  364,  362,    0,  369,    0,  364,    0,    0,
      370,  370,  370,  371,  371,  371,    0,  367,  366,  370,
      365,    0,  371,  372,  372,  372,    0,    0,  368,  373,
      373,  373,  372,  374,  374,  374,  369,    0,  373,  375,

      375,  375,  374,  376,  376,  376,    0,    0,  375,  377,
      377,  377,  376,    0,    0,    0,  370,    0,  377,  378,
      378,  378,  371,    0,  379,  379,  379,    0,  378,  374,
        0,    0,  372,  379,  380,  380,  380,  373,    0,  376,
        0,  377,    0,  380,  381,  381,  381,  382,  382,  382,
      383,  383,  383,  381,    0,  378,  382,    0,    0,  383,
      384,  384,  384,  385,  385,  385,  380,    0,    0,  384,
        0,    0,  385,    0,    0,  379,  381,  386,  386,  386,
        0,  387,  387,  387,    0,    0,  386,    0,    0,  382,
      387,    0,  388,  388,  388,    0,  389,  389,  389,    0,

      383,  388,    0,    0,  384,  389,  390,  390,  390,  391,
      391,  391,    0,  385,    0,  390,    0,    0,  391,    0,
      387,  392,  392,  392,  388,  393,  393,  393,    0,    0,
      392,    0,    0,    0,  393,  394,  394,  394,    0,    0,
      391,  395,  395,  395,  394,    0,  396,  396,  396,    0,
      395,  397,  397,  397,  390,  396,  399,  399,  399,    0,
      397,    0,    0,  393,    0,  399,    0,  392,    0,  400,
      400,  400,  395,  401,  401,  401,    0,  396,  400,  402,
      402,  402,  401,  394,  403,  403,  403,    0,  402,    0,
      404,  404,  404,  403,  397,    0,  399,    0,    0,  404,

      405,  405,  405,  406,  406,  406,    0,    0,    0,  405,
        0,    0,  406,    0,    0,  400,  403,  407,  407,  407,
        0,  401,  408,  408,  408,    0,  407,    0,    0,  402,
      404,  408,  405,  409,  409,  409,  410,  410,  410,  411,
      411,  411,  409,    0,    0,  410,    0,    0,  411,  412,
      412,  412,  413,  413,  413,    0,    0,  407,  412,    0,
        0,  413,  414,  414,  414,  415,  415,  415,    0,  409,
        0,  414,  408,    0,  415,    0,  416,  416,  416,    0,
        0,  412,    0,    0,  410,  416,    0,    0,  411,  417,
      417,  417,  418,  418,  418,  419,  419,  419,  417,    0,

      413,  418,    0,    0,  419,  420,  420,  420,    0,  415,
      416,    0,  414,    0,  420,  421,  421,  421,    0,  422,
      422,  422,    0,    0,  421,    0,    0,  419,  422,  417,
      423,  423,  423,  424,  424,  424,    0,    0,  418,  423,
        0,    0,  424,  425,  425,  425,  426,  426,  426,    0,
        0,    0,  425,    0,    0,  426,    0,  427,  427,  427,
      428,  428,  428,    0,    0,  421,  427,    0,    0,  428,
      424,    0,  423,  429,  429,  429,    0,  424,    0,  430,
      430,  430,  429,  431,  431,  431,    0,  425,  430,  432,
      432,  432,  431,    0,  426,  427,    0,    0,  432,    0,

        0,  428,  433,  433,  433,  434,  434,  434,  435,  435,
      435,  433,    0,    0,  434,    0,    0,  435,  436,  436,
      436,    0,    0,  431,    0,    0,    0,  436,  430,  437,
      437,  437,    0,  433,  438,  438,  438,  432,  437,  434,
      439,  439,  439,  438,  440,  440,  440,    0,    0,  439,
      436,    0,    0,  440,  441,  441,  441,  435,  442,  442,
      442,    0,    0,  441,    0,    0,  437,  442,  443,  443,
      443,    0,  439,    0,    0,  442,    0,  443,    0,  438,
      444,  444,  444,    0,    0,  442,  441,    0,    0,  444,
      445,  445,  445,    0,  440,  442,  446,  446,  446,  445,

      447,  447,  447,    0,    0,  446,  448,  448,  448,  447,
      449,  449,  449,    0,    0,  448,  450,  450,  450,  449,
      451,  451,  451,    0,    0,  450,  452,  452,  452,  451,
      444,  453,  453,  453,    0,  452,  447,    0,  448,    0,
      453,  454,  454,  454,    0,    0,  446,  455,  455,  455,
      454,  456,  456,  456,  449,    0,  455,    0,  450,    0,
      456,    0,  451,  457,  457,  457,  458,  458,  458,  459,
      459,  459,  457,  453,  452,  458,    0,    0,  459,    0,
        0,  455,  460,  460,  460,  461,  461,  461,    0,  454,
        0,  460,    0,    0,  461,  462,  462,  462,  463,  463,

      463,    0,  458,  457,  462,    0,    0,  463,  464,  464,
      464,  465,  465,  465,  466,  466,  466,  464,    0,    0,
      465,    0,    0,  466,  470,  470,  470,  462,    0,    0,
      463,    0,    0,  470,  461,  467,  467,  467,    0,    0,
      464,  468,  468,  468,  467,    0,    0,  463,  463,    0,
      468,  469,  469,  469,    0,    0,  470,  466,  467,    0,
      469,  472,  472,  472,  470,    0,    0,  467,  467,    0,
      472,    0,    0,  468,  468,    0,  473,  473,  473,  474,
      474,  474,    0,    0,  467,  473,    0,    0,  474,    0,
      475,  475,  475,  476,  476,  476,    0,  469,  469,  475,

      469,    0,  476,  469,  477,  477,  477,    0,  478,  478,
      478,  472,    0,  477,    0,  474,  473,  478,  479,  479,
      479,    0,  480,  480,  480,    0,    0,  479,    0,    0,
      475,  480,  481,  481,  481,    0,    0,  476,  483,  483,
      483,  481,  482,  482,  482,    0,    0,  483,    0,  477,
        0,  482,  484,  484,  484,  485,  485,  485,  478,    0,
        0,  484,  480,  479,  485,  486,  486,  486,  487,  487,
      487,  488,  488,  488,  486,    0,    0,  487,    0,    0,
      488,    0,  481,  489,  489,  489,  482,  483,    0,  485,
        0,    0,  489,    0,    0,    0,  484,  490,  490,  490,

        0,    0,  487,  491,  491,  491,  490,    0,  492,  492,
      492,    0,  491,    0,  486,    0,  488,  492,  493,  493,
      493,  494,  494,  494,  495,  495,  495,  493,  489,    0,
      494,    0,    0,  495,  496,  496,  496,    0,    0,  492,
        0,    0,  490,  496,    0,  497,  497,  497,  498,  498,
      498,    0,    0,  491,  497,    0,    0,  498,  499,  499,
      499,  494,  500,  500,  500,    0,  496,  499,  501,  501,
      501,  500,  502,  502,  502,  495,    0,  501,  503,  503,
      503,  502,    0,    0,  498,    0,    0,  503,  504,  504,
      504,  505,  505,  505,    0,    0,    0,  504,    0,    0,

      505,    0,    0,  502,  506,  506,  506,  507,  507,  507,
        0,    0,  500,  506,    0,  503,  507,  501,  508,  508,
      508,    0,  505,    0,  504,    0,    0,  508,  509,  509,
      509,  510,  510,  510,  511,  511,  511,  509,    0,    0,
      510,    0,    0,  511,    0,  512,  512,  512,  513,  513,
      513,    0,  506,  508,  512,    0,    0,  513,    0,  514,
      514,  514,    0,  515,  515,  515,    0,    0,  514,    0,
        0,  510,  515,  516,  516,  516,    0,    0,  509,  517,
      517,  517,  516,    0,  511,  518,  518,  518,  517,  512,
        0,  519,  519,  519,  518,  520,  520,  520,  513,  514,

      519,    0,  515,    0,  520,  521,  521,  521,  522,  522,
      522,  523,  523,  523,  521,    0,    0,  522,    0,    0,
      523,    0,  524,  524,  524,  525,  525,  525,    0,    0,
        0,  524,    0,    0,  525,  518,    0,  520,  526,  526,
      526,  519,    0,  523,  527,  527,  527,  526,    0,  528,
      528,  528,    0,  527,    0,    0,  521,  524,  528,    0,
        0,  525,  529,  529,  529,  530,  530,  530,  531,  531,
      531,  529,    0,    0,  530,    0,    0,  531,  532,  532,
      532,    0,    0,  526,  533,  533,  533,  532,  527,  534,
      534,  534,    0,  533,  537,  537,  537,    0,  534,  538,

      538,  538,    0,  537,  539,  539,  539,  530,  538,    0,
      529,    0,    0,  539,    0,  540,  540,  540,  531,  541,
      541,  541,    0,  532,  540,  542,  542,  542,  541,    0,
        0,  537,  533,    0,  542,  538,  539,  543,  543,  543,
      544,  544,  544,  546,  546,  546,  543,    0,    0,  544,
        0,    0,  546,  547,  547,  547,    0,  542,  548,  548,
      548,    0,  547,  549,  549,  549,  540,  548,    0,  541,
        0,    0,  549,  550,  550,  550,  551,  551,  551,  552,
      552,  552,  550,  546,  544,  551,    0,  547,  552,  548,
        0,  543,  553,  553,  553,  554,  554,  554,  555,  555,

      555,  553,    0,    0,  554,    0,    0,  555,  549,  556,
      556,  556,  557,  557,  557,  552,    0,    0,  556,    0,
      551,  557,    0,  550,  558,  558,  558,    0,  559,  559,
      559,    0,    0,  558,  555,    0,  553,  559,    0,    0,
      554,  560,  560,  560,  561,  561,  561,  562,  562,  562,
      560,    0,    0,  561,    0,    0,  562,  563,  563,  563,
      564,  564,  564,    0,  559,    0,  563,    0,    0,  564,
      565,  565,  565,    0,  558,  566,  566,  566,    0,  565,
      561,  568,  568,  568,  566,  567,  567,  567,    0,    0,
      568,  562,    0,    0,  567,  569,  569,  569,    0,    0,

      564,  563,    0,    0,  569,    0,  565,    0,  566,    0,
        0,  566,  570,  570,  570,    0,  571,  571,  571,    0,
        0,  570,    0,  566,  568,  571,    0,  567,  572,  572,
      572,  573,  573,  573,  574,  574,  574,  572,  569,    0,
      573,    0,    0,  574,  573,  575,  575,  575,  576,  576,
      576,  577,  577,  577,  575,    0,    0,  576,    0,    0,
      577,  578,  578,  578,  579,  579,  579,    0,    0,    0,
      578,    0,    0,  579,  574,    0,  575,    0,  572,  580,
      580,  580,  581,  581,  581,  576,    0,    0,  580,    0,
        0,  581,    0,  582,  582,  582,    0,  578,    0,    0,

      579,  577,  582,  583,  583,  583,  584,  584,  584,    0,
        0,    0,  583,  580,    0,  584,    0,    0,  581,    0,
      585,  585,  585,    0,  586,  586,  586,    0,  582,  585,
      587,  587,  587,  586,    0,  583,  588,  588,  588,  587,
      589,  589,  589,    0,    0,  588,    0,    0,  584,  589,
      590,  590,  590,  591,  591,  591,  592,  592,  592,  590,
        0,    0,  591,  585,  586,  592,  593,  593,  593,    0,
      587,  594,  594,  594,    0,  593,  589,  595,  595,  595,
      594,  596,  596,  596,    0,    0,  595,  597,  597,  597,
      596,  598,  598,  598,    0,    0,  597,    0,  590,    0,

      598,    0,  599,  599,  599,  602,  602,  602,    0,    0,
      593,  599,    0,    0,  602,  603,  603,  603,    0,  597,
        0,  594,    0,  596,  603,  604,  604,  604,    0,    0,
        0,    0,  595,    0,  604,    0,    0,  598,  599,  605,
      605,  605,  606,  606,  606,  607,  607,  607,  605,    0,
        0,  606,  603,    0,  607,  602,  608,  608,  608,  609,
      609,  609,    0,    0,    0,  608,    0,    0,  609,    0,
        0,  605,    0,  604,  606,  611,  611,  611,    0,  612,
      612,  612,    0,    0,  611,    0,    0,  607,  612,  613,
      613,  613,  614,  614,  614,  615,  615,  615,  613,    0,

        0,  614,    0,    0,  615,    0,  616,  616,  616,    0,
        0,  611,  617,  617,  617,  616,  618,  618,  618,    0,
        0,  617,  619,  619,  619,  618,  620,  620,  620,  612,
        0,  619,  621,  621,  621,  620,  614,  616,    0,  613,
        0,  621,    0,  617,  622,  622,  622,  623,  623,  623,
      624,  624,  624,  622,    0,    0,  623,    0,    0,  624,
      625,  625,  625,  621,    0,    0,  619,    0,    0,  625,
      626,  626,  626,    0,  620,  622,    0,    0,    0,  626,
      627,  627,  627,    0,    0,  624,  628,  628,  628,  627,
      629,  629,  629,  622,    0,  628,  630,  630,  630,  629,

      631,  631,  631,    0,    0,  630,  632,  632,  632,  631,
        0,  627,    0,    0,  626,  632,  633,  633,  633,  634,
      634,  634,  628,    0,    0,  633,    0,    0,  634,  635,
      635,  635,    0,    0,  629,    0,  631,    0,  635,  632,
        0,    0,  629,    0,  636,  636,  636,  630,  637,  637,
      637,    0,  633,  636,  638,  638,  638,  637,    0,  639,
      639,  639,    0,  638,  640,  640,  640,    0,  639,    0,
        0,  635,    0,  640,  641,  641,  641,    0,    0,  642,
      642,  642,    0,  641,    0,  637,  636,  639,  642,  643,
      643,  643,    0,    0,  638,  644,  644,  644,  643,  645,

      645,  645,    0,    0,  644,  646,  646,  646,  645,    0,
      642,    0,    0,    0,  646,  647,  647,  647,    0,    0,
      643,    0,    0,  644,  647,  648,  648,  648,  649,  649,
      649,  650,  650,  650,  648,    0,    0,  649,    0,    0,
      650,  646,  651,  651,  651,    0,    0,  645,  652,  652,
      652,  651,  653,  653,  653,  647,    0,  652,    0,    0,
      649,  653,  654,  654,  654,  655,  655,  655,    0,    0,
        0,  654,    0,  651,  655,    0,    0,  648,  656,  656,
      656,  657,  657,  657,    0,    0,    0,  656,    0,    0,
      657,  658,  658,  658,    0,  661,  661,  661,    0,    0,

      658,  662,  662,  662,  661,  663,  663,  663,    0,    0,
      662,  664,  664,  664,  663,  665,  665,  665,    0,    0,
      664,    0,    0,    0,  665,  666,  666,  666,  656,    0,
      657,  661,    0,    0,  666,  658,  668,  668,  668,  669,
      669,  669,  670,  670,  670,  668,  662,    0,  669,    0,
        0,  670,  671,  671,  671,  664,    0,  672,  672,  672,
        0,  671,  673,  673,  673,  665,  672,    0,  674,  674,
      674,  673,  675,  675,  675,    0,  666,  674,    0,    0,
        0,  675,  676,  676,  676,  668,    0,  670,    0,    0,
      669,  676,  677,  677,  677,  673,  678,  678,  678,    0,

        0,  677,    0,  672,    0,  678,  679,  679,  679,  680,
      680,  680,    0,    0,    0,  679,    0,  674,  680,    0,
        0,  675,  681,  681,  681,  682,  682,  682,    0,    0,
      676,  681,    0,    0,  682,  683,  683,  683,  684,  684,
      684,    0,  677,    0,  683,    0,  679,  684,  685,  685,
      685,  686,  686,  686,    0,    0,    0,  685,    0,  680,
      686,    0,  681,  682,  687,  687,  687,  688,  688,  688,
      683,    0,    0,  687,  684,    0,  688,  689,  689,  689,
      690,  690,  690,  691,  691,  691,  689,    0,    0,  690,
      685,    0,  691,  692,  692,  692,  693,  693,  693,    0,

      687,    0,  692,    0,    0,  693,  694,  694,  694,  695,
      695,  695,  696,  696,  696,  694,  690,    0,  695,  689,
        0,  696,    0,  691,  697,  697,  697,    0,  698,  698,
      698,    0,    0,  697,    0,  692,  693,  698,  699,  699,
      699,    0,    0,  694,  700,  700,  700,  699,    0,  695,
        0,    0,  696,  700,  701,  701,  701,  702,  702,  702,
      703,  703,  703,  701,    0,    0,  702,    0,    0,  703,
        0,    0,  699,    0,  697,  704,  704,  704,    0,    0,
      700,  705,  705,  705,  704,  708,  708,  708,    0,    0,
      705,    0,    0,  702,  708,    0,  701,  709,  709,  709,

      710,  710,  710,  711,  711,  711,  709,    0,    0,  710,
        0,    0,  711,  712,  712,  712,  714,  714,  714,  715,
      715,  715,  712,    0,    0,  714,    0,    0,  715,    0,
        0,  705,    0,  708,  716,  716,  716,    0,    0,  711,
        0,    0,    0,  716,    0,  709,  717,  717,  717,  712,
      710,  718,  718,  718,    0,  717,  719,  719,  719,    0,
      718,  720,  720,  720,    0,  719,    0,  715,    0,    0,
      720,    0,  721,  721,  721,  722,  722,  722,    0,    0,
      716,  721,    0,    0,  722,  723,  723,  723,  724,  724,
      724,  717,    0,    0,  723,    0,    0,  724,    0,    0,

      725,  725,  725,  726,  726,  726,  718,    0,  721,  725,
        0,    0,  726,  727,  727,  727,  728,  728,  728,  729,
      729,  729,  727,    0,    0,  728,    0,    0,  729,    0,
      722,  730,  730,  730,    0,  723,    0,  725,    0,    0,
      730,    0,    0,  726,  731,  731,  731,  732,  732,  732,
      733,  733,  733,  731,    0,  729,  732,    0,    0,  733,
      728,  734,  734,  734,  735,  735,  735,    0,    0,    0,
      734,    0,    0,  735,  736,  736,  736,    0,    0,  730,
      737,  737,  737,  736,  738,  738,  738,    0,    0,  737,
        0,    0,  733,  738,  739,  739,  739,  734,    0,  740,

      740,  740,    0,  739,  741,  741,  741,  735,  740,  742,
      742,  742,    0,  741,  736,    0,    0,  737,  742,  743,
      743,  743,  739,  744,  744,  744,    0,  738,  743,  747,
      747,  747,  744,  748,  748,  748,    0,    0,  747,  749,
      749,  749,  748,  750,  750,  750,    0,    0,  749,  751,
      751,  751,  750,  753,  753,  753,    0,    0,  751,  754,
      754,  754,  753,  755,  755,  755,    0,    0,  754,  748,
        0,  743,  755,  756,  756,  756,  757,  757,  757,    0,
        0,    0,  756,    0,    0,  757,  758,  758,  758,  753,
      759,  759,  759,    0,    0,  758,  760,  760,  760,  759,

      761,  761,  761,  755,    0,  760,    0,    0,  754,  761,
      762,  762,  762,  763,  763,  763,    0,    0,    0,  762,
        0,    0,  763,    0,    0,  757,  764,  764,  764,    0,
      759,    0,  758,    0,    0,  764,  765,  765,  765,  766,
      766,  766,    0,    0,  761,  765,    0,    0,  766,  767,
      767,  767,  768,  768,  768,  769,  769,  769,  767,    0,
      762,  768,    0,    0,  769,  770,  770,  770,  771,  771,
      771,    0,  765,    0,  770,    0,    0,  771,  772,  772,
      772,  774,  774,  774,    0,  767,    0,  772,    0,    0,
      774,  776,  776,  776,  768,  777,  777,  777,    0,    0,

      776,  770,    0,    0,  777,    0,    0,    0,  771,  778,
      778,  778,    0,    0,  772,  779,  779,  779,  778,  780,
      780,  780,    0,    0,  779,  781,  781,  781,  780,  782,
      782,  782,    0,    0,  781,  783,  783,  783,  782,  784,
      784,  784,    0,    0,  783,  785,  785,  785,  784,  786,
      786,  786,    0,  778,  785,  780,    0,    0,  786,    0,
      779,    0,  787,  787,  787,  788,  788,  788,    0,    0,
      781,  787,    0,    0,  788,  789,  789,  789,  791,  791,
      791,  792,  792,  792,  789,  786,    0,  791,    0,    0,
      792,  793,  793,  793,  794,  794,  794,  795,  795,  795,

      793,    0,    0,  794,    0,    0,  795,    0,  788,  796,
      796,  796,  797,  797,  797,  799,  799,  799,  796,  789,
        0,  797,    0,    0,  799,  800,  800,  800,  791,    0,
        0,    0,  792,    0,  800,  801,  801,  801,  794,  802,
      802,  802,    0,    0,  801,  796,    0,    0,  802,  803,
      803,  803,  805,  805,  805,  807,  807,  807,  803,    0,
        0,  805,  797,    0,  807,  809,  809,  809,  811,  811,
      811,    0,    0,  800,  809,    0,    0,  811,    0,    0,
        0,    0,    0,    0,    0,    0,  805,    0,    0,    0,
        0,  807,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  809,  813,  813,  813,  813,  813,
      813,  813,  814,  814,  814,  814,  815,  815,  815,  815,
      815,  815,  815,  816,  816,  817,  817,    0,  817,  817,
      817,  817,  818,  818,    0,    0,  818,  818,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,

      812,  812,  812,  812,  812,  812,  812,  812
    } ;

#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 ".\\parser.l"
#define INITIAL 0
#line 2 ".\\parser.l"
#include "pch.h"
#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

#include "rdogramma.h"
#include "rdoparser.h"

#define YY_INTERACTIVE

#define YY_USER_INIT {                      \
	rdoParse::currParser->lexer_loc_init(); \
}

#define YY_USER_ACTION {                      \
	rdoParse::currParser->lexer_loc_action(); \
}

/*
([+-]?[0-9]+[\r\n\t ]+)		{
							std::string n1( YYText() );
							std::string n2 = "";
							std::string::size_type pos = n1.find_first_of("\r\n\t ");
							int len = 0;
							if ( pos != std::string::npos ) {
								len = n1.length() - pos;
								n2.assign( n1, pos, len );
								n1.erase( pos, len );
							}
							for ( int i = 0; i < n2.length(); i++ ) {
								unput( n2[i] );
							}
							rdoParse::currParser->lexer_loc_delta_pos( -len );
							return INT_CONST_SPACE;
						}

*/

#define comment 1

#line 1938 "rdolex.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 46 ".\\parser.l"


#line 2068 "rdolex.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 813 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5349 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 48 ".\\parser.l"
return(Resource_type);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 49 ".\\parser.l"
return(permanent);
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 50 ".\\parser.l"
return(Parameters);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 51 ".\\parser.l"
return(integer);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 52 ".\\parser.l"
return(real);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 53 ".\\parser.l"
return(End);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 54 ".\\parser.l"
return(temporary);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 55 ".\\parser.l"
return(such_as);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 56 ".\\parser.l"
return(dblpoint);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 58 ".\\parser.l"
return(Resources);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 59 ".\\parser.l"
return(trace_keyword);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 60 ".\\parser.l"
return(no_trace);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 62 ".\\parser.l"
return(Constant);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 63 ".\\parser.l"
return(Body);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 64 ".\\parser.l"
return(Function_keyword);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 65 ".\\parser.l"
return(Type_keyword);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 66 ".\\parser.l"
return(algorithmic);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 67 ".\\parser.l"
return(table_keyword);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 68 ".\\parser.l"
return(list_keyword);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 69 ".\\parser.l"
return(Calculate_if);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 70 ".\\parser.l"
return(Sequence);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 71 ".\\parser.l"
return(uniform);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 72 ".\\parser.l"
return(exponential);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 73 ".\\parser.l"
return(normal_keyword);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 74 ".\\parser.l"
return(by_hist);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 75 ".\\parser.l"
return(enumerative);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 77 ".\\parser.l"
return(Exist);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 78 ".\\parser.l"
return(Not_Exist);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 79 ".\\parser.l"
return(For_All);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 80 ".\\parser.l"
return(Not_For_All);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 81 ".\\parser.l"
return(neq);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 82 ".\\parser.l"
return(leq);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 83 ".\\parser.l"
return(geq);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 84 ".\\parser.l"
return(NoCheck);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 85 ".\\parser.l"
return(Calculate_if);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 86 ".\\parser.l"
return(or_keyword);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 87 ".\\parser.l"
return(and_keyword);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 90 ".\\parser.l"
return(Pattern);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 91 ".\\parser.l"
return(operation);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 92 ".\\parser.l"
return(irregular_event);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 93 ".\\parser.l"
return(rule_keyword);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 94 ".\\parser.l"
return(keyboard);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 95 ".\\parser.l"
return(Relevant_resources);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 96 ".\\parser.l"
return(Keep);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 97 ".\\parser.l"
return(Create_keyword);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 98 ".\\parser.l"
return(Erase);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 99 ".\\parser.l"
return(NonExist);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 100 ".\\parser.l"
return(NoChange);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 101 ".\\parser.l"
return(Time);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 102 ".\\parser.l"
return(Choice);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 103 ".\\parser.l"
return(from_keyword);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 104 ".\\parser.l"
return(first_keyword);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 105 ".\\parser.l"
return(Convert_begin);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 106 ".\\parser.l"
return(Convert_end);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 107 ".\\parser.l"
return(Convert_rule);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 108 ".\\parser.l"
return(Convert_event);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 109 ".\\parser.l"
return(with_max);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 110 ".\\parser.l"
return(with_min);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 111 ".\\parser.l"
return(Operations);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 112 ".\\parser.l"
return(Results);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 113 ".\\parser.l"
return(watch_par);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 114 ".\\parser.l"
return(watch_state);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 115 ".\\parser.l"
return(watch_quant);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 116 ".\\parser.l"
return(watch_value);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 117 ".\\parser.l"
return(get_value);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 119 ".\\parser.l"
return(Model_name);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 120 ".\\parser.l"
return(Resource_file);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 121 ".\\parser.l"
return(OprIev_file);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 122 ".\\parser.l"
return(Frame_file);	
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 123 ".\\parser.l"
return(Statistic_file);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 124 ".\\parser.l"
return(Results_file);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 125 ".\\parser.l"
return(Trace_file);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 126 ".\\parser.l"
return(Show_mode);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 127 ".\\parser.l"
return(Frame_number);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 128 ".\\parser.l"
return(Show_rate);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 129 ".\\parser.l"
return(Run_StartTime);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 130 ".\\parser.l"
return(Trace_StartTime);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 131 ".\\parser.l"
return(Trace_EndTime);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 132 ".\\parser.l"
return(Terminate_if);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 133 ".\\parser.l"
return(Break_point);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 134 ".\\parser.l"
return(Seed);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 135 ".\\parser.l"
return(NoShow);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 136 ".\\parser.l"
return(Monitor);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 137 ".\\parser.l"
return(Animation);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 140 ".\\parser.l"
return(Decision_point);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 141 ".\\parser.l"
return(search_keyword);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 142 ".\\parser.l"
return(trace_stat);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 143 ".\\parser.l"
return(trace_tops);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 144 ".\\parser.l"
return(trace_all);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 145 ".\\parser.l"
return(Condition_keyword);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 146 ".\\parser.l"
return(Term_condition);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 147 ".\\parser.l"
return(Evaluate_by);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 148 ".\\parser.l"
return(Compare_tops);
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 149 ".\\parser.l"
return(NO);
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 150 ".\\parser.l"
return(YES);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 151 ".\\parser.l"
return(Activities);
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 152 ".\\parser.l"
return(Process);
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 153 ".\\parser.l"
return(SEIZE);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 154 ".\\parser.l"
return(value_before);
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 155 ".\\parser.l"
return(value_after);
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 156 ".\\parser.l"
return(value_before);
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 157 ".\\parser.l"
return(value_after);
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 158 ".\\parser.l"
return(some);
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 160 ".\\parser.l"
return(Frame);
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 161 ".\\parser.l"
return(Show_if);
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 162 ".\\parser.l"
return(Back_picture);
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 163 ".\\parser.l"
return(Show);
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 164 ".\\parser.l"
return(frm_cell);
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 165 ".\\parser.l"
return(text);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 166 ".\\parser.l"
return(transparent);
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 167 ".\\parser.l"
return(bitmap);
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 168 ".\\parser.l"
return(s_bmp);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 169 ".\\parser.l"
return(rect_keyword);
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 170 ".\\parser.l"
return(r_rect);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 171 ".\\parser.l"
return(line);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 172 ".\\parser.l"
return(ellipse);
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 173 ".\\parser.l"
return(triang);
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 174 ".\\parser.l"
return(active);
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 176 ".\\parser.l"
{
						std::string n1(YYText());
						int len = n1.length();
						std::string *name = new std::string(n1, 1, len-2);
						rdoParse::currParser->addName(name);
						rdoParse::currParser->lexer_setvalue((int)name);
						return QUOTED_IDENTIF;
					}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 185 ".\\parser.l"
{
						std::string *name = new std::string(YYText());
						rdoParse::currParser->addName(name);
						rdoParse::currParser->lexer_setvalue((int)name);
						return QUOTED_IDENTIF_BAD;
					}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 192 ".\\parser.l"
BEGIN(comment);
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 194 ".\\parser.l"
/* eat anything that's not a '*' */
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 195 ".\\parser.l"
;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 196 ".\\parser.l"
;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 197 ".\\parser.l"
BEGIN(INITIAL);
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 200 ".\\parser.l"
;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 201 ".\\parser.l"
;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 202 ".\\parser.l"
return(YYText()[YYLeng()-1]);
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 204 ".\\parser.l"
{
						std::string n1(YYText(), YYLeng()-2);
						rdoParse::currParser->lexer_setvalue(atoi(n1.c_str()));
						unput('.');
						unput('.');
						rdoParse::currParser->lexer_loc_delta_pos( -2 );
						return INT_CONST;
					}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 213 ".\\parser.l"
{
						rdoParse::currParser->lexer_setvalue(atoi(YYText()));
						return INT_CONST;
					}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 218 ".\\parser.l"
{
						double *val = rdoParse::currParser->addDouble(new double(atof(YYText())));
						rdoParse::currParser->lexer_setvalue((int)val);
						return REAL_CONST;
					}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 224 ".\\parser.l"
{
						std::string *name = new std::string(YYText());
						rdoParse::currParser->addName(name);
						rdoParse::currParser->lexer_setvalue((int)name);
						return IDENTIF_BAD;
					}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 231 ".\\parser.l"
{
					std::string n1(YYText());
					std::string::size_type pos = n1.find_first_of("\r\n\t :");
					std::string *name = new std::string(n1, 0, pos);
					rdoParse::currParser->addName(name);
					rdoParse::currParser->lexer_setvalue((int)name);
					return IDENTIF_set;
				}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 240 ".\\parser.l"
{
					std::string n1(YYText());
					std::string::size_type pos = n1.find_first_of("\r\n\t :");
					std::string *name = new std::string(n1, 0, pos);
					rdoParse::currParser->addName(name);
					rdoParse::currParser->lexer_setvalue((int)name);
					return IDENTIF_NoChange_NoChange;
				}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 249 ".\\parser.l"
{
					std::string n1(YYText());
					std::string::size_type pos = n1.find_first_of("\r\n\t :");
					std::string *name = new std::string(n1, 0, pos);
					rdoParse::currParser->addName(name);
					rdoParse::currParser->lexer_setvalue((int)name);
					return IDENTIF_NoChange;
				}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 258 ".\\parser.l"
{
					std::string n1(YYText());
					std::string::size_type pos = n1.find_first_of("\r\n\t :");
					std::string *name = new std::string(n1, 0, pos);
					rdoParse::currParser->addName(name);
					rdoParse::currParser->lexer_setvalue((int)name);
					return IDENTIF_COLON;
				}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 267 ".\\parser.l"
{
					std::string *name = new std::string(YYText());
					rdoParse::currParser->addName(name);
					rdoParse::currParser->lexer_setvalue((int)name);
					return IDENTIF;
				}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 274 ".\\parser.l"
ECHO;
	YY_BREAK
#line 2913 "rdolex.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(comment):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 813 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 813 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 812);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 274 ".\\parser.l"

