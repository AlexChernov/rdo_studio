#line 2 "rdolex.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
class istream;
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 129
#define YY_END_OF_BUFFER 130
static yyconst short int yy_acclist[903] =
    {   0,
      130,  129,  119,  129,  128,  129,  129,  120,  129,  120,
      129,  120,  129,  123,  129,  120,  129,  120,  129,  128,
      129,  128,  129,  128,  129,  128,  129,  128,  129,  128,
      129,  128,  129,  128,  129,  128,  129,  128,  129,  128,
      129,  128,  129,  128,  129,  128,  129,  128,  129,  128,
      129,  128,  129,  128,  129,  128,  129,  128,  129,  128,
      129,  128,  129,  128,  129,  128,  129,  128,  129,  128,
      129,  128,  129,  128,  129,  128,  129,  128,  129,  128,
      129,  129,  119,  128,  127,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  117,  123,    9,  122,

       32,   31,   33,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,   94,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,   36,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  118,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  121,  122,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,

      128,  128,  128,  128,  128,   95,  128,  128,  128,   37,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,    6,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  122,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,   44,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,   81,
      128,  105,  128,  128,  128,  128,  128,  128,  128,  128,

      128,  128,  128,  128,  128,   51,  128,  128,  128,  128,
      128,  113,  128,   19,  128,  128,  128,  128,  128,  128,
        5,  128,  111,  128,   41,  128,  128,  128,  101,  128,
      128,  128,  128,  107,  128,  128,  128,  128,  128,  128,
      128,  128,  124,  128,  128,   14,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,   49,  128,   16,  128,  128,  128,  128,  128,
      128,  128,   46,  128,   27,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,

      128,   52,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  110,  128,  128,  128,   18,  128,  128,
       11,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  102,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,   50,
      128,  128,   45,  128,  128,  128,  128,  128,  128,  128,
       82,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  116,  128,  128,  109,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
       24,  128,  128,  128,  112,  128,   86,  128,  128,  128,

      128,  128,  115,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,   29,  128,
      128,  128,  128,   83,  128,  128,   34,  128,  128,  128,
      128,  128,  128,  128,  128,  103,  128,  128,  128,  128,
      128,  128,  128,  128,  128,   25,  128,  114,  128,  128,
      128,  128,  128,    4,  128,  128,  128,  128,  128,  128,
        8,  128,  128,  128,  128,  128,  128,   22,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,   38,  128,  128,

      128,   60,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,   48,  128,   47,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  106,  128,  128,  128,   42,  128,   12,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,   57,  128,   58,  128,  128,  128,  128,
      128,   13,  128,  128,  128,   15,  128,  128,  128,  128,
      128,   21,  128,  128,   84,  128,  128,  128,  128,  128,
      128,  128,  128,  128,   28,  128,  128,  128,  128,  128,
      128,   73,  128,   75,  128,  128,  128,  128,  128,  128,

      128,  128,  128,   65,  128,  128,   39,  128,    2,  128,
        7,  128,   89,  128,  128,  128,  128,  128,  128,   61,
      128,  128,  128,  128,  126,  128,  128,  128,   90,  128,
      128,  128,  128,  128,  128,  128,   10,  128,  128,  128,
      128,  128,  128,  128,  128,   69,  128,  128,   66,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,   72,
      128,  128,  128,  128,  128,   87,  128,   88,  128,  128,
      128,  128,  128,  128,  128,   96,  128,  128,  128,  128,
      128,   59,  128,    3,  128,  128,  128,  128,   80,  128,
      128,  128,   54,  128,  128,  128,  128,   30,  128,   68,

      128,  128,  128,  128,  128,  128,  128,  128,   17,  128,
       26,  128,   23,  128,  128,  108,  128,   98,  100,  128,
      128,   63,  128,   62,  128,   64,  128,  128,  128,  128,
       92,  128,  128,  128,  128,   20,   35,  128,  128,  128,
       55,  128,   74,  128,  128,   71,  128,  128,  128,   79,
      128,  128,  128,  128,   97,   99,  128,  104,  128,   93,
      128,  128,  128,  128,  128,   53,  128,   56,  128,   67,
      128,   76,  128,  128,   78,  128,  128,  128,  128,  128,
        1,  128,  128,   70,  128,  128,  128,   85,  128,  128,
       91,  128,   77,  128,   40,  128,  128,  128,  128,  125,

       43,  128
    } ;

static yyconst short int yy_accept[790] =
    {   0,
        1,    1,    1,    2,    3,    5,    7,    8,   10,   12,
       14,   16,   18,   20,   22,   24,   26,   28,   30,   32,
       34,   36,   38,   40,   42,   44,   46,   48,   50,   52,
       54,   56,   58,   60,   62,   64,   66,   68,   70,   72,
       74,   76,   78,   80,   82,   83,   84,   84,   85,   86,
       87,   88,   89,   90,   91,   92,   93,   94,   95,   96,
       97,   97,   98,   99,  100,  101,  102,  103,  104,  105,
      106,  107,  108,  109,  110,  111,  112,  113,  114,  115,
      116,  118,  119,  120,  121,  122,  123,  124,  125,  126,
      127,  128,  129,  130,  131,  132,  133,  134,  135,  136,

      137,  138,  139,  140,  141,  142,  143,  144,  145,  147,
      148,  149,  150,  151,  152,  153,  154,  155,  156,  157,
      158,  159,  160,  161,  162,  162,  163,  163,  163,  164,
      165,  166,  167,  168,  169,  170,  171,  172,  173,  174,
      175,  176,  177,  178,  179,  180,  181,  181,  182,  183,
      184,  185,  186,  187,  188,  189,  190,  191,  192,  193,
      194,  195,  196,  197,  198,  199,  200,  201,  202,  203,
      204,  205,  206,  208,  209,  210,  212,  213,  214,  215,
      216,  217,  218,  219,  220,  221,  222,  223,  224,  225,
      226,  227,  228,  229,  230,  231,  232,  233,  234,  235,

      236,  237,  238,  239,  240,  241,  242,  243,  244,  245,
      246,  247,  247,  247,  248,  249,  250,  251,  252,  253,
      255,  256,  257,  258,  259,  260,  261,  262,  263,  264,
      265,  266,  267,  267,  268,  269,  270,  271,  272,  273,
      274,  275,  276,  277,  278,  280,  281,  282,  283,  284,
      285,  286,  287,  288,  289,  290,  292,  294,  295,  296,
      297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
      308,  309,  310,  311,  312,  314,  316,  317,  318,  319,
      320,  321,  323,  325,  327,  328,  329,  331,  332,  333,
      334,  336,  337,  338,  339,  340,  341,  342,  343,  343,

      344,  345,  346,  348,  349,  350,  351,  352,  353,  354,
      355,  356,  357,  358,  359,  360,  361,  362,  363,  365,
      367,  368,  369,  370,  371,  372,  373,  375,  377,  378,
      379,  380,  381,  382,  383,  384,  385,  386,  387,  388,
      389,  390,  391,  392,  393,  394,  395,  396,  397,  398,
      399,  400,  401,  402,  404,  405,  406,  407,  408,  409,
      410,  411,  412,  413,  414,  416,  417,  418,  420,  421,
      423,  424,  425,  426,  427,  428,  429,  429,  430,  431,
      432,  433,  434,  435,  436,  438,  439,  440,  441,  442,
      443,  444,  445,  446,  447,  448,  449,  450,  452,  453,

      455,  456,  457,  458,  459,  460,  461,  463,  464,  465,
      466,  467,  468,  469,  470,  471,  472,  473,  474,  475,
      476,  478,  479,  481,  482,  483,  484,  485,  486,  487,
      488,  489,  490,  491,  493,  494,  495,  497,  499,  500,
      501,  502,  503,  505,  506,  506,  507,  508,  509,  509,
      510,  511,  512,  513,  514,  515,  516,  517,  518,  519,
      520,  521,  522,  523,  524,  525,  526,  527,  528,  529,
      531,  532,  533,  534,  536,  537,  539,  540,  541,  542,
      543,  544,  545,  546,  548,  549,  550,  551,  552,  553,
      554,  555,  556,  558,  560,  561,  562,  563,  564,  566,

      567,  568,  569,  570,  571,  573,  574,  575,  576,  577,
      578,  580,  580,  580,  581,  582,  583,  584,  585,  586,
      587,  588,  588,  589,  590,  591,  592,  593,  594,  595,
      596,  597,  598,  600,  601,  602,  604,  605,  606,  607,
      608,  609,  610,  611,  612,  613,  615,  617,  618,  619,
      620,  621,  622,  623,  624,  625,  626,  627,  628,  629,
      630,  631,  632,  633,  635,  636,  637,  639,  641,  642,
      643,  644,  645,  646,  647,  648,  648,  648,  649,  650,
      651,  652,  653,  654,  656,  658,  658,  659,  660,  661,
      662,  664,  665,  666,  668,  669,  670,  671,  672,  674,

      675,  677,  678,  679,  680,  681,  682,  683,  684,  685,
      687,  688,  689,  690,  691,  692,  694,  696,  697,  698,
      699,  700,  701,  702,  703,  704,  706,  707,  709,  711,
      713,  715,  716,  717,  718,  718,  718,  719,  720,  722,
      723,  724,  725,  726,  727,  728,  729,  731,  732,  733,
      734,  735,  736,  737,  739,  740,  741,  742,  743,  744,
      745,  746,  748,  749,  751,  752,  753,  754,  755,  756,
      757,  758,  759,  760,  762,  763,  764,  765,  766,  768,
      770,  771,  771,  771,  772,  773,  774,  775,  776,  776,
      778,  779,  780,  781,  782,  784,  786,  787,  788,  789,

      791,  792,  793,  795,  796,  797,  798,  800,  802,  803,
      804,  805,  806,  807,  808,  809,  811,  813,  815,  816,
      818,  819,  819,  821,  822,  824,  826,  828,  828,  829,
      830,  831,  833,  834,  835,  836,  839,  840,  841,  843,
      845,  846,  848,  849,  850,  852,  853,  854,  855,  856,
      858,  858,  860,  862,  863,  864,  865,  866,  868,  870,
      872,  874,  875,  877,  878,  879,  879,  880,  881,  883,
      884,  886,  887,  888,  888,  890,  891,  893,  895,  897,
      897,  898,  898,  899,  899,  900,  901,  903,  903
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    4,    1,    1,    5,    6,
        6,    6,    7,    6,    7,    8,    6,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   10,    1,   11,
       12,   13,    1,    1,   14,   15,   16,   17,   18,   19,
       20,   20,   21,   20,   22,   20,   23,   24,   25,   26,
       20,   27,   28,   29,   20,   20,   20,   20,   30,   20,
        6,    1,    6,    1,   31,    1,   32,   33,   34,   35,

       36,   37,   38,   39,   40,   20,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   20,   56,    1,   57,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,   20,   20,   20,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20
    } ;

static yyconst int yy_meta[58] =
    {   0,
        1,    2,    3,    2,    1,    1,    1,    1,    2,    2,
        1,    1,    1,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    1,    1
    } ;

static yyconst short int yy_base[792] =
    {   0,
        0,    0,  264, 3833,   56,   58,  252, 3833,  246,  245,
       54,   52,  237,   68,   78,   88,   90,   92,   94,  105,
      103,  107,  119,  121,  135,  141,  151,  153,  156,  165,
      176,  178,  181,  190,  196,  200,  202,  218,  220,  229,
      231,  256,  259,  273,  187,   64,  275,  279, 3833,  284,
      293,  299,  304,  309,  318,  313,  324,  327,  329,  339,
      235,  233,  110, 3833,  234, 3833, 3833, 3833,  333,  344,
      348,  368,  374,  379,  385,  383,  389,  394,  398,  400,
      404,  417,  422,  419,  428,  437,  439,  448,  450,  453,
      472,  476,  485,  487,  489,  499,  501,  503,  505,  514,

      518,  530,  532,  535,  545,  547,  550,  556,  562,  565,
      567,  576,  585,  587,  591,  601,  604,  614,  616,  626,
      629,  631,  640,  643,  180,  170,  173,  179,  646,  652,
      662,  658,  672,  674,  678,  689,  701,  705,  710,  714,
      720,  716,  725,  729, 3833,  199,   92,  734,  740,  744,
      749,  759,  763,  777,  780,  782,  791,  794,  796,  805,
      800,  814,  817,  820,  834,  839,  844,  854,  856,  858,
      860,  870,  875,  884,  889,  895,  904,  909,  913,  915,
      918,  927,  929,  939,  933,  942,  952,  963,  965,  967,
      969,  981,  983,  987,  992,  996, 1001, 1005, 1010, 1019,

     1023, 1032, 1034, 1037, 1046, 1055, 1052, 1058, 1067, 1070,
     1072,  197,  151, 1076, 1088, 1090, 1100, 1103, 1117, 1105,
     1120, 1122, 1132, 1134, 1137, 1146, 1148, 1157, 1161, 1151,
     1170, 1173,  185,  181, 1175, 1185, 1187, 1189, 1201, 1211,
     1214, 1217, 1226, 1229, 1231, 1241, 1243, 1245, 1254, 1256,
     1260, 1266, 1270, 1272, 1284, 1282, 1286, 1288, 1298, 1301,
     1303, 1313, 1316, 1322, 1331, 1333, 1337, 1342, 1348, 1354,
     1357, 1363, 1368, 1373, 1377, 1383, 1386, 1388, 1392, 1397,
     1401, 1411, 1413, 1423, 1428, 1434, 1437, 1439, 1443, 1448,
     1452, 1454, 1457, 1463, 1473, 1475, 1478, 1484,  143, 3833,

     1489, 1493, 1495, 1498, 1510, 1519, 1523, 1525, 1529, 1534,
     1543, 1545, 1549, 1554, 1558, 1560, 1564, 1576, 1579, 1588,
     1591, 1593, 1602, 1611, 1608, 1613, 1617, 1623, 1626, 1628,
     1632, 1643, 1648, 1652, 1662, 1664, 1667, 1673, 1677, 1679,
     1688, 1691, 1697, 1693, 1703, 1720, 1707, 1709, 1722, 1750,
     1752, 1754, 1756, 1767, 1769, 1771, 1773, 1783, 1785, 1787,
     1804, 1808, 1810, 1813, 1819, 1822, 1825, 1828, 1834, 1837,
     1839, 1849, 1862, 1864, 1867, 1873,  144, 1878, 1876, 1887,
     1889, 1891, 1901, 1904, 1910, 1922, 1924, 1927, 1940, 1943,
     1945, 1949, 1954, 1958, 1963, 1967, 1969, 1979, 1981, 1984,

     1994, 2004, 2006, 2008, 2017, 2019, 2022, 2032, 2035, 2037,
     2041, 2055, 2051, 2060, 2064, 2066, 2076, 2080, 2085, 2094,
     2096, 2100, 2111, 2113, 2116, 2122, 2125, 2131, 2134, 2136,
     2145, 2154, 2156, 2158, 2168, 2178, 2172, 2183, 2189, 2193,
     2195, 2207, 2209, 2213, 2218, 2227, 2230, 2233,  129, 2244,
     2259, 2261, 2278, 2281, 2283, 2293, 2299, 2302, 2304, 2313,
     2317, 2319, 2328, 2330, 2345, 2348, 2357, 2360, 2363, 2366,
     2369, 2372, 2381, 2378, 2393, 2395, 2397, 2409, 2412, 2414,
     2418, 2424, 2428, 2430, 2434, 2439, 2443, 2454, 2457, 2460,
     2463, 2469, 2472, 2475, 2478, 2484, 2488, 2490, 2503, 2512,

     2514, 2509, 2523, 2529, 2533, 2544, 2548, 2550, 2553, 2559,
     2562,  133,  128, 2564, 2568, 2573, 2577, 2579, 2583, 2592,
     2606,  124, 2608, 2610, 2620, 2622, 2624, 2633, 2635, 2637,
     2639, 2650, 2652, 2654, 2656, 2666, 2670, 2680, 2685, 2691,
     2697, 2706, 2695, 2700, 2709, 2711, 2715, 2720, 2724, 2738,
     2743, 2747, 2753, 2756, 2758, 2762, 2773, 2777, 2779, 2783,
     2788, 2797, 2803, 2812, 2814, 2816, 2818, 2830, 2832, 2836,
     2842, 2845, 2851, 2855, 2857,  110,  113, 2860, 2869, 2871,
     2875, 2886, 2888, 2892, 2901,  113, 2906, 2910, 2912, 2921,
     2923, 2925, 2935, 2937, 2941, 2947, 2951, 2961, 2965, 2967,

     2970, 2976, 2981, 2986, 2991, 2995, 2997, 3001, 3006, 3011,
     3015, 3021, 3027, 3037, 3042, 3046, 3048, 3051, 3057, 3063,
     3066, 3076, 3081, 3087, 3091, 3093, 3096, 3105, 3107, 3116,
     3122, 3126, 3128, 3131,  111,   85, 3142, 3140, 3144, 3146,
     3155, 3157,  132, 3160, 3169, 3171, 3181, 3184, 3186, 3190,
     3196, 3200, 3211, 3215, 3224, 3221, 3226, 3230, 3239, 3241,
     3244, 3250, 3253, 3255, 3270, 3273, 3282, 3285, 3288, 3294,
     3297, 3300, 3291, 3303, 3313, 3315, 3332, 3336, 3342, 3346,
     3351,   80,   77, 3355, 3357, 3360, 3366, 3375,  244, 3377,
     3379, 3388, 3390, 3394, 3404, 3406, 3410, 3415, 3419, 3421,

     3430, 3434, 3440, 3445, 3449, 3451, 3454, 3463, 3469, 3473,
     3478, 3484, 3488, 3490, 3493, 3502, 3504, 3513, 3516, 3525,
     3833,   80, 3527, 3529, 3538, 3540, 3542,   69, 3544, 3553,
     3556, 3559, 3568, 3572, 3574, 3583, 3585, 3587, 3589, 3598,
     3602, 3613, 3617, 3622, 3631, 3633, 3637, 3642, 3833, 3646,
       95, 3648, 3652, 3657, 3663, 3669, 3672, 3678, 3681, 3683,
     3687, 3692, 3696, 3701, 3710,   64, 3712, 3716, 3721, 3727,
     3730, 3732, 3736,   57, 3745, 3747, 3749, 3762, 3767,   38,
     3771,   41, 3773,   33, 3777, 3833, 3782, 3833, 3825, 3828,
     3830

    } ;

static yyconst short int yy_def[792] =
    {   0,
      788,    1,  788,  788,  788,  789,  790,  788,  788,  788,
      788,  788,  788,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  791,  788,  788,  789,  788,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      790,  790,  788,  788,  788,  788,  788,  788,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,

      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  791,  791,  788,  788,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  788,  788,  788,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,

      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  788,  788,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  788,  788,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  788,  788,

      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  788,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,

      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  788,  789,  789,  789,  788,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,

      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  788,  788,  789,  789,  789,  789,  789,  789,  789,
      789,  788,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  788,  788,  789,  789,  789,
      789,  789,  789,  789,  789,  788,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,

      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  788,  788,  789,  789,  789,  789,
      789,  789,  788,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  788,  788,  789,  789,  789,  789,  789,  788,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,

      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      788,  788,  789,  789,  789,  789,  789,  788,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  788,  789,
      788,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  788,  789,  789,  789,  789,
      789,  789,  789,  788,  789,  789,  789,  789,  789,  788,
      789,  788,  789,  788,  789,  788,  789,    0,  788,  788,
      788

    } ;

static yyconst short int yy_nxt[3891] =
    {   0,
        4,    5,    5,    6,    7,    8,    9,   10,   11,    4,
       12,    8,   13,   14,   15,   16,   17,   18,   19,   17,
       17,   20,   21,   22,   23,   17,   24,   25,   26,   27,
       17,   28,   29,   17,   17,   30,   31,   32,   17,   33,
       34,   35,   17,   36,   37,   38,   17,   39,   40,   41,
       42,   43,   44,   17,   17,   45,    4,   46,   46,   47,
       47,   65,   63,   66,   67,   46,   46,   49,  786,   47,
       47,   50,   51,   52,   53,   54,   55,   49,  784,   47,
       47,  782,   56,   57,   58,   59,   60,   49,  780,   47,
       47,   47,   47,   47,   47,   47,   47,   49,  233,   49,

      234,   49,  774,   49,   47,   47,   47,   47,   47,   47,
      766,   69,   49,  751,   49,  749,   49,   65,   63,   71,
       47,   47,   47,   47,  722,   70,   72,  721,   49,  683,
       49,   81,   73,  689,  689,   74,   47,   47,   77,   75,
       79,   78,   47,   47,   49,   76,  682,   80,  643,  636,
       49,   82,   47,   47,   47,   47,   84,   47,   47,  635,
       49,  586,   49,  577,   83,   49,   47,   47,   91,  576,
       86,   85,  522,   87,   49,  449,   89,   47,   47,   47,
       47,  377,   47,   47,   88,   49,   92,   49,   90,  234,
       49,   47,   47,  234,   93,   95,   94,   47,   47,   49,

      300,   47,   47,   47,   47,   49,   97,  146,   98,   49,
       96,   49,  299,  102,  213,  100,  147,  212,   99,   47,
       47,   47,   47,  101,  103,  105,  126,   49,  104,   49,
       47,   47,   47,   47,  147,  106,  126,   62,   49,   62,
       49,  145,  146,  126,  107,  689,  689,  108,   68,  109,
      111,  147,   64,  110,   63,  112,   62,   47,   47,  114,
       47,   47,  118,  788,  115,   49,  119,  728,   49,  147,
      113,  788,  788,  116,   47,   47,   47,   47,  120,  117,
       47,   47,   49,  788,   49,   47,   47,  788,   49,  788,
      122,  788,  788,   49,   47,   47,  788,  788,  127,  121,

       47,   47,   49,  788,  123,   47,   47,  788,   49,  788,
       47,   47,  124,   49,   47,   47,  788,  129,   49,   47,
       47,  788,   49,  128,  130,   47,   47,   49,   47,   47,
       47,   47,  788,   49,   47,   47,   49,  131,   49,  133,
       47,   47,   49,  132,  788,   47,   47,  788,   49,   47,
       47,  788,  134,   49,  788,  139,  788,   49,  138,  788,
      135,  788,  140,  788,  141,  136,  788,  788,  137,   47,
       47,  788,  148,  788,  142,   47,   47,   49,  143,  149,
       47,   47,  788,   49,   47,   47,   47,   47,   49,  150,
       47,   47,   49,  144,   49,   47,   47,  788,   49,   47,

       47,   47,   47,   49,  788,   47,   47,   49,  788,   49,
      788,  788,  151,   49,  153,  788,  154,  152,   47,   47,
       47,   47,  155,   47,   47,  157,   49,  788,   49,   47,
       47,   49,  161,  158,  159,  788,  156,   49,   47,   47,
       47,   47,  788,  160,  162,  788,   49,  788,   49,   47,
       47,   47,   47,  788,   47,   47,  788,   49,  788,   49,
      163,  788,   49,  788,  788,  788,  164,  166,  788,  165,
      788,  167,  168,   47,   47,  788,  788,   47,   47,  170,
      788,   49,  788,  169,  172,   49,   47,   47,   47,   47,
       47,   47,  788,  788,   49,  788,   49,  171,   49,  173,

       47,   47,   47,   47,   47,   47,   47,   47,   49,  788,
       49,  788,   49,  788,   49,   47,   47,  788,  788,   47,
       47,  176,  175,   49,  788,  174,  788,   49,  788,  178,
      788,   47,   47,   47,   47,  788,   47,   47,  177,   49,
      788,   49,  179,  788,   49,  788,   47,   47,   47,   47,
      181,   47,   47,  180,   49,  788,   49,   47,   47,   49,
      183,  182,  184,   47,   47,   49,   47,   47,   47,   47,
      788,   49,  788,  788,   49,  788,   49,   47,   47,  185,
      191,  186,  187,  788,  788,   49,   47,   47,   47,   47,
      189,  193,   47,   47,   49,  190,   49,  192,  788,  188,

       49,  788,   47,   47,  788,   47,   47,  196,  788,  197,
       49,  788,  194,   49,  195,   47,   47,   47,   47,  199,
      788,  788,  200,   49,  788,   49,  198,   47,   47,  788,
       47,   47,   47,   47,  788,   49,  788,  202,   49,  788,
       49,   47,   47,  201,   47,   47,  203,   47,   47,   49,
      788,  788,   49,   47,   47,   49,  788,  206,  204,   47,
       47,   49,  788,   47,   47,  207,  788,   49,  208,  205,
      788,   49,  209,   47,   47,   47,   47,  788,  788,   47,
       47,   49,  788,   49,  788,  215,  788,   49,  788,  210,
       47,   47,  211,  788,  788,  214,  216,  788,   49,  788,

      217,  218,   47,   47,  788,  219,   47,   47,  220,  221,
       49,   47,   47,  788,   49,   47,   47,   47,   47,   49,
      222,   47,   47,   49,  788,   49,   47,   47,  788,   49,
       47,   47,  788,  788,   49,   47,   47,  788,   49,  788,
      224,   47,   47,   49,  223,   47,   47,  788,  788,   49,
       47,   47,  788,   49,  788,  227,  788,  225,   49,  226,
       47,   47,  228,  230,   47,   47,  229,  231,   49,  788,
      788,  236,   49,  788,  232,  788,  235,  237,   47,   47,
      788,   47,   47,   47,   47,  788,   49,  788,  238,   49,
      788,   49,   47,   47,  240,   47,   47,   47,   47,  788,

       49,   47,   47,   49,  788,   49,   47,   47,  788,   49,
      239,  788,  243,  788,   49,   47,   47,  788,   47,   47,
      788,   47,   47,   49,  788,  241,   49,  788,  242,   49,
      788,  246,  788,  244,  250,   47,   47,  788,  248,  245,
       47,   47,  788,   49,  247,   47,   47,  788,   49,  788,
      251,  788,  249,   49,  252,   47,   47,   47,   47,   47,
       47,   47,   47,   49,  788,   49,  788,   49,  788,   49,
      788,   47,   47,  788,  255,  788,   47,   47,  788,   49,
      788,  788,  788,  253,   49,   47,   47,  788,  256,  254,
       47,   47,  788,   49,  788,  788,   47,   47,   49,  788,

      788,  788,  259,  260,   49,   47,   47,  258,  257,  788,
       47,   47,  788,   49,   47,   47,   47,   47,   49,   47,
       47,  788,   49,  261,   49,  788,  788,   49,   47,   47,
       47,   47,  788,  262,   47,   47,   49,  788,   49,  788,
       47,   47,   49,   47,   47,  788,  263,  264,   49,  788,
      788,   49,  265,   47,   47,  788,  788,  266,  788,  269,
      788,   49,  267,  271,   47,   47,   47,   47,   47,   47,
       47,   47,   49,  788,   49,  268,   49,  272,   49,  788,
      788,  270,   47,   47,   47,   47,  788,  273,   47,   47,
       49,  788,   49,   47,   47,  274,   49,   47,   47,  788,

      275,   49,   47,   47,  788,   49,   47,   47,  788,  788,
       49,   47,   47,  788,   49,  788,  276,  788,  277,   49,
       47,   47,  788,  278,   47,   47,  788,  281,   49,  280,
      279,  788,   49,   47,   47,   47,   47,  282,   47,   47,
      284,   49,  788,   49,  788,  788,   49,   47,   47,  788,
      283,  788,  285,   47,   47,   49,   47,   47,  287,   47,
       47,   49,  788,  788,   49,  788,  286,   49,   47,   47,
      288,   47,   47,   47,   47,  289,   49,   47,   47,   49,
      788,   49,  290,  294,  788,   49,  788,  788,  292,   47,
       47,   47,   47,  788,  295,  291,  788,   49,  293,   49,

      788,   47,   47,  297,   47,   47,   47,   47,  788,   49,
      298,  788,   49,  788,   49,  301,  788,  296,   47,   47,
      788,   47,   47,   47,   47,  788,   49,  788,  302,   49,
      788,   49,  788,   47,   47,   47,   47,  305,   47,   47,
      788,   49,  788,   49,  303,  304,   49,   47,   47,   47,
       47,  306,   47,   47,  788,   49,  307,   49,   47,   47,
       49,  308,   47,   47,  309,  310,   49,  788,  312,  788,
       49,   47,   47,  788,   47,   47,   47,   47,  788,   49,
      788,  311,   49,  314,   49,  788,   47,   47,   47,   47,
       47,   47,  788,  318,   49,  313,   49,  788,   49,  788,

      788,  315,   47,   47,  788,  319,  321,  316,  320,  788,
       49,  317,   47,   47,  788,   47,   47,  788,   47,   47,
       49,  788,  324,   49,  788,  322,   49,   47,   47,  788,
       47,   47,   47,   47,  788,   49,  325,  323,   49,  329,
       49,  788,   47,   47,   47,   47,   47,   47,  788,  327,
       49,  788,   49,  788,   49,   47,   47,   47,   47,  788,
      326,   47,   47,   49,  330,   49,  328,   47,   47,   49,
      788,   47,   47,   47,   47,   49,  333,  337,  338,   49,
      334,   49,  331,   47,   47,   47,   47,   47,   47,   47,
       47,   49,  332,   49,  788,   49,  788,   49,  335,   47,

       47,  339,   47,   47,   47,   47,  788,   49,  788,  336,
       49,  342,   49,  341,   47,   47,  343,   47,   47,  788,
      340,  788,   49,   47,   47,   49,  788,  344,  788,  788,
      788,   49,   47,   47,   47,   47,  346,  345,   47,   47,
       49,  788,   49,   47,   47,  788,   49,  349,  788,   47,
       47,   49,  788,  788,  347,   47,   47,   49,   47,   47,
      348,  350,  788,   49,   47,   47,   49,  788,  352,   47,
       47,  788,   49,  788,   47,   47,  351,   49,   47,   47,
      353,  355,   49,  788,   47,   47,   49,   47,   47,   47,
       47,  354,   49,   47,   47,   49,  788,   49,   47,   47,

      357,   49,   47,   47,  788,  358,   49,  788,  356,  788,
       49,  788,   47,   47,   47,   47,  788,  359,  788,  361,
       49,  788,   49,  362,   47,   47,  788,  788,  363,   47,
       47,  788,   49,  360,  364,   47,   47,   49,   47,   47,
       47,   47,  788,   49,   47,   47,   49,  788,   49,   47,
       47,  788,   49,   47,   47,   47,   47,   49,   47,   47,
      788,   49,  788,   49,   47,   47,   49,  366,  788,  367,
      788,  788,   49,  365,   47,   47,   47,   47,  368,   47,
       47,  788,   49,  788,   49,   47,   47,   49,  788,  370,
       47,   47,  369,   49,   47,   47,   47,   47,   49,   47,

       47,  788,   49,  788,   49,  371,  372,   49,  788,  788,
      374,   47,   47,  788,  376,  788,  375,  373,  788,   49,
       47,   47,  788,  379,   47,   47,   47,   47,   49,  380,
       47,   47,   49,  788,   49,   47,   47,  788,   49,  788,
      378,  788,  788,   49,   47,   47,   47,   47,  788,  381,
       47,   47,   49,  788,   49,   47,   47,  788,   49,   47,
       47,   47,   47,   49,  385,   47,   47,   49,  382,   49,
      788,  383,  788,   49,  387,  384,  788,   47,   47,  788,
       47,   47,  788,  386,  389,   49,  788,  388,   49,   47,
       47,  788,   47,   47,   47,   47,  788,   49,  788,  393,

       49,  392,   49,   47,   47,  390,  394,  788,  391,   47,
       47,   49,   47,   47,   47,   47,  788,   49,   47,   47,
       49,  788,   49,  396,   47,   47,   49,   47,   47,   47,
       47,  788,   49,   47,   47,   49,  788,   49,  788,  788,
      395,   49,  788,  397,   47,   47,  398,  788,  400,   47,
       47,  788,   49,   47,   47,  399,  788,   49,  402,  788,
      788,   49,  403,   47,   47,   47,   47,  401,   47,   47,
      788,   49,  788,   49,   47,   47,   49,  788,   47,   47,
       47,   47,   49,  788,  788,  406,   49,  404,   49,   47,
       47,  405,   47,   47,   47,   47,  788,   49,   47,   47,

       49,  788,   49,  408,   47,   47,   49,  788,   47,   47,
       47,   47,   49,  788,  407,  788,   49,  410,   49,  788,
      409,   47,   47,   47,   47,  788,  412,  788,  411,   49,
      788,   49,  788,  788,  788,  788,  415,  413,  788,  416,
      414,  418,  421,  788,  417,  788,  419,  788,  422,  788,
      420,   47,   47,   47,   47,   47,   47,   47,   47,   49,
      788,   49,  788,   49,  788,   49,  788,  423,   47,   47,
       47,   47,   47,   47,   47,   47,   49,  788,   49,  788,
       49,  788,   49,  788,   47,   47,   47,   47,   47,   47,
      788,  427,   49,  788,   49,  788,   49,  788,  424,  788,

      425,  426,  429,  788,  428,   47,   47,  788,  430,   47,
       47,   47,   47,   49,   47,   47,  432,   49,  433,   49,
       47,   47,   49,   47,   47,  788,   47,   47,   49,   47,
       47,   49,  788,  431,   49,   47,   47,   49,   47,   47,
       47,   47,  788,   49,  788,  434,   49,  788,   49,  788,
       47,   47,  788,  436,  788,  788,  439,  435,   49,  788,
      438,  788,  437,   47,   47,  445,  445,  441,   47,   47,
      788,   49,  788,   49,   47,   47,   49,   47,   47,   47,
       47,  440,   49,  788,  442,   49,  443,   49,   47,   47,
       47,   47,   47,   47,  446,  788,   49,  447,   49,  788,

       49,  788,   47,   47,  788,   47,   47,  788,  788,  444,
       49,   47,   47,   49,  788,  448,  788,  450,  788,   49,
      788,  451,  454,   47,   47,   47,   47,  788,   47,   47,
      788,   49,  788,   49,  452,  456,   49,  788,  453,  788,
      455,   47,   47,  788,   47,   47,   47,   47,  788,   49,
       47,   47,   49,  788,   49,   47,   47,  788,   49,   47,
       47,  457,  459,   49,   47,   47,  788,   49,   47,   47,
       47,   47,   49,  458,  461,  788,   49,  788,   49,  788,
       47,   47,   47,   47,  788,   47,   47,  460,   49,  788,
       49,  465,  462,   49,  788,   47,   47,  464,  463,  788,

      468,  788,  466,   49,  788,   47,   47,   47,   47,   47,
       47,  788,  467,   49,  788,   49,  788,   49,   47,   47,
       47,   47,  788,   47,   47,  788,   49,  788,   49,  788,
      469,   49,  788,   47,   47,  470,   47,   47,   47,   47,
      471,   49,   47,   47,   49,  788,   49,  472,  788,  473,
       49,  788,   47,   47,  475,  474,   47,   47,  788,  476,
       49,   47,   47,  788,   49,   47,   47,   47,   47,   49,
      788,  480,  788,   49,  478,   49,  788,   47,   47,  788,
      477,   47,   47,  788,  479,   49,   47,   47,  481,   49,
      788,  483,  788,  788,   49,   47,   47,   47,   47,  482,

      484,   47,   47,   49,  788,   49,  788,  486,  788,   49,
      485,  489,   47,   47,   47,   47,  488,   47,   47,  788,
       49,  490,   49,   47,   47,   49,   47,   47,  788,  487,
      491,   49,   47,   47,   49,   47,   47,   47,   47,  788,
       49,  788,  788,   49,  788,   49,   47,   47,  788,  492,
      788,  494,  788,  495,   49,   47,   47,   47,   47,   47,
       47,  788,  493,   49,  788,   49,  788,   49,  496,   47,
       47,  788,  497,   47,   47,  498,  788,   49,  788,   47,
       47,   49,  788,  499,   47,   47,  500,   49,  788,  502,
       47,   47,   49,  788,   47,   47,   47,   47,   49,  788,

      788,  501,   49,  788,   49,  788,  788,  503,   47,   47,
       47,   47,  788,  504,   47,   47,   49,  788,   49,  445,
      445,  788,   49,  788,  506,  788,  507,   49,   47,   47,
      788,   47,   47,  788,   47,   47,   49,  505,  510,   49,
      788,  127,   49,  508,  509,   47,   47,  788,  788,  512,
      513,  788,  788,   49,  788,  511,  788,  788,  514,  515,
       47,   47,   47,   47,  520,  788,  128,  788,   49,  788,
       49,  788,  521,  788,  788,  516,  517,  788,  518,   47,
       47,  519,   47,   47,   47,   47,  788,   49,  788,  788,
       49,  788,   49,  523,   47,   47,  525,  788,  524,  788,

       47,   47,   49,   47,   47,   47,   47,  788,   49,  788,
      788,   49,  788,   49,   47,   47,  788,  526,   47,   47,
       47,   47,   49,  788,  527,  788,   49,  528,   49,   47,
       47,   47,   47,  788,  788,  788,  788,   49,  788,   49,
      788,  531,  529,  530,  788,  788,   47,   47,  788,   47,
       47,  788,  535,  532,   49,  788,  533,   49,   47,   47,
      534,   47,   47,  537,   47,   47,   49,   47,   47,   49,
       47,   47,   49,   47,   47,   49,  536,  788,   49,   47,
       47,   49,   47,   47,  788,  788,  788,   49,  788,  538,
       49,  788,  539,  542,   47,   47,   47,   47,   47,   47,

      788,  540,   49,  788,   49,  788,   49,  788,  543,  541,
       47,   47,  545,   47,   47,   47,   47,  788,   49,   47,
       47,   49,  544,   49,  788,   47,   47,   49,  546,   47,
       47,   47,   47,   49,  788,   47,   47,   49,  788,   49,
       47,   47,  549,   49,   47,   47,  547,  788,   49,  788,
      550,  788,   49,  551,  552,   47,   47,  548,   47,   47,
      788,   47,   47,   49,   47,   47,   49,  788,  554,   49,
       47,   47,   49,   47,   47,  553,   47,   47,   49,   47,
       47,   49,  556,  788,   49,   47,   47,   49,  555,   47,
       47,   47,   47,   49,  788,  788,  788,   49,  788,   49,

      558,  788,  560,  557,   47,   47,  788,  561,  788,  559,
       47,   47,   49,   47,   47,   47,   47,  788,   49,  788,
      788,   49,  788,   49,   47,   47,  788,  562,  788,  564,
       47,   47,   49,  563,   47,   47,  788,  788,   49,  788,
      565,  788,   49,  566,  568,   47,   47,  788,  567,   47,
       47,   47,   47,   49,   47,   47,  788,   49,  788,   49,
       47,   47,   49,   47,   47,   47,   47,  569,   49,   47,
       47,   49,  570,   49,   47,   47,  788,   49,   47,   47,
       47,   47,   49,  788,   47,   47,   49,  788,   49,  572,
      788,  571,   49,   47,   47,  788,  788,  574,  788,  573,

      578,   49,  788,  579,  580,  788,  575,   47,   47,   47,
       47,   47,   47,  788,  583,   49,  788,   49,  788,   49,
      788,   47,   47,   47,   47,   47,   47,  581,  582,   49,
      788,   49,  788,   49,   47,   47,   47,   47,   47,   47,
       47,   47,   49,  588,   49,  584,   49,  587,   49,  585,
      589,   47,   47,   47,   47,   47,   47,   47,   47,   49,
      788,   49,  788,   49,  788,   49,  590,   47,   47,  788,
      593,   47,   47,  591,  788,   49,  592,  788,  788,   49,
      594,   47,   47,  595,  788,  596,   47,   47,  788,   49,
      788,  598,   47,   47,   49,  788,   47,   47,   47,   47,

       49,   47,   47,  597,   49,  599,   49,   47,   47,   49,
       47,   47,   47,   47,  788,   49,   47,   47,   49,  788,
       49,   47,   47,  600,   49,   47,   47,  788,  601,   49,
      602,  788,  603,   49,  788,  788,  607,  611,  604,   47,
       47,  605,  608,  788,   47,   47,  788,   49,   47,   47,
      788,  609,   49,  606,   47,   47,   49,   47,   47,   47,
       47,  788,   49,   47,   47,   49,  788,   49,  788,  610,
      788,   49,  788,  613,   47,   47,  788,  612,   47,   47,
       47,   47,   49,  614,   47,   47,   49,  788,   49,   47,
       47,  616,   49,  617,  788,  618,  788,   49,   47,   47,

      788,  788,  615,  788,   47,   47,   49,  788,  619,  788,
      621,  620,   49,   47,   47,   47,   47,   47,   47,   47,
       47,   49,  788,   49,  622,   49,  788,   49,  788,  788,
      623,   47,   47,   47,   47,  788,  624,   47,   47,   49,
      788,   49,  625,   47,   47,   49,   47,   47,  788,  626,
      788,   49,   47,   47,   49,  788,   47,   47,   47,   47,
       49,   47,   47,  627,   49,  788,   49,  788,  788,   49,
       47,   47,   47,   47,  788,  628,   47,   47,   49,  788,
       49,  788,  632,  788,   49,  629,  631,   47,   47,   47,
       47,  788,  634,   47,   47,   49,  630,   49,  788,  788,

      633,   49,   47,   47,  788,  638,  640,   47,   47,  637,
       49,   47,   47,   47,   47,   49,  788,  641,  639,   49,
      788,   49,   47,   47,   47,   47,   47,   47,  788,  642,
       49,  788,   49,  788,   49,  788,   47,   47,   47,   47,
      788,  644,   47,   47,   49,  788,   49,  788,   47,   47,
       49,  788,   47,   47,  788,  648,   49,  788,  788,  645,
       49,  646,   47,   47,  647,  649,   47,   47,   47,   47,
       49,   47,   47,  788,   49,  788,   49,   47,   47,   49,
      788,  652,   47,   47,  650,   49,  788,   47,   47,  788,
       49,  653,   47,   47,  651,   49,   47,   47,   47,   47,

       49,  655,   47,   47,   49,  788,   49,   47,   47,  654,
       49,  657,   47,   47,  788,   49,   47,   47,  788,  656,
       49,  658,   47,   47,   49,  788,  788,  788,   47,   47,
       49,  788,  662,  663,  659,  788,   49,  788,   47,   47,
      788,  664,  660,   47,   47,  661,   49,   47,   47,   47,
       47,   49,   47,   47,  788,   49,  665,   49,   47,   47,
       49,  788,  666,  667,   47,   47,   49,   47,   47,  788,
      669,  788,   49,  788,  788,   49,  668,   47,   47,  788,
      788,  670,   47,   47,  788,   49,  788,  671,   47,   47,
       49,  672,   47,   47,   47,   47,   49,   47,   47,  788,

       49,  788,   49,  788,  788,   49,   47,   47,   47,   47,
      788,  674,  788,  673,   49,  788,   49,   47,   47,  788,
      675,  788,  677,   47,   47,   49,  678,   47,   47,   47,
       47,   49,   47,   47,  788,   49,  788,   49,  676,  788,
       49,   47,   47,   47,   47,   47,   47,   47,   47,   49,
      788,   49,  788,   49,  788,   49,   47,   47,   47,   47,
      788,   47,   47,  788,   49,  788,   49,  788,  788,   49,
       47,   47,   47,   47,  681,  679,  680,  684,   49,  788,
       49,  788,   47,   47,  685,   47,   47,   47,   47,  686,
       49,   47,   47,   49,  788,   49,  788,   47,   47,   49,

      788,   47,   47,  788,  687,   49,  788,  688,  690,   49,
      788,  788,   47,   47,  788,  692,   47,   47,  694,  691,
       49,  788,   47,   47,   49,   47,   47,   47,   47,  693,
       49,   47,   47,   49,  788,   49,  788,  788,  695,   49,
       47,   47,   47,   47,  696,   47,   47,  697,   49,  788,
       49,   47,   47,   49,   47,   47,   47,   47,  788,   49,
      698,  788,   49,  699,   49,  701,  788,  702,  788,  788,
      700,   47,   47,  703,   47,   47,  704,  788,  788,   49,
      788,  788,   49,   47,   47,  705,   47,   47,  706,   47,
       47,   49,   47,   47,   49,   47,   47,   49,   47,   47,

       49,   47,   47,   49,   47,   47,   49,  788,  708,   49,
      788,  707,   49,  788,   47,   47,   47,   47,  788,  788,
      788,  709,   49,  788,   49,  788,  710,  711,  788,  788,
      712,  788,  788,   47,   47,  788,  713,   47,   47,  714,
      715,   49,  788,   47,   47,   49,  716,   47,   47,  788,
      717,   49,   47,   47,  788,   49,   47,   47,   47,   47,
       49,   47,   47,  788,   49,  788,   49,   47,   47,   49,
      788,  719,  788,  718,  788,   49,   47,   47,   47,   47,
       47,   47,  788,  788,   49,  788,   49,  788,   49,   47,
       47,   47,   47,  788,  788,   47,   47,   49,  788,   49,

      720,  726,  723,   49,  724,   47,   47,   47,   47,  725,
      727,   47,   47,   49,  788,   49,   47,   47,  788,   49,
       47,   47,   47,   47,   49,  788,  729,  788,   49,  788,
       49,   47,   47,  730,  731,   47,   47,  788,  788,   49,
      788,   47,   47,   49,  788,  733,   47,   47,  732,   49,
       47,   47,   47,   47,   49,   47,   47,  788,   49,  788,
       49,  788,  788,   49,   47,   47,  736,  788,  735,  734,
       47,   47,   49,  737,   47,   47,  788,  788,   49,   47,
       47,  788,   49,  788,  739,   47,   47,   49,  738,   47,
       47,   47,   47,   49,   47,   47,  788,   49,  740,   49,

      788,  788,   49,   47,   47,   47,   47,  788,  742,  788,
      741,   49,  788,   49,   47,   47,  788,   47,   47,  788,
      743,  747,   49,  744,  745,   49,   47,   47,   47,   47,
       47,   47,  746,  788,   49,  788,   49,  788,   49,   47,
       47,   47,   47,   47,   47,   47,   47,   49,  788,   49,
      788,   49,  788,   49,   47,   47,  788,   47,   47,  788,
       47,   47,   49,  788,  750,   49,  788,  748,   49,   47,
       47,  788,  788,   47,   47,   47,   47,   49,  788,  752,
      788,   49,  788,   49,   47,   47,   47,   47,   47,   47,
       47,   47,   49,  788,   49,  754,   49,  788,   49,   47,

       47,  753,  788,   47,   47,  788,  788,   49,  788,  788,
      788,   49,  788,  757,   47,   47,  755,  756,   47,   47,
      788,  788,   49,   47,   47,  788,   49,  788,  758,  788,
      788,   49,   47,   47,   47,   47,  759,  760,   47,   47,
       49,  788,   49,   47,   47,  788,   49,   47,   47,   47,
       47,   49,  761,   47,   47,   49,  788,   49,   47,   47,
      788,   49,  788,  762,   47,   47,   49,  788,  763,  788,
       47,   47,   49,   47,   47,  788,  764,  765,   49,   47,
       47,   49,   47,   47,   47,   47,  788,   49,   47,   47,
       49,  788,   49,   47,   47,  788,   49,   47,   47,  788,

      767,   49,   47,   47,  769,   49,  788,  768,  788,  788,
       49,   47,   47,   47,   47,  788,  770,   47,   47,   49,
      788,   49,   47,   47,  788,   49,  788,  771,   47,   47,
       49,   47,   47,   47,   47,  788,   49,   47,   47,   49,
      788,   49,  788,  772,  788,   49,   47,   47,   47,   47,
       47,   47,  788,  773,   49,  788,   49,  788,   49,  788,
      788,  775,  788,   47,   47,  788,  776,  778,   47,   47,
      777,   49,   47,   47,   47,   47,   49,  788,   47,   47,
       49,  788,   49,   47,   47,  779,   49,  788,  788,  788,
      788,   49,  788,  788,  781,  788,  788,  788,  788,  788,

      788,  788,  788,  788,  783,  788,  788,  788,  785,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  787,   48,   48,   61,   61,
      125,  125,    3,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788
    } ;

static yyconst short int yy_chk[3891] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    5,    5,    6,
        6,   11,   11,   12,   12,   46,   46,    6,  784,   14,
       14,    6,    6,    6,    6,    6,    6,   14,  782,   15,
       15,  780,    6,    6,    6,    6,    6,   15,  774,   16,
       16,   17,   17,   18,   18,   19,   19,   16,  147,   17,

      147,   18,  766,   19,   21,   21,   20,   20,   22,   22,
      751,   14,   21,  728,   20,  722,   22,   63,   63,   16,
       23,   23,   24,   24,  683,   15,   16,  682,   23,  636,
       24,   22,   16,  643,  643,   16,   25,   25,   19,   18,
       20,   19,   26,   26,   25,   18,  635,   21,  586,  577,
       26,   22,   27,   27,   28,   28,   24,   29,   29,  576,
       27,  522,   28,  513,   23,   29,   30,   30,   27,  512,
       25,   24,  449,   25,   30,  377,   26,   31,   31,   32,
       32,  299,   33,   33,   25,   31,   28,   32,   26,  234,
       33,   34,   34,  233,   28,   29,   28,   35,   35,   34,

      213,   36,   36,   37,   37,   35,   30,  146,   30,   36,
       29,   37,  212,   32,  128,   31,  146,  127,   30,   38,
       38,   39,   39,   31,   33,   34,  126,   38,   33,   39,
       40,   40,   41,   41,  146,   35,  125,   62,   40,   61,
       41,   65,   65,   45,   36,  689,  689,   37,   13,   37,
       39,   65,   10,   38,    9,   39,    7,   42,   42,   40,
       43,   43,   41,    3,   40,   42,   41,  689,   43,   65,
       39,    0,    0,   40,   44,   44,   47,   47,   41,   40,
       48,   48,   44,    0,   47,   50,   50,    0,   48,    0,
       43,    0,    0,   50,   51,   51,    0,    0,   47,   42,

       52,   52,   51,    0,   44,   53,   53,    0,   52,    0,
       54,   54,   44,   53,   56,   56,    0,   50,   54,   55,
       55,    0,   56,   47,   51,   57,   57,   55,   58,   58,
       59,   59,    0,   57,   69,   69,   58,   51,   59,   53,
       60,   60,   69,   52,    0,   70,   70,    0,   60,   71,
       71,    0,   54,   70,    0,   57,    0,   71,   56,    0,
       54,    0,   58,    0,   59,   55,    0,    0,   55,   72,
       72,    0,   69,    0,   60,   73,   73,   72,   60,   70,
       74,   74,    0,   73,   76,   76,   75,   75,   74,   71,
       77,   77,   76,   60,   75,   78,   78,    0,   77,   79,

       79,   80,   80,   78,    0,   81,   81,   79,    0,   80,
        0,    0,   72,   81,   74,    0,   75,   73,   82,   82,
       84,   84,   76,   83,   83,   78,   82,    0,   84,   85,
       85,   83,   82,   79,   80,    0,   77,   85,   86,   86,
       87,   87,    0,   80,   82,    0,   86,    0,   87,   88,
       88,   89,   89,    0,   90,   90,    0,   88,    0,   89,
       82,    0,   90,    0,    0,    0,   82,   84,    0,   83,
        0,   85,   86,   91,   91,    0,    0,   92,   92,   88,
        0,   91,    0,   87,   90,   92,   93,   93,   94,   94,
       95,   95,    0,    0,   93,    0,   94,   89,   95,   91,

       96,   96,   97,   97,   98,   98,   99,   99,   96,    0,
       97,    0,   98,    0,   99,  100,  100,    0,    0,  101,
      101,   94,   93,  100,    0,   92,    0,  101,    0,   96,
        0,  102,  102,  103,  103,    0,  104,  104,   95,  102,
        0,  103,   97,    0,  104,    0,  105,  105,  106,  106,
       99,  107,  107,   98,  105,    0,  106,  108,  108,  107,
      101,  100,  101,  109,  109,  108,  110,  110,  111,  111,
        0,  109,    0,    0,  110,    0,  111,  112,  112,  102,
      107,  103,  104,    0,    0,  112,  113,  113,  114,  114,
      106,  108,  115,  115,  113,  106,  114,  107,    0,  105,

      115,    0,  116,  116,    0,  117,  117,  112,    0,  112,
      116,    0,  110,  117,  111,  118,  118,  119,  119,  114,
        0,    0,  115,  118,    0,  119,  113,  120,  120,    0,
      121,  121,  122,  122,    0,  120,    0,  117,  121,    0,
      122,  123,  123,  116,  124,  124,  118,  129,  129,  123,
        0,    0,  124,  130,  130,  129,    0,  120,  119,  132,
      132,  130,    0,  131,  131,  120,    0,  132,  121,  119,
        0,  131,  122,  133,  133,  134,  134,    0,    0,  135,
      135,  133,    0,  134,    0,  130,    0,  135,    0,  123,
      136,  136,  124,    0,    0,  129,  131,    0,  136,    0,

      132,  132,  137,  137,    0,  133,  138,  138,  134,  135,
      137,  139,  139,    0,  138,  140,  140,  142,  142,  139,
      136,  141,  141,  140,    0,  142,  143,  143,    0,  141,
      144,  144,    0,    0,  143,  148,  148,    0,  144,    0,
      138,  149,  149,  148,  137,  150,  150,    0,    0,  149,
      151,  151,    0,  150,    0,  140,    0,  139,  151,  139,
      152,  152,  140,  142,  153,  153,  141,  143,  152,    0,
        0,  149,  153,    0,  144,    0,  148,  150,  154,  154,
        0,  155,  155,  156,  156,    0,  154,    0,  151,  155,
        0,  156,  157,  157,  153,  158,  158,  159,  159,    0,

      157,  161,  161,  158,    0,  159,  160,  160,    0,  161,
      152,    0,  156,    0,  160,  162,  162,    0,  163,  163,
        0,  164,  164,  162,    0,  154,  163,    0,  155,  164,
        0,  159,    0,  157,  163,  165,  165,    0,  161,  158,
      166,  166,    0,  165,  160,  167,  167,    0,  166,    0,
      164,    0,  162,  167,  165,  168,  168,  169,  169,  170,
      170,  171,  171,  168,    0,  169,    0,  170,    0,  171,
        0,  172,  172,    0,  167,    0,  173,  173,    0,  172,
        0,    0,    0,  166,  173,  174,  174,    0,  168,  166,
      175,  175,    0,  174,    0,    0,  176,  176,  175,    0,

        0,    0,  171,  172,  176,  177,  177,  170,  169,    0,
      178,  178,    0,  177,  179,  179,  180,  180,  178,  181,
      181,    0,  179,  174,  180,    0,    0,  181,  182,  182,
      183,  183,    0,  175,  185,  185,  182,    0,  183,    0,
      184,  184,  185,  186,  186,    0,  177,  178,  184,    0,
        0,  186,  179,  187,  187,    0,    0,  180,    0,  183,
        0,  187,  181,  185,  188,  188,  189,  189,  190,  190,
      191,  191,  188,    0,  189,  182,  190,  186,  191,    0,
        0,  184,  192,  192,  193,  193,    0,  187,  194,  194,
      192,    0,  193,  195,  195,  188,  194,  196,  196,    0,

      189,  195,  197,  197,    0,  196,  198,  198,    0,    0,
      197,  199,  199,    0,  198,    0,  190,    0,  191,  199,
      200,  200,    0,  192,  201,  201,    0,  195,  200,  194,
      193,    0,  201,  202,  202,  203,  203,  196,  204,  204,
      198,  202,    0,  203,    0,    0,  204,  205,  205,    0,
      197,    0,  199,  207,  207,  205,  206,  206,  201,  208,
      208,  207,    0,    0,  206,    0,  200,  208,  209,  209,
      202,  210,  210,  211,  211,  203,  209,  214,  214,  210,
        0,  211,  204,  207,    0,  214,    0,    0,  206,  215,
      215,  216,  216,    0,  208,  205,    0,  215,  206,  216,

        0,  217,  217,  210,  218,  218,  220,  220,    0,  217,
      211,    0,  218,    0,  220,  214,    0,  209,  219,  219,
        0,  221,  221,  222,  222,    0,  219,    0,  215,  221,
        0,  222,    0,  223,  223,  224,  224,  218,  225,  225,
        0,  223,    0,  224,  216,  217,  225,  226,  226,  227,
      227,  218,  230,  230,    0,  226,  219,  227,  228,  228,
      230,  221,  229,  229,  222,  223,  228,    0,  225,    0,
      229,  231,  231,    0,  232,  232,  235,  235,    0,  231,
        0,  224,  232,  227,  235,    0,  236,  236,  237,  237,
      238,  238,    0,  230,  236,  226,  237,    0,  238,    0,

        0,  228,  239,  239,    0,  231,  235,  228,  232,    0,
      239,  229,  240,  240,    0,  241,  241,    0,  242,  242,
      240,    0,  238,  241,    0,  236,  242,  243,  243,    0,
      244,  244,  245,  245,    0,  243,  239,  237,  244,  243,
      245,    0,  246,  246,  247,  247,  248,  248,    0,  241,
      246,    0,  247,    0,  248,  249,  249,  250,  250,    0,
      240,  251,  251,  249,  244,  250,  242,  252,  252,  251,
        0,  253,  253,  254,  254,  252,  248,  251,  251,  253,
      248,  254,  246,  256,  256,  255,  255,  257,  257,  258,
      258,  256,  247,  255,    0,  257,    0,  258,  249,  259,

      259,  252,  260,  260,  261,  261,    0,  259,    0,  250,
      260,  255,  261,  254,  262,  262,  257,  263,  263,    0,
      253,    0,  262,  264,  264,  263,    0,  258,    0,    0,
        0,  264,  265,  265,  266,  266,  260,  259,  267,  267,
      265,    0,  266,  268,  268,    0,  267,  263,    0,  269,
      269,  268,    0,    0,  261,  270,  270,  269,  271,  271,
      262,  264,    0,  270,  272,  272,  271,    0,  266,  273,
      273,    0,  272,    0,  274,  274,  265,  273,  275,  275,
      267,  269,  274,    0,  276,  276,  275,  277,  277,  278,
      278,  268,  276,  279,  279,  277,    0,  278,  280,  280,

      272,  279,  281,  281,    0,  273,  280,    0,  271,    0,
      281,    0,  282,  282,  283,  283,    0,  274,    0,  278,
      282,    0,  283,  279,  284,  284,    0,    0,  280,  285,
      285,    0,  284,  277,  281,  286,  286,  285,  287,  287,
      288,  288,    0,  286,  289,  289,  287,    0,  288,  290,
      290,    0,  289,  291,  291,  292,  292,  290,  293,  293,
        0,  291,    0,  292,  294,  294,  293,  286,    0,  288,
        0,    0,  294,  285,  295,  295,  296,  296,  289,  297,
      297,    0,  295,    0,  296,  298,  298,  297,    0,  292,
      301,  301,  290,  298,  302,  302,  303,  303,  301,  304,

      304,    0,  302,    0,  303,  293,  294,  304,    0,    0,
      296,  305,  305,    0,  298,    0,  297,  295,    0,  305,
      306,  306,    0,  302,  307,  307,  308,  308,  306,  304,
      309,  309,  307,    0,  308,  310,  310,    0,  309,    0,
      301,    0,    0,  310,  311,  311,  312,  312,    0,  305,
      313,  313,  311,    0,  312,  314,  314,    0,  313,  315,
      315,  316,  316,  314,  309,  317,  317,  315,  306,  316,
        0,  307,    0,  317,  311,  308,    0,  318,  318,    0,
      319,  319,    0,  310,  313,  318,    0,  312,  319,  320,
      320,    0,  321,  321,  322,  322,    0,  320,    0,  317,

      321,  316,  322,  323,  323,  314,  318,    0,  315,  325,
      325,  323,  324,  324,  326,  326,    0,  325,  327,  327,
      324,    0,  326,  322,  328,  328,  327,  329,  329,  330,
      330,    0,  328,  331,  331,  329,    0,  330,    0,    0,
      321,  331,    0,  323,  332,  332,  324,    0,  326,  333,
      333,    0,  332,  334,  334,  325,    0,  333,  330,    0,
        0,  334,  331,  335,  335,  336,  336,  329,  337,  337,
        0,  335,    0,  336,  338,  338,  337,    0,  339,  339,
      340,  340,  338,    0,    0,  334,  339,  332,  340,  341,
      341,  333,  342,  342,  344,  344,    0,  341,  343,  343,

      342,    0,  344,  336,  345,  345,  343,    0,  347,  347,
      348,  348,  345,    0,  335,    0,  347,  338,  348,    0,
      337,  346,  346,  349,  349,    0,  340,    0,  339,  346,
        0,  349,    0,    0,    0,    0,  343,  341,    0,  343,
      342,  344,  347,    0,  343,    0,  345,    0,  348,    0,
      346,  350,  350,  351,  351,  352,  352,  353,  353,  350,
        0,  351,    0,  352,    0,  353,    0,  349,  354,  354,
      355,  355,  356,  356,  357,  357,  354,    0,  355,    0,
      356,    0,  357,    0,  358,  358,  359,  359,  360,  360,
        0,  353,  358,    0,  359,    0,  360,    0,  350,    0,

      351,  352,  356,    0,  355,  361,  361,    0,  357,  362,
      362,  363,  363,  361,  364,  364,  359,  362,  360,  363,
      365,  365,  364,  366,  366,    0,  367,  367,  365,  368,
      368,  366,    0,  358,  367,  369,  369,  368,  370,  370,
      371,  371,    0,  369,    0,  361,  370,    0,  371,    0,
      372,  372,    0,  363,    0,    0,  367,  362,  372,    0,
      366,    0,  364,  373,  373,  374,  374,  370,  375,  375,
        0,  373,    0,  374,  376,  376,  375,  379,  379,  378,
      378,  369,  376,    0,  371,  379,  372,  378,  380,  380,
      381,  381,  382,  382,  374,    0,  380,  375,  381,    0,

      382,    0,  383,  383,    0,  384,  384,    0,    0,  373,
      383,  385,  385,  384,    0,  376,    0,  378,    0,  385,
        0,  379,  382,  386,  386,  387,  387,    0,  388,  388,
        0,  386,    0,  387,  380,  384,  388,    0,  381,    0,
      383,  389,  389,    0,  390,  390,  391,  391,    0,  389,
      392,  392,  390,    0,  391,  393,  393,    0,  392,  394,
      394,  386,  388,  393,  395,  395,    0,  394,  396,  396,
      397,  397,  395,  387,  390,    0,  396,    0,  397,    0,
      398,  398,  399,  399,    0,  400,  400,  389,  398,    0,
      399,  394,  391,  400,    0,  401,  401,  393,  392,    0,

      397,    0,  395,  401,    0,  402,  402,  403,  403,  404,
      404,    0,  396,  402,    0,  403,    0,  404,  405,  405,
      406,  406,    0,  407,  407,    0,  405,    0,  406,    0,
      399,  407,    0,  408,  408,  401,  409,  409,  410,  410,
      402,  408,  411,  411,  409,    0,  410,  402,    0,  403,
      411,    0,  413,  413,  405,  404,  412,  412,    0,  406,
      413,  414,  414,    0,  412,  415,  415,  416,  416,  414,
        0,  411,    0,  415,  409,  416,    0,  417,  417,    0,
      408,  418,  418,    0,  410,  417,  419,  419,  412,  418,
        0,  414,    0,    0,  419,  420,  420,  421,  421,  413,

      415,  422,  422,  420,    0,  421,    0,  417,    0,  422,
      416,  420,  423,  423,  424,  424,  419,  425,  425,    0,
      423,  420,  424,  426,  426,  425,  427,  427,    0,  418,
      420,  426,  428,  428,  427,  429,  429,  430,  430,    0,
      428,    0,    0,  429,    0,  430,  431,  431,    0,  422,
        0,  425,    0,  426,  431,  432,  432,  433,  433,  434,
      434,    0,  424,  432,    0,  433,    0,  434,  427,  435,
      435,    0,  428,  437,  437,  429,    0,  435,    0,  436,
      436,  437,    0,  430,  438,  438,  431,  436,    0,  433,
      439,  439,  438,    0,  440,  440,  441,  441,  439,    0,

        0,  432,  440,    0,  441,    0,    0,  435,  442,  442,
      443,  443,    0,  436,  444,  444,  442,    0,  443,  445,
      445,    0,  444,    0,  440,    0,  441,  445,  446,  446,
        0,  447,  447,    0,  448,  448,  446,  439,  442,  447,
        0,  445,  448,  441,  441,  450,  450,    0,    0,  445,
      445,    0,    0,  450,    0,  444,    0,    0,  446,  446,
      451,  451,  452,  452,  448,    0,  445,    0,  451,    0,
      452,    0,  448,    0,    0,  447,  447,    0,  447,  453,
      453,  447,  454,  454,  455,  455,    0,  453,    0,    0,
      454,    0,  455,  450,  456,  456,  452,    0,  451,    0,

      457,  457,  456,  458,  458,  459,  459,    0,  457,    0,
        0,  458,    0,  459,  460,  460,    0,  453,  461,  461,
      462,  462,  460,    0,  454,    0,  461,  455,  462,  463,
      463,  464,  464,    0,    0,    0,    0,  463,    0,  464,
        0,  458,  456,  457,    0,    0,  465,  465,    0,  466,
      466,    0,  462,  459,  465,    0,  460,  466,  467,  467,
      461,  468,  468,  464,  469,  469,  467,  470,  470,  468,
      471,  471,  469,  472,  472,  470,  463,    0,  471,  474,
      474,  472,  473,  473,    0,    0,    0,  474,    0,  465,
      473,    0,  466,  469,  475,  475,  476,  476,  477,  477,

        0,  467,  475,    0,  476,    0,  477,    0,  471,  468,
      478,  478,  473,  479,  479,  480,  480,    0,  478,  481,
      481,  479,  472,  480,    0,  482,  482,  481,  475,  483,
      483,  484,  484,  482,    0,  485,  485,  483,    0,  484,
      486,  486,  479,  485,  487,  487,  477,    0,  486,    0,
      480,    0,  487,  481,  482,  488,  488,  478,  489,  489,
        0,  490,  490,  488,  491,  491,  489,    0,  485,  490,
      492,  492,  491,  493,  493,  483,  494,  494,  492,  495,
      495,  493,  487,    0,  494,  496,  496,  495,  486,  497,
      497,  498,  498,  496,    0,    0,    0,  497,    0,  498,

      489,    0,  491,  488,  499,  499,    0,  492,    0,  490,
      502,  502,  499,  500,  500,  501,  501,    0,  502,    0,
        0,  500,    0,  501,  503,  503,    0,  495,    0,  497,
      504,  504,  503,  496,  505,  505,    0,    0,  504,    0,
      498,    0,  505,  500,  502,  506,  506,    0,  501,  507,
      507,  508,  508,  506,  509,  509,    0,  507,    0,  508,
      510,  510,  509,  511,  511,  514,  514,  503,  510,  515,
      515,  511,  504,  514,  516,  516,    0,  515,  517,  517,
      518,  518,  516,    0,  519,  519,  517,    0,  518,  507,
        0,  506,  519,  520,  520,    0,    0,  509,    0,  508,

      514,  520,    0,  515,  516,    0,  510,  521,  521,  523,
      523,  524,  524,    0,  519,  521,    0,  523,    0,  524,
        0,  525,  525,  526,  526,  527,  527,  517,  518,  525,
        0,  526,    0,  527,  528,  528,  529,  529,  530,  530,
      531,  531,  528,  524,  529,  520,  530,  523,  531,  521,
      525,  532,  532,  533,  533,  534,  534,  535,  535,  532,
        0,  533,    0,  534,    0,  535,  526,  536,  536,    0,
      529,  537,  537,  527,    0,  536,  528,    0,    0,  537,
      530,  538,  538,  531,    0,  532,  539,  539,    0,  538,
        0,  535,  540,  540,  539,    0,  543,  543,  541,  541,

      540,  544,  544,  534,  543,  537,  541,  542,  542,  544,
      545,  545,  546,  546,    0,  542,  547,  547,  545,    0,
      546,  548,  548,  538,  547,  549,  549,    0,  539,  548,
      540,    0,  541,  549,    0,    0,  543,  549,  542,  550,
      550,  542,  544,    0,  551,  551,    0,  550,  552,  552,
        0,  545,  551,  542,  553,  553,  552,  554,  554,  555,
      555,    0,  553,  556,  556,  554,    0,  555,    0,  548,
        0,  556,    0,  551,  557,  557,    0,  550,  558,  558,
      559,  559,  557,  552,  560,  560,  558,    0,  559,  561,
      561,  554,  560,  555,    0,  556,    0,  561,  562,  562,

        0,    0,  553,    0,  563,  563,  562,    0,  557,    0,
      559,  558,  563,  564,  564,  565,  565,  566,  566,  567,
      567,  564,    0,  565,  560,  566,    0,  567,    0,    0,
      561,  568,  568,  569,  569,    0,  562,  570,  570,  568,
        0,  569,  563,  571,  571,  570,  572,  572,    0,  565,
        0,  571,  573,  573,  572,    0,  574,  574,  575,  575,
      573,  578,  578,  566,  574,    0,  575,    0,    0,  578,
      579,  579,  580,  580,    0,  569,  581,  581,  579,    0,
      580,    0,  573,    0,  581,  570,  572,  582,  582,  583,
      583,    0,  575,  584,  584,  582,  571,  583,    0,    0,

      574,  584,  585,  585,    0,  579,  581,  587,  587,  578,
      585,  588,  588,  589,  589,  587,    0,  582,  580,  588,
        0,  589,  590,  590,  591,  591,  592,  592,    0,  583,
      590,    0,  591,    0,  592,    0,  593,  593,  594,  594,
        0,  587,  595,  595,  593,    0,  594,    0,  596,  596,
      595,    0,  597,  597,    0,  592,  596,    0,    0,  588,
      597,  589,  598,  598,  590,  593,  599,  599,  600,  600,
      598,  601,  601,    0,  599,    0,  600,  602,  602,  601,
        0,  597,  603,  603,  595,  602,    0,  604,  604,    0,
      603,  598,  605,  605,  596,  604,  606,  606,  607,  607,

      605,  600,  608,  608,  606,    0,  607,  609,  609,  598,
      608,  603,  610,  610,    0,  609,  611,  611,    0,  602,
      610,  604,  612,  612,  611,    0,    0,    0,  613,  613,
      612,    0,  607,  608,  605,    0,  613,    0,  614,  614,
        0,  609,  605,  615,  615,  606,  614,  616,  616,  617,
      617,  615,  618,  618,    0,  616,  611,  617,  619,  619,
      618,    0,  612,  613,  620,  620,  619,  621,  621,    0,
      615,    0,  620,    0,    0,  621,  614,  622,  622,    0,
        0,  618,  623,  623,    0,  622,    0,  619,  624,  624,
      623,  620,  625,  625,  626,  626,  624,  627,  627,    0,

      625,    0,  626,    0,    0,  627,  628,  628,  629,  629,
        0,  622,    0,  621,  628,    0,  629,  630,  630,    0,
      623,    0,  625,  631,  631,  630,  627,  632,  632,  633,
      633,  631,  634,  634,    0,  632,    0,  633,  624,    0,
      634,  638,  638,  637,  637,  639,  639,  640,  640,  638,
        0,  637,    0,  639,    0,  640,  641,  641,  642,  642,
        0,  644,  644,    0,  641,    0,  642,    0,    0,  644,
      645,  645,  646,  646,  634,  632,  633,  637,  645,    0,
      646,    0,  647,  647,  638,  648,  648,  649,  649,  640,
      647,  650,  650,  648,    0,  649,    0,  651,  651,  650,

        0,  652,  652,    0,  641,  651,    0,  642,  644,  652,
        0,    0,  653,  653,    0,  646,  654,  654,  649,  645,
      653,    0,  656,  656,  654,  655,  655,  657,  657,  648,
      656,  658,  658,  655,    0,  657,    0,    0,  650,  658,
      659,  659,  660,  660,  651,  661,  661,  652,  659,    0,
      660,  662,  662,  661,  663,  663,  664,  664,    0,  662,
      653,    0,  663,  655,  664,  657,    0,  658,    0,    0,
      656,  665,  665,  659,  666,  666,  660,    0,    0,  665,
        0,    0,  666,  667,  667,  661,  668,  668,  663,  669,
      669,  667,  673,  673,  668,  670,  670,  669,  671,  671,

      673,  672,  672,  670,  674,  674,  671,    0,  666,  672,
        0,  665,  674,    0,  675,  675,  676,  676,    0,    0,
        0,  667,  675,    0,  676,    0,  668,  669,    0,    0,
      670,    0,    0,  677,  677,    0,  671,  678,  678,  672,
      673,  677,    0,  679,  679,  678,  675,  680,  680,    0,
      676,  679,  681,  681,    0,  680,  684,  684,  685,  685,
      681,  686,  686,    0,  684,    0,  685,  687,  687,  686,
        0,  678,    0,  677,    0,  687,  688,  688,  690,  690,
      691,  691,    0,    0,  688,    0,  690,    0,  691,  692,
      692,  693,  693,    0,    0,  694,  694,  692,    0,  693,

      681,  687,  684,  694,  685,  695,  695,  696,  696,  686,
      688,  697,  697,  695,    0,  696,  698,  698,    0,  697,
      699,  699,  700,  700,  698,    0,  691,    0,  699,    0,
      700,  701,  701,  692,  693,  702,  702,    0,    0,  701,
        0,  703,  703,  702,    0,  697,  704,  704,  694,  703,
      705,  705,  706,  706,  704,  707,  707,    0,  705,    0,
      706,    0,    0,  707,  708,  708,  701,    0,  699,  698,
      709,  709,  708,  702,  710,  710,    0,    0,  709,  711,
      711,    0,  710,    0,  705,  712,  712,  711,  704,  713,
      713,  714,  714,  712,  715,  715,    0,  713,  706,  714,

        0,    0,  715,  716,  716,  717,  717,    0,  710,    0,
      709,  716,    0,  717,  718,  718,    0,  719,  719,    0,
      711,  715,  718,  712,  713,  719,  720,  720,  723,  723,
      724,  724,  714,    0,  720,    0,  723,    0,  724,  725,
      725,  726,  726,  727,  727,  729,  729,  725,    0,  726,
        0,  727,    0,  729,  730,  730,    0,  731,  731,    0,
      732,  732,  730,    0,  724,  731,    0,  719,  732,  733,
      733,    0,    0,  734,  734,  735,  735,  733,    0,  729,
        0,  734,    0,  735,  736,  736,  737,  737,  738,  738,
      739,  739,  736,    0,  737,  731,  738,    0,  739,  740,

      740,  730,    0,  741,  741,    0,    0,  740,    0,    0,
        0,  741,    0,  735,  742,  742,  733,  734,  743,  743,
        0,    0,  742,  744,  744,    0,  743,    0,  737,    0,
        0,  744,  745,  745,  746,  746,  738,  741,  747,  747,
      745,    0,  746,  748,  748,    0,  747,  750,  750,  752,
      752,  748,  743,  753,  753,  750,    0,  752,  754,  754,
        0,  753,    0,  744,  755,  755,  754,    0,  746,    0,
      756,  756,  755,  757,  757,    0,  747,  748,  756,  758,
      758,  757,  759,  759,  760,  760,    0,  758,  761,  761,
      759,    0,  760,  762,  762,    0,  761,  763,  763,    0,

      754,  762,  764,  764,  756,  763,    0,  755,    0,    0,
      764,  765,  765,  767,  767,    0,  757,  768,  768,  765,
        0,  767,  769,  769,    0,  768,    0,  762,  770,  770,
      769,  771,  771,  772,  772,    0,  770,  773,  773,  771,
        0,  772,    0,  764,    0,  773,  775,  775,  776,  776,
      777,  777,    0,  765,  775,    0,  776,    0,  777,    0,
        0,  767,    0,  778,  778,    0,  768,  772,  779,  779,
      770,  778,  781,  781,  783,  783,  779,    0,  785,  785,
      781,    0,  783,  787,  787,  773,  785,    0,    0,    0,
        0,  787,    0,    0,  776,    0,    0,    0,    0,    0,

        0,    0,    0,    0,  781,    0,    0,    0,  783,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  785,  789,  789,  790,  790,
      791,  791,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788
    } ;

#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 ".\\parser.l"
#define INITIAL 0
#line 2 ".\\parser.l"
#include "pch.h"
#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

#include "rdogramrtp.hpp"
namespace rdoParse {
void setYylval(int val);
void addDouble(double *val);
void addName(std::string *name);
}

#line 1563 "rdolex.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 18 ".\\parser.l"


#line 1693 "rdolex.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 789 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3833 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 20 ".\\parser.l"
return(Resource_type);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 21 ".\\parser.l"
return(permanent);
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 22 ".\\parser.l"
return(Parameters);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 23 ".\\parser.l"
return(integer);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 24 ".\\parser.l"
return(real);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 25 ".\\parser.l"
return(End);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 26 ".\\parser.l"
return(temporary);                     
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 27 ".\\parser.l"
return(such_as);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 28 ".\\parser.l"
return(dblpoint);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 30 ".\\parser.l"
return(Resources);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 31 ".\\parser.l"
return(trace_keyword);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 32 ".\\parser.l"
return(no_trace);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 34 ".\\parser.l"
return(Constant);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 35 ".\\parser.l"
return(Body);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 36 ".\\parser.l"
return(Function_keyword);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 37 ".\\parser.l"
return(Type_keyword);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 38 ".\\parser.l"
return(algorithmic);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 39 ".\\parser.l"
return(table_keyword);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 40 ".\\parser.l"
return(list_keyword);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 41 ".\\parser.l"
return(Calculate_if);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 42 ".\\parser.l"
return(Sequence);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 43 ".\\parser.l"
return(uniform);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 44 ".\\parser.l"
return(exponential);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 45 ".\\parser.l"
return(normal_keyword);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 46 ".\\parser.l"
return(by_hist);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 47 ".\\parser.l"
return(enumerative);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 49 ".\\parser.l"
return(Exist);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 50 ".\\parser.l"
return(Not_Exist);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 51 ".\\parser.l"
return(For_All);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 52 ".\\parser.l"
return(Not_For_All);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 53 ".\\parser.l"
return(neq);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 54 ".\\parser.l"
return(leq);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 55 ".\\parser.l"
return(geq);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 56 ".\\parser.l"
return(NoCheck);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 57 ".\\parser.l"
return(Calculate_if);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 58 ".\\parser.l"
return(or_keyword);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 59 ".\\parser.l"
return(and_keyword);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 62 ".\\parser.l"
return(Pattern);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 63 ".\\parser.l"
return(operation);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 64 ".\\parser.l"
return(irregular_event);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 65 ".\\parser.l"
return(rule_keyword);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 66 ".\\parser.l"
return(keyboard);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 67 ".\\parser.l"
return(Relevant_resources);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 68 ".\\parser.l"
return(Keep);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 69 ".\\parser.l"
return(Create_keyword);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 70 ".\\parser.l"
return(Erase);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 71 ".\\parser.l"
return(NonExist);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 72 ".\\parser.l"
return(NoChange);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 73 ".\\parser.l"
return(Time);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 74 ".\\parser.l"
return(Choice);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 75 ".\\parser.l"
return(from_keyword);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 76 ".\\parser.l"
return(first_keyword);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 77 ".\\parser.l"
return(Convert_begin);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 78 ".\\parser.l"
return(Convert_end);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 79 ".\\parser.l"
return(Convert_rule);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 80 ".\\parser.l"
return(Convert_event);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 81 ".\\parser.l"
return(with_max);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 82 ".\\parser.l"
return(with_min);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 83 ".\\parser.l"
return(Operations);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 84 ".\\parser.l"
return(Results);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 85 ".\\parser.l"
return(watch_par);	   
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 86 ".\\parser.l"
return(watch_state);	   
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 87 ".\\parser.l"
return(watch_quant);	   
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 88 ".\\parser.l"
return(watch_value);	   
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 89 ".\\parser.l"
return(get_value);	   
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 91 ".\\parser.l"
return(Model_name);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 92 ".\\parser.l"
return(Resource_file);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 93 ".\\parser.l"
return(OprIev_file);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 94 ".\\parser.l"
return(Frame_file);	
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 95 ".\\parser.l"
return(Statistic_file);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 96 ".\\parser.l"
return(Results_file);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 97 ".\\parser.l"
return(Trace_file);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 98 ".\\parser.l"
return(Show_mode);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 99 ".\\parser.l"
return(Frame_number);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 100 ".\\parser.l"
return(Show_rate);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 101 ".\\parser.l"
return(Run_StartTime);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 102 ".\\parser.l"
return(Trace_StartTime);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 103 ".\\parser.l"
return(Trace_EndTime);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 104 ".\\parser.l"
return(Terminate_if);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 105 ".\\parser.l"
return(Break_point);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 106 ".\\parser.l"
return(Seed);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 107 ".\\parser.l"
return(NoShow);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 108 ".\\parser.l"
return(Monitor);	
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 109 ".\\parser.l"
return(Animation);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 112 ".\\parser.l"
return(Decision_point);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 113 ".\\parser.l"
return(search_keyword);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 114 ".\\parser.l"
return(trace_stat);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 115 ".\\parser.l"
return(trace_tops);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 116 ".\\parser.l"
return(trace_all);		     
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 117 ".\\parser.l"
return(Condition_keyword);		     
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 118 ".\\parser.l"
return(Term_condition);      
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 119 ".\\parser.l"
return(Evaluate_by);	        
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 120 ".\\parser.l"
return(Compare_tops);	     
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 121 ".\\parser.l"
return(NO);				        
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 122 ".\\parser.l"
return(YES);				     
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 123 ".\\parser.l"
return(Activities);		     
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 124 ".\\parser.l"
return(value_before);	     
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 125 ".\\parser.l"
return(value_after);	        
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 126 ".\\parser.l"
return(value_before);	     
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 127 ".\\parser.l"
return(value_after);	        
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 128 ".\\parser.l"
return(some);				     
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 132 ".\\parser.l"
return(Frame);
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 133 ".\\parser.l"
return(Show_if);
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 134 ".\\parser.l"
return(Back_picture);
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 135 ".\\parser.l"
return(Show);
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 136 ".\\parser.l"
return(frm_cell);
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 137 ".\\parser.l"
return(text);
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 138 ".\\parser.l"
return(transparent);
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 139 ".\\parser.l"
return(bitmap);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 140 ".\\parser.l"
return(s_bmp);
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 141 ".\\parser.l"
return(rect_keyword);
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 142 ".\\parser.l"
return(r_rect);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 143 ".\\parser.l"
return(line);
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 144 ".\\parser.l"
return(ellipse);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 145 ".\\parser.l"
return(triang);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 146 ".\\parser.l"
return(active);
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 148 ".\\parser.l"
{
							std::string n1(YYText());
							int len = n1.length();
                     std::string *name = new std::string(n1, 1, len-2);
                     rdoParse::addName(name);
	                  rdoParse::setYylval((int)name);
                     return QUOTED_IDENTIF;
                  }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 157 ".\\parser.l"
;	
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 158 ".\\parser.l"
;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 159 ".\\parser.l"
return(YYText()[YYLeng()-1]);
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 161 ".\\parser.l"
{
						std::string n1(YYText(), YYLeng()-2);
                  rdoParse::setYylval(atoi(n1.c_str()));
						unput('.');
						unput('.');
                  return INT_CONST;
					}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 169 ".\\parser.l"
{
                  double *val = new double(atof(YYText()));
                  rdoParse::addDouble(val);
                  rdoParse::setYylval((int)val);
                  return REAL_CONST;
               }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 176 ".\\parser.l"
{
                  rdoParse::setYylval(atoi(YYText()));
                  return INT_CONST;
               }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 181 ".\\parser.l"
{       
							std::string n1(YYText());
							int pos = n1.find_first_of("\n\t :");
                     std::string *name = new std::string(n1, 0, pos);
                     rdoParse::addName(name);
	                  rdoParse::setYylval((int)name);
                     return IDENTIF_set;
                  }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 190 ".\\parser.l"
{       
							std::string n1(YYText());
							int pos = n1.find_first_of("\n\t :");
                     std::string *name = new std::string(n1, 0, pos);
                     rdoParse::addName(name);
	                  rdoParse::setYylval((int)name);
                     return IDENTIF_NoChange_NoChange;
                  }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 199 ".\\parser.l"
{       
							std::string n1(YYText());
							int pos = n1.find_first_of("\n\t :");
                     std::string *name = new std::string(n1, 0, pos);
                     rdoParse::addName(name);
	                  rdoParse::setYylval((int)name);
                     return IDENTIF_NoChange;
                  }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 208 ".\\parser.l"
{       
							std::string n1(YYText());
							int pos = n1.find_first_of("\n\t :");
                     std::string *name = new std::string(n1, 0, pos);
                     rdoParse::addName(name);
	                  rdoParse::setYylval((int)name);
                     return IDENTIF_COLON;
                  }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 217 ".\\parser.l"
{       
                     std::string *name = new std::string(YYText());
                     rdoParse::addName(name);
	                  rdoParse::setYylval((int)name);
                     return IDENTIF;
                  }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 225 ".\\parser.l"
ECHO;
	YY_BREAK
#line 2483 "rdolex.cpp"
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 789 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 789 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 788);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 225 ".\\parser.l"

   