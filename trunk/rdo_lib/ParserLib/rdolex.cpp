#line 2 "rdolex.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
class istream;
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 138
#define YY_END_OF_BUFFER 139
static yyconst short int yy_acclist[944] =
    {   0,
      122,  122,  139,  138,  127,  138,  137,  138,  138,  128,
      138,  128,  138,  128,  138,  130,  131,  138,  128,  138,
      128,  138,  137,  138,  137,  138,  137,  138,  137,  138,
      137,  138,  137,  138,  137,  138,  137,  138,  137,  138,
      137,  138,  137,  138,  137,  138,  137,  138,  137,  138,
      137,  138,  137,  138,  137,  138,  137,  138,  137,  138,
      137,  138,  137,  138,  137,  138,  137,  138,  137,  138,
      137,  138,  137,  138,  137,  138,  137,  138,  137,  138,
      137,  138,  137,  138,  121,  138,  122,  138,  123,  138,
      124,  138,  125,  138,  127,  137,  136,  137,  137,  137,

      137,  137,  137,  137,  137,  137,  137,  137,  119,  130,
      131,    9,  132,  131,  130,  131,  132,   32,   31,   33,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,   94,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,   36,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  126,
      122,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  120,  132,

      129,  131,  132,  131,  132,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,   95,  137,  137,  137,   37,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,    6,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  131,  131,  131,  132,  137,  137,  137,

      137,  137,  137,  137,  137,  137,  137,   44,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
       81,  137,  107,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,   51,  137,  137,  137,
      137,  137,  115,  137,   19,  137,  137,  137,  137,  137,
      137,    5,  137,  113,  137,   41,  137,  137,  137,  103,
      137,  137,  137,  137,  109,  137,  137,  137,  137,  137,
      137,  137,  137,  133,  137,  137,   14,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,   49,  137,   16,  137,  131,  132,

      131,  137,  137,  137,  137,  137,  137,   46,  137,   27,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,   98,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,   52,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      112,  137,  137,  137,   18,  137,  137,   11,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  104,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,   50,  137,  137,
       45,  137,  137,  137,  137,  137,  137,  137,   82,  137,

      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  118,  137,  137,  111,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,   24,  137,
      137,  137,  114,  137,   86,  137,  137,  137,  137,  137,
      117,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,   29,  137,  137,
      137,  137,   83,  137,  137,   34,  137,  137,  137,  137,
      137,  137,  137,  137,  105,  137,  137,  137,  137,  137,
      137,  137,  137,  137,   25,  137,  116,  137,  137,  137,

      137,  137,    4,  137,  137,  137,  137,  137,  137,    8,
      137,  137,  137,  137,  137,  137,   22,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,   38,  137,   97,  137,
      137,  137,   60,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,   48,  137,   47,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  108,  137,  137,  137,   42,  137,   12,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,   57,  137,   58,  137,  137,  137,

      137,  137,   13,  137,  137,  137,   15,  137,  137,  137,
      137,  137,   21,  137,  137,   84,  137,  137,  137,  137,
      137,  137,  137,  137,  137,   28,  137,  137,  137,  137,
      137,  137,   73,  137,   75,  137,  137,  137,  137,  137,
      137,  137,  137,  137,   65,  137,  137,   39,  137,    2,
      137,    7,  137,   89,  137,  137,  137,  137,  137,  137,
       61,  137,  137,  137,  137,  135,  137,  137,  137,   90,
      137,  137,  137,  137,  137,  137,  137,   10,  137,  137,
      137,  137,  137,  137,  137,  137,   69,  137,  137,   66,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,

       72,  137,  137,  137,  137,  137,   87,  137,   88,  137,
      137,  137,  137,  137,  137,  137,   96,  137,  137,  137,
      137,  137,   59,  137,    3,  137,  137,  137,  137,   80,
      137,  137,  137,   54,  137,  137,  137,  137,   30,  137,
       68,  137,  137,  137,  137,  137,  137,  137,  137,   17,
      137,   26,  137,   23,  137,  137,  110,  137,  100,  102,
      137,  137,   63,  137,   62,  137,   64,  137,  137,  137,
      137,   92,  137,  137,  137,  137,   20,   35,  137,  137,
      137,   55,  137,   74,  137,  137,   71,  137,  137,  137,
       79,  137,  137,  137,  137,   99,  101,  137,  106,  137,

       93,  137,  137,  137,  137,  137,   53,  137,   56,  137,
       67,  137,   76,  137,  137,   78,  137,  137,  137,  137,
      137,    1,  137,  137,   70,  137,  137,  137,   85,  137,
      137,   91,  137,   77,  137,   40,  137,  137,  137,  137,
      134,   43,  137
    } ;

static yyconst short int yy_accept[823] =
    {   0,
        1,    1,    1,    2,    3,    4,    5,    7,    9,   10,
       12,   14,   16,   19,   21,   23,   25,   27,   29,   31,
       33,   35,   37,   39,   41,   43,   45,   47,   49,   51,
       53,   55,   57,   59,   61,   63,   65,   67,   69,   71,
       73,   75,   77,   79,   81,   83,   85,   87,   89,   91,
       93,   95,   96,   96,   97,   98,   99,  100,  101,  102,
      103,  104,  105,  106,  107,  108,  109,  109,  109,  110,
      112,  113,  114,  114,  115,  117,  118,  119,  120,  121,
      122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
      132,  133,  135,  136,  137,  138,  139,  140,  141,  142,

      143,  144,  145,  146,  147,  148,  149,  150,  151,  152,
      153,  154,  155,  156,  157,  158,  159,  160,  161,  162,
      163,  165,  166,  167,  168,  169,  170,  171,  172,  173,
      174,  175,  176,  177,  178,  179,  180,  180,  181,  182,
      182,  182,  183,  184,  185,  186,  187,  188,  189,  190,
      191,  192,  193,  194,  195,  196,  197,  198,  199,  200,
      201,  201,  202,  203,  204,  204,  206,  207,  208,  209,
      210,  211,  212,  213,  214,  215,  216,  217,  218,  219,
      220,  221,  222,  223,  224,  225,  226,  227,  228,  229,
      230,  231,  232,  234,  235,  236,  238,  239,  240,  241,

      242,  243,  244,  245,  246,  247,  248,  249,  250,  251,
      252,  253,  254,  255,  256,  257,  258,  259,  260,  261,
      262,  263,  264,  265,  266,  267,  268,  269,  270,  271,
      272,  273,  273,  273,  274,  275,  276,  277,  278,  279,
      281,  282,  283,  284,  285,  286,  287,  288,  289,  290,
      291,  292,  293,  294,  295,  296,  298,  299,  300,  301,
      302,  303,  304,  305,  306,  307,  308,  310,  311,  312,
      313,  314,  315,  316,  317,  318,  319,  320,  321,  323,
      325,  326,  327,  328,  329,  330,  331,  332,  333,  334,
      335,  336,  337,  339,  340,  341,  342,  343,  345,  347,

      348,  349,  350,  351,  352,  354,  356,  358,  359,  360,
      362,  363,  364,  365,  367,  368,  369,  370,  371,  372,
      373,  374,  374,  375,  376,  377,  379,  380,  381,  382,
      383,  384,  385,  386,  387,  388,  389,  390,  391,  392,
      393,  394,  395,  397,  399,  400,  401,  402,  403,  404,
      405,  406,  407,  408,  410,  412,  413,  414,  415,  416,
      417,  418,  419,  420,  421,  422,  423,  424,  425,  426,
      428,  429,  430,  431,  432,  433,  434,  435,  436,  437,
      438,  439,  441,  442,  443,  444,  445,  446,  447,  448,
      449,  450,  451,  453,  454,  455,  457,  458,  460,  461,

      462,  463,  464,  465,  466,  466,  467,  468,  469,  470,
      471,  472,  473,  475,  476,  477,  478,  479,  480,  481,
      482,  483,  484,  485,  485,  485,  486,  487,  488,  490,
      491,  493,  494,  495,  496,  497,  498,  499,  501,  502,
      503,  504,  505,  506,  507,  508,  509,  510,  511,  512,
      513,  514,  516,  517,  519,  520,  521,  522,  523,  524,
      525,  526,  527,  528,  529,  531,  532,  533,  535,  537,
      538,  539,  540,  541,  543,  544,  544,  545,  546,  547,
      547,  548,  549,  550,  551,  552,  553,  554,  555,  556,
      557,  558,  559,  560,  561,  562,  563,  564,  565,  566,

      567,  568,  570,  571,  572,  573,  575,  576,  578,  579,
      580,  581,  582,  583,  584,  585,  587,  588,  589,  590,
      591,  592,  593,  594,  595,  597,  599,  600,  601,  602,
      603,  605,  606,  607,  608,  609,  610,  612,  613,  614,
      615,  616,  617,  619,  619,  619,  620,  621,  622,  623,
      624,  625,  626,  627,  627,  628,  629,  630,  631,  632,
      633,  634,  635,  636,  637,  639,  641,  642,  643,  645,
      646,  647,  648,  649,  650,  651,  652,  653,  654,  656,
      658,  659,  660,  661,  662,  663,  664,  665,  666,  667,
      668,  669,  670,  671,  672,  673,  674,  676,  677,  678,

      680,  682,  683,  684,  685,  686,  687,  688,  689,  689,
      689,  690,  691,  692,  693,  694,  695,  697,  699,  699,
      700,  701,  702,  703,  705,  706,  707,  709,  710,  711,
      712,  713,  715,  716,  718,  719,  720,  721,  722,  723,
      724,  725,  726,  728,  729,  730,  731,  732,  733,  735,
      737,  738,  739,  740,  741,  742,  743,  744,  745,  747,
      748,  750,  752,  754,  756,  757,  758,  759,  759,  759,
      760,  761,  763,  764,  765,  766,  767,  768,  769,  770,
      772,  773,  774,  775,  776,  777,  778,  780,  781,  782,
      783,  784,  785,  786,  787,  789,  790,  792,  793,  794,

      795,  796,  797,  798,  799,  800,  801,  803,  804,  805,
      806,  807,  809,  811,  812,  812,  812,  813,  814,  815,
      816,  817,  817,  819,  820,  821,  822,  823,  825,  827,
      828,  829,  830,  832,  833,  834,  836,  837,  838,  839,
      841,  843,  844,  845,  846,  847,  848,  849,  850,  852,
      854,  856,  857,  859,  860,  860,  862,  863,  865,  867,
      869,  869,  870,  871,  872,  874,  875,  876,  877,  880,
      881,  882,  884,  886,  887,  889,  890,  891,  893,  894,
      895,  896,  897,  899,  899,  901,  903,  904,  905,  906,
      907,  909,  911,  913,  915,  916,  918,  919,  920,  920,

      921,  922,  924,  925,  927,  928,  929,  929,  931,  932,
      934,  936,  938,  938,  939,  939,  940,  940,  941,  942,
      944,  944
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    5,    1,    1,    6,    7,
        7,    7,    8,    7,    8,    9,    7,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   11,    1,   12,
       13,   14,    1,    1,   15,   16,   17,   18,   19,   20,
       21,   21,   22,   21,   23,   21,   24,   25,   26,   27,
       21,   28,   29,   30,   21,   21,   21,   21,   31,   32,
        7,    1,    7,    1,   33,    1,   34,   35,   36,   37,

       38,   39,   40,   41,   42,   21,   43,   44,   45,   46,
       47,   48,   49,   50,   51,   52,   53,   54,   55,   56,
       57,   21,   58,    1,   59,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   21,    1,    1,    1,    1,    1,    1,
        1,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21
    } ;

static yyconst int yy_meta[60] =
    {   0,
        1,    2,    3,    4,    5,    1,    1,    6,    7,    5,
        2,    1,    1,    1,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    1,    8
    } ;

static yyconst short int yy_base[830] =
    {   0,
        0,    0,   57,   59,  296, 5305,   62,  117,   64, 5305,
      285,  284,   63,   55,  279,   76,   73,  127,   86,   92,
      102,   89,  106,  152,  155,  168,  178,  182,  198,  211,
      222,  225,  235,  238,  241,  256,  259,  271,  286,  300,
      304,  317,  322,  328,  341,  365,  227,    0, 5305, 5305,
     5305,  122,  375,  378, 5305,  381,  391,  394,  407,  410,
      420,  426,  431,  444,  447,  450,   80,  108, 5305,  131,
     5305,    0,  182,  458,  470,  152, 5305, 5305, 5305,  491,
      501,  507,  495,  511,  517,  527,  521,  532,  542,  545,
      556,  562,  567,  577,  583,  587,  601,  597,  607,  613,

      618,  628,  634,  638,  648,  654,  667,  670,  673,  683,
      693,  696,  707,  710,  720,  723,  726,  736,  746,  740,
      756,  766,  782,  786,  796,  799,  802,  815,  826,  839,
      842,  852,  855,  865,  868,  878,  224,  221,    0,  231,
      234,  881,  899,  902,  912,  915,  925,  938,  941,  944,
      957,  962,  974,  978,  989,  994, 1000, 1004,   96,    0,
      186, 5305,  756,    0,  202,  157, 1014, 1024, 1028, 1038,
     1044, 1058, 1063, 1068, 1073, 1079, 1083, 1097, 1100, 1114,
     1118, 1130, 1134, 1149, 1154, 1159, 1170, 1173, 1176, 1186,
     1192, 1209, 1212, 1215, 1225, 1230, 1240, 1245, 1250, 1256,

     1260, 1266, 1271, 1276, 1286, 1291, 1307, 1311, 1321, 1324,
     1336, 1339, 1349, 1352, 1362, 1366, 1376, 1379, 1390, 1400,
     1403, 1416, 1419, 1422, 1434, 1444, 1440, 1450, 1456, 1462,
     1473,  251,  214, 1489, 1492, 1502, 1508, 1513, 1518, 1523,
     1534, 1537, 1540, 1550, 1563, 1566, 1569, 1581, 1584, 1587,
     1599, 1604, 1609, 1613,  290,  244, 1622, 1625, 1646, 1650,
     1656, 1660, 1670, 1673, 1676, 1686, 1698, 1702, 1712, 1715,
     1718, 1728, 1731, 1734, 1752, 1755, 1758, 1771, 1774, 1777,
     1789, 1792, 1804, 1809, 1814, 1819, 1824, 1834, 1837, 1847,
     1857, 1867, 1870, 1881, 1884, 1887, 1897, 1902, 1908, 1912,

     1918, 1929, 1934, 1939, 1944, 1954, 1967, 1970, 1980, 1983,
     1986, 1996, 1999, 2002, 2018, 2021, 2024, 2034, 2037, 2047,
     2050,  212, 5305, 2060, 2063, 2074, 2087, 2090, 2100, 2104,
     2114, 2120, 2124, 2134, 2137, 2140, 2158, 2161, 2177, 2181,
     2191, 2187, 2197, 2201,  246,  165,  241, 2207, 2220, 2224,
     2234, 2230, 2240, 2244, 2254, 2258, 2271, 2281, 2284, 2287,
     2304, 2307, 2317, 2321, 2332, 2335, 2345, 2349, 2361, 2364,
     2367, 2379, 2382, 2394, 2400, 2404, 2418, 2421, 2431, 2437,
     2441, 2447, 2451, 2457, 2467, 2472, 2482, 2492, 2495, 2498,
     2508, 2511, 2525, 2529, 2540, 2544, 2554, 2557, 2569, 2573,

     2583, 2589, 2594, 2599,  216, 2604, 2617, 2621, 2627, 2632,
     2638, 2648, 2651, 2665, 2670, 2681, 2684, 2687, 2697, 2700,
     2710, 2713, 2724,  197,  238, 2737, 2740, 2743, 2753, 2763,
     2767, 2778, 2781, 2791, 2794, 2805, 2808, 2821, 2827, 2831,
     2837, 2850, 2853, 2856, 2866, 2877, 2882, 2888, 2892, 2902,
     2906, 2916, 2928, 2938, 2944, 2948, 2954, 2958, 2964, 2968,
     2974, 2979, 2989, 2995, 2999, 3011, 3014, 3017, 3030, 3033,
     3043, 3046, 3056, 3059, 3062, 3083, 3089, 3099, 3072,  189,
     3109, 3124, 3127, 3138, 3141, 3152, 3156, 3166, 3170, 3180,
     3190, 3186, 3200, 3203, 3213, 3216, 3219, 3231, 3245, 3251,

     3256, 3266, 3269, 3272, 3282, 3293, 3296, 3306, 3310, 3316,
     3320, 3326, 3336, 3339, 3352, 3355, 3366, 3376, 3379, 3382,
     3393, 3396, 3407, 3411, 3421, 3427, 3433, 3439, 3443, 3453,
     3456, 3459, 3470, 3473, 3486, 3492, 3497, 3510, 3513, 3516,
     3526, 3532, 3537,  195,  193, 3542, 3547, 3552, 3563, 3567,
     3573, 3585, 3588,  183, 3591, 3601, 3606, 3611, 3621, 3624,
     3627, 3640, 3643, 3646, 3657, 3660, 3672, 3676, 3689, 3692,
     3695, 3705, 3708, 3718, 3723, 3733, 3729, 3743, 3760, 3764,
     3776, 3779, 3782, 3793, 3796, 3799, 3809, 3812, 3827, 3830,
     3841, 3851, 3854, 3868, 3872, 3878, 3884, 3888, 3898, 3901,

     3904, 3914, 3919, 3925, 3929, 3935, 3939, 3950,  166,  169,
     3953, 3963, 3973, 3987, 3990, 3993, 4004, 4007,  166, 4023,
     4027, 4037, 4040, 4043, 4054, 4060, 4064, 4070, 4074, 4080,
     4092, 4095, 4098, 4108, 4118, 4128, 4134, 4138, 4144, 4148,
     4154, 4164, 4167, 4177, 4192, 4196, 4202, 4207, 4212, 4222,
     4227, 4237, 4243, 4247, 4253, 4263, 4273, 4276, 4279, 4290,
     4296, 4300, 4310, 4313, 4326, 4329, 4339,  160,  141, 4343,
     4349, 4353, 4359, 4363, 4373,  310, 4384, 4387, 4390, 4400,
     4405, 4410, 4416, 4420, 4430, 4440, 4444, 4454, 4457, 4470,
     4473, 4483, 4486, 4496, 4499, 4512, 4515, 4525, 4528, 4531,

     4541, 4544, 4554, 4557, 4560, 4572, 4576, 4586, 4592, 4602,
     4605, 4608, 4623, 4629,  137,  133, 4633, 4645, 4648, 4651,
     4661,  984, 4664, 4667, 4682, 4694, 4699, 4704, 4709, 4720,
     4723, 4733, 4736, 4748, 4751, 4761, 4764, 4767, 4779, 4792,
     4795, 4798, 4809, 4812, 4822, 4828, 4832, 4842, 4847, 4852,
     4857, 4867, 4871, 5305,  138, 4877, 4881, 4887, 4891, 4897,
      117, 4901, 4907, 4911, 4921, 4924, 4934, 4938, 4944, 4948,
     4958, 4961, 4974, 4984, 4987, 4997, 5000, 5003, 5013, 5016,
     5026, 5305, 5029,  134, 5039, 5043, 5057, 5063, 5067, 5073,
     5077, 5083, 5087, 5093, 5097, 5110, 5113, 5123,   74, 5126,

     5129, 5139, 5142, 5145, 5157, 5160,   73, 5163, 5173, 5183,
     5187, 5197,   52, 5200,   45, 5203,   43, 5213, 5305, 5216,
     5305, 5264, 5271, 5276, 5280, 5287, 5295,   69, 5298
    } ;

static yyconst short int yy_def[830] =
    {   0,
      821,    1,  822,  822,  821,  821,  821,  823,  824,  821,
      821,  821,  825,  821,  821,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  826,  827,  821,  821,
      821,  821,  821,  823,  821,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  824,  824,  821,  825,
      821,  828,  825,  825,  825,  829,  821,  821,  821,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,

      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  826,  826,  827,  821,
      821,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  824,  828,
      825,  821,  825,  828,  825,  829,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,

      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  821,  821,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  825,  825,  828,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,

      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  821,  821,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  821,  828,  821,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,

      823,  823,  823,  823,  821,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  821,  821,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  821,  823,  823,  823,  821,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,

      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  821,  821,  823,  823,  823,  823,  823,
      823,  823,  823,  821,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,

      823,  823,  823,  823,  823,  823,  823,  823,  821,  821,
      823,  823,  823,  823,  823,  823,  823,  823,  821,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  821,  821,  823,
      823,  823,  823,  823,  823,  821,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,

      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  821,  821,  823,  823,  823,  823,
      823,  821,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  821,  821,  823,  823,  823,  823,  823,
      821,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  821,  823,  821,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  821,  823,

      823,  823,  823,  823,  823,  823,  821,  823,  823,  823,
      823,  823,  821,  823,  821,  823,  821,  823,  821,  823,
        0,  821,  821,  821,  821,  821,  821,  821,  821
    } ;

static yyconst short int yy_nxt[5365] =
    {   0,
        6,    7,    7,    7,    8,    9,   10,   11,   12,   13,
        6,   14,   10,   15,   16,   17,   18,   19,   20,   21,
       19,   19,   22,   23,   24,   25,   19,   26,   27,   28,
       29,   19,   19,   30,   31,   19,   19,   32,   33,   34,
       19,   35,   36,   37,   19,   38,   39,   40,   19,   41,
       42,   43,   44,   45,   46,   19,   19,   47,    6,   49,
       50,   49,   50,   52,   52,   52,   68,   77,   78,   69,
       73,   74,   75,  160,   53,   53,   53,   53,   53,   53,
      819,   76,   68,   55,  817,   69,   55,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   55,  815,   68,   55,

       76,   69,   55,   53,   53,   53,  813,   53,   53,   53,
       68,  159,   55,   69,  807,   51,   55,   51,   53,   53,
       53,   80,   81,   52,   52,   52,   90,   55,   53,   53,
       53,   56,   57,   58,   59,   60,   61,   55,   73,   74,
       75,   86,   62,   63,   64,   65,   66,   87,   88,   76,
      799,   89,   91,   53,   53,   53,   53,   53,   53,  165,
       82,  166,   55,  784,  821,   55,  256,   83,   76,   53,
       53,   53,  425,   84,  256,  782,   85,   92,   55,   53,
       53,   53,  755,   53,   53,   53,  754,  716,   55,  821,
      821,  161,   55,  821,  821,  821,   97,  715,   93,   53,

       53,   53,   94,  676,  425,   95,  347,  669,   55,  821,
      821,  255,   53,   53,   53,   98,  103,  668,   99,  101,
       96,   55,  619,   53,   53,   53,   53,   53,   53,  100,
      610,  102,   55,  609,  554,   55,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   55,  104,  347,   55,  480,
      347,   55,  405,  256,  105,  345,  106,   53,   53,   53,
       53,   53,   53,  107,  424,  323,   55,  322,  109,   55,
      110,  233,   53,   53,   53,  114,  112,  232,  108,  138,
      111,   55,  138,  424,  113,  138,  115,   53,   53,   53,
      116,   79,   71,  117,   70,  821,   55,  821,  821,  347,

      118,   53,   53,   53,  821,   53,   53,   53,  821,  821,
       55,  722,  722,  722,   55,  821,  821,  119,   53,   53,
       53,  821,  821,   53,   53,   53,  821,   55,  821,   53,
       53,   53,   55,  120,  821,  121,  123,  122,   55,  821,
      821,  124,   53,   53,   53,  821,  821,  821,  821,  126,
      821,   55,  821,  821,  127,  130,  125,  821,  821,  131,
      821,  821,  821,  128,  821,  821,   53,   53,   53,  129,
      821,  132,  821,  133,  134,   55,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   55,  821,  821,   55,  821,
      821,   55,   53,   53,   53,   53,   53,   53,  135,  140,

      821,   55,  821,  821,   55,  821,  136,  821,   53,   53,
       53,   53,   53,   53,  821,  821,  142,   55,  821,  821,
       55,   53,   53,   53,  143,  141,  821,   53,   53,   53,
       55,  821,   53,   53,   53,  821,   55,  144,  821,  821,
      145,   55,  821,  821,  146,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   55,  147,  821,   55,  821,  821,
       55,  821,  821,  148,  152,   73,  162,  163,  821,  149,
      821,  821,  150,  151,  821,  821,   76,   73,   74,   75,
      153,  154,  821,  821,  155,  821,  821,  156,   76,  821,
      821,  157,   53,   53,   53,   76,   53,   53,   53,  821,

      821,   55,   53,   53,   53,   55,  158,   76,   53,   53,
       53,   55,   53,   53,   53,  821,  821,   55,   53,   53,
       53,   55,   53,   53,   53,  821,  821,   55,   53,   53,
       53,   55,  167,   53,   53,   53,  821,   55,  168,  821,
      821,  170,   55,   53,   53,   53,   53,   53,   53,  821,
      169,  821,   55,  821,  172,   55,  171,   53,   53,   53,
      173,  821,  174,   53,   53,   53,   55,  821,   53,   53,
       53,  821,   55,  821,  821,  176,  821,   55,   53,   53,
       53,  175,  177,  180,   53,   53,   53,   55,   53,   53,
       53,  821,  178,   55,  821,  181,  821,   55,   53,   53,

       53,  179,   53,   53,   53,  821,  821,   55,   53,   53,
       53,   55,  182,  821,   53,   53,   53,   55,  183,   53,
       53,   53,  187,   55,  821,  821,  184,  821,   55,   53,
       53,   53,  186,  185,  188,   53,   53,   53,   55,   53,
       53,   53,  821,  821,   55,  821,  190,  821,   55,   53,
       53,   53,  821,  189,  821,   53,   53,   53,   55,  821,
      821,  192,  193,  821,   55,  821,  821,  191,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   55,  821,  821,
       55,  821,  821,   55,   53,   53,   53,  195,  821,  194,
      196,  821,  821,   55,   53,   53,   53,   53,   53,   53,

      821,  821,  198,   55,  821,  821,   55,  821,   53,   53,
       53,   53,   53,   53,  821,  821,  199,   55,  197,  821,
       55,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       55,  821,  821,   55,  821,  200,   55,   53,   53,   53,
      201,   53,   53,   53,  821,  202,   55,   53,   53,   53,
       55,  203,  821,  204,  821,  821,   55,   53,   53,   53,
      821,  205,  821,   73,  821,  254,   55,   53,   53,   53,
      821,  206,  207,  821,   76,  821,   55,  213,  211,  821,
      821,  209,  208,   53,   53,   53,  210,   53,   53,   53,
      821,  821,   55,   76,  821,  212,   55,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   55,  821,  821,   55,
      821,  821,   55,  821,  821,  214,   53,   53,   53,  216,
      821,  217,  821,  821,  821,   55,  821,   53,   53,   53,
      821,  215,  821,  219,  821,  220,   55,  821,  821,  218,
       53,   53,   53,   53,   53,   53,  821,  821,  821,   55,
      821,  821,   55,   53,   53,   53,   53,   53,   53,  221,
      821,  222,   55,  821,  821,   55,   53,   53,   53,   53,
       53,   53,  821,  223,  821,   55,  821,  821,   55,   53,
       53,   53,   53,   53,   53,  226,  224,  821,   55,  821,
      821,   55,  821,  227,  821,  821,  228,  225,  821,  821,

       53,   53,   53,   53,   53,   53,  821,  821,  229,   55,
      821,  821,   55,   53,   53,   53,   53,   53,   53,  230,
      821,  821,   55,  821,  821,   55,   53,   53,   53,  231,
      821,  821,  234,  821,  235,   55,  821,  821,  236,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   55,  821,
      239,   55,  821,  821,   55,  821,  237,  238,   53,   53,
       53,  240,  821,   53,   53,   53,  821,   55,  821,  821,
      821,  241,   55,  821,  242,   53,   53,   53,  821,   53,
       53,   53,  821,  821,   55,  722,  722,  722,   55,  243,
       53,   53,   53,  821,  244,   53,   53,   53,  821,   55,

      821,   53,   53,   53,   55,   53,   53,   53,  761,  821,
       55,  245,  821,  246,   55,   53,   53,   53,  821,  821,
      247,  248,  821,  821,   55,   53,   53,   53,  249,   53,
       53,   53,  821,  821,   55,  821,  821,  250,   55,   53,
       53,   53,  821,  251,  252,   53,   53,   53,   55,  821,
      821,  253,  821,  821,   55,  821,  821,  258,  257,   53,
       53,   53,  821,  259,   53,   53,   53,  821,   55,   53,
       53,   53,  821,   55,   53,   53,   53,  821,   55,  260,
       53,   53,   53,   55,   53,   53,   53,  821,  821,   55,
      821,  262,  821,   55,  821,  821,  821,  261,   53,   53,

       53,   53,   53,   53,  821,  265,  821,   55,  821,  821,
       55,  821,  821,  263,  821,   53,   53,   53,  264,   53,
       53,   53,  821,  266,   55,  821,  821,  821,   55,  821,
      267,   53,   53,   53,  268,   53,   53,   53,  821,  821,
       55,  269,  821,  821,   55,  821,  821,  821,  272,  821,
       53,   53,   53,  821,  270,   53,   53,   53,  271,   55,
       53,   53,   53,  821,   55,  821,  273,  821,  821,   55,
      274,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       55,  821,  821,   55,  821,  821,   55,   53,   53,   53,
      821,  277,  821,   53,   53,   53,   55,  821,  821,  821,

      275,  278,   55,  821,  821,  821,  276,  821,  821,  279,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   55,
      821,  821,   55,  821,  821,   55,   53,   53,   53,  821,
      280,   53,   53,   53,  821,   55,  282,  281,  821,  821,
       55,   53,   53,   53,  283,  821,   53,   53,   53,  821,
       55,   53,   53,   53,  821,   55,  284,   53,   53,   53,
       55,   53,   53,   53,  821,  821,   55,   53,   53,   53,
       55,  285,   53,   53,   53,  821,   55,   53,   53,   53,
      821,   55,  821,  821,  286,  287,   55,   53,   53,   53,
      821,  288,   53,   53,   53,  821,   55,  821,  821,  821,

      289,   55,  821,  292,  821,  821,  290,  821,   53,   53,
       53,  821,   53,   53,   53,  821,  291,   55,  294,  821,
      293,   55,   53,   53,   53,   53,   53,   53,  295,  821,
      821,   55,  821,  821,   55,  821,  821,   53,   53,   53,
       53,   53,   53,  821,  296,  297,   55,  821,  821,   55,
       53,   53,   53,   53,   53,   53,  821,  821,  298,   55,
      821,  821,   55,   53,   53,   53,  821,   53,   53,   53,
      821,  821,   55,  821,  821,  299,   55,   53,   53,   53,
       53,   53,   53,  301,  821,  821,   55,  300,  821,   55,
      821,   53,   53,   53,  821,  821,  303,  821,  302,  304,

       55,   53,   53,   53,   53,   53,   53,  821,  821,  305,
       55,  821,  821,   55,  821,  821,  307,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   55,  306,  821,   55,
      821,  821,   55,  821,  308,   53,   53,   53,  821,  821,
      310,   53,   53,   53,   55,   53,   53,   53,  821,  309,
       55,   53,   53,   53,   55,  821,  311,   53,   53,   53,
       55,  821,  312,   53,   53,   53,   55,  821,  821,  313,
      821,  821,   55,  317,   53,   53,   53,  821,  821,  315,
      821,  821,  821,   55,  821,  314,  821,  821,  318,  316,
       53,   53,   53,   53,   53,   53,  821,  320,  821,   55,

      821,  821,   55,   53,   53,   53,  821,  821,  319,   53,
       53,   53,   55,  321,   53,   53,   53,  821,   55,   53,
       53,   53,  821,   55,   53,   53,   53,  821,   55,  821,
      324,  821,  821,   55,  325,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   55,  821,  821,   55,  821,  328,
       55,   53,   53,   53,  821,  327,  821,  821,  326,  330,
       55,  821,  821,  329,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   55,  821,  333,   55,  331,  821,   55,
      821,  332,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   55,  821,  821,   55,  821,  335,   55,  821,  334,

       53,   53,   53,  821,  337,   53,   53,   53,  821,   55,
       53,   53,   53,  821,   55,  821,  821,  336,  338,   55,
      821,  821,  345,   53,   53,   53,   53,   53,   53,  821,
      339,  346,   55,  821,  821,   55,  340,  821,  821,  341,
      821,  343,  821,  342,  821,  821,  344,   53,   53,   53,
      346,   53,   53,   53,  821,  348,   55,   53,   53,   53,
       55,   53,   53,   53,  821,  821,   55,  349,  821,  821,
       55,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       55,  821,  821,   55,  821,  351,   55,   53,   53,   53,
      356,  821,  821,  352,  821,  821,   55,  821,  350,   53,

       53,   53,  821,   53,   53,   53,  821,  354,   55,  821,
      821,  353,   55,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   55,  357,  355,   55,  821,  821,   55,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   55,  821,
      821,   55,  821,  821,   55,  358,  821,  821,  360,  364,
      365,  821,  361,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   55,  359,  362,   55,  821,  821,   55,  821,
      821,  366,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   55,  821,  363,   55,  821,  369,   55,  821,  370,
       53,   53,   53,   53,   53,   53,  821,  821,  368,   55,

      821,  821,   55,  821,  367,   53,   53,   53,  821,  371,
       53,   53,   53,  821,   55,   53,   53,   53,  821,   55,
       53,   53,   53,  821,   55,   53,   53,   53,  821,   55,
      372,  821,  821,  373,   55,   53,   53,   53,   53,   53,
       53,  374,  821,  821,   55,  821,  821,   55,   53,   53,
       53,  821,  377,  821,  821,  821,  821,   55,   53,   53,
       53,  821,  375,  376,  821,  378,  821,   55,   53,   53,
       53,   53,   53,   53,  380,  821,  821,   55,  821,  821,
       55,  379,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   55,  381,  821,   55,  821,  821,   55,   53,   53,

       53,  821,  383,   53,   53,   53,  821,   55,  382,   53,
       53,   53,   55,   53,   53,   53,  821,  821,   55,   53,
       53,   53,   55,  385,  821,  821,  386,  821,   55,  821,
       53,   53,   53,  821,  384,   53,   53,   53,  821,   55,
       53,   53,   53,  387,   55,   53,   53,   53,  821,   55,
      821,  389,  821,  821,   55,   53,   53,   53,  821,  821,
      821,  388,  390,  821,   55,  821,  821,  391,   53,   53,
       53,   53,   53,   53,  392,  821,  821,   55,  821,  821,
       55,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       55,  821,  821,   55,  821,  821,   55,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   55,  821,  821,   55,
      821,  821,   55,  821,  821,  394,  821,  393,  395,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   55,  821,
      821,   55,  821,  396,   55,   53,   53,   53,   53,   53,
       53,  821,  821,  821,   55,  397,  821,   55,   53,   53,
       53,   53,   53,   53,  821,  398,  821,   55,  821,  821,
       55,   53,   53,   53,   53,   53,   53,  821,  821,  400,
       55,  399,  821,   55,  402,   53,   53,   53,  821,  821,
      401,  821,  404,  821,   55,  821,  821,  403,   53,   53,
       53,   53,   53,   53,  821,  407,  821,   55,  821,  821,

       55,   53,   53,   53,  821,   53,   53,   53,  821,  821,
       55,  821,  821,  406,   55,   53,   53,   53,  821,  821,
      408,   53,   53,   53,   55,   53,   53,   53,  821,  821,
       55,  409,  821,  821,   55,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   55,  821,  821,   55,  821,  821,
       55,  410,  821,  821,  411,  821,  821,  413,  821,   53,
       53,   53,   53,   53,   53,  821,  412,  415,   55,  821,
      821,   55,  821,  821,  821,  414,  821,  417,   53,   53,
       53,  416,   53,   53,   53,  821,  821,   55,   53,   53,
       53,   55,   53,   53,   53,  418,  821,   55,   53,   53,

       53,   55,   53,   53,   53,  821,  821,   55,   53,   53,
       53,   55,  821,  821,  419,  821,  821,   55,  821,  423,
      821,   53,   53,   53,  421,   53,   53,   53,  422,  420,
       55,   53,   53,   53,   55,   53,   53,   53,  821,  821,
       55,   53,   53,   53,   55,   53,   53,   53,  821,  821,
       55,  821,  427,  821,   55,   53,   53,   53,  426,   53,
       53,   53,  821,  821,   55,  821,  821,  428,   55,  821,
      821,  429,   53,   53,   53,  821,  821,  431,  821,  430,
      821,   55,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   55,  821,  821,   55,  821,  821,   55,  821,  821,

      821,  432,  821,  433,  821,   53,   53,   53,   53,   53,
       53,  821,  821,  434,   55,  821,  821,   55,   53,   53,
       53,  821,   53,   53,   53,  821,  821,   55,  821,  821,
      435,   55,  436,   53,   53,   53,   53,   53,   53,  437,
      821,  821,   55,  821,  821,   55,   53,   53,   53,  821,
       53,   53,   53,  821,  821,   55,  821,  821,  439,   55,
      821,  438,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   55,  821,  821,   55,  821,  440,   55,  441,  821,
       53,   53,   53,   53,   53,   53,  821,  821,  442,   55,
      821,  821,   55,  821,  443,   53,   53,   53,  821,  821,

      444,   53,   53,   53,   55,   53,   53,   53,  446,  821,
       55,  447,  445,  821,   55,  821,  448,  821,  821,   53,
       53,   53,   53,   53,   53,  821,  451,  450,   55,  449,
      821,   55,   53,   53,   53,  821,  821,  452,   53,   53,
       53,   55,   53,   53,   53,  453,  821,   55,   53,   53,
       53,   55,   53,   53,   53,  821,  821,   55,   53,   53,
       53,   55,  821,  821,  821,  454,  821,   55,   53,   53,
       53,  455,  821,   53,   53,   53,  821,   55,  458,  821,
      821,  456,   55,   53,   53,   53,  457,  821,  459,  821,
      460,  821,   55,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   55,  821,  461,   55,  821,  821,   55,   53,
       53,   53,   53,   53,   53,  463,  821,  821,   55,  821,
      821,   55,  821,  821,  462,  464,   53,   53,   53,  821,
       53,   53,   53,  821,  821,   55,  821,  821,  465,   55,
      821,   53,   53,   53,  821,   53,   53,   53,  821,  466,
       55,  821,  821,  467,   55,   53,   53,   53,   53,   53,
       53,  821,  468,  821,   55,  821,  821,   55,  821,  469,
       53,   53,   53,  470,   53,   53,   53,  821,  821,   55,
      821,  821,  821,   55,   53,   53,   53,  821,  821,  472,
      476,  476,  476,   55,  821,   53,   53,   53,  821,   55,

       53,   53,   53,  471,   55,   53,   53,   53,  821,   55,
      821,  821,  474,  821,   55,  821,  473,  821,   53,   53,
       53,  477,   53,   53,   53,  821,  478,   55,   53,   53,
       53,   55,  475,   53,   53,   53,  821,   55,  821,   53,
       53,   53,   55,  479,  821,  481,  821,  821,   55,   53,
       53,   53,   53,   53,   53,  821,  821,  821,   55,  821,
      821,   55,  821,  821,  482,  485,   53,   53,   53,  821,
      483,   53,   53,   53,  821,   55,  821,  821,  484,  486,
       55,  487,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   55,  821,  821,   55,  821,  821,   55,   53,   53,

       53,   53,   53,   53,  821,  821,  488,   55,  821,  821,
       55,   53,   53,   53,   53,   53,   53,  821,  490,  821,
       55,  489,  821,   55,  821,   53,   53,   53,  821,  821,
      493,  821,  821,  491,   55,  821,  821,  492,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   55,  821,  494,
       55,  821,  821,   55,   53,   53,   53,  821,  496,  497,
      821,  495,  821,   55,   53,   53,   53,  821,   53,   53,
       53,  821,  821,   55,  821,  821,  500,   55,  498,   53,
       53,   53,   53,   53,   53,  821,  821,  499,   55,  821,
      821,   55,   53,   53,   53,   53,   53,   53,  821,  821,

      821,   55,  821,  821,   55,  821,   53,   53,   53,   53,
       53,   53,  821,  821,  501,   55,  821,  821,   55,  503,
      821,  502,   53,   53,   53,  821,  504,  821,   53,   53,
       53,   55,   53,   53,   53,  821,  505,   55,   53,   53,
       53,   55,  821,  506,  507,  821,  821,   55,  821,  821,
      508,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       55,  821,  821,   55,  821,  821,   55,   53,   53,   53,
      821,  821,  510,  821,  821,  821,   55,  509,   53,   53,
       53,  821,  512,   53,   53,   53,  511,   55,  513,   53,
       53,   53,   55,   53,   53,   53,  821,  821,   55,  515,

      821,  821,   55,   53,   53,   53,  514,   53,   53,   53,
      821,  821,   55,  821,  821,  516,   55,   53,   53,   53,
      821,  518,  821,  821,  521,  821,   55,  821,  517,   53,
       53,   53,  821,  821,  522,  520,  821,  821,   55,   53,
       53,   53,  821,  519,  523,   53,   53,   53,   55,   53,
       53,   53,  821,  821,   55,   53,   53,   53,   55,   53,
       53,   53,  821,  821,   55,   53,   53,   53,   55,   53,
       53,   53,  821,  821,   55,   53,   53,   53,   55,  524,
       53,   53,   53,  821,   55,  526,  821,  527,  821,   55,
       53,   53,   53,  821,  821,  525,   53,   53,   53,   55,

       53,   53,   53,  528,  821,   55,  821,  529,  821,   55,
      821,  530,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   55,  532,  531,   55,  821,  821,   55,  821,  821,
      534,   53,   53,   53,   53,   53,   53,  821,  533,  821,
       55,  821,  821,   55,   53,   53,   53,   53,   53,   53,
      821,  536,  535,   55,  821,  821,   55,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   55,  821,  821,   55,
      821,  821,   55,   53,   53,   53,  538,  821,  821,  539,
      821,  821,   55,  537,  476,  476,  476,  821,  821,  542,
       53,   53,   53,   55,  821,  821,  540,  541,  821,   55,

       53,   53,   53,  821,  821,  552,  543,  140,  821,   55,
       53,   53,   53,  553,  821,  821,  544,  545,  821,   55,
      821,  821,  546,  547,  821,   53,   53,   53,   53,   53,
       53,  821,  821,  141,   55,  821,  821,   55,  821,   53,
       53,   53,   53,   53,   53,  821,  548,  549,   55,  550,
      821,   55,  551,   53,   53,   53,  821,   53,   53,   53,
      555,  821,   55,  821,  557,  556,   55,   53,   53,   53,
      821,   53,   53,   53,  821,  821,   55,  821,  821,  558,
       55,   53,   53,   53,  821,  821,  559,   53,   53,   53,
       55,   53,   53,   53,  821,  821,   55,  821,  560,  821,

       55,   53,   53,   53,   53,   53,   53,  561,  821,  821,
       55,  563,  562,   55,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   55,  821,  821,   55,  821,  821,   55,
      821,  564,   53,   53,   53,  565,  566,  821,  568,  821,
      821,   55,  821,  821,  821,  567,   53,   53,   53,  821,
      821,  570,   53,   53,   53,   55,  821,   53,   53,   53,
      821,   55,  821,  569,  821,  571,   55,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   55,  572,  821,   55,
      821,  821,   55,   53,   53,   53,  821,  821,  575,  821,
      821,  573,   55,  821,   53,   53,   53,   53,   53,   53,

      821,  821,  574,   55,  821,  821,   55,   53,   53,   53,
      576,   53,   53,   53,  821,  578,   55,   53,   53,   53,
       55,   53,   53,   53,  577,  821,   55,   53,   53,   53,
       55,  821,  821,  579,  821,  821,   55,   53,   53,   53,
       53,   53,   53,  821,  821,  821,   55,  821,  821,   55,
      821,  821,  582,   53,   53,   53,   53,   53,   53,  821,
      821,  580,   55,  821,  583,   55,  581,   53,   53,   53,
      821,  585,  821,  584,  821,  821,   55,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   55,  821,  821,   55,
      821,  821,   55,  821,   53,   53,   53,   53,   53,   53,

      821,  586,  587,   55,  821,  821,   55,  821,   53,   53,
       53,  821,   53,   53,   53,  821,  821,   55,  821,  821,
      589,   55,   53,   53,   53,  821,  821,  588,   53,   53,
       53,   55,  821,  590,   53,   53,   53,   55,  591,  821,
       53,   53,   53,   55,   53,   53,   53,  592,  593,   55,
      821,  594,  821,   55,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   55,  821,  821,   55,  821,  821,   55,
      821,   53,   53,   53,   53,   53,   53,  821,  821,  821,
       55,  821,  821,   55,  595,  821,  597,   53,   53,   53,
      596,  821,  599,   53,   53,   53,   55,  821,   53,   53,

       53,  821,   55,  821,  821,  598,  600,   55,  821,  821,
      601,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       55,  821,  821,   55,  821,  821,   55,   53,   53,   53,
      821,  821,  602,   53,   53,   53,   55,  603,   53,   53,
       53,  821,   55,   53,   53,   53,  821,   55,   53,   53,
       53,  821,   55,   53,   53,   53,  605,   55,  821,  604,
      821,  821,   55,  821,   53,   53,   53,  606,   53,   53,
       53,  821,  607,   55,   53,   53,   53,   55,  821,  821,
      611,  608,  821,   55,  612,  613,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   55,  821,  821,   55,  821,

      821,   55,   53,   53,   53,  821,  616,   53,   53,   53,
      821,   55,   53,   53,   53,  614,   55,  821,  615,  821,
      821,   55,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   55,  620,  618,   55,  821,  621,   55,  622,  821,
      617,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       55,  821,  821,   55,  821,  821,   55,  623,   53,   53,
       53,   53,   53,   53,  626,  821,  821,   55,  821,  625,
       55,  821,  624,   53,   53,   53,  821,   53,   53,   53,
      821,  821,   55,  629,  821,  627,   55,  821,  821,  628,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   55,

      821,  821,   55,  821,  821,   55,   53,   53,   53,   53,
       53,   53,  821,  631,  821,   55,  821,  821,   55,   53,
       53,   53,  821,  630,   53,   53,   53,  821,   55,  632,
       53,   53,   53,   55,   53,   53,   53,  821,  821,   55,
      633,  821,  821,   55,   53,   53,   53,  821,  821,  635,
      634,  821,  821,   55,  821,  636,  821,  637,  821,  821,
      638,   53,   53,   53,  821,   53,   53,   53,  821,  821,
       55,  821,  639,  641,   55,  821,  640,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   55,  642,  821,   55,
      821,  821,   55,  644,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   55,  821,  821,   55,  821,  821,   55,
       53,   53,   53,   53,   53,   53,  821,  821,  821,   55,
      821,  821,   55,  645,  821,  646,  821,  643,   53,   53,
       53,   53,   53,   53,  647,  821,  821,   55,  821,  821,
       55,  821,   53,   53,   53,  821,  649,  821,  821,  650,
      648,   55,   53,   53,   53,   53,   53,   53,  821,  821,
      821,   55,  651,  821,   55,  821,  821,  652,  821,   53,
       53,   53,  821,   53,   53,   53,  821,  653,   55,   53,
       53,   53,   55,  821,  654,   53,   53,   53,   55,   53,
       53,   53,  821,  821,   55,  821,  821,  655,   55,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   55,  821,
      821,   55,  656,  657,   55,   53,   53,   53,  821,  658,
       53,   53,   53,  821,   55,  659,   53,   53,   53,   55,
       53,   53,   53,  821,  821,   55,   53,   53,   53,   55,
       53,   53,   53,  821,  821,   55,  821,  660,  821,   55,
      821,   53,   53,   53,   53,   53,   53,  821,  821,  661,
       55,  821,  821,   55,   53,   53,   53,  821,  665,  821,
      662,  821,  664,   55,   53,   53,   53,  821,  821,  821,
      821,  663,  821,   55,  821,  821,  666,  667,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   55,  821,  821,

       55,  671,  821,   55,  670,   53,   53,   53,   53,   53,
       53,  821,  821,  821,   55,  821,  821,   55,  821,  821,
      673,  821,  672,  674,   53,   53,   53,  821,   53,   53,
       53,  821,  821,   55,  821,  821,  675,   55,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   55,  821,  821,
       55,  821,  821,   55,  821,   53,   53,   53,  821,  821,
      677,   53,   53,   53,   55,   53,   53,   53,  821,  821,
       55,   53,   53,   53,   55,   53,   53,   53,  678,  821,
       55,   53,   53,   53,   55,  680,  681,  821,  679,  821,
       55,  821,  682,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   55,  821,  821,   55,  821,  821,   55,   53,
       53,   53,  685,  821,  821,  683,  821,  821,   55,   53,
       53,   53,  821,  684,  686,  821,  821,  821,   55,   53,
       53,   53,  821,  821,  688,   53,   53,   53,   55,   53,
       53,   53,  687,  821,   55,   53,   53,   53,   55,   53,
       53,   53,  821,  821,   55,   53,   53,   53,   55,  821,
      690,  821,  821,  689,   55,   53,   53,   53,   53,   53,
       53,  691,  821,  821,   55,  821,  821,   55,   53,   53,
       53,  821,  821,  692,  821,  695,  821,   55,  696,  821,
      821,  693,  821,   53,   53,   53,  694,   53,   53,   53,

      821,  697,   55,   53,   53,   53,   55,  821,   53,   53,
       53,  821,   55,   53,   53,   53,  821,   55,  821,  821,
      698,  821,   55,   53,   53,   53,  821,  821,   53,   53,
       53,  821,   55,  821,  700,  699,  702,   55,   53,   53,
       53,  821,  821,  701,   53,   53,   53,   55,   53,   53,
       53,  821,  821,   55,   53,   53,   53,   55,  821,  703,
      821,  821,  821,   55,   53,   53,   53,  821,  821,  704,
      821,  821,  705,   55,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   55,  821,  821,   55,  821,  821,   55,
      707,   53,   53,   53,  821,  821,  706,   53,   53,   53,

       55,   53,   53,   53,  708,  821,   55,  821,  821,  710,
       55,   53,   53,   53,   53,   53,   53,  821,  821,  821,
       55,  821,  711,   55,  821,  821,  709,   53,   53,   53,
       53,   53,   53,  821,  821,  821,   55,  821,  821,   55,
       53,   53,   53,  821,   53,   53,   53,  821,  821,   55,
       53,   53,   53,   55,   53,   53,   53,  821,  821,   55,
       53,   53,   53,   55,   53,   53,   53,  821,  821,   55,
      821,  821,  821,   55,   53,   53,   53,  712,  821,  713,
      717,  821,  821,   55,  714,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   55,  718,  821,   55,  821,  821,

       55,   53,   53,   53,  719,  821,   53,   53,   53,  821,
       55,   53,   53,   53,  720,   55,  821,   53,   53,   53,
       55,   53,   53,   53,  821,  721,   55,  821,  821,  821,
       55,   53,   53,   53,  723,  821,  725,  821,  821,  724,
       55,   53,   53,   53,  727,   53,   53,   53,  821,  821,
       55,  821,  726,  821,   55,   53,   53,   53,   53,   53,
       53,  821,  821,  821,   55,  821,  728,   55,  821,  821,
      729,   53,   53,   53,   53,   53,   53,  821,  821,  730,
       55,  821,  821,   55,   53,   53,   53,   53,   53,   53,
      821,  731,  821,   55,  821,  732,   55,   53,   53,   53,

       53,   53,   53,  821,  821,  821,   55,  821,  733,   55,
      821,  734,  735,   53,   53,   53,   53,   53,   53,  736,
      821,  821,   55,  737,  821,   55,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   55,  821,  821,   55,  738,
      821,   55,   53,   53,   53,   53,   53,   53,  821,  739,
      821,   55,  821,  821,   55,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   55,  741,  821,   55,  740,  821,
       55,  821,  742,   53,   53,   53,  821,   53,   53,   53,
      821,  821,   55,  821,  743,  744,   55,   53,   53,   53,
      821,  821,  745,   53,   53,   53,   55,  821,  746,  821,

      821,  747,   55,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   55,  821,  821,   55,  821,  821,   55,  821,
      821,  749,  821,  748,   53,   53,   53,  821,  821,  750,
       53,   53,   53,   55,   53,   53,   53,  821,  821,   55,
      821,  821,  752,   55,  821,  751,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   55,  821,  821,   55,  821,
      821,   55,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   55,  821,  821,   55,  821,  821,   55,  821,  821,
      753,  821,  756,   53,   53,   53,  821,  821,  759,  821,
      821,  821,   55,  821,  757,   53,   53,   53,  760,  758,

       53,   53,   53,  821,   55,   53,   53,   53,  821,   55,
       53,   53,   53,  821,   55,  821,  762,  821,  821,   55,
      821,   53,   53,   53,   53,   53,   53,  821,  821,  763,
       55,  821,  821,   55,   53,   53,   53,   53,   53,   53,
      764,  821,  821,   55,  821,  821,   55,  821,  821,   53,
       53,   53,   53,   53,   53,  765,  821,  766,   55,  821,
      821,   55,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   55,  821,  821,   55,  821,  821,   55,  821,  767,
       53,   53,   53,  821,  768,  821,  769,  821,  821,   55,
      821,  821,  770,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   55,  821,  772,   55,  821,  821,   55,  771,
       53,   53,   53,   53,   53,   53,  821,  821,  821,   55,
      821,  821,   55,   53,   53,   53,  821,  821,  773,   53,
       53,   53,   55,   53,   53,   53,  821,  821,   55,  821,
      821,  774,   55,   53,   53,   53,  775,  821,   53,   53,
       53,  821,   55,   53,   53,   53,  776,   55,   53,   53,
       53,  821,   55,  777,  821,  821,  778,   55,   53,   53,
       53,  780,   53,   53,   53,  821,  779,   55,   53,   53,
       53,   55,   53,   53,   53,  821,  821,   55,   53,   53,
       53,   55,   53,   53,   53,  821,  821,   55,   53,   53,

       53,   55,   53,   53,   53,  821,  821,   55,   53,   53,
       53,   55,   53,   53,   53,  821,  821,   55,  783,  821,
      781,   55,   53,   53,   53,   53,   53,   53,  821,  821,
      821,   55,  821,  821,   55,   53,   53,   53,  785,   53,
       53,   53,  821,  821,   55,   53,   53,   53,   55,   53,
       53,   53,  787,  821,   55,  821,  821,  786,   55,   53,
       53,   53,   53,   53,   53,  821,  821,  821,   55,  821,
      821,   55,  821,  821,  788,   53,   53,   53,  821,  790,
      821,  789,  821,  821,   55,   53,   53,   53,   53,   53,
       53,  821,  821,  791,   55,  821,  821,   55,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   55,  821,  792,
       55,  821,  821,   55,   53,   53,   53,   53,   53,   53,
      821,  793,  821,   55,  821,  821,   55,   53,   53,   53,
       53,   53,   53,  821,  794,  821,   55,  821,  821,   55,
       53,   53,   53,  795,   53,   53,   53,  821,  821,   55,
      796,  821,  821,   55,  821,  821,  821,  797,   53,   53,
       53,  821,  821,  798,   53,   53,   53,   55,   53,   53,
       53,  821,  821,   55,   53,   53,   53,   55,   53,   53,
       53,  821,  821,   55,   53,   53,   53,   55,   53,   53,
       53,  821,  821,   55,   53,   53,   53,   55,   53,   53,

       53,  821,  800,   55,  802,  821,  821,   55,  821,  801,
      821,   53,   53,   53,   53,   53,   53,  821,  821,  803,
       55,  821,  821,   55,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   55,  804,  821,   55,  821,  821,   55,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   55,
      821,  821,   55,  821,  821,   55,  821,  805,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   55,  806,  821,
       55,  821,  821,   55,   53,   53,   53,  808,  821,  821,
      821,  809,  821,   55,   53,   53,   53,  810,   53,   53,
       53,  821,  821,   55,  811,  821,  821,   55,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   55,  821,  821,
       55,  812,  821,   55,   53,   53,   53,   53,   53,   53,
      821,  821,  814,   55,  821,  821,   55,  821,  821,  821,
      821,  821,  821,  821,  821,  816,  821,  821,  821,  821,
      818,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  820,   48,   48,   48,   48,   48,   48,
       48,   48,   54,   54,   54,   54,   67,   67,   67,   67,
       67,   67,   67,   67,   72,   72,   72,  137,  137,  821,
      137,  137,  137,  137,  137,  139,  139,  821,  821,  139,

      139,  139,  164,  164,    5,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821
    } ;

static yyconst short int yy_chk[5365] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        3,    4,    4,    7,    7,    7,    9,   14,   14,    9,
       13,   13,   13,  828,   17,   17,   17,   16,   16,   16,
      817,   13,   67,   17,  815,   67,   16,   19,   19,   19,
       22,   22,   22,   20,   20,   20,   19,  813,  159,   22,

       13,  159,   20,   21,   21,   21,  807,   23,   23,   23,
       68,   68,   21,   68,  799,    3,   23,    4,    8,    8,
        8,   16,   17,   52,   52,   52,   22,    8,   18,   18,
       18,    8,    8,    8,    8,    8,    8,   18,   70,   70,
       70,   20,    8,    8,    8,    8,    8,   20,   21,   70,
      784,   21,   23,   24,   24,   24,   25,   25,   25,   76,
       18,   76,   24,  761,  166,   25,  166,   18,   70,   26,
       26,   26,  346,   18,  346,  755,   18,   24,   26,   27,
       27,   27,  716,   28,   28,   28,  715,  669,   27,   73,
       73,   73,   28,  161,  161,  161,   27,  668,   24,   29,

       29,   29,   25,  619,  424,   26,  424,  610,   29,  165,
      165,  165,   30,   30,   30,   27,   29,  609,   27,   28,
       26,   30,  554,   31,   31,   31,   32,   32,   32,   27,
      545,   28,   31,  544,  480,   32,   33,   33,   33,   34,
       34,   34,   35,   35,   35,   33,   30,  425,   34,  405,
      347,   35,  322,  256,   30,  345,   30,   36,   36,   36,
       37,   37,   37,   31,  345,  233,   36,  232,   32,   37,
       32,  141,   38,   38,   38,   34,   33,  140,   31,  138,
       32,   38,  137,  345,   33,   47,   35,   39,   39,   39,
       35,   15,   12,   36,   11,    5,   39,  255,  255,  255,

       37,   40,   40,   40,    0,   41,   41,   41,    0,    0,
       40,  676,  676,  676,   41,    0,    0,   38,   42,   42,
       42,    0,    0,   43,   43,   43,    0,   42,    0,   44,
       44,   44,   43,   39,    0,   39,   41,   40,   44,    0,
        0,   41,   45,   45,   45,    0,    0,    0,    0,   42,
        0,   45,    0,    0,   42,   43,   41,    0,    0,   43,
        0,    0,    0,   42,    0,    0,   46,   46,   46,   42,
        0,   43,    0,   44,   45,   46,   53,   53,   53,   54,
       54,   54,   56,   56,   56,   53,    0,    0,   54,    0,
        0,   56,   57,   57,   57,   58,   58,   58,   46,   53,

        0,   57,    0,    0,   58,    0,   46,    0,   59,   59,
       59,   60,   60,   60,    0,    0,   56,   59,    0,    0,
       60,   61,   61,   61,   57,   53,    0,   62,   62,   62,
       61,    0,   63,   63,   63,    0,   62,   57,    0,    0,
       58,   63,    0,    0,   59,   64,   64,   64,   65,   65,
       65,   66,   66,   66,   64,   60,    0,   65,    0,    0,
       66,    0,    0,   60,   63,   74,   74,   74,    0,   61,
        0,    0,   61,   62,    0,    0,   74,   75,   75,   75,
       63,   64,    0,    0,   65,    0,    0,   66,   75,    0,
        0,   66,   80,   80,   80,   74,   83,   83,   83,    0,

        0,   80,   81,   81,   81,   83,   66,   75,   82,   82,
       82,   81,   84,   84,   84,    0,    0,   82,   85,   85,
       85,   84,   87,   87,   87,    0,    0,   85,   86,   86,
       86,   87,   80,   88,   88,   88,    0,   86,   81,    0,
        0,   83,   88,   89,   89,   89,   90,   90,   90,    0,
       82,    0,   89,    0,   85,   90,   84,   91,   91,   91,
       86,    0,   87,   92,   92,   92,   91,    0,   93,   93,
       93,    0,   92,    0,    0,   89,    0,   93,   94,   94,
       94,   88,   90,   93,   95,   95,   95,   94,   96,   96,
       96,    0,   91,   95,    0,   93,    0,   96,   98,   98,

       98,   91,   97,   97,   97,    0,    0,   98,   99,   99,
       99,   97,   93,    0,  100,  100,  100,   99,   93,  101,
      101,  101,   97,  100,    0,    0,   94,    0,  101,  102,
      102,  102,   96,   95,   98,  103,  103,  103,  102,  104,
      104,  104,    0,    0,  103,    0,  100,    0,  104,  105,
      105,  105,    0,   99,    0,  106,  106,  106,  105,    0,
        0,  102,  103,    0,  106,    0,    0,  101,  107,  107,
      107,  108,  108,  108,  109,  109,  109,  107,    0,    0,
      108,    0,    0,  109,  110,  110,  110,  105,    0,  104,
      106,    0,    0,  110,  111,  111,  111,  112,  112,  112,

        0,    0,  108,  111,    0,    0,  112,    0,  113,  113,
      113,  114,  114,  114,    0,    0,  109,  113,  107,    0,
      114,  115,  115,  115,  116,  116,  116,  117,  117,  117,
      115,    0,    0,  116,    0,  110,  117,  118,  118,  118,
      111,  120,  120,  120,    0,  112,  118,  119,  119,  119,
      120,  113,    0,  113,    0,    0,  119,  121,  121,  121,
        0,  114,    0,  163,  163,  163,  121,  122,  122,  122,
        0,  115,  116,    0,  163,    0,  122,  120,  119,    0,
        0,  118,  117,  123,  123,  123,  118,  124,  124,  124,
        0,    0,  123,  163,    0,  119,  124,  125,  125,  125,

      126,  126,  126,  127,  127,  127,  125,    0,    0,  126,
        0,    0,  127,    0,    0,  122,  128,  128,  128,  124,
        0,  124,    0,    0,    0,  128,    0,  129,  129,  129,
        0,  123,    0,  126,    0,  127,  129,    0,    0,  125,
      130,  130,  130,  131,  131,  131,    0,    0,    0,  130,
        0,    0,  131,  132,  132,  132,  133,  133,  133,  128,
        0,  129,  132,    0,    0,  133,  134,  134,  134,  135,
      135,  135,    0,  130,    0,  134,    0,    0,  135,  136,
      136,  136,  142,  142,  142,  132,  131,    0,  136,    0,
        0,  142,    0,  132,    0,    0,  133,  131,    0,    0,

      143,  143,  143,  144,  144,  144,    0,    0,  134,  143,
        0,    0,  144,  145,  145,  145,  146,  146,  146,  135,
        0,    0,  145,    0,    0,  146,  147,  147,  147,  136,
        0,    0,  142,    0,  143,  147,    0,    0,  144,  148,
      148,  148,  149,  149,  149,  150,  150,  150,  148,    0,
      146,  149,    0,    0,  150,    0,  145,  145,  151,  151,
      151,  147,    0,  152,  152,  152,    0,  151,    0,    0,
        0,  148,  152,    0,  149,  153,  153,  153,    0,  154,
      154,  154,    0,    0,  153,  722,  722,  722,  154,  150,
      155,  155,  155,    0,  151,  156,  156,  156,    0,  155,

        0,  157,  157,  157,  156,  158,  158,  158,  722,    0,
      157,  152,    0,  152,  158,  167,  167,  167,    0,    0,
      153,  154,    0,    0,  167,  168,  168,  168,  154,  169,
      169,  169,    0,    0,  168,    0,    0,  155,  169,  170,
      170,  170,    0,  156,  157,  171,  171,  171,  170,    0,
        0,  158,    0,    0,  171,    0,    0,  168,  167,  172,
      172,  172,    0,  169,  173,  173,  173,    0,  172,  174,
      174,  174,    0,  173,  175,  175,  175,    0,  174,  170,
      176,  176,  176,  175,  177,  177,  177,    0,    0,  176,
        0,  172,    0,  177,    0,    0,    0,  171,  178,  178,

      178,  179,  179,  179,    0,  175,    0,  178,    0,    0,
      179,    0,    0,  173,    0,  180,  180,  180,  174,  181,
      181,  181,    0,  176,  180,    0,    0,    0,  181,    0,
      177,  182,  182,  182,  178,  183,  183,  183,    0,    0,
      182,  179,    0,    0,  183,    0,    0,    0,  182,    0,
      184,  184,  184,    0,  180,  185,  185,  185,  181,  184,
      186,  186,  186,    0,  185,    0,  183,    0,    0,  186,
      184,  187,  187,  187,  188,  188,  188,  189,  189,  189,
      187,    0,    0,  188,    0,    0,  189,  190,  190,  190,
        0,  186,    0,  191,  191,  191,  190,    0,    0,    0,

      185,  187,  191,    0,    0,    0,  185,    0,    0,  188,
      192,  192,  192,  193,  193,  193,  194,  194,  194,  192,
        0,    0,  193,    0,    0,  194,  195,  195,  195,    0,
      189,  196,  196,  196,    0,  195,  191,  190,    0,    0,
      196,  197,  197,  197,  192,    0,  198,  198,  198,    0,
      197,  199,  199,  199,    0,  198,  194,  200,  200,  200,
      199,  201,  201,  201,    0,    0,  200,  202,  202,  202,
      201,  195,  203,  203,  203,    0,  202,  204,  204,  204,
        0,  203,    0,    0,  197,  198,  204,  205,  205,  205,
        0,  199,  206,  206,  206,    0,  205,    0,    0,    0,

      200,  206,    0,  203,    0,    0,  201,    0,  207,  207,
      207,    0,  208,  208,  208,    0,  202,  207,  205,    0,
      204,  208,  209,  209,  209,  210,  210,  210,  206,    0,
        0,  209,    0,    0,  210,    0,    0,  211,  211,  211,
      212,  212,  212,    0,  207,  208,  211,    0,    0,  212,
      213,  213,  213,  214,  214,  214,    0,    0,  209,  213,
        0,    0,  214,  215,  215,  215,    0,  216,  216,  216,
        0,    0,  215,    0,    0,  210,  216,  217,  217,  217,
      218,  218,  218,  212,    0,    0,  217,  211,    0,  218,
        0,  219,  219,  219,    0,    0,  214,    0,  213,  215,

      219,  220,  220,  220,  221,  221,  221,    0,    0,  216,
      220,    0,    0,  221,    0,    0,  218,  222,  222,  222,
      223,  223,  223,  224,  224,  224,  222,  217,    0,  223,
        0,    0,  224,    0,  219,  225,  225,  225,    0,    0,
      221,  227,  227,  227,  225,  226,  226,  226,    0,  220,
      227,  228,  228,  228,  226,    0,  222,  229,  229,  229,
      228,    0,  223,  230,  230,  230,  229,    0,    0,  224,
        0,    0,  230,  227,  231,  231,  231,    0,    0,  226,
        0,    0,    0,  231,    0,  225,    0,    0,  228,  226,
      234,  234,  234,  235,  235,  235,    0,  230,    0,  234,

        0,    0,  235,  236,  236,  236,    0,    0,  229,  237,
      237,  237,  236,  231,  238,  238,  238,    0,  237,  239,
      239,  239,    0,  238,  240,  240,  240,    0,  239,    0,
      234,    0,    0,  240,  235,  241,  241,  241,  242,  242,
      242,  243,  243,  243,  241,    0,    0,  242,    0,  238,
      243,  244,  244,  244,    0,  237,    0,    0,  236,  239,
      244,    0,    0,  238,  245,  245,  245,  246,  246,  246,
      247,  247,  247,  245,    0,  243,  246,  241,    0,  247,
        0,  242,  248,  248,  248,  249,  249,  249,  250,  250,
      250,  248,    0,    0,  249,    0,  245,  250,    0,  244,

      251,  251,  251,    0,  247,  252,  252,  252,    0,  251,
      253,  253,  253,    0,  252,    0,    0,  246,  248,  253,
      254,  254,  254,  257,  257,  257,  258,  258,  258,    0,
      249,  254,  257,    0,    0,  258,  249,    0,    0,  250,
        0,  252,    0,  251,    0,    0,  253,  259,  259,  259,
      254,  260,  260,  260,    0,  257,  259,  261,  261,  261,
      260,  262,  262,  262,    0,    0,  261,  258,    0,    0,
      262,  263,  263,  263,  264,  264,  264,  265,  265,  265,
      263,    0,    0,  264,    0,  260,  265,  266,  266,  266,
      265,    0,    0,  261,    0,    0,  266,    0,  259,  267,

      267,  267,    0,  268,  268,  268,    0,  263,  267,    0,
        0,  262,  268,  269,  269,  269,  270,  270,  270,  271,
      271,  271,  269,  266,  264,  270,    0,    0,  271,  272,
      272,  272,  273,  273,  273,  274,  274,  274,  272,    0,
        0,  273,    0,    0,  274,  268,    0,    0,  270,  273,
      273,    0,  270,  275,  275,  275,  276,  276,  276,  277,
      277,  277,  275,  269,  271,  276,    0,    0,  277,    0,
        0,  274,  278,  278,  278,  279,  279,  279,  280,  280,
      280,  278,    0,  272,  279,    0,  277,  280,    0,  278,
      281,  281,  281,  282,  282,  282,    0,    0,  276,  281,

        0,    0,  282,    0,  275,  283,  283,  283,    0,  280,
      284,  284,  284,    0,  283,  285,  285,  285,    0,  284,
      286,  286,  286,    0,  285,  287,  287,  287,    0,  286,
      281,    0,    0,  282,  287,  288,  288,  288,  289,  289,
      289,  283,    0,    0,  288,    0,    0,  289,  290,  290,
      290,    0,  286,    0,    0,    0,    0,  290,  291,  291,
      291,    0,  284,  285,    0,  287,    0,  291,  292,  292,
      292,  293,  293,  293,  289,    0,    0,  292,    0,    0,
      293,  288,  294,  294,  294,  295,  295,  295,  296,  296,
      296,  294,  290,    0,  295,    0,    0,  296,  297,  297,

      297,    0,  292,  298,  298,  298,    0,  297,  291,  299,
      299,  299,  298,  300,  300,  300,    0,    0,  299,  301,
      301,  301,  300,  295,    0,    0,  296,    0,  301,    0,
      302,  302,  302,    0,  294,  303,  303,  303,    0,  302,
      304,  304,  304,  297,  303,  305,  305,  305,    0,  304,
        0,  301,    0,    0,  305,  306,  306,  306,    0,    0,
        0,  300,  302,    0,  306,    0,    0,  303,  307,  307,
      307,  308,  308,  308,  304,    0,    0,  307,    0,    0,
      308,  309,  309,  309,  310,  310,  310,  311,  311,  311,
      309,    0,    0,  310,    0,    0,  311,  312,  312,  312,

      313,  313,  313,  314,  314,  314,  312,    0,    0,  313,
        0,    0,  314,    0,    0,  309,    0,  308,  311,  315,
      315,  315,  316,  316,  316,  317,  317,  317,  315,    0,
        0,  316,    0,  312,  317,  318,  318,  318,  319,  319,
      319,    0,    0,    0,  318,  313,    0,  319,  320,  320,
      320,  321,  321,  321,    0,  315,    0,  320,    0,    0,
      321,  324,  324,  324,  325,  325,  325,    0,    0,  317,
      324,  316,    0,  325,  319,  326,  326,  326,    0,    0,
      318,    0,  321,    0,  326,    0,    0,  320,  327,  327,
      327,  328,  328,  328,    0,  325,    0,  327,    0,    0,

      328,  329,  329,  329,    0,  330,  330,  330,    0,    0,
      329,    0,    0,  324,  330,  331,  331,  331,    0,    0,
      327,  332,  332,  332,  331,  333,  333,  333,    0,    0,
      332,  328,    0,    0,  333,  334,  334,  334,  335,  335,
      335,  336,  336,  336,  334,    0,    0,  335,    0,    0,
      336,  329,    0,    0,  330,    0,    0,  332,    0,  337,
      337,  337,  338,  338,  338,    0,  331,  334,  337,    0,
        0,  338,    0,    0,    0,  333,    0,  336,  339,  339,
      339,  335,  340,  340,  340,    0,    0,  339,  342,  342,
      342,  340,  341,  341,  341,  337,    0,  342,  343,  343,

      343,  341,  344,  344,  344,    0,    0,  343,  348,  348,
      348,  344,    0,    0,  338,    0,    0,  348,    0,  342,
        0,  349,  349,  349,  340,  350,  350,  350,  341,  339,
      349,  352,  352,  352,  350,  351,  351,  351,    0,    0,
      352,  353,  353,  353,  351,  354,  354,  354,    0,    0,
      353,    0,  349,    0,  354,  355,  355,  355,  348,  356,
      356,  356,    0,    0,  355,    0,    0,  350,  356,    0,
        0,  351,  357,  357,  357,    0,    0,  353,    0,  352,
        0,  357,  358,  358,  358,  359,  359,  359,  360,  360,
      360,  358,    0,    0,  359,    0,    0,  360,    0,    0,

        0,  356,    0,  357,    0,  361,  361,  361,  362,  362,
      362,    0,    0,  358,  361,    0,    0,  362,  363,  363,
      363,    0,  364,  364,  364,    0,    0,  363,    0,    0,
      359,  364,  360,  365,  365,  365,  366,  366,  366,  361,
        0,    0,  365,    0,    0,  366,  367,  367,  367,    0,
      368,  368,  368,    0,    0,  367,    0,    0,  363,  368,
        0,  362,  369,  369,  369,  370,  370,  370,  371,  371,
      371,  369,    0,    0,  370,    0,  364,  371,  365,    0,
      372,  372,  372,  373,  373,  373,    0,    0,  366,  372,
        0,    0,  373,    0,  367,  374,  374,  374,    0,    0,

      368,  375,  375,  375,  374,  376,  376,  376,  371,    0,
      375,  371,  369,    0,  376,    0,  371,    0,    0,  377,
      377,  377,  378,  378,  378,    0,  374,  373,  377,  372,
        0,  378,  379,  379,  379,    0,    0,  375,  380,  380,
      380,  379,  381,  381,  381,  376,    0,  380,  382,  382,
      382,  381,  383,  383,  383,    0,    0,  382,  384,  384,
      384,  383,    0,    0,    0,  377,    0,  384,  385,  385,
      385,  378,    0,  386,  386,  386,    0,  385,  381,    0,
        0,  379,  386,  387,  387,  387,  380,    0,  383,    0,
      384,    0,  387,  388,  388,  388,  389,  389,  389,  390,

      390,  390,  388,    0,  385,  389,    0,    0,  390,  391,
      391,  391,  392,  392,  392,  387,    0,    0,  391,    0,
        0,  392,    0,    0,  386,  388,  393,  393,  393,    0,
      394,  394,  394,    0,    0,  393,    0,    0,  389,  394,
        0,  395,  395,  395,    0,  396,  396,  396,    0,  390,
      395,    0,    0,  391,  396,  397,  397,  397,  398,  398,
      398,    0,  392,    0,  397,    0,    0,  398,    0,  394,
      399,  399,  399,  395,  400,  400,  400,    0,    0,  399,
        0,    0,    0,  400,  401,  401,  401,    0,    0,  398,
      402,  402,  402,  401,    0,  403,  403,  403,    0,  402,

      404,  404,  404,  397,  403,  406,  406,  406,    0,  404,
        0,    0,  400,    0,  406,    0,  399,    0,  407,  407,
      407,  402,  408,  408,  408,    0,  403,  407,  409,  409,
      409,  408,  401,  410,  410,  410,    0,  409,    0,  411,
      411,  411,  410,  404,    0,  406,    0,    0,  411,  412,
      412,  412,  413,  413,  413,    0,    0,    0,  412,    0,
        0,  413,    0,    0,  407,  410,  414,  414,  414,    0,
      408,  415,  415,  415,    0,  414,    0,    0,  409,  411,
      415,  412,  416,  416,  416,  417,  417,  417,  418,  418,
      418,  416,    0,    0,  417,    0,    0,  418,  419,  419,

      419,  420,  420,  420,    0,    0,  414,  419,    0,    0,
      420,  421,  421,  421,  422,  422,  422,    0,  416,    0,
      421,  415,    0,  422,    0,  423,  423,  423,    0,    0,
      419,    0,    0,  417,  423,    0,    0,  418,  426,  426,
      426,  427,  427,  427,  428,  428,  428,  426,    0,  420,
      427,    0,    0,  428,  429,  429,  429,    0,  422,  423,
        0,  421,    0,  429,  430,  430,  430,    0,  431,  431,
      431,    0,    0,  430,    0,    0,  428,  431,  426,  432,
      432,  432,  433,  433,  433,    0,    0,  427,  432,    0,
        0,  433,  434,  434,  434,  435,  435,  435,    0,    0,

        0,  434,    0,    0,  435,    0,  436,  436,  436,  437,
      437,  437,    0,    0,  430,  436,    0,    0,  437,  433,
        0,  432,  438,  438,  438,    0,  433,    0,  439,  439,
      439,  438,  440,  440,  440,    0,  434,  439,  441,  441,
      441,  440,    0,  435,  436,    0,    0,  441,    0,    0,
      437,  442,  442,  442,  443,  443,  443,  444,  444,  444,
      442,    0,    0,  443,    0,    0,  444,  445,  445,  445,
        0,    0,  440,    0,    0,    0,  445,  439,  446,  446,
      446,    0,  442,  447,  447,  447,  441,  446,  443,  448,
      448,  448,  447,  449,  449,  449,    0,    0,  448,  445,

        0,    0,  449,  450,  450,  450,  444,  451,  451,  451,
        0,    0,  450,    0,    0,  446,  451,  452,  452,  452,
        0,  448,    0,    0,  451,    0,  452,    0,  447,  453,
      453,  453,    0,    0,  451,  450,    0,    0,  453,  454,
      454,  454,    0,  449,  451,  455,  455,  455,  454,  456,
      456,  456,    0,    0,  455,  457,  457,  457,  456,  458,
      458,  458,    0,    0,  457,  459,  459,  459,  458,  460,
      460,  460,    0,    0,  459,  461,  461,  461,  460,  453,
      462,  462,  462,    0,  461,  456,    0,  457,    0,  462,
      463,  463,  463,    0,    0,  455,  464,  464,  464,  463,

      465,  465,  465,  458,    0,  464,    0,  459,    0,  465,
        0,  460,  466,  466,  466,  467,  467,  467,  468,  468,
      468,  466,  462,  461,  467,    0,    0,  468,    0,    0,
      464,  469,  469,  469,  470,  470,  470,    0,  463,    0,
      469,    0,    0,  470,  471,  471,  471,  472,  472,  472,
        0,  467,  466,  471,    0,    0,  472,  473,  473,  473,
      474,  474,  474,  475,  475,  475,  473,    0,    0,  474,
        0,    0,  475,  479,  479,  479,  471,    0,    0,  472,
        0,    0,  479,  470,  476,  476,  476,    0,    0,  473,
      477,  477,  477,  476,    0,    0,  472,  472,    0,  477,

      478,  478,  478,    0,    0,  479,  475,  476,    0,  478,
      481,  481,  481,  479,    0,    0,  476,  476,    0,  481,
        0,    0,  477,  477,    0,  482,  482,  482,  483,  483,
      483,    0,    0,  476,  482,    0,    0,  483,    0,  484,
      484,  484,  485,  485,  485,    0,  478,  478,  484,  478,
        0,  485,  478,  486,  486,  486,    0,  487,  487,  487,
      481,    0,  486,    0,  483,  482,  487,  488,  488,  488,
        0,  489,  489,  489,    0,    0,  488,    0,    0,  484,
      489,  490,  490,  490,    0,    0,  485,  492,  492,  492,
      490,  491,  491,  491,    0,    0,  492,    0,  486,    0,

      491,  493,  493,  493,  494,  494,  494,  487,    0,    0,
      493,  489,  488,  494,  495,  495,  495,  496,  496,  496,
      497,  497,  497,  495,    0,    0,  496,    0,    0,  497,
        0,  490,  498,  498,  498,  491,  492,    0,  494,    0,
        0,  498,    0,    0,    0,  493,  499,  499,  499,    0,
        0,  496,  500,  500,  500,  499,    0,  501,  501,  501,
        0,  500,    0,  495,    0,  497,  501,  502,  502,  502,
      503,  503,  503,  504,  504,  504,  502,  498,    0,  503,
        0,    0,  504,  505,  505,  505,    0,    0,  501,    0,
        0,  499,  505,    0,  506,  506,  506,  507,  507,  507,

        0,    0,  500,  506,    0,    0,  507,  508,  508,  508,
      503,  509,  509,  509,    0,  505,  508,  510,  510,  510,
      509,  511,  511,  511,  504,    0,  510,  512,  512,  512,
      511,    0,    0,  507,    0,    0,  512,  513,  513,  513,
      514,  514,  514,    0,    0,    0,  513,    0,    0,  514,
        0,    0,  511,  515,  515,  515,  516,  516,  516,    0,
        0,  509,  515,    0,  512,  516,  510,  517,  517,  517,
        0,  514,    0,  513,    0,    0,  517,  518,  518,  518,
      519,  519,  519,  520,  520,  520,  518,    0,    0,  519,
        0,    0,  520,    0,  521,  521,  521,  522,  522,  522,

        0,  515,  517,  521,    0,    0,  522,    0,  523,  523,
      523,    0,  524,  524,  524,    0,    0,  523,    0,    0,
      519,  524,  525,  525,  525,    0,    0,  518,  526,  526,
      526,  525,    0,  520,  527,  527,  527,  526,  521,    0,
      528,  528,  528,  527,  529,  529,  529,  522,  523,  528,
        0,  524,    0,  529,  530,  530,  530,  531,  531,  531,
      532,  532,  532,  530,    0,    0,  531,    0,    0,  532,
        0,  533,  533,  533,  534,  534,  534,    0,    0,    0,
      533,    0,    0,  534,  527,    0,  529,  535,  535,  535,
      528,    0,  532,  536,  536,  536,  535,    0,  537,  537,

      537,    0,  536,    0,    0,  530,  533,  537,    0,    0,
      534,  538,  538,  538,  539,  539,  539,  540,  540,  540,
      538,    0,    0,  539,    0,    0,  540,  541,  541,  541,
        0,    0,  535,  542,  542,  542,  541,  536,  543,  543,
      543,    0,  542,  546,  546,  546,    0,  543,  547,  547,
      547,    0,  546,  548,  548,  548,  539,  547,    0,  538,
        0,    0,  548,    0,  549,  549,  549,  540,  550,  550,
      550,    0,  541,  549,  551,  551,  551,  550,    0,    0,
      546,  542,    0,  551,  547,  548,  552,  552,  552,  553,
      553,  553,  555,  555,  555,  552,    0,    0,  553,    0,

        0,  555,  556,  556,  556,    0,  551,  557,  557,  557,
        0,  556,  558,  558,  558,  549,  557,    0,  550,    0,
        0,  558,  559,  559,  559,  560,  560,  560,  561,  561,
      561,  559,  555,  553,  560,    0,  556,  561,  557,    0,
      552,  562,  562,  562,  563,  563,  563,  564,  564,  564,
      562,    0,    0,  563,    0,    0,  564,  558,  565,  565,
      565,  566,  566,  566,  561,    0,    0,  565,    0,  560,
      566,    0,  559,  567,  567,  567,    0,  568,  568,  568,
        0,    0,  567,  564,    0,  562,  568,    0,    0,  563,
      569,  569,  569,  570,  570,  570,  571,  571,  571,  569,

        0,    0,  570,    0,    0,  571,  572,  572,  572,  573,
      573,  573,    0,  568,    0,  572,    0,    0,  573,  574,
      574,  574,    0,  567,  575,  575,  575,    0,  574,  570,
      577,  577,  577,  575,  576,  576,  576,    0,    0,  577,
      571,    0,    0,  576,  578,  578,  578,    0,    0,  573,
      572,    0,    0,  578,    0,  574,    0,  575,    0,    0,
      575,  579,  579,  579,    0,  580,  580,  580,    0,    0,
      579,    0,  575,  577,  580,    0,  576,  581,  581,  581,
      582,  582,  582,  583,  583,  583,  581,  578,    0,  582,
        0,    0,  583,  582,  584,  584,  584,  585,  585,  585,

      586,  586,  586,  584,    0,    0,  585,    0,    0,  586,
      587,  587,  587,  588,  588,  588,    0,    0,    0,  587,
        0,    0,  588,  583,    0,  584,    0,  581,  589,  589,
      589,  590,  590,  590,  585,    0,    0,  589,    0,    0,
      590,    0,  591,  591,  591,    0,  587,    0,    0,  588,
      586,  591,  592,  592,  592,  593,  593,  593,    0,    0,
        0,  592,  589,    0,  593,    0,    0,  590,    0,  594,
      594,  594,    0,  595,  595,  595,    0,  591,  594,  596,
      596,  596,  595,    0,  592,  597,  597,  597,  596,  598,
      598,  598,    0,    0,  597,    0,    0,  593,  598,  599,

      599,  599,  600,  600,  600,  601,  601,  601,  599,    0,
        0,  600,  594,  595,  601,  602,  602,  602,    0,  596,
      603,  603,  603,    0,  602,  598,  604,  604,  604,  603,
      605,  605,  605,    0,    0,  604,  606,  606,  606,  605,
      607,  607,  607,    0,    0,  606,    0,  599,    0,  607,
        0,  608,  608,  608,  611,  611,  611,    0,    0,  602,
      608,    0,    0,  611,  612,  612,  612,    0,  606,    0,
      603,    0,  605,  612,  613,  613,  613,    0,    0,    0,
        0,  604,    0,  613,    0,    0,  607,  608,  614,  614,
      614,  615,  615,  615,  616,  616,  616,  614,    0,    0,

      615,  612,    0,  616,  611,  617,  617,  617,  618,  618,
      618,    0,    0,    0,  617,    0,    0,  618,    0,    0,
      614,    0,  613,  615,  620,  620,  620,    0,  621,  621,
      621,    0,    0,  620,    0,    0,  616,  621,  622,  622,
      622,  623,  623,  623,  624,  624,  624,  622,    0,    0,
      623,    0,    0,  624,    0,  625,  625,  625,    0,    0,
      620,  626,  626,  626,  625,  627,  627,  627,    0,    0,
      626,  628,  628,  628,  627,  629,  629,  629,  621,    0,
      628,  630,  630,  630,  629,  623,  625,    0,  622,    0,
      630,    0,  626,  631,  631,  631,  632,  632,  632,  633,

      633,  633,  631,    0,    0,  632,    0,    0,  633,  634,
      634,  634,  630,    0,    0,  628,    0,    0,  634,  635,
      635,  635,    0,  629,  631,    0,    0,    0,  635,  636,
      636,  636,    0,    0,  633,  637,  637,  637,  636,  638,
      638,  638,  631,    0,  637,  639,  639,  639,  638,  640,
      640,  640,    0,    0,  639,  641,  641,  641,  640,    0,
      636,    0,    0,  635,  641,  642,  642,  642,  643,  643,
      643,  637,    0,    0,  642,    0,    0,  643,  644,  644,
      644,    0,    0,  638,    0,  640,    0,  644,  641,    0,
        0,  638,    0,  645,  645,  645,  639,  646,  646,  646,

        0,  642,  645,  647,  647,  647,  646,    0,  648,  648,
      648,    0,  647,  649,  649,  649,    0,  648,    0,    0,
      644,    0,  649,  650,  650,  650,    0,    0,  651,  651,
      651,    0,  650,    0,  646,  645,  648,  651,  652,  652,
      652,    0,    0,  647,  653,  653,  653,  652,  654,  654,
      654,    0,    0,  653,  655,  655,  655,  654,    0,  651,
        0,    0,    0,  655,  656,  656,  656,    0,    0,  652,
        0,    0,  653,  656,  657,  657,  657,  658,  658,  658,
      659,  659,  659,  657,    0,    0,  658,    0,    0,  659,
      655,  660,  660,  660,    0,    0,  654,  661,  661,  661,

      660,  662,  662,  662,  656,    0,  661,    0,    0,  658,
      662,  663,  663,  663,  664,  664,  664,    0,    0,    0,
      663,    0,  660,  664,    0,    0,  657,  665,  665,  665,
      666,  666,  666,    0,    0,    0,  665,    0,    0,  666,
      667,  667,  667,    0,  670,  670,  670,    0,    0,  667,
      671,  671,  671,  670,  672,  672,  672,    0,    0,  671,
      673,  673,  673,  672,  674,  674,  674,    0,    0,  673,
        0,    0,    0,  674,  675,  675,  675,  665,    0,  666,
      670,    0,    0,  675,  667,  677,  677,  677,  678,  678,
      678,  679,  679,  679,  677,  671,    0,  678,    0,    0,

      679,  680,  680,  680,  673,    0,  681,  681,  681,    0,
      680,  682,  682,  682,  674,  681,    0,  683,  683,  683,
      682,  684,  684,  684,    0,  675,  683,    0,    0,    0,
      684,  685,  685,  685,  677,    0,  679,    0,    0,  678,
      685,  686,  686,  686,  682,  687,  687,  687,    0,    0,
      686,    0,  681,    0,  687,  688,  688,  688,  689,  689,
      689,    0,    0,    0,  688,    0,  683,  689,    0,    0,
      684,  690,  690,  690,  691,  691,  691,    0,    0,  685,
      690,    0,    0,  691,  692,  692,  692,  693,  693,  693,
        0,  686,    0,  692,    0,  688,  693,  694,  694,  694,

      695,  695,  695,    0,    0,    0,  694,    0,  689,  695,
        0,  690,  691,  696,  696,  696,  697,  697,  697,  692,
        0,    0,  696,  693,    0,  697,  698,  698,  698,  699,
      699,  699,  700,  700,  700,  698,    0,    0,  699,  694,
        0,  700,  701,  701,  701,  702,  702,  702,    0,  696,
        0,  701,    0,    0,  702,  703,  703,  703,  704,  704,
      704,  705,  705,  705,  703,  699,    0,  704,  698,    0,
      705,    0,  700,  706,  706,  706,    0,  707,  707,  707,
        0,    0,  706,    0,  701,  702,  707,  708,  708,  708,
        0,    0,  703,  709,  709,  709,  708,    0,  704,    0,

        0,  705,  709,  710,  710,  710,  711,  711,  711,  712,
      712,  712,  710,    0,    0,  711,    0,    0,  712,    0,
        0,  708,    0,  706,  713,  713,  713,    0,    0,  709,
      714,  714,  714,  713,  717,  717,  717,    0,    0,  714,
        0,    0,  711,  717,    0,  710,  718,  718,  718,  719,
      719,  719,  720,  720,  720,  718,    0,    0,  719,    0,
        0,  720,  721,  721,  721,  723,  723,  723,  724,  724,
      724,  721,    0,    0,  723,    0,    0,  724,    0,    0,
      714,    0,  717,  725,  725,  725,    0,    0,  720,    0,
        0,    0,  725,    0,  718,  726,  726,  726,  721,  719,

      727,  727,  727,    0,  726,  728,  728,  728,    0,  727,
      729,  729,  729,    0,  728,    0,  724,    0,    0,  729,
        0,  730,  730,  730,  731,  731,  731,    0,    0,  725,
      730,    0,    0,  731,  732,  732,  732,  733,  733,  733,
      726,    0,    0,  732,    0,    0,  733,    0,    0,  734,
      734,  734,  735,  735,  735,  727,    0,  730,  734,    0,
        0,  735,  736,  736,  736,  737,  737,  737,  738,  738,
      738,  736,    0,    0,  737,    0,    0,  738,    0,  731,
      739,  739,  739,    0,  732,    0,  734,    0,    0,  739,
        0,    0,  735,  740,  740,  740,  741,  741,  741,  742,

      742,  742,  740,    0,  738,  741,    0,    0,  742,  737,
      743,  743,  743,  744,  744,  744,    0,    0,    0,  743,
        0,    0,  744,  745,  745,  745,    0,    0,  739,  746,
      746,  746,  745,  747,  747,  747,    0,    0,  746,    0,
        0,  742,  747,  748,  748,  748,  743,    0,  749,  749,
      749,    0,  748,  750,  750,  750,  744,  749,  751,  751,
      751,    0,  750,  745,    0,    0,  746,  751,  752,  752,
      752,  748,  753,  753,  753,    0,  747,  752,  756,  756,
      756,  753,  757,  757,  757,    0,    0,  756,  758,  758,
      758,  757,  759,  759,  759,    0,    0,  758,  760,  760,

      760,  759,  762,  762,  762,    0,    0,  760,  763,  763,
      763,  762,  764,  764,  764,    0,    0,  763,  757,    0,
      752,  764,  765,  765,  765,  766,  766,  766,    0,    0,
        0,  765,    0,    0,  766,  767,  767,  767,  762,  768,
      768,  768,    0,    0,  767,  769,  769,  769,  768,  770,
      770,  770,  764,    0,  769,    0,    0,  763,  770,  771,
      771,  771,  772,  772,  772,    0,    0,    0,  771,    0,
        0,  772,    0,    0,  766,  773,  773,  773,    0,  768,
        0,  767,    0,    0,  773,  774,  774,  774,  775,  775,
      775,    0,    0,  770,  774,    0,    0,  775,  776,  776,

      776,  777,  777,  777,  778,  778,  778,  776,    0,  771,
      777,    0,    0,  778,  779,  779,  779,  780,  780,  780,
        0,  774,    0,  779,    0,    0,  780,  781,  781,  781,
      783,  783,  783,    0,  776,    0,  781,    0,    0,  783,
      785,  785,  785,  777,  786,  786,  786,    0,    0,  785,
      779,    0,    0,  786,    0,    0,    0,  780,  787,  787,
      787,    0,    0,  781,  788,  788,  788,  787,  789,  789,
      789,    0,    0,  788,  790,  790,  790,  789,  791,  791,
      791,    0,    0,  790,  792,  792,  792,  791,  793,  793,
      793,    0,    0,  792,  794,  794,  794,  793,  795,  795,

      795,    0,  787,  794,  789,    0,    0,  795,    0,  788,
        0,  796,  796,  796,  797,  797,  797,    0,    0,  790,
      796,    0,    0,  797,  798,  798,  798,  800,  800,  800,
      801,  801,  801,  798,  795,    0,  800,    0,    0,  801,
      802,  802,  802,  803,  803,  803,  804,  804,  804,  802,
        0,    0,  803,    0,    0,  804,    0,  797,  805,  805,
      805,  806,  806,  806,  808,  808,  808,  805,  798,    0,
      806,    0,    0,  808,  809,  809,  809,  800,    0,    0,
        0,  801,    0,  809,  810,  810,  810,  803,  811,  811,
      811,    0,    0,  810,  805,    0,    0,  811,  812,  812,

      812,  814,  814,  814,  816,  816,  816,  812,    0,    0,
      814,  806,    0,  816,  818,  818,  818,  820,  820,  820,
        0,    0,  809,  818,    0,    0,  820,    0,    0,    0,
        0,    0,    0,    0,    0,  814,    0,    0,    0,    0,
      816,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  818,  822,  822,  822,  822,  822,  822,
      822,  822,  823,  823,  823,  823,  824,  824,  824,  824,
      824,  824,  824,  824,  825,  825,  825,  826,  826,    0,
      826,  826,  826,  826,  826,  827,  827,    0,    0,  827,

      827,  827,  829,  829,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821
    } ;

#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 ".\\parser.l"
#define INITIAL 0
#line 2 ".\\parser.l"
#include "pch.h"
#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

#include "rdogramma.h"
#include "rdoparser.h"

#define YY_INTERACTIVE

#define YY_USER_INIT {                      \
	rdoParse::currParser->lexer_loc_init(); \
}

#define YY_USER_ACTION {                      \
	rdoParse::currParser->lexer_loc_action(); \
}

#define comment 1

#line 1912 "rdolex.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 26 ".\\parser.l"


#line 2042 "rdolex.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 822 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5305 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 28 ".\\parser.l"
return(Resource_type);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 29 ".\\parser.l"
return(permanent);
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 30 ".\\parser.l"
return(Parameters);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 31 ".\\parser.l"
return(integer);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 32 ".\\parser.l"
return(real);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 33 ".\\parser.l"
return(End);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 34 ".\\parser.l"
return(temporary);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 35 ".\\parser.l"
return(such_as);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 36 ".\\parser.l"
return(dblpoint);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 38 ".\\parser.l"
return(Resources);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 39 ".\\parser.l"
return(trace_keyword);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 40 ".\\parser.l"
return(no_trace);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 42 ".\\parser.l"
return(Constant);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 43 ".\\parser.l"
return(Body);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 44 ".\\parser.l"
return(Function_keyword);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 45 ".\\parser.l"
return(Type_keyword);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 46 ".\\parser.l"
return(algorithmic);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 47 ".\\parser.l"
return(table_keyword);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 48 ".\\parser.l"
return(list_keyword);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 49 ".\\parser.l"
return(Calculate_if);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 50 ".\\parser.l"
return(Sequence);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 51 ".\\parser.l"
return(uniform);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 52 ".\\parser.l"
return(exponential);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 53 ".\\parser.l"
return(normal_keyword);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 54 ".\\parser.l"
return(by_hist);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 55 ".\\parser.l"
return(enumerative);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 57 ".\\parser.l"
return(Exist);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 58 ".\\parser.l"
return(Not_Exist);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 59 ".\\parser.l"
return(For_All);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 60 ".\\parser.l"
return(Not_For_All);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 61 ".\\parser.l"
return(neq);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 62 ".\\parser.l"
return(leq);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 63 ".\\parser.l"
return(geq);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 64 ".\\parser.l"
return(NoCheck);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 65 ".\\parser.l"
return(Calculate_if);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 66 ".\\parser.l"
return(or_keyword);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 67 ".\\parser.l"
return(and_keyword);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 70 ".\\parser.l"
return(Pattern);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 71 ".\\parser.l"
return(operation);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 72 ".\\parser.l"
return(irregular_event);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 73 ".\\parser.l"
return(rule_keyword);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 74 ".\\parser.l"
return(keyboard);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 75 ".\\parser.l"
return(Relevant_resources);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 76 ".\\parser.l"
return(Keep);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 77 ".\\parser.l"
return(Create_keyword);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 78 ".\\parser.l"
return(Erase);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 79 ".\\parser.l"
return(NonExist);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 80 ".\\parser.l"
return(NoChange);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 81 ".\\parser.l"
return(Time);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 82 ".\\parser.l"
return(Choice);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 83 ".\\parser.l"
return(from_keyword);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 84 ".\\parser.l"
return(first_keyword);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 85 ".\\parser.l"
return(Convert_begin);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 86 ".\\parser.l"
return(Convert_end);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 87 ".\\parser.l"
return(Convert_rule);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 88 ".\\parser.l"
return(Convert_event);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 89 ".\\parser.l"
return(with_max);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 90 ".\\parser.l"
return(with_min);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 91 ".\\parser.l"
return(Operations);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 92 ".\\parser.l"
return(Results);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 93 ".\\parser.l"
return(watch_par);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 94 ".\\parser.l"
return(watch_state);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 95 ".\\parser.l"
return(watch_quant);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 96 ".\\parser.l"
return(watch_value);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 97 ".\\parser.l"
return(get_value);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 99 ".\\parser.l"
return(Model_name);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 100 ".\\parser.l"
return(Resource_file);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 101 ".\\parser.l"
return(OprIev_file);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 102 ".\\parser.l"
return(Frame_file);	
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 103 ".\\parser.l"
return(Statistic_file);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 104 ".\\parser.l"
return(Results_file);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 105 ".\\parser.l"
return(Trace_file);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 106 ".\\parser.l"
return(Show_mode);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 107 ".\\parser.l"
return(Frame_number);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 108 ".\\parser.l"
return(Show_rate);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 109 ".\\parser.l"
return(Run_StartTime);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 110 ".\\parser.l"
return(Trace_StartTime);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 111 ".\\parser.l"
return(Trace_EndTime);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 112 ".\\parser.l"
return(Terminate_if);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 113 ".\\parser.l"
return(Break_point);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 114 ".\\parser.l"
return(Seed);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 115 ".\\parser.l"
return(NoShow);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 116 ".\\parser.l"
return(Monitor);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 117 ".\\parser.l"
return(Animation);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 120 ".\\parser.l"
return(Decision_point);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 121 ".\\parser.l"
return(search_keyword);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 122 ".\\parser.l"
return(trace_stat);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 123 ".\\parser.l"
return(trace_tops);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 124 ".\\parser.l"
return(trace_all);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 125 ".\\parser.l"
return(Condition_keyword);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 126 ".\\parser.l"
return(Term_condition);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 127 ".\\parser.l"
return(Evaluate_by);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 128 ".\\parser.l"
return(Compare_tops);
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 129 ".\\parser.l"
return(NO);
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 130 ".\\parser.l"
return(YES);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 131 ".\\parser.l"
return(Activities);
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 132 ".\\parser.l"
return(Process);
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 133 ".\\parser.l"
return(SEIZE);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 134 ".\\parser.l"
return(value_before);
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 135 ".\\parser.l"
return(value_after);
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 136 ".\\parser.l"
return(value_before);
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 137 ".\\parser.l"
return(value_after);
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 138 ".\\parser.l"
return(some);
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 140 ".\\parser.l"
return(Frame);
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 141 ".\\parser.l"
return(Show_if);
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 142 ".\\parser.l"
return(Back_picture);
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 143 ".\\parser.l"
return(Show);
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 144 ".\\parser.l"
return(frm_cell);
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 145 ".\\parser.l"
return(text);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 146 ".\\parser.l"
return(transparent);
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 147 ".\\parser.l"
return(bitmap);
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 148 ".\\parser.l"
return(s_bmp);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 149 ".\\parser.l"
return(rect_keyword);
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 150 ".\\parser.l"
return(r_rect);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 151 ".\\parser.l"
return(line);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 152 ".\\parser.l"
return(ellipse);
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 153 ".\\parser.l"
return(triang);
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 154 ".\\parser.l"
return(active);
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 156 ".\\parser.l"
{
						std::string n1(YYText());
						int len = n1.length();
						std::string *name = new std::string(n1, 1, len-2);
						rdoParse::currParser->addName(name);
						rdoParse::currParser->lexer_setvalue((int)name);
						return QUOTED_IDENTIF;
					}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 165 ".\\parser.l"
{
						std::string *name = new std::string(YYText());
						rdoParse::currParser->addName(name);
						rdoParse::currParser->lexer_setvalue((int)name);
						return QUOTED_IDENTIF_BAD;
					}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 172 ".\\parser.l"
BEGIN(comment);
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 174 ".\\parser.l"
/* eat anything that's not a '*' */
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 175 ".\\parser.l"
;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 176 ".\\parser.l"
;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 177 ".\\parser.l"
BEGIN(INITIAL);
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 180 ".\\parser.l"
;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 181 ".\\parser.l"
;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 182 ".\\parser.l"
return(YYText()[YYLeng()-1]);
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 184 ".\\parser.l"
{
						std::string n1(YYText(), YYLeng()-2);
						rdoParse::currParser->lexer_setvalue(atoi(n1.c_str()));
						unput('.');
						unput('.');
						rdoParse::currParser->lexer_loc_delta_pos( -2 );
						return INT_CONST;
					}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 193 ".\\parser.l"
{
						rdoParse::currParser->lexer_setvalue(atoi(YYText()));
						return INT_CONST;
					}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 198 ".\\parser.l"
{
						double *val = rdoParse::currParser->addDouble(new double(atof(YYText())));
						rdoParse::currParser->lexer_setvalue((int)val);
						return REAL_CONST;
					}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 204 ".\\parser.l"
{
						std::string *name = new std::string(YYText());
						rdoParse::currParser->addName(name);
						rdoParse::currParser->lexer_setvalue((int)name);
						return IDENTIF_BAD;
					}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 211 ".\\parser.l"
{
					std::string n1(YYText());
					std::string::size_type pos = n1.find_first_of("\r\n\t :");
					std::string *name = new std::string(n1, 0, pos);
					rdoParse::currParser->addName(name);
					rdoParse::currParser->lexer_setvalue((int)name);
					return IDENTIF_set;
				}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 220 ".\\parser.l"
{
					std::string n1(YYText());
					std::string::size_type pos = n1.find_first_of("\r\n\t :");
					std::string *name = new std::string(n1, 0, pos);
					rdoParse::currParser->addName(name);
					rdoParse::currParser->lexer_setvalue((int)name);
					return IDENTIF_NoChange_NoChange;
				}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 229 ".\\parser.l"
{
					std::string n1(YYText());
					std::string::size_type pos = n1.find_first_of("\r\n\t :");
					std::string *name = new std::string(n1, 0, pos);
					rdoParse::currParser->addName(name);
					rdoParse::currParser->lexer_setvalue((int)name);
					return IDENTIF_NoChange;
				}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 238 ".\\parser.l"
{
					std::string n1(YYText());
					std::string::size_type pos = n1.find_first_of("\r\n\t :");
					std::string *name = new std::string(n1, 0, pos);
					rdoParse::currParser->addName(name);
					rdoParse::currParser->lexer_setvalue((int)name);
					return IDENTIF_COLON;
				}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 247 ".\\parser.l"
{
					std::string *name = new std::string(YYText());
					rdoParse::currParser->addName(name);
					rdoParse::currParser->lexer_setvalue((int)name);
					return IDENTIF;
				}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 254 ".\\parser.l"
ECHO;
	YY_BREAK
#line 2887 "rdolex.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(comment):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 822 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 822 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 821);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 254 ".\\parser.l"

