#line 2 "rdolex.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
class istream;
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 143
#define YY_END_OF_BUFFER 144
static yyconst short int yy_acclist[983] =
    {   0,
      123,  124,  123,  124,  127,  128,  127,  128,  144,  143,
      132,  143,  142,  143,  143,  133,  143,  133,  143,  133,
      143,  133,  143,  135,  136,  143,  133,  143,  133,  143,
      142,  143,  142,  143,  142,  143,  142,  143,  142,  143,
      142,  143,  142,  143,  142,  143,  142,  143,  142,  143,
      142,  143,  142,  143,  142,  143,  142,  143,  142,  143,
      142,  143,  142,  143,  142,  143,  142,  143,  142,  143,
      142,  143,  142,  143,  142,  143,  142,  143,  142,  143,
      142,  143,  142,  143,  142,  143,  142,  143,  142,  143,
      142,  143,  142,  143,  122,  143,  123,  124,  143,  123,

      143,  124,  143,  125,  143,  127,  128,  143,  127,  143,
      143,  128,  143,  131,  143,  132,  142,  141,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  120,
      135,  136,    9,  126,  130,  137,  136,  135,  136,  137,
       32,   31,   33,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,   94,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,   36,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,

      142,  142,  142,  123,  124,  123,  124,  127,  128,  127,
      128,  129,  131,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      121,  137,  134,  136,  137,  136,  137,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,   95,  142,  142,  142,   37,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,

      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,    6,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  136,  136,  136,  137,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,   44,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,   81,  142,  108,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
       51,  142,  142,  142,  142,  142,  116,  142,   19,  142,
      142,  142,  142,  142,  142,    5,  142,  114,  142,   41,
      142,  142,  142,  104,  142,  142,  142,  142,  110,  142,

      142,  142,  142,  142,  142,  142,  142,  138,  142,  142,
       14,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,   49,  142,
       16,  142,  136,  137,  136,  142,  142,  142,  142,  142,
      142,   46,  142,   27,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
       98,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,   52,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  113,  142,  142,  142,   18,
      142,  142,   11,  142,  142,  142,  142,  142,  142,  142,

      142,  142,  142,  142,  142,  142,  142,  105,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,   50,  142,  142,   45,  142,  142,  142,  142,
      142,  142,  142,  142,   82,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  119,
      142,  142,  112,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,   24,  142,  142,  142,  115,  142,
       86,  142,  142,  142,  142,  142,  118,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,

      142,  142,  142,   29,  142,  142,  142,  142,  142,   83,
      142,  142,   34,  142,  142,  142,  142,  142,  142,  142,
      142,  106,  142,  142,  142,  142,  142,  142,  142,  142,
      142,   25,  142,  117,  142,  142,  142,  142,  142,    4,
      142,  142,  142,  142,  142,  142,    8,  142,  142,  142,
      142,  142,  142,   22,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,   38,  142,   97,  142,  142,  142,   60,
      142,  142,  142,  142,  142,  142,  142,  142,  142,   99,
      142,  142,   48,  142,   47,  142,  142,  142,  142,  142,

      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  109,  142,  142,  142,   42,  142,   12,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,   57,  142,   58,  142,  142,  142,  142,
      142,   13,  142,  142,  142,   15,  142,  142,  142,  142,
      142,   21,  142,  142,   84,  142,  142,  142,  142,  142,
      142,  142,  142,  142,   28,  142,  142,  142,  142,  142,
      142,   73,  142,   75,  142,  142,  142,  142,  142,  142,
      142,  142,  142,   65,  142,  142,   39,  142,    2,  142,
        7,  142,   89,  142,  142,  142,  142,  142,  142,   61,

      142,  142,  142,  142,  140,  142,  142,  142,   90,  142,
      142,  142,  142,  142,  142,  142,   10,  142,  142,  142,
      142,  142,  142,  142,  142,   69,  142,  142,   66,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,   72,
      142,  142,  142,  142,  142,   87,  142,   88,  142,  142,
      142,  142,  142,  142,  142,   96,  142,  142,  142,  142,
      142,   59,  142,    3,  142,  142,  142,  142,   80,  142,
      142,  142,   54,  142,  142,  142,  142,   30,  142,   68,
      142,  142,  142,  142,  142,  142,  142,  142,   17,  142,
       26,  142,   23,  142,  142,  111,  142,  101,  103,  142,

      142,   63,  142,   62,  142,   64,  142,  142,  142,  142,
       92,  142,  142,  142,  142,   20,   35,  142,  142,  142,
       55,  142,   74,  142,  142,   71,  142,  142,  142,   79,
      142,  142,  142,  142,  100,  102,  142,  107,  142,   93,
      142,  142,  142,  142,  142,   53,  142,   56,  142,   67,
      142,   76,  142,  142,   78,  142,  142,  142,  142,  142,
        1,  142,  142,   70,  142,  142,  142,   85,  142,  142,
       91,  142,   77,  142,   40,  142,  142,  142,  142,  139,
       43,  142
    } ;

static yyconst short int yy_accept[849] =
    {   0,
        1,    1,    1,    3,    5,    7,    9,    9,    9,   10,
       11,   13,   15,   16,   18,   20,   22,   24,   27,   29,
       31,   33,   35,   37,   39,   41,   43,   45,   47,   49,
       51,   53,   55,   57,   59,   61,   63,   65,   67,   69,
       71,   73,   75,   77,   79,   81,   83,   85,   87,   89,
       91,   93,   95,   97,  100,  102,  104,  106,  109,  111,
      112,  114,  116,  117,  117,  118,  119,  120,  121,  122,
      123,  124,  125,  126,  127,  128,  129,  130,  130,  130,
      131,  133,  134,  135,  136,  137,  137,  138,  140,  141,
      142,  143,  144,  145,  146,  147,  148,  149,  150,  151,

      152,  153,  154,  155,  156,  157,  159,  160,  161,  162,
      163,  164,  165,  166,  167,  168,  169,  170,  171,  172,
      173,  174,  175,  176,  177,  178,  179,  180,  181,  182,
      183,  184,  185,  186,  187,  189,  190,  191,  192,  193,
      194,  195,  196,  197,  198,  199,  200,  201,  202,  203,
      204,  206,  207,  208,  210,  211,  212,  212,  213,  214,
      214,  214,  215,  216,  217,  218,  219,  220,  221,  222,
      223,  224,  225,  226,  227,  228,  229,  230,  231,  232,
      233,  233,  234,  235,  236,  236,  238,  239,  240,  241,
      242,  243,  244,  245,  246,  247,  248,  249,  250,  251,

      252,  253,  254,  255,  256,  257,  258,  259,  260,  261,
      262,  263,  264,  265,  267,  268,  269,  271,  272,  273,
      274,  275,  276,  277,  278,  279,  280,  281,  282,  283,
      284,  285,  286,  287,  288,  289,  290,  291,  292,  293,
      294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
      304,  305,  306,  306,  306,  307,  308,  309,  310,  311,
      312,  314,  315,  316,  317,  318,  319,  320,  321,  322,
      323,  324,  325,  326,  327,  328,  329,  331,  332,  333,
      334,  335,  336,  337,  338,  339,  340,  341,  342,  344,
      345,  346,  347,  348,  349,  350,  351,  352,  353,  354,

      355,  357,  359,  360,  361,  362,  363,  364,  365,  366,
      367,  368,  369,  370,  371,  373,  374,  375,  376,  377,
      379,  381,  382,  383,  384,  385,  386,  388,  390,  392,
      393,  394,  396,  397,  398,  399,  401,  402,  403,  404,
      405,  406,  407,  408,  408,  409,  410,  411,  413,  414,
      415,  416,  417,  418,  419,  420,  421,  422,  423,  424,
      425,  426,  427,  428,  429,  431,  433,  434,  435,  436,
      437,  438,  439,  440,  441,  442,  444,  446,  447,  448,
      449,  450,  451,  452,  453,  454,  455,  456,  457,  458,
      459,  460,  461,  463,  464,  465,  466,  467,  468,  469,

      470,  471,  472,  473,  474,  476,  477,  478,  479,  480,
      481,  482,  483,  484,  485,  486,  488,  489,  490,  492,
      493,  495,  496,  497,  498,  499,  500,  501,  501,  502,
      503,  504,  505,  506,  507,  508,  510,  511,  512,  513,
      514,  515,  516,  517,  518,  519,  520,  520,  520,  521,
      522,  523,  525,  526,  528,  529,  530,  531,  532,  533,
      534,  535,  537,  538,  539,  540,  541,  542,  543,  544,
      545,  546,  547,  548,  549,  550,  552,  553,  555,  556,
      557,  558,  559,  560,  561,  562,  563,  564,  565,  567,
      568,  569,  571,  573,  574,  575,  576,  577,  579,  580,

      580,  581,  582,  583,  583,  584,  585,  586,  587,  588,
      589,  590,  591,  592,  593,  594,  595,  596,  597,  598,
      599,  600,  601,  602,  603,  604,  606,  607,  608,  609,
      610,  612,  613,  615,  616,  617,  618,  619,  620,  621,
      622,  624,  625,  626,  627,  628,  629,  630,  631,  632,
      634,  636,  637,  638,  639,  640,  642,  643,  644,  645,
      646,  647,  649,  650,  651,  652,  653,  654,  656,  656,
      656,  657,  658,  659,  660,  661,  662,  663,  664,  664,
      665,  666,  667,  668,  669,  670,  671,  672,  673,  674,
      676,  678,  679,  680,  682,  683,  684,  685,  686,  687,

      688,  689,  690,  692,  693,  695,  697,  698,  699,  700,
      701,  702,  703,  704,  705,  706,  707,  708,  709,  710,
      711,  712,  713,  715,  716,  717,  719,  721,  722,  723,
      724,  725,  726,  727,  728,  728,  728,  729,  730,  731,
      732,  733,  734,  736,  738,  738,  739,  740,  741,  742,
      744,  745,  746,  748,  749,  750,  751,  752,  754,  755,
      757,  758,  759,  760,  761,  762,  763,  764,  765,  767,
      768,  769,  770,  771,  772,  774,  776,  777,  778,  779,
      780,  781,  782,  783,  784,  786,  787,  789,  791,  793,
      795,  796,  797,  798,  798,  798,  799,  800,  802,  803,

      804,  805,  806,  807,  808,  809,  811,  812,  813,  814,
      815,  816,  817,  819,  820,  821,  822,  823,  824,  825,
      826,  828,  829,  831,  832,  833,  834,  835,  836,  837,
      838,  839,  840,  842,  843,  844,  845,  846,  848,  850,
      851,  851,  851,  852,  853,  854,  855,  856,  856,  858,
      859,  860,  861,  862,  864,  866,  867,  868,  869,  871,
      872,  873,  875,  876,  877,  878,  880,  882,  883,  884,
      885,  886,  887,  888,  889,  891,  893,  895,  896,  898,
      899,  899,  901,  902,  904,  906,  908,  908,  909,  910,
      911,  913,  914,  915,  916,  919,  920,  921,  923,  925,

      926,  928,  929,  930,  932,  933,  934,  935,  936,  938,
      938,  940,  942,  943,  944,  945,  946,  948,  950,  952,
      954,  955,  957,  958,  959,  959,  960,  961,  963,  964,
      966,  967,  968,  968,  970,  971,  973,  975,  977,  977,
      978,  978,  979,  979,  980,  981,  983,  983
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    5,    1,    1,    6,    7,
        7,    8,    9,    7,    9,   10,   11,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   13,    1,   14,
       15,   16,    1,    1,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   24,   26,   24,   27,   28,   29,   30,
       24,   31,   32,   33,   24,   24,   24,   24,   34,   35,
        7,    1,    7,    1,   36,    1,   37,   38,   39,   40,

       41,   42,   43,   44,   45,   24,   46,   47,   48,   49,
       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
       60,   24,   61,    1,   62,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   24,    1,    1,    1,    1,    1,    1,
        1,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24
    } ;

static yyconst int yy_meta[63] =
    {   0,
        1,    2,    3,    3,    4,    1,    1,    5,    6,    7,
        1,    4,    2,    1,    1,    1,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        1,    8
    } ;

static yyconst short int yy_base[862] =
    {   0,
        0,    0,   60,   62,   65,   73,   75,   81,  297, 5513,
       84,  123,   68, 5513,  283,  283,   81,   87,   75,  274,
       98,  110,  135,   91,  116,  147,  155,  178,  190,  202,
      205,  208,  221,  225,  233,  255,  267,  270,  283,  296,
      303,  318,  288,  311,  336,  340,  344,  360,  365,  373,
      380,  395, 5513,  106,    0,    0, 5513,  161,    0,   95,
        0,  127,  130,  401,  417, 5513,  421,  424,  439,  443,
      446,  460,  463,  467,  483,  488,  495,  164,  180, 5513,
      497, 5513, 5513, 5513,    0,  186,  513,  518,  165, 5513,
     5513, 5513,  508,  529,  543,  547,  559,  562,  565,  578,

      581,  585,  597,  602,  614,  475,  617,  629,  635,  642,
      648,  654,  666,  672,  684,  690,  697,  702,  709,  715,
      721,  728,  736,  740,  743,  756,  764,  768,  771,  776,
      784,  788,  800,  804,  817,  830,  836,  848,  844,  852,
      856,  860,  864,  868,  892,  896,  908,  911,  914,  926,
      210,    0,    0,  229,    0,    0,  179, 5513,  158,  227,
      234,  932,  944,  952,  957,  960,  964,  972,  976,  994,
      998, 1012, 1016, 1024, 1020, 1028, 1032, 1044,  196,    0,
      235, 5513, 1041,    0,  241,  251, 1056, 1071, 1083, 1086,
     1089, 1103, 1107, 1110, 1115, 1122, 1134, 1130, 1146, 1150,

     1154, 1169, 1172, 1175, 1187, 1201, 1204, 1217, 1220, 1223,
     1235, 1240, 1243, 1259, 1262, 1265, 1281, 1289, 1295, 1301,
     1307, 1314, 1319, 1322, 1327, 1340, 1346, 1358, 1364, 1376,
     1379, 1382, 1394, 1401, 1407, 1419, 1422, 1425, 1437, 1443,
     1449, 1455, 1461, 1468, 1473, 1480, 1495, 1508, 1514, 1526,
     1529, 1534,  248,  206, 1546, 1549, 1561, 1567, 1573, 1581,
     1585, 1597, 1601, 1604, 1620, 1626, 1632, 1638, 1644, 1651,
     1656, 1663, 1668, 1676, 1324,  272,  243, 1689, 1692, 1695,
     1711, 1716, 1719, 1731, 1739, 1743, 1751, 1764, 1767, 1780,
     1783, 1787, 1795, 1799, 1812, 1807, 1819, 1827, 1833, 1839,

     1851, 1859, 1864, 1867, 1879, 1883, 1886, 1898, 1901, 1904,
     1919, 1923, 1939, 1945, 1960, 1963, 1966, 1978, 1983, 1986,
     1998, 2001, 2004, 2021, 2024, 2027, 2040, 2043, 2046, 2060,
     2065, 2068, 2072, 2080, 2084, 2087, 2092, 2099, 2111, 2114,
     2126, 2133, 2138,  204, 5513, 2141, 2145, 2153, 2159, 2166,
     2180, 2184, 2187, 2199, 2202, 2205, 2217, 2220, 2223, 2242,
     2245, 2249, 2264, 2267, 2270, 2282,  267,  314,  231, 2285,
     2289, 2304, 2307, 2310, 2324, 2328, 2331, 2343, 2351, 2355,
     2358, 2371, 2375, 2378, 2393, 2396, 2399, 2412, 2416, 2424,
     2429, 2432, 2436, 2444, 2450, 2457, 2462, 2477, 2465, 2492,

     2498, 2510, 2513, 2517, 2525, 2529, 2532, 2537, 2544, 2552,
     2558, 2570, 2573, 2577, 2589, 2594, 2601, 2606, 2609, 2621,
     2627, 2633, 2645, 2648, 2651, 2663, 2666,  204, 2678, 2690,
     2693, 2705, 2708, 2713, 2725, 2729, 2746, 2750, 2753, 2765,
     2768, 2771, 2783, 2786, 2798, 2810,  323,  218, 2813, 2817,
     2825, 2829, 2841, 2848, 2853, 2861, 2868, 2873, 2876, 2880,
     2895, 2902, 2914, 2917, 2922, 2929, 2934, 2941, 2946, 2954,
     2967, 2974, 2986, 2989, 3001, 3005, 3017, 3021, 3025, 3033,
     3045, 3048, 3051, 3063, 3066, 3081, 3086, 3098, 3101, 3104,
     3118, 3121, 3138, 3141, 3144, 3159, 3162, 3165, 3180, 3184,

     3187, 3202, 3205,  177, 3227, 3230, 3233, 3245, 3258, 3263,
     3266, 3281, 3284, 3289, 3296, 3301, 3313, 3320, 3333, 3336,
     3339, 3354, 3361, 3366, 3369, 3381, 3388, 3393, 3396, 3410,
     3416, 3422, 3428, 3435, 3440, 3448, 3453, 3456, 3468, 3472,
     3475, 3489, 3496, 3503, 3508, 3511, 3515, 3528, 3531, 3534,
     3551, 3554, 3574, 3577, 3580, 3592, 3595, 3598, 3610, 3613,
     3617, 3631, 3637, 3644, 3651, 3657, 3665, 3669,  180,  176,
     3672, 3684, 3690, 3696, 3708, 3713, 3720, 3726,  173, 3732,
     3744, 3738, 3751, 3756, 3763, 3768, 3782, 3785, 3789, 3801,
     3804, 3816, 3819, 3823, 3835, 3838, 3841, 3853, 3859, 3865,

     3878, 3871, 3891, 3907, 3910, 3913, 3925, 3928, 3931, 3945,
     3948, 3960, 3964, 3980, 3983, 3995, 3998, 4010, 4014, 4022,
     4026, 4029, 4041, 4046, 4049, 4053, 4065, 4073, 4077, 4080,
     4092, 4096, 4104, 4108,  146,  147, 4111, 4116, 4123, 4140,
     4143, 4148, 4160, 4165,  137, 4168, 4180, 4183, 4187, 4195,
     4201, 4208, 4213, 4216, 4220, 4228, 4243, 4246, 4249, 4264,
     4267, 4272, 4279, 4291, 4296, 4308, 4315, 4320, 4323, 4328,
     4341, 4353, 4356, 4360, 4368, 4374, 4381, 4387, 4394, 4400,
     4406, 4412, 4418, 4426, 4430, 4433, 4438, 4446, 4452, 4458,
     4464, 4470, 4476,  132,  116, 4482, 4488, 4494, 4500, 4507,

     4513,  368, 4526, 4529, 4532, 4544, 4548, 4551, 4563, 4568,
     4571, 4575, 4588, 4591, 4594, 4606, 4610, 4624, 4629, 4637,
     4641, 4644, 4656, 4659, 4663, 4675, 4678, 4690, 4694, 4697,
     4709, 4713, 4725, 4728, 4742, 4745, 4748, 4760, 4767, 4772,
       93,   82, 4775, 4791, 4794, 4797, 4809,  796, 4812, 4816,
     4828, 4832, 4844, 4849, 4852, 4857, 4864, 4870, 4882, 4886,
     4889, 4903, 4906, 4909, 4927, 4933, 4939, 4945, 4957, 4960,
     4964, 4972, 4980, 4984, 4987, 4992, 4999, 5016, 5019, 5513,
       80, 5022, 5034, 5037, 5040, 5052,   67, 5055, 5058, 5074,
     5077, 5080, 5095, 5098, 5101, 5113, 5118, 5125, 5137, 5145,

     5150, 5153, 5157, 5165, 5172, 5177, 5180, 5513, 5185,   96,
     5193, 5197, 5205, 5212, 5224, 5227, 5230, 5242, 5245, 5248,
     5265, 5268, 5271, 5283,   63, 5286, 5289, 5301, 5305, 5308,
     5320, 5313,   68, 5325, 5333, 5340, 5345, 5353,   49, 5360,
       39, 5367,   39, 5372, 5513, 5375, 5513, 5426, 5434, 5442,
     5449, 5453, 5458, 5465, 5472, 5478, 5485, 5493, 5501,   63,
     5506
    } ;

static yyconst short int yy_def[862] =
    {   0,
      847,    1,  848,  848,  849,  849,  850,  850,  847,  847,
      847,  851,  852,  847,  847,  847,  847,  853,  847,  847,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  847,  854,  855,  856,  847,  857,  858,  847,
      859,  847,  847,  847,  851,  847,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  852,  852,  847,
      853,  847,  847,  847,  860,  853,  853,  853,  861,  847,
      847,  847,  851,  851,  851,  851,  851,  851,  851,  851,

      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      854,  855,  856,  857,  858,  859,  847,  847,  847,  847,
      847,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  852,  860,
      853,  847,  853,  860,  853,  861,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,

      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  847,  847,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  853,  853,  860,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,

      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  847,  847,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  847,  860,  847,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,

      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  847,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  847,  847,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  847,

      851,  851,  851,  847,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  847,  847,
      851,  851,  851,  851,  851,  851,  851,  851,  847,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,

      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  847,  847,  851,  851,  851,  851,
      851,  851,  851,  851,  847,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  847,  847,  851,  851,  851,  851,  851,

      851,  847,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      847,  847,  851,  851,  851,  851,  851,  847,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  847,
      847,  851,  851,  851,  851,  851,  847,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,

      851,  851,  851,  851,  851,  851,  851,  847,  851,  847,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  847,  851,  851,  851,  851,  851,
      851,  851,  847,  851,  851,  851,  851,  851,  847,  851,
      847,  851,  847,  851,  847,  851,    0,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847
    } ;

static yyconst short int yy_nxt[5576] =
    {   0,
       10,   11,   11,   11,   12,   13,   14,   14,   15,   16,
       17,   18,   10,   19,   14,   20,   21,   22,   23,   24,
       25,   26,   27,   24,   24,   28,   29,   30,   31,   24,
       32,   33,   34,   35,   24,   24,   36,   37,   24,   24,
       38,   39,   40,   24,   41,   42,   43,   24,   44,   45,
       46,   24,   47,   48,   49,   50,   51,   52,   24,   24,
       53,   14,   55,   55,   55,   55,  180,   59,   59,   56,
       79,   56,   60,   80,   61,   59,   59,   62,   62,  845,
       60,  843,   61,   62,   62,   63,   63,   63,   83,   90,
       91,   84,   64,   64,   64,   86,   87,  841,   88,   64,

       64,   64,  157,   66,  839,  158,  833,   89,  152,  152,
       66,   64,   64,   64,  825,  153,  810,   64,   64,   64,
      808,   57,   66,   57,   64,   64,   64,   89,   66,  159,
      159,   63,   63,   63,  781,   66,   64,   64,   64,   67,
       68,   69,   70,   71,   72,  780,   93,   66,   64,   64,
       64,   73,   74,   75,   76,   77,   64,   64,   64,   66,
      159,  159,   94,  155,  155,  742,   79,   66,   99,   80,
      156,   95,  741,  185,  100,  103,  186,  702,   96,   64,
       64,   64,   79,  179,   97,   80,  157,   98,  695,  158,
       66,   64,   64,   64,  847,  847,  101,  181,   79,  102,

      694,   80,   66,   64,   64,   64,   64,   64,   64,   64,
       64,   64,  152,  152,   66,  645,  636,   66,  104,  153,
       66,  635,   64,   64,   64,  579,   64,   64,   64,  369,
      106,  155,  155,   66,   64,   64,   64,   66,  156,  105,
      504,  111,  369,  847,  847,   66,  847,  428,  109,  847,
      847,  107,  276,  117,  277,  108,   64,   64,   64,  847,
      345,  112,  277,  110,  113,  115,  344,   66,   64,   64,
       64,   64,   64,   64,  254,  114,  253,  116,  367,   66,
      847,  847,   66,  369,   64,   64,   64,  447,   92,   64,
       64,   64,   82,  118,   81,   66,  847,   64,   64,   64,

       66,  119,  847,  120,   64,   64,   64,  447,   66,  847,
      847,  121,   64,   64,   64,   66,  123,  847,  124,   64,
       64,   64,  448,   66,  847,  277,  122,  126,  125,  847,
       66,  448,  132,  847,  369,  127,  128,   64,   64,   64,
      847,   64,   64,   64,  847,   64,   64,   64,   66,  847,
      847,  129,   66,  847,  847,  130,   66,  847,  131,  847,
      133,   64,   64,   64,  847,  847,   64,   64,   64,  748,
      748,  748,   66,  847,   64,   64,   64,   66,  847,  137,
      136,   64,   64,   64,  138,   66,  134,  847,  135,  847,
      847,  847,   66,  847,  847,  140,   64,   64,   64,  139,

      141,  144,   64,   64,   64,  145,  847,   66,  847,  142,
      847,  847,  847,   66,  847,  143,  148,  146,   64,   64,
       64,  147,   64,   64,   64,   64,   64,   64,  160,   66,
      847,  149,  847,   66,  847,  847,   66,  847,  847,  150,
       64,   64,   64,  847,   64,   64,   64,   64,   64,   64,
      847,   66,  847,  847,  161,   66,  847,  847,   66,  162,
      163,   64,   64,   64,   64,   64,   64,  847,   64,   64,
       64,  847,   66,  164,  847,   66,   64,   64,   64,   66,
      847,  847,  847,  166,   64,   64,   64,   66,  165,   64,
       64,   64,  847,  847,  167,   66,   64,   64,   64,  847,

       66,  847,  168,  172,  847,   86,   87,   66,   88,   64,
       64,   64,  169,  171,  847,  170,  847,   89,  847,  173,
       66,   86,  182,  174,  183,  847,   86,   87,  175,   88,
       64,   64,   64,   89,  847,  176,  847,   89,   89,  177,
      847,   66,  847,  847,   64,   64,   64,  847,   64,   64,
       64,  847,  187,   89,  178,   66,  847,  847,   89,   66,
       64,   64,   64,   64,   64,   64,   64,   64,   64,  188,
      847,   66,  847,  847,   66,  847,  847,   66,  847,   64,
       64,   64,   64,   64,   64,  847,   64,   64,   64,  189,
       66,  847,  847,   66,  847,  847,  190,   66,   64,   64,

       64,  193,  192,   64,   64,   64,  847,  191,  847,   66,
      847,  847,  847,  847,   66,   64,   64,   64,   64,   64,
       64,  196,  194,  847,  197,  847,   66,  847,  847,   66,
       64,   64,   64,  195,  847,  201,   64,   64,   64,  847,
      847,   66,  198,   64,   64,   64,  847,   66,  202,   64,
       64,   64,  847,  199,   66,   64,   64,   64,  847,  847,
       66,  847,  200,  847,  847,  203,   66,   64,   64,   64,
      847,  204,  208,   64,   64,   64,  847,  847,   66,  847,
      847,  205,  847,  847,   66,   64,   64,   64,  206,  847,
      207,   64,   64,   64,  209,  847,   66,  847,   64,   64,

       64,  847,   66,   64,   64,   64,  847,  847,  211,   66,
       64,   64,   64,  847,   66,  210,   64,   64,   64,  847,
      847,   66,   64,   64,   64,  847,  213,   66,  214,   64,
       64,   64,  847,   66,  847,  847,  212,   64,   64,   64,
       66,   64,   64,   64,   64,   64,   64,  847,   66,  847,
      847,  216,   66,  847,  217,   66,  215,   64,   64,   64,
      847,  847,  847,  219,  847,   64,   64,   64,   66,   64,
       64,   64,   64,   64,   64,  218,   66,   64,   64,   64,
       66,  847,  220,   66,  847,   64,   64,   64,   66,   64,
       64,   64,  847,  222,  847,  221,   66,  748,  748,  748,

       66,   64,   64,   64,  847,   64,   64,   64,  223,  847,
      847,  224,   66,  225,  847,  847,   66,  847,   64,   64,
       64,  847,  226,  787,  847,  227,  847,  847,  228,   66,
      847,   64,   64,   64,  847,  232,  230,   64,   64,   64,
      847,  231,   66,  229,  234,   64,   64,   64,   66,   64,
       64,   64,  233,   64,   64,   64,   66,   64,   64,   64,
       66,   64,   64,   64,   66,   64,   64,   64,   66,   64,
       64,   64,   66,  847,  847,  847,   66,  847,  847,  847,
       66,  847,  235,  847,  237,  847,  238,  847,  236,  240,
      239,  847,  241,   64,   64,   64,  847,   64,   64,   64,

      847,  847,  243,  847,   66,  244,  847,  242,   66,   64,
       64,   64,   64,   64,   64,   64,   64,   64,  847,  847,
       66,  847,  847,   66,  847,  847,   66,   64,   64,   64,
      847,  847,  247,   64,   64,   64,  847,  847,   66,  245,
      248,  847,  847,  847,   66,   64,   64,   64,  847,  847,
      246,  847,  249,   64,   64,   64,   66,  250,   64,   64,
       64,   64,   64,   64,   66,   64,   64,   64,  251,   66,
      847,  847,   66,   64,   64,   64,   66,   64,   64,   64,
      252,  847,  256,  847,   66,  847,  255,  847,   66,  847,
      847,  257,  847,  847,  847,   64,   64,   64,  260,   64,

       64,   64,  847,  261,  258,  259,   66,  847,  262,  847,
       66,  847,  263,   64,   64,   64,  847,   64,   64,   64,
      847,   64,   64,   64,   66,   64,   64,   64,   66,   64,
       64,   64,   66,   64,   64,   64,   66,  847,  265,  847,
       66,  847,  264,  847,   66,   64,   64,   64,  847,   86,
      847,  847,  275,  847,  847,  847,   66,   64,   64,   64,
      847,   89,  847,  847,  266,  268,  267,  847,   66,  847,
      269,  271,   64,   64,   64,  847,  847,  270,  847,  273,
      272,   89,  847,   66,   64,   64,   64,   64,   64,   64,
       64,   64,   64,  847,  274,   66,  847,  847,   66,  847,

      847,   66,  847,  278,   64,   64,   64,  279,   64,   64,
       64,   64,   64,   64,  847,   66,   64,   64,   64,   66,
      847,  280,   66,   64,   64,   64,  847,   66,  847,  847,
      281,   64,   64,   64,   66,   64,   64,   64,  847,  283,
      847,  847,   66,  847,  847,  282,   66,   64,   64,   64,
      286,   64,   64,   64,  288,   64,   64,   64,   66,  847,
      284,  847,   66,  285,  847,  847,   66,  847,  847,  287,
       64,   64,   64,   64,   64,   64,   64,   64,   64,  847,
      289,   66,  847,  847,   66,  847,  290,   66,   64,   64,
       64,  847,  294,  847,  291,  847,  847,  292,  847,   66,

      847,  847,   64,   64,   64,   64,   64,   64,  847,  847,
      295,  296,  293,   66,  847,  847,   66,  847,   64,   64,
       64,   64,   64,   64,   64,   64,   64,  847,  847,   66,
      847,  847,   66,  847,  847,   66,   64,   64,   64,  299,
      847,   64,   64,   64,   64,   64,   64,   66,  847,  847,
      297,  300,   66,  847,  847,   66,  298,  847,  847,  301,
       64,   64,   64,   64,   64,   64,   64,   64,   64,  847,
      847,   66,  847,  847,   66,  847,  847,   66,  847,  847,
      302,  305,   64,   64,   64,  847,  847,  304,  847,  303,
       64,   64,   64,   66,  847,  847,   64,   64,   64,  847,

      847,   66,   64,   64,   64,  847,  306,   66,   64,   64,
       64,  847,  847,   66,  307,   64,   64,   64,  847,   66,
       64,   64,   64,   64,   64,   64,   66,  847,   64,   64,
       64,   66,  847,  847,   66,  367,  308,  847,  309,   66,
      847,   64,   64,   64,  368,  310,  847,   64,   64,   64,
      847,  847,   66,  847,  311,  847,  847,  314,   66,   64,
       64,   64,  847,  312,  368,   64,   64,   64,  847,  847,
       66,  847,  313,  847,  315,  316,   66,   64,   64,   64,
       64,   64,   64,   64,   64,   64,  317,  847,   66,  847,
      847,   66,  847,  847,   66,   64,   64,   64,  318,  847,

      847,  319,   64,   64,   64,  847,   66,  847,   64,   64,
       64,  847,  847,   66,  847,  847,  320,  847,  847,   66,
       64,   64,   64,   64,   64,   64,   64,   64,   64,  847,
      847,   66,  847,  321,   66,  847,  322,   66,   64,   64,
       64,  323,  847,  847,   64,   64,   64,  847,  847,   66,
       64,   64,   64,  324,  325,   66,   64,   64,   64,  326,
      847,   66,   64,   64,   64,  847,  847,   66,  327,   64,
       64,   64,  847,   66,   64,   64,   64,  329,  847,  328,
       66,   64,   64,   64,  847,   66,  847,  847,  847,  847,
      330,  847,   66,  847,  847,  332,   64,   64,   64,  847,

      847,  331,  847,  847,  333,  847,  847,   66,  847,   64,
       64,   64,  847,  847,  334,   64,   64,   64,  847,  847,
       66,  847,  847,  335,  847,  847,   66,   64,   64,   64,
       64,   64,   64,  337,  336,   64,   64,   64,   66,  847,
      847,   66,  847,  338,  339,  847,   66,   64,   64,   64,
       64,   64,   64,  847,  847,  340,  847,  847,   66,  847,
      847,   66,   64,   64,   64,  847,  847,  342,   64,   64,
       64,  847,  847,   66,   64,   64,   64,  343,  847,   66,
      847,  341,   64,   64,   64,   66,   64,   64,   64,  847,
      346,  847,  847,   66,  347,  847,  847,   66,   64,   64,

       64,  847,   64,   64,   64,   64,   64,   64,  847,   66,
      847,  847,  350,   66,  847,  847,   66,  349,  847,  847,
      348,   64,   64,   64,  847,  352,  351,   64,   64,   64,
      847,  847,   66,   64,   64,   64,  847,  847,   66,   64,
       64,   64,  355,  353,   66,   64,   64,   64,  354,  847,
       66,  847,   64,   64,   64,  847,   66,   64,   64,   64,
      847,  847,  357,   66,   64,   64,   64,  847,   66,   64,
       64,   64,  356,  847,  847,   66,  359,   64,   64,   64,
       66,  847,  847,  847,  360,  847,  358,  847,   66,  847,
       64,   64,   64,   64,   64,   64,   64,   64,   64,  847,

      361,   66,  847,  847,   66,  847,  362,   66,  365,  847,
      364,  363,   64,   64,   64,  847,  366,   64,   64,   64,
       64,   64,   64,   66,  847,  370,  847,  847,   66,  847,
      847,   66,   64,   64,   64,  847,  847,  371,  847,  847,
       64,   64,   64,   66,   64,   64,   64,  847,  847,  373,
      372,   66,   64,   64,   64,   66,  374,  847,  847,  378,
      847,  847,  847,   66,  847,   64,   64,   64,   64,   64,
       64,  376,  847,  375,  847,  847,   66,  847,  847,   66,
      847,   64,   64,   64,   64,   64,   64,  847,   64,   64,
       64,  379,   66,  377,  380,   66,   64,   64,   64,   66,

       64,   64,   64,  847,  847,  847,  847,   66,   64,   64,
       64,   66,  847,   64,   64,   64,  847,  847,  847,   66,
       64,   64,   64,  383,   66,  847,  381,  384,   64,   64,
       64,   66,  387,  388,   64,   64,   64,  382,  847,   66,
       64,   64,   64,  847,  385,   66,  847,  389,  847,  847,
      847,   66,   64,   64,   64,  847,  847,  386,  847,  393,
       64,   64,   64,   66,  392,   64,   64,   64,   64,   64,
       64,   66,  847,  391,  390,  847,   66,  847,  847,   66,
       64,   64,   64,  847,   64,   64,   64,   64,   64,   64,
      847,   66,  847,  847,  394,   66,  847,  847,   66,   64,

       64,   64,   64,   64,   64,   64,   64,   64,  395,  847,
       66,  396,  847,   66,  847,  847,   66,  847,  847,  397,
       64,   64,   64,  847,   64,   64,   64,  847,  847,  847,
      847,   66,  847,  847,  400,   66,  847,  847,  399,  398,
       64,   64,   64,  847,  847,  401,   64,   64,   64,  847,
      847,   66,  847,  847,  402,  847,  847,   66,  847,  403,
      847,   64,   64,   64,   64,   64,   64,   64,   64,   64,
      847,  404,   66,  847,  847,   66,  847,  847,   66,   64,
       64,   64,  847,  406,   64,   64,   64,   64,   64,   64,
       66,  847,  847,  405,  847,   66,  847,  847,   66,   64,

       64,   64,   64,   64,   64,   64,   64,   64,  408,  847,
       66,  847,  847,   66,  847,  847,   66,  847,  847,  407,
      409,  847,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  847,  410,   66,  847,  847,   66,  847,  847,   66,
      412,   64,   64,   64,   64,   64,   64,   64,   64,   64,
      847,  847,   66,  411,  847,   66,  847,  413,   66,  847,
      414,   64,   64,   64,  847,  415,   64,   64,   64,   64,
       64,   64,   66,   64,   64,   64,  847,   66,  847,  847,
       66,   64,   64,   64,   66,   64,   64,   64,   64,   64,
       64,  847,   66,   64,   64,   64,   66,  847,  847,   66,

       64,   64,   64,  417,   66,  847,  847,  418,  847,  847,
      416,   66,   64,   64,   64,   64,   64,   64,  847,  847,
      419,  847,  847,   66,  847,  847,   66,   64,   64,   64,
      847,  847,  421,  420,   64,   64,   64,  847,   66,   64,
       64,   64,   64,   64,   64,   66,   64,   64,   64,  847,
       66,  847,  422,   66,   64,   64,   64,   66,  847,  423,
       64,   64,   64,  424,  847,   66,  425,   64,   64,   64,
      847,   66,  847,  427,  847,  847,  426,  847,   66,  847,
      430,   64,   64,   64,  847,   64,   64,   64,   64,   64,
       64,  847,   66,  847,  847,  431,   66,  429,  847,   66,

       64,   64,   64,   64,   64,   64,   64,   64,   64,  847,
      432,   66,  847,  847,   66,  847,  847,   66,   64,   64,
       64,   64,   64,   64,   64,   64,   64,  847,  847,   66,
      847,  847,   66,  847,  433,   66,  847,  434,  847,  436,
      847,  438,  435,   64,   64,   64,   64,   64,   64,  847,
       64,   64,   64,  847,   66,  847,  437,   66,  847,  847,
      440,   66,  847,  441,  439,   64,   64,   64,   64,   64,
       64,   64,   64,   64,  847,  847,   66,  847,  847,   66,
      847,  847,   66,   64,   64,   64,   64,   64,   64,  847,
       64,   64,   64,  847,   66,  444,  847,   66,  442,  847,

      443,   66,  446,  847,  445,   64,   64,   64,   64,   64,
       64,   64,   64,   64,  847,  847,   66,  847,  847,   66,
      847,  847,   66,  847,  450,   64,   64,   64,  847,   64,
       64,   64,   64,   64,   64,  847,   66,  847,  847,  449,
       66,  847,  847,   66,   64,   64,   64,  452,  847,  847,
      451,  847,   64,   64,   64,   66,   64,   64,   64,   64,
       64,   64,  453,   66,  454,  847,  847,   66,  847,  847,
       66,  457,   64,   64,   64,  847,   64,   64,   64,   64,
       64,   64,  847,   66,  847,  847,  456,   66,  847,  455,
       66,  847,  847,  458,   64,   64,   64,   64,   64,   64,

       64,   64,   64,  847,  847,   66,  847,  847,   66,  847,
      847,   66,  847,   64,   64,   64,  461,   64,   64,   64,
      459,  847,  847,  460,   66,   64,   64,   64,   66,  847,
       64,   64,   64,   64,   64,   64,   66,   64,   64,   64,
      463,   66,  847,  847,   66,   64,   64,   64,   66,  847,
      462,   64,   64,   64,  847,  847,   66,  464,   64,   64,
       64,  465,   66,   64,   64,   64,   64,   64,   64,   66,
      847,  847,  466,  847,   66,  847,  467,   66,   64,   64,
       64,  847,  847,  468,  847,  847,  469,  847,  470,   66,
      847,  471,  847,   64,   64,   64,  472,  475,  847,   64,

       64,   64,  847,  473,   66,  474,  847,  847,  847,  477,
       66,   64,   64,   64,   64,   64,   64,  476,   64,   64,
       64,  847,   66,  847,  847,   66,   64,   64,   64,   66,
       64,   64,   64,   64,   64,   64,  847,   66,   64,   64,
       64,   66,  478,  847,   66,   64,   64,   64,  847,   66,
      847,  479,  847,   64,   64,   64,   66,  482,  847,   64,
       64,   64,  847,  480,   66,  481,  847,  847,  484,  483,
       66,   64,   64,   64,   64,   64,   64,  485,   64,   64,
       64,  847,   66,  847,  847,   66,  847,  847,  487,   66,
       64,   64,   64,  847,  488,   64,   64,   64,  847,  486,

      847,   66,   64,   64,   64,  847,   66,   64,   64,   64,
       64,   64,   64,   66,  847,  847,  489,  847,   66,  847,
      847,   66,   64,   64,   64,  491,  847,  490,   64,   64,
       64,  847,  847,   66,   64,   64,   64,  847,  847,   66,
      847,  847,  494,  492,  493,   66,   64,   64,   64,   64,
       64,   64,  500,  500,  500,  847,  847,   66,  847,  847,
       66,  847,  496,   66,   64,   64,   64,   64,   64,   64,
      847,  847,  847,  495,  847,   66,  847,  847,   66,   64,
       64,   64,  847,  497,  847,  847,  501,  498,  847,  847,
       66,   64,   64,   64,   64,   64,   64,  847,  502,  847,

      499,  847,   66,  847,  847,   66,   64,   64,   64,   64,
       64,   64,  847,  503,   64,   64,   64,   66,  847,  847,
       66,  847,  505,  847,  847,   66,   64,   64,   64,  847,
       64,   64,   64,  847,  847,  847,  847,   66,  847,  847,
      506,   66,  847,  847,  509,  507,  847,   64,   64,   64,
      847,   64,   64,   64,   64,   64,   64,  510,   66,  508,
      847,  511,   66,  847,  847,   66,   64,   64,   64,   64,
       64,   64,   64,   64,   64,  847,  847,   66,  847,  847,
       66,  847,  847,   66,   64,   64,   64,   64,   64,   64,
      512,  847,  847,  514,  847,   66,  847,  847,   66,   64,

       64,   64,  847,  847,  513,  847,  847,  517,  847,  847,
       66,   64,   64,   64,   64,   64,   64,  515,   64,   64,
       64,  516,   66,  847,  847,   66,   64,   64,   64,   66,
       64,   64,   64,  847,  847,  518,  847,   66,  847,  847,
      519,   66,   64,   64,   64,  847,  520,  847,  521,   64,
       64,   64,  847,   66,   64,   64,   64,  522,  847,  847,
       66,  524,   64,   64,   64,   66,  847,  523,  847,   64,
       64,   64,  847,   66,   64,   64,   64,   64,   64,   64,
       66,   64,   64,   64,  847,   66,  847,  847,   66,  847,
      847,  847,   66,  847,  847,  525,   64,   64,   64,  526,

      529,  847,  527,   64,   64,   64,  847,   66,  847,  528,
      847,  847,  847,  847,   66,   64,   64,   64,   64,   64,
       64,  530,  532,   64,   64,   64,   66,  847,  531,   66,
       64,   64,   64,  847,   66,   64,   64,   64,  847,  847,
      533,   66,   64,   64,   64,  847,   66,   64,   64,   64,
      847,  847,  847,   66,  847,   64,   64,   64,   66,  847,
      847,  535,  847,  847,  537,  847,   66,  534,   64,   64,
       64,  847,  538,  847,  536,   64,   64,   64,  847,   66,
      847,  847,  540,  847,  847,  847,   66,   64,   64,   64,
       64,   64,   64,  847,  539,  541,  847,  847,   66,  847,

      847,   66,   64,   64,   64,  847,   64,   64,   64,  847,
      543,  847,  847,   66,  847,  847,  542,   66,   64,   64,
       64,  546,   64,   64,   64,  545,   64,   64,   64,   66,
      847,  847,  547,   66,   64,   64,   64,   66,  847,  847,
      544,  847,  548,  847,  847,   66,   64,   64,   64,   64,
       64,   64,   64,   64,   64,  847,  847,   66,  847,  847,
       66,  847,  847,   66,   64,   64,   64,   64,   64,   64,
      847,  549,  847,  551,  847,   66,  847,  847,   66,  550,
      847,  552,   64,   64,   64,  847,  847,   64,   64,   64,
      847,  847,  847,   66,  847,  847,  553,  554,   66,   64,

       64,   64,   64,   64,   64,   64,   64,   64,  847,  555,
       66,  847,  847,   66,  847,  847,   66,  847,  556,   64,
       64,   64,   64,   64,   64,  847,  847,  557,  847,  847,
       66,  847,  847,   66,  847,  847,  559,  847,  558,   64,
       64,   64,   64,   64,   64,   64,   64,   64,  560,  847,
       66,  847,  847,   66,  847,  847,   66,  847,  561,  847,
       64,   64,   64,   64,   64,   64,   64,   64,   64,  847,
      847,   66,  847,  847,   66,  847,  847,   66,  847,  847,
      563,   64,   64,   64,  847,  500,  500,  500,   64,   64,
       64,  847,   66,  847,  562,  564,   66,  847,  567,   66,

      847,  847,  847,   64,   64,   64,   64,   64,   64,  847,
      847,  160,  565,  566,   66,  847,  847,   66,  847,  847,
      569,  570,  847,  571,  572,  847,  847,  568,   64,   64,
       64,   64,   64,   64,   64,   64,   64,  161,  847,   66,
      847,  577,   66,  847,  847,   66,   64,   64,   64,  578,
      847,  847,  573,  574,  847,  575,  847,   66,  576,   64,
       64,   64,  847,  847,   64,   64,   64,   64,   64,   64,
       66,  847,  847,  582,  581,   66,  847,  847,   66,  847,
      847,  580,   64,   64,   64,   64,   64,   64,  847,  583,
       64,   64,   64,   66,  847,  847,   66,   64,   64,   64,

      847,   66,   64,   64,   64,  847,  584,  847,   66,  847,
      847,  847,  585,   66,   64,   64,   64,  847,  847,  847,
      586,   64,   64,   64,  847,   66,  847,  847,  588,  847,
      587,  847,   66,  847,   64,   64,   64,   64,   64,   64,
       64,   64,   64,  589,  590,   66,  847,  847,   66,  847,
      847,   66,  847,  847,  591,   64,   64,   64,  593,  847,
      847,  592,   64,   64,   64,  847,   66,   64,   64,   64,
       64,   64,   64,   66,  595,  847,  847,  847,   66,  847,
      847,   66,   64,   64,   64,  847,  594,  847,  596,   64,
       64,   64,  847,   66,   64,   64,   64,   64,   64,   64,

       66,  847,  847,  597,  600,   66,  847,  847,   66,  847,
      598,   64,   64,   64,  847,  847,  603,   64,   64,   64,
      599,  847,   66,   64,   64,   64,  847,  847,   66,   64,
       64,   64,  601,  847,   66,  847,   64,   64,   64,  847,
       66,   64,   64,   64,  847,  847,  604,   66,  602,   64,
       64,   64,   66,  847,   64,   64,   64,   64,   64,   64,
       66,  847,  605,  847,  847,   66,  847,  847,   66,   64,
       64,   64,  847,   64,   64,   64,   64,   64,   64,  847,
       66,  847,  847,  608,   66,  847,  847,   66,  847,  606,
       64,   64,   64,  607,  609,  847,  610,   64,   64,   64,

      847,   66,  847,  611,   64,   64,   64,  847,   66,   64,
       64,   64,   64,   64,   64,   66,   64,   64,   64,  847,
       66,  847,  847,   66,  612,  847,  847,   66,  613,   64,
       64,   64,   64,   64,   64,   64,   64,   64,  847,  847,
       66,  847,  847,   66,  847,  847,   66,  615,  847,  847,
      614,  847,   64,   64,   64,   64,   64,   64,  847,  617,
      847,  847,  616,   66,  847,  847,   66,  847,  847,  618,
      847,  847,  619,  847,  620,   64,   64,   64,   64,   64,
       64,   64,   64,   64,  847,  847,   66,  847,  847,   66,
      847,  847,   66,   64,   64,   64,   64,   64,   64,   64,

       64,   64,  847,  847,   66,  847,  847,   66,  621,  847,
       66,   64,   64,   64,   64,   64,   64,  847,   64,   64,
       64,  847,   66,  623,  847,   66,  847,  847,  622,   66,
      847,  625,   64,   64,   64,  624,  847,  626,   64,   64,
       64,  847,  847,   66,  847,   64,   64,   64,  847,   66,
      627,  847,   64,   64,   64,  847,   66,  847,   64,   64,
       64,  847,  628,   66,  847,  629,   64,   64,   64,   66,
       64,   64,   64,   64,   64,   64,  847,   66,  847,  847,
      847,   66,  847,  847,   66,   64,   64,   64,  847,  630,
      631,   64,   64,   64,  847,  847,   66,   64,   64,   64,

      847,  847,   66,  847,  847,  632,  633,  847,   66,   64,
       64,   64,  847,  637,   64,   64,   64,  634,  847,  847,
       66,   64,   64,   64,  638,   66,  639,   64,   64,   64,
      847,  847,   66,   64,   64,   64,  847,  847,   66,   64,
       64,   64,  847,  847,   66,   64,   64,   64,  847,  642,
       66,  640,   64,   64,   64,  847,   66,   64,   64,   64,
      847,  847,  641,   66,   64,   64,   64,  847,   66,   64,
       64,   64,  847,  648,  644,   66,  646,  847,  643,  847,
       66,  847,  647,   64,   64,   64,   64,   64,   64,  847,
       64,   64,   64,  847,   66,  847,  847,   66,  847,  847,

      649,   66,   64,   64,   64,   64,   64,   64,  652,  847,
      650,  651,  847,   66,  847,  847,   66,   64,   64,   64,
       64,   64,   64,  847,   64,   64,   64,  847,   66,  655,
      653,   66,  847,  847,  654,   66,   64,   64,   64,   64,
       64,   64,   64,   64,   64,  847,  847,   66,  847,  847,
       66,  847,  847,   66,   64,   64,   64,  847,  847,  657,
       64,   64,   64,  847,  847,   66,   64,   64,   64,  847,
      656,   66,   64,   64,   64,  658,  847,   66,  847,   64,
       64,   64,  847,   66,  847,  847,  659,  847,  847,  660,
       66,  847,   64,   64,   64,  847,  847,  661,  847,  662,

      847,  847,  663,   66,  847,  664,  847,  847,   64,   64,
       64,   64,   64,   64,   64,   64,   64,  665,  667,   66,
      847,  847,   66,  847,  666,   66,   64,   64,   64,   64,
       64,   64,   64,   64,   64,  847,  847,   66,  847,  847,
       66,  847,  847,   66,  670,  847,   64,   64,   64,   64,
       64,   64,  847,  847,  668,  847,  847,   66,  847,  847,
       66,   64,   64,   64,  847,   64,   64,   64,  847,  847,
      847,  847,   66,  847,  847,  671,   66,  847,  847,  669,
      672,   64,   64,   64,   64,   64,   64,  847,  847,  673,
      847,  847,   66,  847,  847,   66,   64,   64,   64,   64,

       64,   64,  847,  847,  675,  847,  847,   66,  847,  847,
       66,   64,   64,   64,  674,   64,   64,   64,  847,  847,
      676,  677,   66,   64,   64,   64,   66,   64,   64,   64,
       64,   64,   64,  847,   66,  678,  847,  679,   66,  847,
      847,   66,   64,   64,   64,  847,  680,   64,   64,   64,
       64,   64,   64,   66,   64,   64,   64,  847,   66,  847,
      681,   66,  847,  847,  847,   66,   64,   64,   64,  682,
      683,  847,  847,  684,   64,   64,   64,   66,   64,   64,
       64,   64,   64,   64,  847,   66,  685,  847,  847,   66,
      847,  847,   66,   64,   64,   64,  847,   64,   64,   64,

      847,  686,  847,  847,   66,   64,   64,   64,   66,   64,
       64,   64,   64,   64,   64,  847,   66,   64,   64,   64,
       66,  687,  847,   66,   64,   64,   64,  847,   66,  847,
      847,  688,  691,  847,  847,   66,  847,  847,  690,  689,
      847,   64,   64,   64,   64,   64,   64,  847,  693,   64,
       64,   64,   66,  847,  692,   66,  847,  697,  847,  847,
       66,   64,   64,   64,  847,  696,   64,   64,   64,   64,
       64,   64,   66,  847,  847,  698,  699,   66,  847,  700,
       66,   64,   64,   64,   64,   64,   64,  847,   64,   64,
       64,  847,   66,  847,  701,   66,   64,   64,   64,   66,

      847,  847,   64,   64,   64,  847,  847,   66,  703,   64,
       64,   64,  847,   66,   64,   64,   64,   64,   64,   64,
       66,   64,   64,   64,  847,   66,  847,  847,   66,   64,
       64,   64,   66,  847,  704,  706,  707,  705,  847,  847,
       66,  847,  847,  708,   64,   64,   64,   64,   64,   64,
       64,   64,   64,  847,  847,   66,  847,  847,   66,  847,
      847,   66,  847,  711,  709,   64,   64,   64,   64,   64,
       64,  847,  710,   64,   64,   64,   66,  847,  712,   66,
       64,   64,   64,  847,   66,  847,  847,  847,  714,  847,
      847,   66,   64,   64,   64,  847,  713,   64,   64,   64,

      847,  847,  847,   66,  847,  847,  847,  716,   66,   64,
       64,   64,  847,  847,  847,  715,   64,   64,   64,  717,
       66,   64,   64,   64,   64,   64,   64,   66,  847,   64,
       64,   64,   66,  847,  847,   66,  847,  847,  847,  718,
       66,  847,   64,   64,   64,  847,  847,  719,  721,  847,
      847,  720,  722,   66,   64,   64,   64,   64,   64,   64,
      723,   64,   64,   64,  847,   66,  847,  847,   66,   64,
       64,   64,   66,  847,  724,   64,   64,   64,  847,  847,
       66,  847,   64,   64,   64,  847,   66,  725,   64,   64,
       64,  847,  728,   66,  726,   64,   64,   64,  847,   66,

      727,   64,   64,   64,  847,  847,   66,   64,   64,   64,
      847,  847,   66,   64,   64,   64,  729,  847,   66,   64,
       64,   64,  730,  847,   66,  847,  731,   64,   64,   64,
       66,   64,   64,   64,   64,   64,   64,  847,   66,   64,
       64,   64,   66,  847,  847,   66,  733,   64,   64,   64,
       66,  847,  732,   64,   64,   64,  734,  847,   66,   64,
       64,   64,  736,  847,   66,   64,   64,   64,  737,  847,
       66,   64,   64,   64,  735,  847,   66,   64,   64,   64,
      847,  847,   66,   64,   64,   64,  847,  847,   66,   64,
       64,   64,  847,  847,   66,   64,   64,   64,  847,  847,

       66,   64,   64,   64,  847,  847,   66,  847,   64,   64,
       64,  847,   66,  847,   64,   64,   64,  847,  738,   66,
      847,  847,  743,  739,  740,   66,  847,   64,   64,   64,
       64,   64,   64,   64,   64,   64,  847,  744,   66,  847,
      847,   66,  847,  847,   66,   64,   64,   64,  745,   64,
       64,   64,   64,   64,   64,  847,   66,  847,  847,  847,
       66,  746,  847,   66,   64,   64,   64,  847,  747,   64,
       64,   64,   64,   64,   64,   66,   64,   64,   64,  749,
       66,  751,  847,   66,  750,  847,  847,   66,  753,   64,
       64,   64,   64,   64,   64,   64,   64,   64,  752,  847,

       66,  847,  847,   66,  847,  847,   66,   64,   64,   64,
      847,   64,   64,   64,  847,  847,  754,  847,   66,  847,
      847,  755,   66,  756,  847,   64,   64,   64,  847,  757,
       64,   64,   64,  847,  847,  758,   66,  847,   64,   64,
       64,   66,   64,   64,   64,   64,   64,   64,  759,   66,
      760,  847,  761,   66,  847,  847,   66,   64,   64,   64,
       64,   64,   64,  762,   64,   64,   64,  847,   66,  763,
      847,   66,  847,  847,  847,   66,   64,   64,   64,   64,
       64,   64,  847,  764,  765,  847,  847,   66,  847,  847,
       66,   64,   64,   64,  847,   64,   64,   64,   64,   64,

       64,  847,   66,  767,  847,  766,   66,  847,  847,   66,
       64,   64,   64,  847,   64,   64,   64,  847,  847,  768,
      847,   66,  847,  847,  769,   66,   64,   64,   64,   64,
       64,   64,  847,  847,  770,  771,  847,   66,  847,  847,
       66,  772,  847,   64,   64,   64,   64,   64,   64,   64,
       64,   64,  847,  773,   66,  847,  847,   66,  847,  847,
       66,   64,   64,   64,  847,  847,  775,  774,   64,   64,
       64,  847,   66,   64,   64,   64,   64,   64,   64,   66,
      847,  847,  776,  847,   66,  847,  847,   66,  778,  847,
      847,  777,   64,   64,   64,   64,   64,   64,   64,   64,

       64,  847,  847,   66,  847,  847,   66,  847,  847,   66,
       64,   64,   64,   64,   64,   64,  847,   64,   64,   64,
      847,   66,  847,  847,   66,  847,  779,  782,   66,   64,
       64,   64,  847,   64,   64,   64,  847,  785,  847,  847,
       66,  847,  847,  783,   66,   64,   64,   64,  784,  786,
       64,   64,   64,   64,   64,   64,   66,  847,   64,   64,
       64,   66,  847,  847,   66,   64,   64,   64,  788,   66,
      847,   64,   64,   64,  847,  847,   66,  847,  789,  847,
      847,  790,   66,   64,   64,   64,  847,   64,   64,   64,
       64,   64,   64,  847,   66,  847,  847,  792,   66,  847,

      847,   66,  847,  791,   64,   64,   64,   64,   64,   64,
       64,   64,   64,  847,  847,   66,  847,  847,   66,  847,
      847,   66,  847,  793,  794,  847,  847,  795,   64,   64,
       64,  847,  847,  796,   64,   64,   64,  847,  847,   66,
       64,   64,   64,  847,  847,   66,   64,   64,   64,  798,
      847,   66,  847,  847,  797,  847,  847,   66,   64,   64,
       64,   64,   64,   64,  847,   64,   64,   64,  847,   66,
      847,  847,   66,   64,   64,   64,   66,  847,  847,  799,
      847,   64,   64,   64,   66,   64,   64,   64,   64,   64,
       64,  800,   66,   64,   64,   64,   66,  801,  847,   66,

       64,   64,   64,  847,   66,  847,  847,  802,  803,  847,
      847,   66,  847,  804,  847,  847,  806,   64,   64,   64,
       64,   64,   64,   64,   64,   64,  847,  805,   66,  847,
      847,   66,  847,  847,   66,   64,   64,   64,   64,   64,
       64,   64,   64,   64,  847,  847,   66,  847,  847,   66,
      847,  847,   66,   64,   64,   64,   64,   64,   64,   64,
       64,   64,  847,  847,   66,  847,  847,   66,  847,  847,
       66,  847,  807,  847,  809,   64,   64,   64,   64,   64,
       64,   64,   64,   64,  847,  847,   66,  847,  847,   66,
      847,  847,   66,  847,  847,  811,   64,   64,   64,   64,

       64,   64,   64,   64,   64,  847,  847,   66,  847,  847,
       66,  812,  847,   66,   64,   64,   64,  847,  813,   64,
       64,   64,  847,  847,  847,   66,   64,   64,   64,  847,
       66,  847,  847,  814,  847,  847,  847,   66,   64,   64,
       64,  847,  816,  847,  847,  815,   64,   64,   64,   66,
      847,   64,   64,   64,   64,   64,   64,   66,   64,   64,
       64,  817,   66,  847,  847,   66,   64,   64,   64,   66,
      847,  847,  818,   64,   64,   64,  847,   66,   64,   64,
       64,   64,   64,   64,   66,  819,   64,   64,   64,   66,
      847,  847,   66,  820,   64,   64,   64,   66,   64,   64,

       64,  847,  847,  821,  847,   66,   64,   64,   64,   66,
      847,  847,  822,   64,   64,   64,  847,   66,  847,  847,
      824,  823,  847,  847,   66,   64,   64,   64,   64,   64,
       64,   64,   64,   64,  847,  847,   66,  847,  847,   66,
      847,  847,   66,   64,   64,   64,   64,   64,   64,   64,
       64,   64,  847,  826,   66,  847,  847,   66,  847,  847,
       66,  827,  847,  847,  828,  847,   64,   64,   64,   64,
       64,   64,   64,   64,   64,  847,  829,   66,  847,  847,
       66,  847,  847,   66,   64,   64,   64,   64,   64,   64,
       64,   64,   64,  847,  847,   66,  847,  847,   66,  847,

      847,   66,   64,   64,   64,  830,   64,   64,   64,   64,
       64,   64,  847,   66,   64,   64,   64,   66,  831,  847,
       66,   64,   64,   64,  847,   66,   64,   64,   64,  847,
      847,  832,   66,  847,   64,   64,   64,   66,  847,  847,
      834,   64,   64,   64,  835,   66,   64,   64,   64,  847,
      847,  847,   66,  836,   64,   64,   64,   66,  847,  847,
      837,   64,   64,   64,  847,   66,  847,  838,   64,   64,
       64,  847,   66,   64,   64,   64,   64,   64,   64,   66,
      847,  847,  847,  847,   66,  840,  847,   66,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  842,  847,

      847,  847,  847,  847,  847,  847,  847,  844,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  846,   54,   54,   54,   54,
       54,   54,   54,   54,   58,   58,   58,   58,   58,   58,
       58,   58,   10,   10,   10,   10,   10,   10,   10,   10,
       65,   65,   65,   78,   78,   78,   78,   78,   78,   78,
       78,   85,  847,   85,   85,  151,  151,  151,  151,  151,
      151,  151,  152,  152,  152,  152,  152,  152,  153,  153,
      847,  153,  153,  153,  153,  154,  154,  154,  154,  847,
      154,  154,  154,  155,  155,  155,  155,  847,  155,  847,

      155,  156,  156,  847,  156,  847,  156,  156,  156,  184,
      847,  184,    9,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847
    } ;

static yyconst short int yy_chk[5576] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    4,    4,  860,    5,    5,    3,
       13,    4,    5,   13,    5,    6,    6,    7,    7,  843,
        6,  841,    6,    8,    8,   11,   11,   11,   17,   19,
       19,   17,   24,   24,   24,   18,   18,  839,   18,   21,

       21,   21,   60,   24,  833,   60,  825,   18,   54,   54,
       21,   22,   22,   22,  810,   54,  787,   25,   25,   25,
      781,    3,   22,    4,   12,   12,   12,   18,   25,   62,
       62,   63,   63,   63,  742,   12,   23,   23,   23,   12,
       12,   12,   12,   12,   12,  741,   21,   23,   26,   26,
       26,   12,   12,   12,   12,   12,   27,   27,   27,   26,
      159,  159,   22,   58,   58,  695,   78,   27,   25,   78,
       58,   23,  694,   89,   25,   27,   89,  645,   23,   28,
       28,   28,   79,   79,   23,   79,  157,   23,  636,  157,
       28,   29,   29,   29,   86,   86,   26,   86,  179,   26,

      635,  179,   29,   30,   30,   30,   31,   31,   31,   32,
       32,   32,  151,  151,   30,  579,  570,   31,   28,  151,
       32,  569,   33,   33,   33,  504,   34,   34,   34,  448,
       30,  154,  154,   33,   35,   35,   35,   34,  154,   29,
      428,   33,  369,  181,  181,   35,  181,  344,   32,  185,
      185,   30,  185,   35,  277,   31,   36,   36,   36,  186,
      254,   33,  186,   32,   33,   34,  253,   36,   37,   37,
       37,   38,   38,   38,  161,   33,  160,   34,  367,   37,
      276,  276,   38,  276,   39,   39,   39,  367,   20,   43,
       43,   43,   16,   36,   15,   39,    9,   40,   40,   40,

       43,   36,    0,   36,   41,   41,   41,  367,   40,    0,
        0,   37,   44,   44,   44,   41,   38,    0,   38,   42,
       42,   42,  368,   44,    0,  368,   37,   39,   38,    0,
       42,  447,   43,    0,  447,   39,   40,   45,   45,   45,
        0,   46,   46,   46,    0,   47,   47,   47,   45,    0,
        0,   41,   46,    0,    0,   41,   47,    0,   42,    0,
       44,   48,   48,   48,    0,    0,   49,   49,   49,  702,
      702,  702,   48,    0,   50,   50,   50,   49,    0,   47,
       46,   51,   51,   51,   47,   50,   45,    0,   45,    0,
        0,    0,   51,    0,    0,   48,   52,   52,   52,   47,

       48,   49,   64,   64,   64,   49,    0,   52,    0,   48,
        0,    0,    0,   64,    0,   48,   51,   49,   65,   65,
       65,   50,   67,   67,   67,   68,   68,   68,   64,   65,
        0,   52,    0,   67,    0,    0,   68,    0,    0,   52,
       69,   69,   69,    0,   70,   70,   70,   71,   71,   71,
        0,   69,    0,    0,   64,   70,    0,    0,   71,   67,
       68,   72,   72,   72,   73,   73,   73,    0,   74,   74,
       74,    0,   72,   68,    0,   73,  106,  106,  106,   74,
        0,    0,    0,   70,   75,   75,   75,  106,   69,   76,
       76,   76,    0,    0,   71,   75,   77,   77,   77,    0,

       76,    0,   71,   74,    0,   81,   81,   77,   81,   93,
       93,   93,   72,   73,    0,   72,    0,   81,    0,   74,
       93,   87,   87,   75,   87,    0,   88,   88,   76,   88,
       94,   94,   94,   87,    0,   77,    0,   81,   88,   77,
        0,   94,    0,    0,   95,   95,   95,    0,   96,   96,
       96,    0,   93,   87,   77,   95,    0,    0,   88,   96,
       97,   97,   97,   98,   98,   98,   99,   99,   99,   94,
        0,   97,    0,    0,   98,    0,    0,   99,    0,  100,
      100,  100,  101,  101,  101,    0,  102,  102,  102,   95,
      100,    0,    0,  101,    0,    0,   96,  102,  103,  103,

      103,   99,   98,  104,  104,  104,    0,   97,    0,  103,
        0,    0,    0,    0,  104,  105,  105,  105,  107,  107,
      107,  102,  100,    0,  103,    0,  105,    0,    0,  107,
      108,  108,  108,  101,    0,  107,  109,  109,  109,    0,
        0,  108,  104,  110,  110,  110,    0,  109,  107,  111,
      111,  111,    0,  105,  110,  112,  112,  112,    0,    0,
      111,    0,  105,    0,    0,  107,  112,  113,  113,  113,
        0,  107,  111,  114,  114,  114,    0,    0,  113,    0,
        0,  108,    0,    0,  114,  115,  115,  115,  109,    0,
      110,  116,  116,  116,  112,    0,  115,    0,  117,  117,

      117,    0,  116,  118,  118,  118,    0,    0,  114,  117,
      119,  119,  119,    0,  118,  113,  120,  120,  120,    0,
        0,  119,  121,  121,  121,    0,  116,  120,  117,  122,
      122,  122,    0,  121,    0,    0,  115,  123,  123,  123,
      122,  124,  124,  124,  125,  125,  125,    0,  123,    0,
        0,  119,  124,    0,  120,  125,  118,  126,  126,  126,
        0,    0,    0,  122,    0,  127,  127,  127,  126,  128,
      128,  128,  129,  129,  129,  121,  127,  130,  130,  130,
      128,    0,  123,  129,    0,  131,  131,  131,  130,  132,
      132,  132,    0,  125,    0,  124,  131,  748,  748,  748,

      132,  133,  133,  133,    0,  134,  134,  134,  126,    0,
        0,  127,  133,  127,    0,    0,  134,    0,  135,  135,
      135,    0,  128,  748,    0,  129,    0,    0,  130,  135,
        0,  136,  136,  136,    0,  133,  132,  137,  137,  137,
        0,  132,  136,  131,  134,  139,  139,  139,  137,  138,
      138,  138,  133,  140,  140,  140,  139,  141,  141,  141,
      138,  142,  142,  142,  140,  143,  143,  143,  141,  144,
      144,  144,  142,    0,    0,    0,  143,    0,    0,    0,
      144,    0,  136,    0,  138,    0,  138,    0,  137,  140,
      139,    0,  141,  145,  145,  145,    0,  146,  146,  146,

        0,    0,  143,    0,  145,  144,    0,  142,  146,  147,
      147,  147,  148,  148,  148,  149,  149,  149,    0,    0,
      147,    0,    0,  148,    0,    0,  149,  150,  150,  150,
        0,    0,  146,  162,  162,  162,    0,    0,  150,  145,
      146,    0,    0,    0,  162,  163,  163,  163,    0,    0,
      145,    0,  147,  164,  164,  164,  163,  148,  165,  165,
      165,  166,  166,  166,  164,  167,  167,  167,  149,  165,
        0,    0,  166,  168,  168,  168,  167,  169,  169,  169,
      150,    0,  163,    0,  168,    0,  162,    0,  169,    0,
        0,  164,    0,    0,    0,  170,  170,  170,  166,  171,

      171,  171,    0,  167,  165,  165,  170,    0,  168,    0,
      171,    0,  169,  172,  172,  172,    0,  173,  173,  173,
        0,  175,  175,  175,  172,  174,  174,  174,  173,  176,
      176,  176,  175,  177,  177,  177,  174,    0,  171,    0,
      176,    0,  170,    0,  177,  178,  178,  178,    0,  183,
      183,    0,  183,    0,    0,    0,  178,  187,  187,  187,
        0,  183,    0,    0,  172,  173,  172,    0,  187,    0,
      174,  175,  188,  188,  188,    0,    0,  174,    0,  177,
      176,  183,    0,  188,  189,  189,  189,  190,  190,  190,
      191,  191,  191,    0,  178,  189,    0,    0,  190,    0,

        0,  191,    0,  187,  192,  192,  192,  188,  193,  193,
      193,  194,  194,  194,    0,  192,  195,  195,  195,  193,
        0,  189,  194,  196,  196,  196,    0,  195,    0,    0,
      190,  198,  198,  198,  196,  197,  197,  197,    0,  192,
        0,    0,  198,    0,    0,  191,  197,  199,  199,  199,
      195,  200,  200,  200,  197,  201,  201,  201,  199,    0,
      193,    0,  200,  194,    0,    0,  201,    0,    0,  196,
      202,  202,  202,  203,  203,  203,  204,  204,  204,    0,
      198,  202,    0,    0,  203,    0,  199,  204,  205,  205,
      205,    0,  203,    0,  200,    0,    0,  201,    0,  205,

        0,    0,  206,  206,  206,  207,  207,  207,    0,    0,
      204,  205,  202,  206,    0,    0,  207,    0,  208,  208,
      208,  209,  209,  209,  210,  210,  210,    0,    0,  208,
        0,    0,  209,    0,    0,  210,  211,  211,  211,  207,
        0,  212,  212,  212,  213,  213,  213,  211,    0,    0,
      206,  208,  212,    0,    0,  213,  206,    0,    0,  209,
      214,  214,  214,  215,  215,  215,  216,  216,  216,    0,
        0,  214,    0,    0,  215,    0,    0,  216,    0,    0,
      210,  213,  217,  217,  217,    0,    0,  212,    0,  211,
      218,  218,  218,  217,    0,    0,  219,  219,  219,    0,

        0,  218,  220,  220,  220,    0,  215,  219,  221,  221,
      221,    0,    0,  220,  216,  222,  222,  222,    0,  221,
      223,  223,  223,  224,  224,  224,  222,    0,  225,  225,
      225,  223,  275,  275,  224,  275,  218,    0,  219,  225,
        0,  226,  226,  226,  275,  220,    0,  227,  227,  227,
        0,    0,  226,    0,  221,    0,    0,  224,  227,  228,
      228,  228,    0,  222,  275,  229,  229,  229,    0,    0,
      228,    0,  223,    0,  225,  226,  229,  230,  230,  230,
      231,  231,  231,  232,  232,  232,  227,    0,  230,    0,
        0,  231,    0,    0,  232,  233,  233,  233,  228,    0,

        0,  229,  234,  234,  234,    0,  233,    0,  235,  235,
      235,    0,    0,  234,    0,    0,  230,    0,    0,  235,
      236,  236,  236,  237,  237,  237,  238,  238,  238,    0,
        0,  236,    0,  231,  237,    0,  232,  238,  239,  239,
      239,  233,    0,    0,  240,  240,  240,    0,    0,  239,
      241,  241,  241,  234,  235,  240,  242,  242,  242,  236,
        0,  241,  243,  243,  243,    0,    0,  242,  237,  244,
      244,  244,    0,  243,  245,  245,  245,  239,    0,  238,
      244,  246,  246,  246,    0,  245,    0,    0,    0,    0,
      240,    0,  246,    0,    0,  242,  247,  247,  247,    0,

        0,  241,    0,    0,  243,    0,    0,  247,    0,  248,
      248,  248,    0,    0,  244,  249,  249,  249,    0,    0,
      248,    0,    0,  245,    0,    0,  249,  250,  250,  250,
      251,  251,  251,  247,  246,  252,  252,  252,  250,    0,
        0,  251,    0,  247,  248,    0,  252,  255,  255,  255,
      256,  256,  256,    0,    0,  249,    0,    0,  255,    0,
        0,  256,  257,  257,  257,    0,    0,  251,  258,  258,
      258,    0,    0,  257,  259,  259,  259,  252,    0,  258,
        0,  250,  260,  260,  260,  259,  261,  261,  261,    0,
      255,    0,    0,  260,  256,    0,    0,  261,  262,  262,

      262,    0,  263,  263,  263,  264,  264,  264,    0,  262,
        0,    0,  259,  263,    0,    0,  264,  258,    0,    0,
      257,  265,  265,  265,    0,  260,  259,  266,  266,  266,
        0,    0,  265,  267,  267,  267,    0,    0,  266,  268,
      268,  268,  264,  262,  267,  269,  269,  269,  263,    0,
      268,    0,  270,  270,  270,    0,  269,  271,  271,  271,
        0,    0,  266,  270,  272,  272,  272,    0,  271,  273,
      273,  273,  265,    0,    0,  272,  268,  274,  274,  274,
      273,    0,    0,    0,  269,    0,  267,    0,  274,    0,
      278,  278,  278,  279,  279,  279,  280,  280,  280,    0,

      270,  278,    0,    0,  279,    0,  270,  280,  273,    0,
      272,  271,  281,  281,  281,    0,  274,  282,  282,  282,
      283,  283,  283,  281,    0,  278,    0,    0,  282,    0,
        0,  283,  284,  284,  284,    0,    0,  279,    0,    0,
      285,  285,  285,  284,  286,  286,  286,    0,    0,  281,
      280,  285,  287,  287,  287,  286,  282,    0,    0,  286,
        0,    0,    0,  287,    0,  288,  288,  288,  289,  289,
      289,  284,    0,  283,    0,    0,  288,    0,    0,  289,
        0,  290,  290,  290,  291,  291,  291,    0,  292,  292,
      292,  287,  290,  285,  288,  291,  293,  293,  293,  292,

      294,  294,  294,    0,    0,    0,    0,  293,  296,  296,
      296,  294,    0,  295,  295,  295,    0,    0,    0,  296,
      297,  297,  297,  292,  295,    0,  290,  292,  298,  298,
      298,  297,  295,  295,  299,  299,  299,  291,    0,  298,
      300,  300,  300,    0,  293,  299,    0,  296,    0,    0,
        0,  300,  301,  301,  301,    0,    0,  294,    0,  300,
      302,  302,  302,  301,  299,  303,  303,  303,  304,  304,
      304,  302,    0,  298,  297,    0,  303,    0,    0,  304,
      305,  305,  305,    0,  306,  306,  306,  307,  307,  307,
        0,  305,    0,    0,  302,  306,    0,    0,  307,  308,

      308,  308,  309,  309,  309,  310,  310,  310,  303,    0,
      308,  304,    0,  309,    0,    0,  310,    0,    0,  305,
      311,  311,  311,    0,  312,  312,  312,    0,    0,    0,
        0,  311,    0,    0,  308,  312,    0,    0,  307,  306,
      313,  313,  313,    0,    0,  309,  314,  314,  314,    0,
        0,  313,    0,    0,  310,    0,    0,  314,    0,  311,
        0,  315,  315,  315,  316,  316,  316,  317,  317,  317,
        0,  312,  315,    0,    0,  316,    0,    0,  317,  318,
      318,  318,    0,  314,  319,  319,  319,  320,  320,  320,
      318,    0,    0,  313,    0,  319,    0,    0,  320,  321,

      321,  321,  322,  322,  322,  323,  323,  323,  317,    0,
      321,    0,    0,  322,    0,    0,  323,    0,    0,  316,
      318,    0,  324,  324,  324,  325,  325,  325,  326,  326,
      326,    0,  319,  324,    0,    0,  325,    0,    0,  326,
      323,  327,  327,  327,  328,  328,  328,  329,  329,  329,
        0,    0,  327,  322,    0,  328,    0,  324,  329,    0,
      325,  330,  330,  330,    0,  326,  331,  331,  331,  332,
      332,  332,  330,  333,  333,  333,    0,  331,    0,    0,
      332,  334,  334,  334,  333,  335,  335,  335,  336,  336,
      336,    0,  334,  337,  337,  337,  335,    0,    0,  336,

      338,  338,  338,  331,  337,    0,    0,  333,    0,    0,
      330,  338,  339,  339,  339,  340,  340,  340,    0,    0,
      334,    0,    0,  339,    0,    0,  340,  341,  341,  341,
        0,    0,  337,  335,  342,  342,  342,    0,  341,  343,
      343,  343,  346,  346,  346,  342,  347,  347,  347,    0,
      343,    0,  338,  346,  348,  348,  348,  347,    0,  339,
      349,  349,  349,  340,    0,  348,  341,  350,  350,  350,
        0,  349,    0,  343,    0,    0,  342,    0,  350,    0,
      347,  351,  351,  351,    0,  352,  352,  352,  353,  353,
      353,    0,  351,    0,    0,  349,  352,  346,    0,  353,

      354,  354,  354,  355,  355,  355,  356,  356,  356,    0,
      350,  354,    0,    0,  355,    0,    0,  356,  357,  357,
      357,  358,  358,  358,  359,  359,  359,    0,    0,  357,
        0,    0,  358,    0,  351,  359,    0,  352,    0,  354,
        0,  356,  353,  360,  360,  360,  361,  361,  361,    0,
      362,  362,  362,    0,  360,    0,  355,  361,    0,    0,
      358,  362,    0,  359,  357,  363,  363,  363,  364,  364,
      364,  365,  365,  365,    0,    0,  363,    0,    0,  364,
        0,    0,  365,  366,  366,  366,  370,  370,  370,    0,
      371,  371,  371,    0,  366,  362,    0,  370,  360,    0,

      361,  371,  364,    0,  363,  372,  372,  372,  373,  373,
      373,  374,  374,  374,    0,    0,  372,    0,    0,  373,
        0,    0,  374,    0,  371,  375,  375,  375,    0,  376,
      376,  376,  377,  377,  377,    0,  375,    0,    0,  370,
      376,    0,    0,  377,  378,  378,  378,  373,    0,    0,
      372,    0,  379,  379,  379,  378,  380,  380,  380,  381,
      381,  381,  374,  379,  375,    0,    0,  380,    0,    0,
      381,  380,  382,  382,  382,    0,  383,  383,  383,  384,
      384,  384,    0,  382,    0,    0,  379,  383,    0,  378,
      384,    0,    0,  381,  385,  385,  385,  386,  386,  386,

      387,  387,  387,    0,    0,  385,    0,    0,  386,    0,
        0,  387,    0,  388,  388,  388,  384,  389,  389,  389,
      382,    0,    0,  383,  388,  390,  390,  390,  389,    0,
      391,  391,  391,  392,  392,  392,  390,  393,  393,  393,
      386,  391,    0,    0,  392,  394,  394,  394,  393,    0,
      385,  395,  395,  395,    0,    0,  394,  387,  396,  396,
      396,  388,  395,  397,  397,  397,  399,  399,  399,  396,
        0,    0,  389,    0,  397,    0,  390,  399,  398,  398,
      398,    0,    0,  391,    0,    0,  392,    0,  394,  398,
        0,  394,    0,  400,  400,  400,  394,  397,    0,  401,

      401,  401,    0,  395,  400,  396,    0,    0,    0,  399,
      401,  402,  402,  402,  403,  403,  403,  398,  404,  404,
      404,    0,  402,    0,    0,  403,  405,  405,  405,  404,
      406,  406,  406,  407,  407,  407,    0,  405,  408,  408,
      408,  406,  400,    0,  407,  409,  409,  409,    0,  408,
        0,  401,    0,  410,  410,  410,  409,  404,    0,  411,
      411,  411,    0,  402,  410,  403,    0,    0,  407,  406,
      411,  412,  412,  412,  413,  413,  413,  408,  414,  414,
      414,    0,  412,    0,    0,  413,    0,    0,  410,  414,
      415,  415,  415,    0,  411,  416,  416,  416,    0,  409,

        0,  415,  417,  417,  417,    0,  416,  418,  418,  418,
      419,  419,  419,  417,    0,    0,  412,    0,  418,    0,
        0,  419,  420,  420,  420,  414,    0,  413,  421,  421,
      421,    0,    0,  420,  422,  422,  422,    0,    0,  421,
        0,    0,  418,  415,  417,  422,  423,  423,  423,  424,
      424,  424,  425,  425,  425,    0,    0,  423,    0,    0,
      424,    0,  421,  425,  426,  426,  426,  427,  427,  427,
        0,    0,    0,  420,    0,  426,    0,    0,  427,  429,
      429,  429,    0,  422,    0,    0,  425,  423,    0,    0,
      429,  430,  430,  430,  431,  431,  431,    0,  426,    0,

      424,    0,  430,    0,    0,  431,  432,  432,  432,  433,
      433,  433,    0,  427,  434,  434,  434,  432,    0,    0,
      433,    0,  429,    0,    0,  434,  435,  435,  435,    0,
      436,  436,  436,    0,    0,    0,    0,  435,    0,    0,
      430,  436,    0,    0,  433,  431,    0,  437,  437,  437,
        0,  438,  438,  438,  439,  439,  439,  434,  437,  432,
        0,  435,  438,    0,    0,  439,  440,  440,  440,  441,
      441,  441,  442,  442,  442,    0,    0,  440,    0,    0,
      441,    0,    0,  442,  443,  443,  443,  444,  444,  444,
      437,    0,    0,  439,    0,  443,    0,    0,  444,  445,

      445,  445,    0,    0,  438,    0,    0,  442,    0,    0,
      445,  446,  446,  446,  449,  449,  449,  440,  450,  450,
      450,  441,  446,    0,    0,  449,  451,  451,  451,  450,
      452,  452,  452,    0,    0,  443,    0,  451,    0,    0,
      444,  452,  453,  453,  453,    0,  445,    0,  446,  454,
      454,  454,    0,  453,  455,  455,  455,  449,    0,    0,
      454,  451,  456,  456,  456,  455,    0,  450,    0,  457,
      457,  457,    0,  456,  458,  458,  458,  459,  459,  459,
      457,  460,  460,  460,    0,  458,    0,    0,  459,    0,
        0,    0,  460,    0,    0,  453,  461,  461,  461,  455,

      457,    0,  456,  462,  462,  462,    0,  461,    0,  456,
        0,    0,    0,    0,  462,  463,  463,  463,  464,  464,
      464,  458,  460,  465,  465,  465,  463,    0,  459,  464,
      466,  466,  466,    0,  465,  467,  467,  467,    0,    0,
      461,  466,  468,  468,  468,    0,  467,  469,  469,  469,
        0,    0,    0,  468,    0,  470,  470,  470,  469,    0,
        0,  464,    0,    0,  466,    0,  470,  463,  471,  471,
      471,    0,  467,    0,  465,  472,  472,  472,    0,  471,
        0,    0,  469,    0,    0,    0,  472,  473,  473,  473,
      474,  474,  474,    0,  468,  470,    0,    0,  473,    0,

        0,  474,  475,  475,  475,    0,  476,  476,  476,    0,
      472,    0,    0,  475,    0,    0,  471,  476,  477,  477,
      477,  475,  478,  478,  478,  474,  479,  479,  479,  477,
        0,    0,  475,  478,  480,  480,  480,  479,    0,    0,
      473,    0,  475,    0,    0,  480,  481,  481,  481,  482,
      482,  482,  483,  483,  483,    0,    0,  481,    0,    0,
      482,    0,    0,  483,  484,  484,  484,  485,  485,  485,
        0,  477,    0,  480,    0,  484,    0,    0,  485,  479,
        0,  481,  486,  486,  486,    0,    0,  487,  487,  487,
        0,    0,    0,  486,    0,    0,  482,  483,  487,  488,

      488,  488,  489,  489,  489,  490,  490,  490,    0,  484,
      488,    0,    0,  489,    0,    0,  490,    0,  485,  491,
      491,  491,  492,  492,  492,    0,    0,  486,    0,    0,
      491,    0,    0,  492,    0,    0,  488,    0,  487,  493,
      493,  493,  494,  494,  494,  495,  495,  495,  490,    0,
      493,    0,    0,  494,    0,    0,  495,    0,  491,    0,
      496,  496,  496,  497,  497,  497,  498,  498,  498,    0,
        0,  496,    0,    0,  497,    0,    0,  498,    0,    0,
      495,  499,  499,  499,    0,  500,  500,  500,  501,  501,
      501,    0,  499,    0,  494,  496,  500,    0,  497,  501,

        0,    0,    0,  502,  502,  502,  503,  503,  503,    0,
        0,  500,  496,  496,  502,    0,    0,  503,    0,    0,
      500,  500,    0,  501,  501,    0,    0,  499,  505,  505,
      505,  506,  506,  506,  507,  507,  507,  500,    0,  505,
        0,  503,  506,    0,    0,  507,  508,  508,  508,  503,
        0,    0,  502,  502,    0,  502,    0,  508,  502,  509,
      509,  509,    0,    0,  510,  510,  510,  511,  511,  511,
      509,    0,    0,  507,  506,  510,    0,    0,  511,    0,
        0,  505,  512,  512,  512,  513,  513,  513,    0,  508,
      514,  514,  514,  512,    0,    0,  513,  515,  515,  515,

        0,  514,  516,  516,  516,    0,  509,    0,  515,    0,
        0,    0,  510,  516,  517,  517,  517,    0,    0,    0,
      511,  518,  518,  518,    0,  517,    0,    0,  513,    0,
      512,    0,  518,    0,  519,  519,  519,  520,  520,  520,
      521,  521,  521,  514,  515,  519,    0,    0,  520,    0,
        0,  521,    0,    0,  516,  522,  522,  522,  518,    0,
        0,  517,  523,  523,  523,    0,  522,  524,  524,  524,
      525,  525,  525,  523,  520,    0,    0,    0,  524,    0,
        0,  525,  526,  526,  526,    0,  519,    0,  521,  527,
      527,  527,    0,  526,  528,  528,  528,  529,  529,  529,

      527,    0,    0,  522,  525,  528,    0,    0,  529,    0,
      523,  530,  530,  530,    0,    0,  529,  531,  531,  531,
      524,    0,  530,  532,  532,  532,    0,    0,  531,  533,
      533,  533,  527,    0,  532,    0,  534,  534,  534,    0,
      533,  535,  535,  535,    0,    0,  530,  534,  528,  536,
      536,  536,  535,    0,  537,  537,  537,  538,  538,  538,
      536,    0,  532,    0,    0,  537,    0,    0,  538,  539,
      539,  539,    0,  540,  540,  540,  541,  541,  541,    0,
      539,    0,    0,  536,  540,    0,    0,  541,    0,  534,
      542,  542,  542,  535,  537,    0,  538,  543,  543,  543,

        0,  542,    0,  539,  544,  544,  544,    0,  543,  545,
      545,  545,  546,  546,  546,  544,  547,  547,  547,    0,
      545,    0,    0,  546,  540,    0,    0,  547,  542,  548,
      548,  548,  549,  549,  549,  550,  550,  550,    0,    0,
      548,    0,    0,  549,    0,    0,  550,  544,    0,    0,
      543,    0,  551,  551,  551,  552,  552,  552,    0,  546,
        0,    0,  545,  551,    0,    0,  552,    0,    0,  547,
        0,    0,  548,    0,  549,  553,  553,  553,  554,  554,
      554,  555,  555,  555,    0,    0,  553,    0,    0,  554,
        0,    0,  555,  556,  556,  556,  557,  557,  557,  558,

      558,  558,    0,    0,  556,    0,    0,  557,  552,    0,
      558,  559,  559,  559,  560,  560,  560,    0,  561,  561,
      561,    0,  559,  554,    0,  560,    0,    0,  553,  561,
        0,  557,  562,  562,  562,  555,    0,  558,  563,  563,
      563,    0,    0,  562,    0,  564,  564,  564,    0,  563,
      559,    0,  565,  565,  565,    0,  564,    0,  566,  566,
      566,    0,  560,  565,    0,  561,  567,  567,  567,  566,
      568,  568,  568,  571,  571,  571,    0,  567,    0,    0,
        0,  568,    0,    0,  571,  572,  572,  572,    0,  563,
      564,  573,  573,  573,    0,    0,  572,  574,  574,  574,

        0,    0,  573,    0,    0,  565,  566,    0,  574,  575,
      575,  575,    0,  571,  576,  576,  576,  567,    0,    0,
      575,  577,  577,  577,  572,  576,  573,  578,  578,  578,
        0,    0,  577,  580,  580,  580,    0,    0,  578,  582,
      582,  582,    0,    0,  580,  581,  581,  581,    0,  576,
      582,  574,  583,  583,  583,    0,  581,  584,  584,  584,
        0,    0,  575,  583,  585,  585,  585,    0,  584,  586,
      586,  586,    0,  582,  578,  585,  580,    0,  577,    0,
      586,    0,  581,  587,  587,  587,  588,  588,  588,    0,
      589,  589,  589,    0,  587,    0,    0,  588,    0,    0,

      583,  589,  590,  590,  590,  591,  591,  591,  586,    0,
      584,  585,    0,  590,    0,    0,  591,  592,  592,  592,
      593,  593,  593,    0,  594,  594,  594,    0,  592,  589,
      587,  593,    0,    0,  588,  594,  595,  595,  595,  596,
      596,  596,  597,  597,  597,    0,    0,  595,    0,    0,
      596,    0,    0,  597,  598,  598,  598,    0,    0,  593,
      599,  599,  599,    0,    0,  598,  600,  600,  600,    0,
      592,  599,  602,  602,  602,  595,    0,  600,    0,  601,
      601,  601,    0,  602,    0,    0,  596,    0,    0,  597,
      601,    0,  603,  603,  603,    0,    0,  598,    0,  599,

        0,    0,  600,  603,    0,  600,    0,    0,  604,  604,
      604,  605,  605,  605,  606,  606,  606,  600,  602,  604,
        0,    0,  605,    0,  601,  606,  607,  607,  607,  608,
      608,  608,  609,  609,  609,    0,    0,  607,    0,    0,
      608,    0,    0,  609,  608,    0,  610,  610,  610,  611,
      611,  611,    0,    0,  604,    0,    0,  610,    0,    0,
      611,  612,  612,  612,    0,  613,  613,  613,    0,    0,
        0,    0,  612,    0,    0,  609,  613,    0,    0,  607,
      610,  614,  614,  614,  615,  615,  615,    0,    0,  611,
        0,    0,  614,    0,    0,  615,  616,  616,  616,  617,

      617,  617,    0,    0,  613,    0,    0,  616,    0,    0,
      617,  618,  618,  618,  612,  619,  619,  619,    0,    0,
      614,  615,  618,  620,  620,  620,  619,  621,  621,  621,
      622,  622,  622,    0,  620,  616,    0,  617,  621,    0,
        0,  622,  623,  623,  623,    0,  618,  624,  624,  624,
      625,  625,  625,  623,  626,  626,  626,    0,  624,    0,
      619,  625,    0,    0,    0,  626,  627,  627,  627,  620,
      621,    0,    0,  622,  628,  628,  628,  627,  629,  629,
      629,  630,  630,  630,    0,  628,  624,    0,    0,  629,
        0,    0,  630,  631,  631,  631,    0,  632,  632,  632,

        0,  625,    0,    0,  631,  633,  633,  633,  632,  634,
      634,  634,  637,  637,  637,    0,  633,  638,  638,  638,
      634,  628,    0,  637,  639,  639,  639,    0,  638,    0,
        0,  629,  632,    0,    0,  639,    0,    0,  631,  630,
        0,  640,  640,  640,  641,  641,  641,    0,  634,  642,
      642,  642,  640,    0,  633,  641,    0,  638,    0,    0,
      642,  643,  643,  643,    0,  637,  644,  644,  644,  646,
      646,  646,  643,    0,    0,  639,  640,  644,    0,  641,
      646,  647,  647,  647,  648,  648,  648,    0,  649,  649,
      649,    0,  647,    0,  642,  648,  650,  650,  650,  649,

        0,    0,  651,  651,  651,    0,    0,  650,  646,  652,
      652,  652,    0,  651,  653,  653,  653,  654,  654,  654,
      652,  655,  655,  655,    0,  653,    0,    0,  654,  656,
      656,  656,  655,    0,  647,  649,  651,  648,    0,    0,
      656,    0,    0,  652,  657,  657,  657,  658,  658,  658,
      659,  659,  659,    0,    0,  657,    0,    0,  658,    0,
        0,  659,    0,  656,  654,  660,  660,  660,  661,  661,
      661,    0,  655,  662,  662,  662,  660,    0,  657,  661,
      663,  663,  663,    0,  662,    0,    0,    0,  659,    0,
        0,  663,  664,  664,  664,    0,  657,  665,  665,  665,

        0,    0,    0,  664,    0,    0,    0,  662,  665,  666,
      666,  666,    0,    0,    0,  661,  667,  667,  667,  663,
      666,  668,  668,  668,  669,  669,  669,  667,    0,  670,
      670,  670,  668,    0,    0,  669,    0,    0,    0,  664,
      670,    0,  671,  671,  671,    0,    0,  664,  666,    0,
        0,  665,  667,  671,  672,  672,  672,  673,  673,  673,
      668,  674,  674,  674,    0,  672,    0,    0,  673,  675,
      675,  675,  674,    0,  670,  676,  676,  676,    0,    0,
      675,    0,  677,  677,  677,    0,  676,  671,  678,  678,
      678,    0,  674,  677,  672,  679,  679,  679,    0,  678,

      673,  680,  680,  680,    0,    0,  679,  681,  681,  681,
        0,    0,  680,  682,  682,  682,  677,    0,  681,  683,
      683,  683,  678,    0,  682,    0,  679,  684,  684,  684,
      683,  685,  685,  685,  686,  686,  686,    0,  684,  687,
      687,  687,  685,    0,    0,  686,  681,  688,  688,  688,
      687,    0,  680,  689,  689,  689,  682,    0,  688,  690,
      690,  690,  684,    0,  689,  691,  691,  691,  686,    0,
      690,  692,  692,  692,  683,    0,  691,  693,  693,  693,
        0,    0,  692,  696,  696,  696,    0,    0,  693,  697,
      697,  697,    0,    0,  696,  698,  698,  698,    0,    0,

      697,  699,  699,  699,    0,    0,  698,    0,  700,  700,
      700,    0,  699,    0,  701,  701,  701,    0,  691,  700,
        0,    0,  696,  692,  693,  701,    0,  703,  703,  703,
      704,  704,  704,  705,  705,  705,    0,  697,  703,    0,
        0,  704,    0,    0,  705,  706,  706,  706,  699,  707,
      707,  707,  708,  708,  708,    0,  706,    0,    0,    0,
      707,  700,    0,  708,  709,  709,  709,    0,  701,  710,
      710,  710,  711,  711,  711,  709,  712,  712,  712,  703,
      710,  705,    0,  711,  704,    0,    0,  712,  708,  713,
      713,  713,  714,  714,  714,  715,  715,  715,  707,    0,

      713,    0,    0,  714,    0,    0,  715,  716,  716,  716,
        0,  717,  717,  717,    0,    0,  709,    0,  716,    0,
        0,  710,  717,  711,    0,  718,  718,  718,    0,  712,
      719,  719,  719,    0,    0,  714,  718,    0,  720,  720,
      720,  719,  721,  721,  721,  722,  722,  722,  715,  720,
      716,    0,  717,  721,    0,    0,  722,  723,  723,  723,
      724,  724,  724,  718,  725,  725,  725,    0,  723,  719,
        0,  724,    0,    0,    0,  725,  726,  726,  726,  727,
      727,  727,    0,  720,  722,    0,    0,  726,    0,    0,
      727,  728,  728,  728,    0,  729,  729,  729,  730,  730,

      730,    0,  728,  725,    0,  724,  729,    0,    0,  730,
      731,  731,  731,    0,  732,  732,  732,    0,    0,  726,
        0,  731,    0,    0,  727,  732,  733,  733,  733,  734,
      734,  734,    0,    0,  728,  729,    0,  733,    0,    0,
      734,  730,    0,  735,  735,  735,  736,  736,  736,  737,
      737,  737,    0,  731,  735,    0,    0,  736,    0,    0,
      737,  738,  738,  738,    0,    0,  734,  732,  739,  739,
      739,    0,  738,  740,  740,  740,  743,  743,  743,  739,
        0,    0,  735,    0,  740,    0,    0,  743,  737,    0,
        0,  736,  744,  744,  744,  745,  745,  745,  746,  746,

      746,    0,    0,  744,    0,    0,  745,    0,    0,  746,
      747,  747,  747,  749,  749,  749,    0,  750,  750,  750,
        0,  747,    0,    0,  749,    0,  740,  743,  750,  751,
      751,  751,    0,  752,  752,  752,    0,  746,    0,    0,
      751,    0,    0,  744,  752,  753,  753,  753,  745,  747,
      754,  754,  754,  755,  755,  755,  753,    0,  756,  756,
      756,  754,    0,    0,  755,  757,  757,  757,  750,  756,
        0,  758,  758,  758,    0,    0,  757,    0,  751,    0,
        0,  752,  758,  759,  759,  759,    0,  760,  760,  760,
      761,  761,  761,    0,  759,    0,    0,  756,  760,    0,

        0,  761,    0,  753,  762,  762,  762,  763,  763,  763,
      764,  764,  764,    0,    0,  762,    0,    0,  763,    0,
        0,  764,    0,  757,  758,    0,    0,  760,  765,  765,
      765,    0,    0,  761,  766,  766,  766,    0,    0,  765,
      767,  767,  767,    0,    0,  766,  768,  768,  768,  764,
        0,  767,    0,    0,  763,    0,    0,  768,  769,  769,
      769,  770,  770,  770,    0,  771,  771,  771,    0,  769,
        0,    0,  770,  772,  772,  772,  771,    0,    0,  765,
        0,  773,  773,  773,  772,  774,  774,  774,  775,  775,
      775,  768,  773,  776,  776,  776,  774,  769,    0,  775,

      777,  777,  777,    0,  776,    0,    0,  770,  771,    0,
        0,  777,    0,  772,    0,    0,  774,  778,  778,  778,
      779,  779,  779,  782,  782,  782,    0,  773,  778,    0,
        0,  779,    0,    0,  782,  783,  783,  783,  784,  784,
      784,  785,  785,  785,    0,    0,  783,    0,    0,  784,
        0,    0,  785,  786,  786,  786,  788,  788,  788,  789,
      789,  789,    0,    0,  786,    0,    0,  788,    0,    0,
      789,    0,  778,    0,  783,  790,  790,  790,  791,  791,
      791,  792,  792,  792,    0,    0,  790,    0,    0,  791,
        0,    0,  792,    0,    0,  788,  793,  793,  793,  794,

      794,  794,  795,  795,  795,    0,    0,  793,    0,    0,
      794,  789,    0,  795,  796,  796,  796,    0,  790,  797,
      797,  797,    0,    0,    0,  796,  798,  798,  798,    0,
      797,    0,    0,  792,    0,    0,    0,  798,  799,  799,
      799,    0,  794,    0,    0,  793,  800,  800,  800,  799,
        0,  801,  801,  801,  802,  802,  802,  800,  803,  803,
      803,  796,  801,    0,    0,  802,  804,  804,  804,  803,
        0,    0,  797,  805,  805,  805,    0,  804,  806,  806,
      806,  807,  807,  807,  805,  800,  809,  809,  809,  806,
        0,    0,  807,  802,  811,  811,  811,  809,  812,  812,

      812,    0,    0,  803,    0,  811,  813,  813,  813,  812,
        0,    0,  805,  814,  814,  814,    0,  813,    0,    0,
      807,  806,    0,    0,  814,  815,  815,  815,  816,  816,
      816,  817,  817,  817,    0,    0,  815,    0,    0,  816,
        0,    0,  817,  818,  818,  818,  819,  819,  819,  820,
      820,  820,    0,  813,  818,    0,    0,  819,    0,    0,
      820,  814,    0,    0,  815,    0,  821,  821,  821,  822,
      822,  822,  823,  823,  823,    0,  816,  821,    0,    0,
      822,    0,    0,  823,  824,  824,  824,  826,  826,  826,
      827,  827,  827,    0,    0,  824,    0,    0,  826,    0,

        0,  827,  828,  828,  828,  821,  829,  829,  829,  830,
      830,  830,    0,  828,  832,  832,  832,  829,  823,    0,
      830,  831,  831,  831,    0,  832,  834,  834,  834,    0,
        0,  824,  831,    0,  835,  835,  835,  834,    0,    0,
      826,  836,  836,  836,  827,  835,  837,  837,  837,    0,
        0,    0,  836,  829,  838,  838,  838,  837,    0,    0,
      831,  840,  840,  840,    0,  838,    0,  832,  842,  842,
      842,    0,  840,  844,  844,  844,  846,  846,  846,  842,
        0,    0,    0,    0,  844,  835,    0,  846,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  840,    0,

        0,    0,    0,    0,    0,    0,    0,  842,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  844,  848,  848,  848,  848,
      848,  848,  848,  848,  849,  849,  849,  849,  849,  849,
      849,  849,  850,  850,  850,  850,  850,  850,  850,  850,
      851,  851,  851,  852,  852,  852,  852,  852,  852,  852,
      852,  853,    0,  853,  853,  854,  854,  854,  854,  854,
      854,  854,  855,  855,  855,  855,  855,  855,  856,  856,
        0,  856,  856,  856,  856,  857,  857,  857,  857,    0,
      857,  857,  857,  858,  858,  858,  858,    0,  858,    0,

      858,  859,  859,    0,  859,    0,  859,  859,  859,  861,
        0,  861,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847
    } ;

#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 ".\\parser.l"
#define INITIAL 0
#line 2 ".\\parser.l"
#include "pch.h"
#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

#include "rdogramma.h"
#include "rdoparser.h"

#define YY_INTERACTIVE

#define YY_USER_INIT {                      \
	rdoParse::currParser->lexer_loc_init(); \
}

#define YY_USER_ACTION {                      \
	rdoParse::currParser->lexer_loc_action(); \
}

#define comment_rdo 1

#define comment_cpp 2

#define comment_line 3

#line 1977 "rdolex.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 28 ".\\parser.l"


#line 2107 "rdolex.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 848 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5513 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 30 ".\\parser.l"
return(Resource_type);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 31 ".\\parser.l"
return(permanent_kw);
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 32 ".\\parser.l"
return(Parameters);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 33 ".\\parser.l"
return(integer);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 34 ".\\parser.l"
return(real);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 35 ".\\parser.l"
return(End);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 36 ".\\parser.l"
return(temporary);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 37 ".\\parser.l"
return(such_as);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 38 ".\\parser.l"
return(dblpoint);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 40 ".\\parser.l"
return(Resources);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 41 ".\\parser.l"
return(trace_keyword);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 42 ".\\parser.l"
return(no_trace);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 44 ".\\parser.l"
return(Constant);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 45 ".\\parser.l"
return(Body);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 46 ".\\parser.l"
return(Function_keyword);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 47 ".\\parser.l"
return(Type_keyword);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 48 ".\\parser.l"
return(algorithmic);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 49 ".\\parser.l"
return(table_keyword);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 50 ".\\parser.l"
return(list_keyword);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 51 ".\\parser.l"
return(Calculate_if);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 52 ".\\parser.l"
return(Sequence);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 53 ".\\parser.l"
return(uniform);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 54 ".\\parser.l"
return(exponential);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 55 ".\\parser.l"
return(normal_keyword);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 56 ".\\parser.l"
return(by_hist);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 57 ".\\parser.l"
return(enumerative);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 59 ".\\parser.l"
return(Exist);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 60 ".\\parser.l"
return(Not_Exist);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 61 ".\\parser.l"
return(For_All);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 62 ".\\parser.l"
return(Not_For_All);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 63 ".\\parser.l"
return(neq);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 64 ".\\parser.l"
return(leq);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 65 ".\\parser.l"
return(geq);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 66 ".\\parser.l"
return(NoCheck);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 67 ".\\parser.l"
return(Calculate_if);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 68 ".\\parser.l"
return(or_keyword);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 69 ".\\parser.l"
return(and_keyword);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 72 ".\\parser.l"
return(Pattern);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 73 ".\\parser.l"
return(operation);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 74 ".\\parser.l"
return(irregular_event);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 75 ".\\parser.l"
return(rule_keyword);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 76 ".\\parser.l"
return(keyboard);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 77 ".\\parser.l"
return(Relevant_resources);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 78 ".\\parser.l"
return(Keep);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 79 ".\\parser.l"
return(Create_keyword);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 80 ".\\parser.l"
return(Erase);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 81 ".\\parser.l"
return(NonExist);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 82 ".\\parser.l"
return(NoChange);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 83 ".\\parser.l"
return(Time);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 84 ".\\parser.l"
return(Choice);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 85 ".\\parser.l"
return(from_keyword);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 86 ".\\parser.l"
return(first_keyword);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 87 ".\\parser.l"
return(Convert_begin);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 88 ".\\parser.l"
return(Convert_end);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 89 ".\\parser.l"
return(Convert_rule);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 90 ".\\parser.l"
return(Convert_event);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 91 ".\\parser.l"
return(with_max);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 92 ".\\parser.l"
return(with_min);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 93 ".\\parser.l"
return(Operations);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 94 ".\\parser.l"
return(Results);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 95 ".\\parser.l"
return(watch_par);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 96 ".\\parser.l"
return(watch_state);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 97 ".\\parser.l"
return(watch_quant);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 98 ".\\parser.l"
return(watch_value);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 99 ".\\parser.l"
return(get_value);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 101 ".\\parser.l"
return(Model_name);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 102 ".\\parser.l"
return(Resource_file);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 103 ".\\parser.l"
return(OprIev_file);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 104 ".\\parser.l"
return(Frame_file);	
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 105 ".\\parser.l"
return(Statistic_file);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 106 ".\\parser.l"
return(Results_file);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 107 ".\\parser.l"
return(Trace_file);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 108 ".\\parser.l"
return(Show_mode);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 109 ".\\parser.l"
return(Frame_number);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 110 ".\\parser.l"
return(Show_rate);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 111 ".\\parser.l"
return(Run_StartTime);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 112 ".\\parser.l"
return(Trace_StartTime);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 113 ".\\parser.l"
return(Trace_EndTime);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 114 ".\\parser.l"
return(Terminate_if);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 115 ".\\parser.l"
return(Break_point);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 116 ".\\parser.l"
return(Seed);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 117 ".\\parser.l"
return(NoShow);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 118 ".\\parser.l"
return(Monitor);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 119 ".\\parser.l"
return(Animation);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 122 ".\\parser.l"
return(Decision_point);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 123 ".\\parser.l"
return(search_keyword);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 124 ".\\parser.l"
return(trace_stat);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 125 ".\\parser.l"
return(trace_tops);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 126 ".\\parser.l"
return(trace_all);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 127 ".\\parser.l"
return(Condition_keyword);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 128 ".\\parser.l"
return(Term_condition);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 129 ".\\parser.l"
return(Evaluate_by);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 130 ".\\parser.l"
return(Compare_tops);
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 131 ".\\parser.l"
return(NO);
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 132 ".\\parser.l"
return(YES);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 133 ".\\parser.l"
return(Activities);
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 134 ".\\parser.l"
return(Process);
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 135 ".\\parser.l"
return(SEIZE);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 136 ".\\parser.l"
return(GENERATE);
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 137 ".\\parser.l"
return(value_before);
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 138 ".\\parser.l"
return(value_after);
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 139 ".\\parser.l"
return(value_before);
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 140 ".\\parser.l"
return(value_after);
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 141 ".\\parser.l"
return(some);
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 143 ".\\parser.l"
return(Frame);
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 144 ".\\parser.l"
return(Show_if);
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 145 ".\\parser.l"
return(Back_picture);
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 146 ".\\parser.l"
return(Show);
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 147 ".\\parser.l"
return(frm_cell);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 148 ".\\parser.l"
return(text);
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 149 ".\\parser.l"
return(transparent);
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 150 ".\\parser.l"
return(bitmap);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 151 ".\\parser.l"
return(s_bmp);
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 152 ".\\parser.l"
return(rect_keyword);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 153 ".\\parser.l"
return(r_rect);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 154 ".\\parser.l"
return(line);
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 155 ".\\parser.l"
return(ellipse);
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 156 ".\\parser.l"
return(triang);
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 157 ".\\parser.l"
return(active);
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 159 ".\\parser.l"
{
						std::string n1(YYText());
						int len = n1.length();
						std::string *name = new std::string(n1, 1, len-2);
						rdoParse::currParser->addName(name);
						rdoParse::currParser->lexer_setvalue((int)name);
						return QUOTED_IDENTIF;
					}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 168 ".\\parser.l"
{
						std::string *name = new std::string(YYText());
						rdoParse::currParser->addName(name);
						rdoParse::currParser->lexer_setvalue((int)name);
						return QUOTED_IDENTIF_BAD;
					}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 175 ".\\parser.l"
BEGIN(comment_rdo);
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 176 ".\\parser.l"
;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 177 ".\\parser.l"
;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 178 ".\\parser.l"
BEGIN(INITIAL);
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 180 ".\\parser.l"
BEGIN(comment_cpp);
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 181 ".\\parser.l"
;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 182 ".\\parser.l"
;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 183 ".\\parser.l"
BEGIN(INITIAL);
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 185 ".\\parser.l"
BEGIN(comment_line);
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 186 ".\\parser.l"
BEGIN(INITIAL);
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 189 ".\\parser.l"
;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 190 ".\\parser.l"
return(YYText()[YYLeng()-1]);
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 192 ".\\parser.l"
{
						std::string n1(YYText(), YYLeng()-2);
						rdoParse::currParser->lexer_setvalue(atoi(n1.c_str()));
						unput('.');
						unput('.');
						rdoParse::currParser->lexer_loc_delta_pos( -2 );
						return INT_CONST;
					}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 201 ".\\parser.l"
{
						rdoParse::currParser->lexer_setvalue(atoi(YYText()));
						return INT_CONST;
					}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 206 ".\\parser.l"
{
						double *val = rdoParse::currParser->addDouble(new double(atof(YYText())));
						rdoParse::currParser->lexer_setvalue((int)val);
						return REAL_CONST;
					}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 212 ".\\parser.l"
{
						std::string *name = new std::string(YYText());
						rdoParse::currParser->addName(name);
						rdoParse::currParser->lexer_setvalue((int)name);
						return IDENTIF_BAD;
					}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 219 ".\\parser.l"
{
					std::string n1(YYText());
					std::string::size_type pos = n1.find_first_of("\r\n\t :");
					std::string *name = new std::string(n1, 0, pos);
					rdoParse::currParser->addName(name);
					rdoParse::currParser->lexer_setvalue((int)name);
					return IDENTIF_set;
				}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 228 ".\\parser.l"
{
					std::string n1(YYText());
					std::string::size_type pos = n1.find_first_of("\r\n\t :");
					std::string *name = new std::string(n1, 0, pos);
					rdoParse::currParser->addName(name);
					rdoParse::currParser->lexer_setvalue((int)name);
					return IDENTIF_NoChange_NoChange;
				}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 237 ".\\parser.l"
{
					std::string n1(YYText());
					std::string::size_type pos = n1.find_first_of("\r\n\t :");
					std::string *name = new std::string(n1, 0, pos);
					rdoParse::currParser->addName(name);
					rdoParse::currParser->lexer_setvalue((int)name);
					return IDENTIF_NoChange;
				}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 246 ".\\parser.l"
{
					std::string n1(YYText());
					std::string::size_type pos = n1.find_first_of("\r\n\t :");
					std::string *name = new std::string(n1, 0, pos);
					rdoParse::currParser->addName(name);
					rdoParse::currParser->lexer_setvalue((int)name);
					return IDENTIF_COLON;
				}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 255 ".\\parser.l"
{
					std::string *name = new std::string(YYText());
					rdoParse::currParser->addName(name);
					rdoParse::currParser->lexer_setvalue((int)name);
					return IDENTIF;
				}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 262 ".\\parser.l"
ECHO;
	YY_BREAK
#line 2977 "rdolex.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(comment_rdo):
			case YY_STATE_EOF(comment_cpp):
			case YY_STATE_EOF(comment_line):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 848 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 848 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 847);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 262 ".\\parser.l"

