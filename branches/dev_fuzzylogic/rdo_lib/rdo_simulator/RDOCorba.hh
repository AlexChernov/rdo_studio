// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __RDOCorba_hh__
#define __RDOCorba_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_RDOCorba
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_RDOCorba
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_RDOCorba
#endif






#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE rdoParse

_CORBA_MODULE_BEG

#ifndef __rdoParse_mRDOCorba__
#define __rdoParse_mRDOCorba__

  class RDOCorba;
  class _objref_RDOCorba;
  class _impl_RDOCorba;
  
  typedef _objref_RDOCorba* RDOCorba_ptr;
  typedef RDOCorba_ptr RDOCorbaRef;

  class RDOCorba_Helper {
  public:
    typedef RDOCorba_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_RDOCorba, RDOCorba_Helper> RDOCorba_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_RDOCorba,RDOCorba_Helper > RDOCorba_out;

#endif

  // interface RDOCorba
  class RDOCorba {
  public:
    // Declarations for this interface type.
    typedef RDOCorba_ptr _ptr_type;
    typedef RDOCorba_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    enum TypeRTP { rtp_permanent, rtp_temporary /*, __max_TypeRTP=0xffffffff */ };
    typedef TypeRTP& TypeRTP_out;

    enum TypeParam { int_type, double_type, enum_type /*, __max_TypeParam=0xffffffff */ };
    typedef TypeParam& TypeParam_out;

    class my_enum_var;

    class my_enum : public _CORBA_Unbounded_Sequence_String {
    public:
      typedef my_enum_var _var_type;
      inline my_enum() {}
      inline my_enum(const my_enum& _s)
        : _CORBA_Unbounded_Sequence_String(_s) {}

      inline my_enum(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence_String(_max) {}
      inline my_enum(_CORBA_ULong _max, _CORBA_ULong _len, char** _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence_String(_max, _len, _val, _rel) {}

    

      inline my_enum& operator = (const my_enum& _s) {
        _CORBA_Unbounded_Sequence_String::operator=(_s);
        return *this;
      }
    };

    class my_enum_out;

    class my_enum_var {
    public:
      inline my_enum_var() : _pd_seq(0) {}
      inline my_enum_var(my_enum* _s) : _pd_seq(_s) {}
      inline my_enum_var(const my_enum_var& _s) {
        if( _s._pd_seq )  _pd_seq = new my_enum(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~my_enum_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline my_enum_var& operator = (my_enum* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline my_enum_var& operator = (const my_enum_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new my_enum;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline _CORBA_String_element operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline my_enum* operator -> () { return _pd_seq; }
      inline const my_enum* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator my_enum& () const { return *_pd_seq; }
#else
      inline operator const my_enum& () const { return *_pd_seq; }
      inline operator my_enum& () { return *_pd_seq; }
#endif
        
      inline const my_enum& in() const { return *_pd_seq; }
      inline my_enum&       inout()    { return *_pd_seq; }
      inline my_enum*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline my_enum* _retn() { my_enum* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class my_enum_out;
      
    private:
      my_enum* _pd_seq;
    };

    class my_enum_out {
    public:
      inline my_enum_out(my_enum*& _s) : _data(_s) { _data = 0; }
      inline my_enum_out(my_enum_var& _s)
        : _data(_s._pd_seq) { _s = (my_enum*) 0; }
      inline my_enum_out(const my_enum_out& _s) : _data(_s._data) {}
      inline my_enum_out& operator = (const my_enum_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline my_enum_out& operator = (my_enum* _s) {
        _data = _s;
        return *this;
      }
      inline operator my_enum*&()  { return _data; }
      inline my_enum*& ptr()       { return _data; }
      inline my_enum* operator->() { return _data; }

      inline _CORBA_String_element operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      my_enum*& _data;

    private:
      my_enum_out();
      my_enum_out& operator=(const my_enum_var&);
    };

    struct Param {
      typedef _CORBA_ConstrType_Variable_Var<Param> _var_type;

      
      ::CORBA::String_member m_name;

      TypeParam m_type;

      ::CORBA::Boolean m_exist;

      ::CORBA::Long m_id;

      ::CORBA::Long m_min_int;

      ::CORBA::Long m_max_int;

      ::CORBA::Long m_default_int;

      ::CORBA::Double m_min_double;

      ::CORBA::Double m_max_double;

      ::CORBA::Double m_default_double;

      my_enum m_var_enum;

      ::CORBA::String_member m_default_enum;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef Param::_var_type Param_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< Param,Param_var > Param_out;

    class Params_var;

    class Params : public _CORBA_Unbounded_Sequence< Param >  {
    public:
      typedef Params_var _var_type;
      inline Params() {}
      inline Params(const Params& _s)
        : _CORBA_Unbounded_Sequence< Param > (_s) {}

      inline Params(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence< Param > (_max) {}
      inline Params(_CORBA_ULong _max, _CORBA_ULong _len, Param* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence< Param > (_max, _len, _val, _rel) {}

    

      inline Params& operator = (const Params& _s) {
        _CORBA_Unbounded_Sequence< Param > ::operator=(_s);
        return *this;
      }
    };

    class Params_out;

    class Params_var {
    public:
      inline Params_var() : _pd_seq(0) {}
      inline Params_var(Params* _s) : _pd_seq(_s) {}
      inline Params_var(const Params_var& _s) {
        if( _s._pd_seq )  _pd_seq = new Params(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~Params_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline Params_var& operator = (Params* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline Params_var& operator = (const Params_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new Params;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline Param& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline Params* operator -> () { return _pd_seq; }
      inline const Params* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator Params& () const { return *_pd_seq; }
#else
      inline operator const Params& () const { return *_pd_seq; }
      inline operator Params& () { return *_pd_seq; }
#endif
        
      inline const Params& in() const { return *_pd_seq; }
      inline Params&       inout()    { return *_pd_seq; }
      inline Params*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline Params* _retn() { Params* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class Params_out;
      
    private:
      Params* _pd_seq;
    };

    class Params_out {
    public:
      inline Params_out(Params*& _s) : _data(_s) { _data = 0; }
      inline Params_out(Params_var& _s)
        : _data(_s._pd_seq) { _s = (Params*) 0; }
      inline Params_out(const Params_out& _s) : _data(_s._data) {}
      inline Params_out& operator = (const Params_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline Params_out& operator = (Params* _s) {
        _data = _s;
        return *this;
      }
      inline operator Params*&()  { return _data; }
      inline Params*& ptr()       { return _data; }
      inline Params* operator->() { return _data; }

      inline Param& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      Params*& _data;

    private:
      Params_out();
      Params_out& operator=(const Params_var&);
    };

    struct MY_RTP {
      typedef _CORBA_ConstrType_Variable_Var<MY_RTP> _var_type;

      
      ::CORBA::String_member m_name;

      TypeRTP m_type;

      ::CORBA::Boolean m_exist;

      Params m_param;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef MY_RTP::_var_type MY_RTP_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< MY_RTP,MY_RTP_var > MY_RTP_out;

    class GetRTP_var;

    class GetRTP : public _CORBA_Unbounded_Sequence< MY_RTP >  {
    public:
      typedef GetRTP_var _var_type;
      inline GetRTP() {}
      inline GetRTP(const GetRTP& _s)
        : _CORBA_Unbounded_Sequence< MY_RTP > (_s) {}

      inline GetRTP(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence< MY_RTP > (_max) {}
      inline GetRTP(_CORBA_ULong _max, _CORBA_ULong _len, MY_RTP* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence< MY_RTP > (_max, _len, _val, _rel) {}

    

      inline GetRTP& operator = (const GetRTP& _s) {
        _CORBA_Unbounded_Sequence< MY_RTP > ::operator=(_s);
        return *this;
      }
    };

    class GetRTP_out;

    class GetRTP_var {
    public:
      inline GetRTP_var() : _pd_seq(0) {}
      inline GetRTP_var(GetRTP* _s) : _pd_seq(_s) {}
      inline GetRTP_var(const GetRTP_var& _s) {
        if( _s._pd_seq )  _pd_seq = new GetRTP(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~GetRTP_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline GetRTP_var& operator = (GetRTP* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline GetRTP_var& operator = (const GetRTP_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new GetRTP;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline MY_RTP& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline GetRTP* operator -> () { return _pd_seq; }
      inline const GetRTP* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator GetRTP& () const { return *_pd_seq; }
#else
      inline operator const GetRTP& () const { return *_pd_seq; }
      inline operator GetRTP& () { return *_pd_seq; }
#endif
        
      inline const GetRTP& in() const { return *_pd_seq; }
      inline GetRTP&       inout()    { return *_pd_seq; }
      inline GetRTP*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline GetRTP* _retn() { GetRTP* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class GetRTP_out;
      
    private:
      GetRTP* _pd_seq;
    };

    class GetRTP_out {
    public:
      inline GetRTP_out(GetRTP*& _s) : _data(_s) { _data = 0; }
      inline GetRTP_out(GetRTP_var& _s)
        : _data(_s._pd_seq) { _s = (GetRTP*) 0; }
      inline GetRTP_out(const GetRTP_out& _s) : _data(_s._data) {}
      inline GetRTP_out& operator = (const GetRTP_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline GetRTP_out& operator = (GetRTP* _s) {
        _data = _s;
        return *this;
      }
      inline operator GetRTP*&()  { return _data; }
      inline GetRTP*& ptr()       { return _data; }
      inline GetRTP* operator->() { return _data; }

      inline MY_RTP& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      GetRTP*& _data;

    private:
      GetRTP_out();
      GetRTP_out& operator=(const GetRTP_var&);
    };

    class PARAM_count_var;

    class PARAM_count : public _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Long, 4, 4 >  {
    public:
      typedef PARAM_count_var _var_type;
      inline PARAM_count() {}
      inline PARAM_count(const PARAM_count& _s)
        : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Long, 4, 4 > (_s) {}

      inline PARAM_count(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Long, 4, 4 > (_max) {}
      inline PARAM_count(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::Long* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Long, 4, 4 > (_max, _len, _val, _rel) {}

    

      inline PARAM_count& operator = (const PARAM_count& _s) {
        _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Long, 4, 4 > ::operator=(_s);
        return *this;
      }
    };

    class PARAM_count_out;

    class PARAM_count_var {
    public:
      inline PARAM_count_var() : _pd_seq(0) {}
      inline PARAM_count_var(PARAM_count* _s) : _pd_seq(_s) {}
      inline PARAM_count_var(const PARAM_count_var& _s) {
        if( _s._pd_seq )  _pd_seq = new PARAM_count(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~PARAM_count_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline PARAM_count_var& operator = (PARAM_count* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline PARAM_count_var& operator = (const PARAM_count_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new PARAM_count;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline ::CORBA::Long& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline PARAM_count* operator -> () { return _pd_seq; }
      inline const PARAM_count* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator PARAM_count& () const { return *_pd_seq; }
#else
      inline operator const PARAM_count& () const { return *_pd_seq; }
      inline operator PARAM_count& () { return *_pd_seq; }
#endif
        
      inline const PARAM_count& in() const { return *_pd_seq; }
      inline PARAM_count&       inout()    { return *_pd_seq; }
      inline PARAM_count*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline PARAM_count* _retn() { PARAM_count* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class PARAM_count_out;
      
    private:
      PARAM_count* _pd_seq;
    };

    class PARAM_count_out {
    public:
      inline PARAM_count_out(PARAM_count*& _s) : _data(_s) { _data = 0; }
      inline PARAM_count_out(PARAM_count_var& _s)
        : _data(_s._pd_seq) { _s = (PARAM_count*) 0; }
      inline PARAM_count_out(const PARAM_count_out& _s) : _data(_s._data) {}
      inline PARAM_count_out& operator = (const PARAM_count_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline PARAM_count_out& operator = (PARAM_count* _s) {
        _data = _s;
        return *this;
      }
      inline operator PARAM_count*&()  { return _data; }
      inline PARAM_count*& ptr()       { return _data; }
      inline PARAM_count* operator->() { return _data; }

      inline ::CORBA::Long& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      PARAM_count*& _data;

    private:
      PARAM_count_out();
      PARAM_count_out& operator=(const PARAM_count_var&);
    };

  
  };

  class _objref_RDOCorba :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    void getRDORTPcount(::CORBA::Long& rtp_count);
    void getRDORTPParamscount(RDOCorba::PARAM_count& params_count, ::CORBA::Long rtp_count);
    void getRDORTPlist(RDOCorba::GetRTP& my_rtpList, const RDOCorba::PARAM_count& params_count, ::CORBA::Long rtp_count);

    inline _objref_RDOCorba()  { _PR_setobj(0); }  // nil
    _objref_RDOCorba(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_RDOCorba();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_RDOCorba(const _objref_RDOCorba&);
    _objref_RDOCorba& operator = (const _objref_RDOCorba&);
    // not implemented

    friend class RDOCorba;
  };

  class _pof_RDOCorba : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_RDOCorba() : _OMNI_NS(proxyObjectFactory)(RDOCorba::_PD_repoId) {}
    virtual ~_pof_RDOCorba();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_RDOCorba :
    public virtual omniServant
  {
  public:
    virtual ~_impl_RDOCorba();

    virtual void getRDORTPcount(::CORBA::Long& rtp_count) = 0;
    virtual void getRDORTPParamscount(RDOCorba::PARAM_count& params_count, ::CORBA::Long rtp_count) = 0;
    virtual void getRDORTPlist(RDOCorba::GetRTP& my_rtpList, const RDOCorba::PARAM_count& params_count, ::CORBA::Long rtp_count) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


_CORBA_MODULE_END



_CORBA_MODULE POA_rdoParse
_CORBA_MODULE_BEG

  class RDOCorba :
    public virtual rdoParse::_impl_RDOCorba,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~RDOCorba();

    inline ::rdoParse::RDOCorba_ptr _this() {
      return (::rdoParse::RDOCorba_ptr) _do_this(::rdoParse::RDOCorba::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_rdoParse
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

inline void operator >>=(rdoParse::RDOCorba::TypeRTP _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (rdoParse::RDOCorba::TypeRTP& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= rdoParse::RDOCorba::rtp_temporary) {
    _e = (rdoParse::RDOCorba::TypeRTP) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

inline void operator >>=(rdoParse::RDOCorba::TypeParam _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (rdoParse::RDOCorba::TypeParam& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= rdoParse::RDOCorba::enum_type) {
    _e = (rdoParse::RDOCorba::TypeParam) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}



inline void
rdoParse::RDOCorba::_marshalObjRef(::rdoParse::RDOCorba_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_RDOCorba
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_RDOCorba
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_RDOCorba
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_RDOCorba
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_RDOCorba
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_RDOCorba
#endif

#endif  // __RDOCorba_hh__

